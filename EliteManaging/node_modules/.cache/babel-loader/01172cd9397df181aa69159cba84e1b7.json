{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\n\nvar isClockSkewed = function (newServerTime, systemClockOffset) {\n  return Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 300000;\n};\n\nvar getSkewCorrectedDate = function (systemClockOffset) {\n  return new Date(Date.now() + systemClockOffset);\n};\n\nexport function awsAuthMiddleware(options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(this, void 0, void 0, function () {\n        var signer, _a, output, _b, _c, headers, dateHeader, serverTime;\n\n        var _d;\n\n        return __generator(this, function (_e) {\n          switch (_e.label) {\n            case 0:\n              if (!HttpRequest.isInstance(args.request)) return [2\n              /*return*/\n              , next(args)];\n              if (!(typeof options.signer === \"function\")) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , options.signer()];\n\n            case 1:\n              _a = _e.sent();\n              return [3\n              /*break*/\n              , 3];\n\n            case 2:\n              _a = options.signer;\n              _e.label = 3;\n\n            case 3:\n              signer = _a;\n              _b = next;\n              _c = [__assign({}, args)];\n              _d = {};\n              return [4\n              /*yield*/\n              , signer.sign(args.request, {\n                signingDate: new Date(Date.now() + options.systemClockOffset),\n                signingRegion: context[\"signing_region\"],\n                signingService: context[\"signing_service\"]\n              })];\n\n            case 4:\n              return [4\n              /*yield*/\n              , _b.apply(void 0, [__assign.apply(void 0, _c.concat([(_d.request = _e.sent(), _d)]))])];\n\n            case 5:\n              output = _e.sent();\n              headers = output.response.headers;\n              dateHeader = headers && (headers.date || headers.Date);\n\n              if (dateHeader) {\n                serverTime = Date.parse(dateHeader);\n\n                if (isClockSkewed(serverTime, options.systemClockOffset)) {\n                  options.systemClockOffset = serverTime - Date.now();\n                }\n              }\n\n              return [2\n              /*return*/\n              , output];\n          }\n        });\n      });\n    };\n  };\n}\nexport var awsAuthMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\",\n  override: true\n};\nexport var getAwsAuthPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,WAAT,QAA4B,wBAA5B;;AAaA,IAAMC,aAAa,GAAG,UAACC,aAAD,EAAwBC,iBAAxB,EAAiD;EACrE,WAAI,CAACC,GAAL,CAASC,oBAAoB,CAACF,iBAAD,CAApB,CAAwCG,OAAxC,KAAoDJ,aAA7D,KAA+E,MAA/E;AAAqF,CADvF;;AAGA,IAAMG,oBAAoB,GAAG,UAACF,iBAAD,EAA0B;EAAK,WAAII,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAaL,iBAAtB;AAAwC,CAApG;;AAEA,OAAM,SAAUM,iBAAV,CACJC,OADI,EAC0B;EAE9B,OAAO,UAACC,IAAD,EAAuCC,OAAvC,EAAuE;IAC5E,iBAAgBC,IAAhB,EAAqD;;;;;;;;;cACnD,IAAI,CAACb,WAAW,CAACc,UAAZ,CAAuBD,IAAI,CAACE,OAA5B,CAAL,EAA2C;cAAA;cAAA,EAAOJ,IAAI,CAACE,IAAD,CAAX;oBAC5B,OAAOH,OAAO,CAACM,MAAf,KAA0B,aAA1B;cAAA;cAAA;cAAuC;cAAA;cAAA,EAAMN,OAAO,CAACM,MAAR,EAAN;;;cAAAC;;;;;;cAAyBA,YAAO,CAACD,MAAR;;;;cAAzEA,MAAM,KAAN;cACeE;iCAChBL;;cACM;cAAA;cAAA,EAAMG,MAAM,CAACG,IAAP,CAAYN,IAAI,CAACE,OAAjB,EAA0B;gBACvCK,WAAW,EAAE,IAAIb,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAaE,OAAO,CAACP,iBAA9B,CAD0B;gBAEvCkB,aAAa,EAAET,OAAO,CAAC,gBAAD,CAFiB;gBAGvCU,cAAc,EAAEV,OAAO,CAAC,iBAAD;cAHgB,CAA1B,CAAN;;;cAFI;cAAA;cAAA,EAAMM,qDAEnBK,aAASC,SAAT,EAIED,EANiB,MAAN;;;cAATE,MAAM,GAAGD,SAAT;cASEE,OAAO,GAAKD,MAAM,CAACE,QAAP,CAAsBD,OAAlC;cACFE,UAAU,GAAGF,OAAO,KAAKA,OAAO,CAACG,IAAR,IAAgBH,OAAO,CAACnB,IAA7B,CAApB;;cACN,IAAIqB,UAAJ,EAAgB;gBACRE,UAAU,GAAGvB,IAAI,CAACwB,KAAL,CAAWH,UAAX,CAAb;;gBACN,IAAI3B,aAAa,CAAC6B,UAAD,EAAapB,OAAO,CAACP,iBAArB,CAAjB,EAA0D;kBACxDO,OAAO,CAACP,iBAAR,GAA4B2B,UAAU,GAAGvB,IAAI,CAACC,GAAL,EAAzC;gBACD;cACF;;cAED;cAAA;cAAA,EAAOiB,MAAP;;;;IACD,CAtBD;EAsBC,CAvBH;AAwBD;AAED,OAAO,IAAMO,wBAAwB,GAA8B;EACjEC,IAAI,EAAE,mBAD2D;EAEjEC,IAAI,EAAE,CAAC,WAAD,EAAc,SAAd,CAF2D;EAGjEC,QAAQ,EAAE,OAHuD;EAIjEC,YAAY,EAAE,iBAJmD;EAKjEC,QAAQ,EAAE;AALuD,CAA5D;AAQP,OAAO,IAAMC,gBAAgB,GAAG,UAAC5B,OAAD,EAA+B;EAA0B,OAAC;IACxF6B,YAAY,EAAE,UAACC,WAAD,EAAY;MACxBA,WAAW,CAACC,aAAZ,CAA0BhC,iBAAiB,CAACC,OAAD,CAA3C,EAAsDsB,wBAAtD;IACD;EAHuF,CAAD;AAIvF,CAJK","names":["HttpRequest","isClockSkewed","newServerTime","systemClockOffset","abs","getSkewCorrectedDate","getTime","Date","now","awsAuthMiddleware","options","next","context","args","isInstance","request","signer","_a","_b","sign","signingDate","signingRegion","signingService","_d","_e","output","headers","response","dateHeader","date","serverTime","parse","awsAuthMiddlewareOptions","name","tags","relation","toMiddleware","override","getAwsAuthPlugin","applyToStack","clientStack","addRelativeTo"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\middleware-signing\\src\\middleware.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  FinalizeHandler,\n  FinalizeHandlerArguments,\n  FinalizeHandlerOutput,\n  FinalizeRequestMiddleware,\n  HandlerExecutionContext,\n  Pluggable,\n  RelativeMiddlewareOptions,\n} from \"@aws-sdk/types\";\n\nimport { AwsAuthResolvedConfig } from \"./configurations\";\n\nconst isClockSkewed = (newServerTime: number, systemClockOffset: number) =>\n  Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 300000;\n\nconst getSkewCorrectedDate = (systemClockOffset: number) => new Date(Date.now() + systemClockOffset);\n\nexport function awsAuthMiddleware<Input extends object, Output extends object>(\n  options: AwsAuthResolvedConfig\n): FinalizeRequestMiddleware<Input, Output> {\n  return (next: FinalizeHandler<Input, Output>, context: HandlerExecutionContext): FinalizeHandler<Input, Output> =>\n    async function (args: FinalizeHandlerArguments<Input>): Promise<FinalizeHandlerOutput<Output>> {\n      if (!HttpRequest.isInstance(args.request)) return next(args);\n      const signer = typeof options.signer === \"function\" ? await options.signer() : options.signer;\n      const output = await next({\n        ...args,\n        request: await signer.sign(args.request, {\n          signingDate: new Date(Date.now() + options.systemClockOffset),\n          signingRegion: context[\"signing_region\"],\n          signingService: context[\"signing_service\"],\n        }),\n      });\n\n      const { headers } = output.response as any;\n      const dateHeader = headers && (headers.date || headers.Date);\n      if (dateHeader) {\n        const serverTime = Date.parse(dateHeader);\n        if (isClockSkewed(serverTime, options.systemClockOffset)) {\n          options.systemClockOffset = serverTime - Date.now();\n        }\n      }\n\n      return output;\n    };\n}\n\nexport const awsAuthMiddlewareOptions: RelativeMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\",\n  override: true,\n};\n\nexport const getAwsAuthPlugin = (options: AwsAuthResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}