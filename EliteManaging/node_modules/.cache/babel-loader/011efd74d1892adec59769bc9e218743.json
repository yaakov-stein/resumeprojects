{"ast":null,"code":"import { __assign, __awaiter, __generator, __values } from \"tslib\";\nexport function ssecMiddleware(options) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var input, properties, properties_1, properties_1_1, prop, value, valueView, encoded, hash, _a, _b, _c, _d, e_1_1;\n\n        var e_1, _e, _f;\n\n        return __generator(this, function (_g) {\n          switch (_g.label) {\n            case 0:\n              input = __assign({}, args.input);\n              properties = [{\n                target: \"SSECustomerKey\",\n                hash: \"SSECustomerKeyMD5\"\n              }, {\n                target: \"CopySourceSSECustomerKey\",\n                hash: \"CopySourceSSECustomerKeyMD5\"\n              }];\n              _g.label = 1;\n\n            case 1:\n              _g.trys.push([1, 6, 7, 8]);\n\n              properties_1 = __values(properties), properties_1_1 = properties_1.next();\n              _g.label = 2;\n\n            case 2:\n              if (!!properties_1_1.done) return [3\n              /*break*/\n              , 5];\n              prop = properties_1_1.value;\n              value = input[prop.target];\n              if (!value) return [3\n              /*break*/\n              , 4];\n              valueView = ArrayBuffer.isView(value) ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength) : typeof value === \"string\" ? options.utf8Decoder(value) : new Uint8Array(value);\n              encoded = options.base64Encoder(valueView);\n              hash = new options.md5();\n              hash.update(valueView);\n              _a = [__assign({}, input)];\n              _f = {}, _f[prop.target] = encoded;\n              _b = prop.hash;\n              _d = (_c = options).base64Encoder;\n              return [4\n              /*yield*/\n              , hash.digest()];\n\n            case 3:\n              input = __assign.apply(void 0, _a.concat([(_f[_b] = _d.apply(_c, [_g.sent()]), _f)]));\n              _g.label = 4;\n\n            case 4:\n              properties_1_1 = properties_1.next();\n              return [3\n              /*break*/\n              , 2];\n\n            case 5:\n              return [3\n              /*break*/\n              , 8];\n\n            case 6:\n              e_1_1 = _g.sent();\n              e_1 = {\n                error: e_1_1\n              };\n              return [3\n              /*break*/\n              , 8];\n\n            case 7:\n              try {\n                if (properties_1_1 && !properties_1_1.done && (_e = properties_1.return)) _e.call(properties_1);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n\n              return [7\n              /*endfinally*/\n              ];\n\n            case 8:\n              return [2\n              /*return*/\n              , next(__assign(__assign({}, args), {\n                input: input\n              }))];\n          }\n        });\n      });\n    };\n  };\n}\nexport var ssecMiddlewareOptions = {\n  name: \"ssecMiddleware\",\n  step: \"initialize\",\n  tags: [\"SSE\"],\n  override: true\n};\nexport var getSsecPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":";AAaA,OAAM,SAAUA,cAAV,CAAyBC,OAAzB,EAA8D;EAApE;;EACE,OAAO,UACLC,IADK,EAC+B;IACD,iBACnCC,IADmC,EACE;MAAA;;;;;;;;cAEjCC,KAAK,gBAAQD,IAAI,CAACC,KAAb,CAAL;cACEC,UAAU,GAAG,CACjB;gBACEC,MAAM,EAAE,gBADV;gBAEEC,IAAI,EAAE;cAFR,CADiB,EAKjB;gBACED,MAAM,EAAE,0BADV;gBAEEC,IAAI,EAAE;cAFR,CALiB,CAAb;;;;;;cAWaC,qCAAUC,oCAAV;;;;;;;cAARC,IAAI,uBAAJ;cACHC,KAAK,GAA4BP,KAAa,CAACM,IAAI,CAACJ,MAAN,CAA9C;mBACFK;cAAA;cAAA;cACIC,SAAS,GAAGC,WAAW,CAACC,MAAZ,CAAmBH,KAAnB,IACd,IAAII,UAAJ,CAAeJ,KAAK,CAACK,MAArB,EAA6BL,KAAK,CAACM,UAAnC,EAA+CN,KAAK,CAACO,UAArD,CADc,GAEd,OAAOP,KAAP,KAAiB,QAAjB,GACAV,OAAO,CAACkB,WAAR,CAAoBR,KAApB,CADA,GAEA,IAAII,UAAJ,CAAeJ,KAAf,CAJE;cAKAS,OAAO,GAAGnB,OAAO,CAACoB,aAAR,CAAsBT,SAAtB,CAAV;cACAL,IAAI,GAAG,IAAIN,OAAO,CAACqB,GAAZ,EAAP;cACNf,IAAI,CAACgB,MAAL,CAAYX,SAAZ;iCAEMR;0BACHM,IAAI,CAACJ,UAASc;cACdI,SAAI,CAACjB,IAAL;cAAYkB,oBAAQJ,aAAR;cAAsB;cAAA;cAAA,EAAMd,IAAI,CAACmB,MAAL,EAAN;;;cAHrCtB,KAAK,+CAGUqB,cAAsBE,SAAtB,EAHV,EAGoDC,EAHpD,IAAL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAQJ;cAAA;cAAA,EAAO1B,IAAI,uBACNC,IADM,GACF;gBACPC,KAAK;cADE,CADE,EAAX;;;OAjCqC;IAqCtC,CAtCoC;EAsCpC,CAxCD;AAyCD;AAED,OAAO,IAAMyB,qBAAqB,GAA6B;EAC7DC,IAAI,EAAE,gBADuD;EAE7DC,IAAI,EAAE,YAFuD;EAG7DC,IAAI,EAAE,CAAC,KAAD,CAHuD;EAI7DC,QAAQ,EAAE;AAJmD,CAAxD;AAOP,OAAO,IAAMC,aAAa,GAAG,UAACC,MAAD,EAAqC;EAA0B,OAAC;IAC3FC,YAAY,EAAE,UAACC,WAAD,EAAY;MACxBA,WAAW,CAACC,GAAZ,CAAgBtC,cAAc,CAACmC,MAAD,CAA9B,EAAwCN,qBAAxC;IACD;EAH0F,CAAD;AAI1F,CAJK","names":["ssecMiddleware","options","next","args","input","properties","target","hash","properties_1","properties_1_1","prop","value","valueView","ArrayBuffer","isView","Uint8Array","buffer","byteOffset","byteLength","utf8Decoder","encoded","base64Encoder","md5","update","_b","_d","digest","_g","_f","ssecMiddlewareOptions","name","step","tags","override","getSsecPlugin","config","applyToStack","clientStack","add"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\middleware-ssec\\src\\index.ts"],"sourcesContent":["import {\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  InitializeMiddleware,\n  MetadataBearer,\n  Pluggable,\n  SourceData,\n} from \"@aws-sdk/types\";\n\nimport { ResolvedSsecMiddlewareConfig } from \"./configuration\";\n\nexport function ssecMiddleware(options: ResolvedSsecMiddlewareConfig): InitializeMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: InitializeHandler<any, Output>\n  ): InitializeHandler<any, Output> => async (\n    args: InitializeHandlerArguments<any>\n  ): Promise<InitializeHandlerOutput<Output>> => {\n    let input = { ...args.input };\n    const properties = [\n      {\n        target: \"SSECustomerKey\",\n        hash: \"SSECustomerKeyMD5\",\n      },\n      {\n        target: \"CopySourceSSECustomerKey\",\n        hash: \"CopySourceSSECustomerKeyMD5\",\n      },\n    ];\n\n    for (const prop of properties) {\n      const value: SourceData | undefined = (input as any)[prop.target];\n      if (value) {\n        const valueView = ArrayBuffer.isView(value)\n          ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength)\n          : typeof value === \"string\"\n          ? options.utf8Decoder(value)\n          : new Uint8Array(value);\n        const encoded = options.base64Encoder(valueView);\n        const hash = new options.md5();\n        hash.update(valueView);\n        input = {\n          ...(input as any),\n          [prop.target]: encoded,\n          [prop.hash]: options.base64Encoder(await hash.digest()),\n        };\n      }\n    }\n\n    return next({\n      ...args,\n      input,\n    });\n  };\n}\n\nexport const ssecMiddlewareOptions: InitializeHandlerOptions = {\n  name: \"ssecMiddleware\",\n  step: \"initialize\",\n  tags: [\"SSE\"],\n  override: true,\n};\n\nexport const getSsecPlugin = (config: ResolvedSsecMiddlewareConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}