{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetContentModerationRequest, GetContentModerationResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetContentModerationCommand, serializeAws_json1_1GetContentModerationCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the unsafe content analysis results for a Amazon Rekognition Video analysis started by\n *        <a>StartContentModeration</a>.</p>\n *\n *          <p>Unsafe content analysis of a video is an asynchronous operation. You start analysis by calling\n *        <a>StartContentModeration</a> which returns a job identifier (<code>JobId</code>).\n *        When analysis finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n *        topic registered in the initial call to <code>StartContentModeration</code>.\n *        To get the results of the unsafe content analysis, first check that the status value published to the Amazon SNS\n *        topic is <code>SUCCEEDED</code>. If so, call  <code>GetContentModeration</code> and pass the job identifier\n *        (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>. </p>\n *\n *          <p>For more information, see Working with Stored Videos in the\n *      Amazon Rekognition Devlopers Guide.</p>\n *          <p>\n *             <code>GetContentModeration</code> returns detected unsafe content labels,\n *       and the time they are detected, in an array, <code>ModerationLabels</code>, of\n *       <a>ContentModerationDetection</a> objects.\n *      </p>\n *          <p>By default, the moderated labels are returned sorted by time, in milliseconds from the start of the\n *        video. You can also sort them by moderated label by specifying <code>NAME</code> for the <code>SortBy</code>\n *        input parameter. </p>\n *          <p>Since video analysis can return a large number of results, use the <code>MaxResults</code> parameter to limit\n *       the number of labels returned in a single call to <code>GetContentModeration</code>. If there are more results than\n *        specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a\n *        pagination token for getting the next set of results. To get the next page of results, call <code>GetContentModeration</code>\n *        and populate the <code>NextToken</code> request parameter with the value of <code>NextToken</code>\n *        returned from the previous call to <code>GetContentModeration</code>.</p>\n *\n *          <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n */\n\nvar GetContentModerationCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetContentModerationCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetContentModerationCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetContentModerationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetContentModerationCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetContentModerationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetContentModerationResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetContentModerationCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetContentModerationCommand(input, context);\n  };\n\n  GetContentModerationCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetContentModerationCommand(output, context);\n  };\n\n  return GetContentModerationCommand;\n}($Command);\n\nexport { GetContentModerationCommand };","map":{"version":3,"mappings":";AACA,SAASA,2BAAT,EAAsCC,4BAAtC,QAA0E,oBAA1E;AACA,SACEC,iDADF,EAEEC,+CAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AAAA;AAAA;EAAiDC,+CAAjD,CAKE;EACA;;;EAEA,qCAAqBC,KAArB,EAA4D;IAA5D,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAuC,CAG1D;EACD;EAED;;;;;EAGAC,oEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,mBAAnB;IACA,IAAMC,WAAW,GAAG,6BAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,2BAA2B,CAAC0B,kBAJE;MAKvDC,wBAAwB,EAAE1B,4BAA4B,CAACyB;IALA,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,kDAAR,UAAkBH,KAAlB,EAA2DuB,OAA3D,EAAkF;IAChF,OAAO5B,+CAA+C,CAACK,KAAD,EAAQuB,OAAR,CAAtD;EACD,CAFO;;EAIApB,oDAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO7B,iDAAiD,CAAC8B,MAAD,EAASD,OAAT,CAAxD;EACD,CAFO;;EAMV;AAAC,CAtDD,CAAiDzB,QAAjD","names":["GetContentModerationRequest","GetContentModerationResponse","deserializeAws_json1_1GetContentModerationCommand","serializeAws_json1_1GetContentModerationCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","GetContentModerationCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-rekognition\\commands\\GetContentModerationCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { GetContentModerationRequest, GetContentModerationResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1GetContentModerationCommand,\n  serializeAws_json1_1GetContentModerationCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetContentModerationCommandInput = GetContentModerationRequest;\nexport type GetContentModerationCommandOutput = GetContentModerationResponse & __MetadataBearer;\n\n/**\n * <p>Gets the unsafe content analysis results for a Amazon Rekognition Video analysis started by\n *        <a>StartContentModeration</a>.</p>\n *\n *          <p>Unsafe content analysis of a video is an asynchronous operation. You start analysis by calling\n *        <a>StartContentModeration</a> which returns a job identifier (<code>JobId</code>).\n *        When analysis finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n *        topic registered in the initial call to <code>StartContentModeration</code>.\n *        To get the results of the unsafe content analysis, first check that the status value published to the Amazon SNS\n *        topic is <code>SUCCEEDED</code>. If so, call  <code>GetContentModeration</code> and pass the job identifier\n *        (<code>JobId</code>) from the initial call to <code>StartContentModeration</code>. </p>\n *\n *          <p>For more information, see Working with Stored Videos in the\n *      Amazon Rekognition Devlopers Guide.</p>\n *          <p>\n *             <code>GetContentModeration</code> returns detected unsafe content labels,\n *       and the time they are detected, in an array, <code>ModerationLabels</code>, of\n *       <a>ContentModerationDetection</a> objects.\n *      </p>\n *          <p>By default, the moderated labels are returned sorted by time, in milliseconds from the start of the\n *        video. You can also sort them by moderated label by specifying <code>NAME</code> for the <code>SortBy</code>\n *        input parameter. </p>\n *          <p>Since video analysis can return a large number of results, use the <code>MaxResults</code> parameter to limit\n *       the number of labels returned in a single call to <code>GetContentModeration</code>. If there are more results than\n *        specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a\n *        pagination token for getting the next set of results. To get the next page of results, call <code>GetContentModeration</code>\n *        and populate the <code>NextToken</code> request parameter with the value of <code>NextToken</code>\n *        returned from the previous call to <code>GetContentModeration</code>.</p>\n *\n *          <p>For more information, see Detecting Unsafe Content in the Amazon Rekognition Developer Guide.</p>\n */\nexport class GetContentModerationCommand extends $Command<\n  GetContentModerationCommandInput,\n  GetContentModerationCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetContentModerationCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetContentModerationCommandInput, GetContentModerationCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"GetContentModerationCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetContentModerationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetContentModerationResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: GetContentModerationCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1GetContentModerationCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<GetContentModerationCommandOutput> {\n    return deserializeAws_json1_1GetContentModerationCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}