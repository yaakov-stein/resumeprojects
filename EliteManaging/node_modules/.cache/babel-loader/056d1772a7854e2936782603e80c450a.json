{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, StandardRetryStrategy } from \"./defaultStrategy\";\nexport var ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport var CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n  environmentVariableSelector: function (env) {\n    var value = env[ENV_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    var maxAttempt = parseInt(value);\n\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(\"Environment variable \" + ENV_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n    }\n\n    return maxAttempt;\n  },\n  configFileSelector: function (profile) {\n    var value = profile[CONFIG_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    var maxAttempt = parseInt(value);\n\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(\"Shared config file entry \" + CONFIG_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n    }\n\n    return maxAttempt;\n  },\n  default: DEFAULT_MAX_ATTEMPTS\n};\nexport var resolveRetryConfig = function (input) {\n  var maxAttempts = normalizeMaxAttempts(input.maxAttempts);\n  return __assign(__assign({}, input), {\n    maxAttempts: maxAttempts,\n    retryStrategy: input.retryStrategy || new StandardRetryStrategy(maxAttempts)\n  });\n};\n\nvar normalizeMaxAttempts = function (maxAttempts) {\n  if (maxAttempts === void 0) {\n    maxAttempts = DEFAULT_MAX_ATTEMPTS;\n  }\n\n  if (typeof maxAttempts === \"number\") {\n    var promisified_1 = Promise.resolve(maxAttempts);\n    return function () {\n      return promisified_1;\n    };\n  }\n\n  return maxAttempts;\n};\n\nexport var ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport var CONFIG_RETRY_MODE = \"retry_mode\";\nexport var NODE_RETRY_MODE_CONFIG_OPTIONS = {\n  environmentVariableSelector: function (env) {\n    return env[ENV_RETRY_MODE];\n  },\n  configFileSelector: function (profile) {\n    return profile[CONFIG_RETRY_MODE];\n  },\n  default: DEFAULT_RETRY_MODE\n};","map":{"version":3,"mappings":";AAGA,SAASA,oBAAT,EAA+BC,kBAA/B,EAAmDC,qBAAnD,QAAgF,mBAAhF;AAEA,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,mBAAmB,GAAG,cAA5B;AAEP,OAAO,IAAMC,+BAA+B,GAAkC;EAC5EC,2BAA2B,EAAE,UAACC,GAAD,EAAI;IAC/B,IAAMC,KAAK,GAAGD,GAAG,CAACJ,gBAAD,CAAjB;IACA,IAAI,CAACK,KAAL,EAAY,OAAOC,SAAP;IACZ,IAAMC,UAAU,GAAGC,QAAQ,CAACH,KAAD,CAA3B;;IACA,IAAII,MAAM,CAACC,KAAP,CAAaH,UAAb,CAAJ,EAA8B;MAC5B,MAAM,IAAII,KAAJ,CAAU,0BAAwBX,gBAAxB,GAAwC,2BAAxC,GAAmEK,KAAnE,GAAwE,IAAlF,CAAN;IACD;;IACD,OAAOE,UAAP;EACD,CAT2E;EAU5EK,kBAAkB,EAAE,UAACC,OAAD,EAAQ;IAC1B,IAAMR,KAAK,GAAGQ,OAAO,CAACZ,mBAAD,CAArB;IACA,IAAI,CAACI,KAAL,EAAY,OAAOC,SAAP;IACZ,IAAMC,UAAU,GAAGC,QAAQ,CAACH,KAAD,CAA3B;;IACA,IAAII,MAAM,CAACC,KAAP,CAAaH,UAAb,CAAJ,EAA8B;MAC5B,MAAM,IAAII,KAAJ,CAAU,8BAA4BV,mBAA5B,GAA+C,2BAA/C,GAA0EI,KAA1E,GAA+E,IAAzF,CAAN;IACD;;IACD,OAAOE,UAAP;EACD,CAlB2E;EAmB5EO,OAAO,EAAEjB;AAnBmE,CAAvE;AAuCP,OAAO,IAAMkB,kBAAkB,GAAG,UAAIC,KAAJ,EAAoD;EACpF,IAAMC,WAAW,GAAGC,oBAAoB,CAACF,KAAK,CAACC,WAAP,CAAxC;EACA,6BACKD,KADL,GACU;IACRC,WAAW,aADH;IAERE,aAAa,EAAEH,KAAK,CAACG,aAAN,IAAuB,IAAIpB,qBAAJ,CAA0BkB,WAA1B;EAF9B,CADV;AAKD,CAPM;;AASP,IAAMC,oBAAoB,GAAG,UAACD,WAAD,EAA8D;EAA7D;IAAAA;EAA6D;;EACzF,IAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;IACnC,IAAMG,aAAW,GAAGC,OAAO,CAACC,OAAR,CAAgBL,WAAhB,CAApB;IACA,OAAO;MAAM;IAAW,CAAxB;EACD;;EACD,OAAOA,WAAP;AACD,CAND;;AAQA,OAAO,IAAMM,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,iBAAiB,GAAG,YAA1B;AAEP,OAAO,IAAMC,8BAA8B,GAAkC;EAC3EtB,2BAA2B,EAAE,UAACC,GAAD,EAAI;IAAK,UAAG,CAACmB,cAAD,CAAH;EAAmB,CADkB;EAE3EX,kBAAkB,EAAE,UAACC,OAAD,EAAQ;IAAK,cAAO,CAACW,iBAAD,CAAP;EAA0B,CAFgB;EAG3EV,OAAO,EAAEhB;AAHkE,CAAtE","names":["DEFAULT_MAX_ATTEMPTS","DEFAULT_RETRY_MODE","StandardRetryStrategy","ENV_MAX_ATTEMPTS","CONFIG_MAX_ATTEMPTS","NODE_MAX_ATTEMPT_CONFIG_OPTIONS","environmentVariableSelector","env","value","undefined","maxAttempt","parseInt","Number","isNaN","Error","configFileSelector","profile","default","resolveRetryConfig","input","maxAttempts","normalizeMaxAttempts","retryStrategy","promisified_1","Promise","resolve","ENV_RETRY_MODE","CONFIG_RETRY_MODE","NODE_RETRY_MODE_CONFIG_OPTIONS"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\middleware-retry\\src\\configurations.ts"],"sourcesContent":["import { LoadedConfigSelectors } from \"@aws-sdk/node-config-provider\";\nimport { Provider, RetryStrategy } from \"@aws-sdk/types\";\n\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, StandardRetryStrategy } from \"./defaultStrategy\";\n\nexport const ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport const CONFIG_MAX_ATTEMPTS = \"max_attempts\";\n\nexport const NODE_MAX_ATTEMPT_CONFIG_OPTIONS: LoadedConfigSelectors<number> = {\n  environmentVariableSelector: (env) => {\n    const value = env[ENV_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    const maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n    }\n    return maxAttempt;\n  },\n  configFileSelector: (profile) => {\n    const value = profile[CONFIG_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    const maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n    }\n    return maxAttempt;\n  },\n  default: DEFAULT_MAX_ATTEMPTS,\n};\n\nexport interface RetryInputConfig {\n  /**\n   * The maximum number of times requests that encounter retryable failures should be attempted.\n   */\n  maxAttempts?: number | Provider<number>;\n  /**\n   * The strategy to retry the request. Using built-in exponential backoff strategy by default.\n   */\n  retryStrategy?: RetryStrategy;\n}\n\ninterface PreviouslyResolved {}\nexport interface RetryResolvedConfig {\n  maxAttempts: Provider<number>;\n  retryStrategy: RetryStrategy;\n}\n\nexport const resolveRetryConfig = <T>(input: T & PreviouslyResolved & RetryInputConfig): T & RetryResolvedConfig => {\n  const maxAttempts = normalizeMaxAttempts(input.maxAttempts);\n  return {\n    ...input,\n    maxAttempts,\n    retryStrategy: input.retryStrategy || new StandardRetryStrategy(maxAttempts),\n  };\n};\n\nconst normalizeMaxAttempts = (maxAttempts: number | Provider<number> = DEFAULT_MAX_ATTEMPTS): Provider<number> => {\n  if (typeof maxAttempts === \"number\") {\n    const promisified = Promise.resolve(maxAttempts);\n    return () => promisified;\n  }\n  return maxAttempts;\n};\n\nexport const ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport const CONFIG_RETRY_MODE = \"retry_mode\";\n\nexport const NODE_RETRY_MODE_CONFIG_OPTIONS: LoadedConfigSelectors<string> = {\n  environmentVariableSelector: (env) => env[ENV_RETRY_MODE],\n  configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],\n  default: DEFAULT_RETRY_MODE,\n};\n"]},"metadata":{},"sourceType":"module"}