{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { DescribeStreamCommand } from \"../commands/DescribeStreamCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nvar checkState = function (client, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var result, exception_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , client.send(new DescribeStreamCommand(input))];\n\n        case 1:\n          result = _a.sent();\n          return [3\n          /*break*/\n          , 3];\n\n        case 2:\n          exception_1 = _a.sent();\n\n          if (exception_1.name && exception_1.name == \"ResourceNotFoundException\") {\n            return [2\n            /*return*/\n            , {\n              state: WaiterState.SUCCESS\n            }];\n          }\n\n          return [3\n          /*break*/\n          , 3];\n\n        case 3:\n          return [2\n          /*return*/\n          , {\n            state: WaiterState.RETRY\n          }];\n      }\n    });\n  });\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeStreamCommand for polling.\n */\n\n\nexport var waitForStreamNotExists = function (params, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n      serviceDefaults = {\n        minDelay: 10,\n        maxDelay: 120\n      };\n      return [2\n      /*return*/\n      , createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n  });\n};","map":{"version":3,"mappings":";AACA,SAASA,qBAAT,QAAkE,mCAAlE;AACA,SAA4CC,WAA5C,EAAyDC,YAAzD,QAA6E,sBAA7E;;AAEA,IAAMC,UAAU,GAAG,UAAOC,MAAP,EAA8BC,KAA9B,EAA+D;EAAA;;;;;;;UAE5D;UAAA;UAAA,EAAMD,MAAM,CAACE,IAAP,CAAY,IAAIN,qBAAJ,CAA0BK,KAA1B,CAAZ,CAAN;;;UAAdE,MAAM,GAAQC,SAAd;;;;;;;;UAEJ,IAAIC,WAAS,CAACC,IAAV,IAAkBD,WAAS,CAACC,IAAV,IAAkB,2BAAxC,EAAqE;YACnE;YAAA;YAAA,EAAO;cAAEC,KAAK,EAAEV,WAAW,CAACW;YAArB,CAAP;UACD;;;;;;;UAEH;UAAA;UAAA,EAAO;YAAED,KAAK,EAAEV,WAAW,CAACY;UAArB,CAAP;;;GARgF;AASjF,CATD;AAUA;;;;;;;AAKA,OAAO,IAAMC,sBAAsB,GAAG,UACpCC,MADoC,EAEpCV,KAFoC,EAEH;EAAA;;;MAE3BW,eAAe,GAAG;QAAEC,QAAQ,EAAE,EAAZ;QAAgBC,QAAQ,EAAE;MAA1B,CAAlB;MACN;MAAA;MAAA,EAAOhB,YAAY,uBAAMc,eAAN,GAA0BD,MAA1B,GAAoCV,KAApC,EAA2CF,UAA3C,CAAnB;;GAHiC;AAIlC,CANM","names":["DescribeStreamCommand","WaiterState","createWaiter","checkState","client","input","send","result","_a","exception_1","name","state","SUCCESS","RETRY","waitForStreamNotExists","params","serviceDefaults","minDelay","maxDelay"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-kinesis\\waiters\\waitForStreamNotExists.ts"],"sourcesContent":["import { KinesisClient } from \"../KinesisClient\";\nimport { DescribeStreamCommand, DescribeStreamCommandInput } from \"../commands/DescribeStreamCommand\";\nimport { WaiterConfiguration, WaiterResult, WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nconst checkState = async (client: KinesisClient, input: DescribeStreamCommandInput): Promise<WaiterResult> => {\n  try {\n    let result: any = await client.send(new DescribeStreamCommand(input));\n  } catch (exception) {\n    if (exception.name && exception.name == \"ResourceNotFoundException\") {\n      return { state: WaiterState.SUCCESS };\n    }\n  }\n  return { state: WaiterState.RETRY };\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeStreamCommand for polling.\n */\nexport const waitForStreamNotExists = async (\n  params: WaiterConfiguration<KinesisClient>,\n  input: DescribeStreamCommandInput\n): Promise<WaiterResult> => {\n  const serviceDefaults = { minDelay: 10, maxDelay: 120 };\n  return createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n};\n"]},"metadata":{},"sourceType":"module"}