{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport camelcaseKeys from 'camelcase-keys';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { LocationClient, SearchPlaceIndexForTextCommand, SearchPlaceIndexForPositionCommand, BatchPutGeofenceCommand, GetGeofenceCommand, ListGeofencesCommand, BatchDeleteGeofenceCommand } from '@aws-sdk/client-location';\nimport { validateGeofenceId, validateGeofencesInput } from '../util';\nvar logger = new Logger('AmazonLocationServiceProvider');\n\nvar AmazonLocationServiceProvider =\n/** @class */\nfunction () {\n  /**\n   * Initialize Geo with AWS configurations\n   * @param {Object} config - Configuration object for Geo\n   */\n  function AmazonLocationServiceProvider(config) {\n    this._config = config ? config : {};\n    logger.debug('Geo Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   * @returns {string} name of the category\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getCategory = function () {\n    return AmazonLocationServiceProvider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   * @returns {string} name of the provider\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getProviderName = function () {\n    return AmazonLocationServiceProvider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Geo part with aws configuration\n   * @param {Object} config - Configuration of the Geo\n   * @return {Object} - Current configuration\n   */\n\n\n  AmazonLocationServiceProvider.prototype.configure = function (config) {\n    logger.debug('configure Amazon Location Service Provider', config);\n    if (!config) return this._config;\n    this._config = Object.assign({}, this._config, config);\n    return this._config;\n  };\n  /**\n   * Get the map resources that are currently available through the provider\n   * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getAvailableMaps = function () {\n    this._verifyMapResources();\n\n    var mapStyles = [];\n    var availableMaps = this._config.maps.items;\n    var region = this._config.region;\n\n    for (var mapName in availableMaps) {\n      var style = availableMaps[mapName].style;\n      mapStyles.push({\n        mapName: mapName,\n        style: style,\n        region: region\n      });\n    }\n\n    return mapStyles;\n  };\n  /**\n   * Get the map resource set as default in amplify config\n   * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getDefaultMap = function () {\n    this._verifyMapResources();\n\n    var mapName = this._config.maps.default;\n    var style = this._config.maps.items[mapName].style;\n    var region = this._config.region;\n    return {\n      mapName: mapName,\n      style: style,\n      region: region\n    };\n  };\n  /**\n   * Search by text input with optional parameters\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchByText = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_1, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Text: text,\n              IndexName: this._config.search_indices.default\n            };\n            /**\n             * Map search options to Amazon Location Service input object\n             */\n\n            if (options) {\n              locationServiceInput.FilterCountries = options.countries;\n              locationServiceInput.MaxResults = options.maxResults;\n\n              if (options.searchIndexName) {\n                locationServiceInput.IndexName = options.searchIndexName;\n              }\n\n              if (options['biasPosition'] && options['searchAreaConstraints']) {\n                throw new Error('BiasPosition and SearchAreaConstraints are mutually exclusive, please remove one or the other from the options object');\n              }\n\n              if (options['biasPosition']) {\n                locationServiceInput.BiasPosition = options['biasPosition'];\n              }\n\n              if (options['searchAreaConstraints']) {\n                locationServiceInput.FilterBBox = options['searchAreaConstraints'];\n              }\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_1 = _a.sent();\n            logger.debug(error_1);\n            throw error_1;\n\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults, {\n              deep: true\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Reverse geocoding search via a coordinate point on the map\n   * @param coordinates - Coordinates array for the search input\n   * @param options - Options parameters for the search\n   * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchByCoordinates = function (coordinates, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_2, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Position: coordinates,\n              IndexName: this._config.search_indices.default\n            };\n\n            if (options) {\n              if (options.searchIndexName) {\n                locationServiceInput.IndexName = options.searchIndexName;\n              }\n\n              locationServiceInput.MaxResults = options.maxResults;\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForPositionCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_2 = _a.sent();\n            logger.debug(error_2);\n            throw error_2;\n\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults[0], {\n              deep: true\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Create geofences inside of a geofence collection\n   * @param geofences - Array of geofence objects to create\n   * @param options? - Optional parameters for creating geofences\n   * @returns {Promise<AmazonLocationServiceSaveGeofencesResults>} - Promise that resolves to an object with:\n   *   successes: list of geofences successfully created\n   *   errors: list of geofences that failed to create\n   */\n\n\n  AmazonLocationServiceProvider.prototype.saveGeofences = function (geofences, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, PascalGeofences, results, geofenceBatches, apiLimit;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (geofences.length < 1) {\n              throw new Error('Geofence input array is empty');\n            }\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            } // Verify geofence collection exists in aws-config.js\n\n\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n\n            validateGeofencesInput(geofences);\n            PascalGeofences = geofences.map(function (_a) {\n              var geofenceId = _a.geofenceId,\n                  polygon = _a.geometry.polygon;\n              return {\n                GeofenceId: geofenceId,\n                Geometry: {\n                  Polygon: polygon\n                }\n              };\n            });\n            results = {\n              successes: [],\n              errors: []\n            };\n            geofenceBatches = [];\n\n            while (PascalGeofences.length > 0) {\n              apiLimit = 10;\n              geofenceBatches.push(PascalGeofences.splice(0, apiLimit));\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(geofenceBatches.map(function (batch) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_3;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      _a.trys.push([0, 2,, 3]);\n\n                      return [4\n                      /*yield*/\n                      , this._AmazonLocationServiceBatchPutGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n\n                    case 1:\n                      response = _a.sent();\n                      return [3\n                      /*break*/\n                      , 3];\n\n                    case 2:\n                      error_3 = _a.sent(); // If the API call fails, add the geofences to the errors array and move to next batch\n\n                      batch.forEach(function (geofence) {\n                        results.errors.push({\n                          geofenceId: geofence.GeofenceId,\n                          error: {\n                            code: 'APIConnectionError',\n                            message: error_3.message\n                          }\n                        });\n                      });\n                      return [2\n                      /*return*/\n                      ];\n\n                    case 3:\n                      // Push all successes to results\n                      response.Successes.forEach(function (success) {\n                        var GeofenceId = success.GeofenceId,\n                            CreateTime = success.CreateTime,\n                            UpdateTime = success.UpdateTime;\n                        results.successes.push({\n                          geofenceId: GeofenceId,\n                          createTime: CreateTime,\n                          updateTime: UpdateTime\n                        });\n                      }); // Push all errors to results\n\n                      response.Errors.forEach(function (error) {\n                        var _a = error.Error,\n                            Code = _a.Code,\n                            Message = _a.Message,\n                            GeofenceId = error.GeofenceId;\n                        results.errors.push({\n                          error: {\n                            code: Code,\n                            message: Message\n                          },\n                          geofenceId: GeofenceId\n                        });\n                      });\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Get geofence from a geofence collection\n   * @param geofenceId:string\n   * @param options?: Optional parameters for getGeofence\n   * @returns {Promise<AmazonLocationServiceGeofence>} - Promise that resolves to a geofence object\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getGeofence = function (geofenceId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, commandInput, command, response, error_4, GeofenceId, CreateTime, UpdateTime, Status, Geometry, geofence;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            } // Verify geofence collection exists in aws-config.js\n\n\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n\n            validateGeofenceId(geofenceId);\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            commandInput = {\n              GeofenceId: geofenceId,\n              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default\n            };\n            command = new GetGeofenceCommand(commandInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_4 = _a.sent();\n            logger.debug(error_4);\n            throw error_4;\n\n          case 5:\n            GeofenceId = response.GeofenceId, CreateTime = response.CreateTime, UpdateTime = response.UpdateTime, Status = response.Status, Geometry = response.Geometry;\n            geofence = {\n              createTime: CreateTime,\n              geofenceId: GeofenceId,\n              geometry: {\n                polygon: Geometry.Polygon\n              },\n              status: Status,\n              updateTime: UpdateTime\n            };\n            return [2\n            /*return*/\n            , geofence];\n        }\n      });\n    });\n  };\n  /**\n   * List geofences from a geofence collection\n   * @param  options?: ListGeofenceOptions\n   * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n   *   entries: list of geofences - 100 geofences are listed per page\n   *   nextToken: token for next page of geofences\n   */\n\n\n  AmazonLocationServiceProvider.prototype.listGeofences = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, listGeofencesInput, command, response, error_5, NextToken, Entries, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            } // Verify geofence collection exists in aws-config.js\n\n\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            listGeofencesInput = {\n              NextToken: options === null || options === void 0 ? void 0 : options.nextToken,\n              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default\n            };\n            command = new ListGeofencesCommand(listGeofencesInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_5 = _a.sent();\n            logger.debug(error_5);\n            throw error_5;\n\n          case 5:\n            NextToken = response.NextToken, Entries = response.Entries;\n            results = {\n              entries: Entries.map(function (_a) {\n                var GeofenceId = _a.GeofenceId,\n                    CreateTime = _a.CreateTime,\n                    UpdateTime = _a.UpdateTime,\n                    Status = _a.Status,\n                    Polygon = _a.Geometry.Polygon;\n                return {\n                  geofenceId: GeofenceId,\n                  createTime: CreateTime,\n                  updateTime: UpdateTime,\n                  status: Status,\n                  geometry: {\n                    polygon: Polygon\n                  }\n                };\n              }),\n              nextToken: NextToken\n            };\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Delete geofences from a geofence collection\n   * @param geofenceIds: string|string[]\n   * @param options?: GeofenceOptions\n   * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n   *  successes: list of geofences successfully deleted\n   *  errors: list of geofences that failed to delete\n   */\n\n\n  AmazonLocationServiceProvider.prototype.deleteGeofences = function (geofenceIds, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, badGeofenceIds, results, geofenceIdBatches, count;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (geofenceIds.length < 1) {\n              throw new Error('GeofenceId input array is empty');\n            }\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n\n            badGeofenceIds = geofenceIds.filter(function (geofenceId) {\n              try {\n                validateGeofenceId(geofenceId);\n              } catch (error) {\n                return true;\n              }\n            });\n\n            if (badGeofenceIds.length > 0) {\n              throw new Error(\"Invalid geofence ids: \" + badGeofenceIds.join(', '));\n            }\n\n            results = {\n              successes: [],\n              errors: []\n            };\n            geofenceIdBatches = [];\n            count = 0;\n\n            while (count < geofenceIds.length) {\n              geofenceIdBatches.push(geofenceIds.slice(count, count += 10));\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(geofenceIdBatches.map(function (batch) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_6, badGeofenceIds;\n\n                var _a;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      _b.trys.push([0, 2,, 3]);\n\n                      return [4\n                      /*yield*/\n                      , this._AmazonLocationServiceBatchDeleteGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n\n                    case 1:\n                      response = _b.sent();\n                      return [3\n                      /*break*/\n                      , 3];\n\n                    case 2:\n                      error_6 = _b.sent(); // If the API call fails, add the geofences to the errors array and move to next batch\n\n                      batch.forEach(function (geofenceId) {\n                        var errorObject = {\n                          geofenceId: geofenceId,\n                          error: {\n                            code: error_6.message,\n                            message: error_6.message\n                          }\n                        };\n                        results.errors.push(errorObject);\n                      });\n                      return [2\n                      /*return*/\n                      ];\n\n                    case 3:\n                      badGeofenceIds = response.Errors.map(function (_a) {\n                        var geofenceId = _a.geofenceId;\n                        return geofenceId;\n                      });\n\n                      (_a = results.successes).push.apply(_a, __spread(batch.filter(function (Id) {\n                        return !badGeofenceIds.includes(Id);\n                      })));\n\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  AmazonLocationServiceProvider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, cred, error_7;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2\n            /*return*/\n            , false];\n            cred = Credentials.shear(credentials);\n            logger.debug('Set credentials for storage. Credentials are:', cred);\n            this._config.credentials = cred;\n            return [2\n            /*return*/\n            , true];\n\n          case 2:\n            error_7 = _a.sent();\n            logger.debug('Ensure credentials error. Credentials are:', error_7);\n            return [2\n            /*return*/\n            , false];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyMapResources = function () {\n    if (!this._config.maps) {\n      var errorString = \"No map resources found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n\n    if (!this._config.maps.default) {\n      var errorString = \"No default map resource found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._verifySearchIndex = function (optionalSearchIndex) {\n    if ((!this._config.search_indices || !this._config.search_indices.default) && !optionalSearchIndex) {\n      var errorString = 'No Search Index found in amplify config, please run `amplify add geo` to create one and run `amplify push` after.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyGeofenceCollections = function (optionalGeofenceCollectionName) {\n    if ((!this._config.geofenceCollections || !this._config.geofenceCollections.default) && !optionalGeofenceCollectionName) {\n      var errorString = 'No Geofence Collections found, please run `amplify add geo` to create one and run `amplify push` after.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchPutGeofenceCall = function (PascalGeofences, collectionName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var geofenceInput, client, command, response, error_8;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            geofenceInput = {\n              Entries: PascalGeofences,\n              CollectionName: collectionName || this._config.geofenceCollections.default\n            };\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new BatchPutGeofenceCommand(geofenceInput);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 2:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_8 = _a.sent();\n            throw error_8;\n\n          case 4:\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchDeleteGeofenceCall = function (geofenceIds, collectionName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteGeofencesInput, client, command, response, error_9;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            deleteGeofencesInput = {\n              GeofenceIds: geofenceIds,\n              CollectionName: collectionName || this._config.geofenceCollections.default\n            };\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new BatchDeleteGeofenceCommand(deleteGeofencesInput);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 2:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_9 = _a.sent();\n            throw error_9;\n\n          case 4:\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.CATEGORY = 'Geo';\n  AmazonLocationServiceProvider.PROVIDER_NAME = 'AmazonLocationService';\n  return AmazonLocationServiceProvider;\n}();\n\nexport { AmazonLocationServiceProvider };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAYA,OAAOA,aAAP,MAA0B,gBAA1B;AAEA,SACCC,aAAa,IAAIC,MADlB,EAECC,WAFD,EAGCC,mBAHD,QAIO,mBAJP;AAKA,SAGCC,cAHD,EAICC,8BAJD,EAKCC,kCALD,EAOCC,uBAPD,EAWCC,kBAXD,EAcCC,oBAdD,EAiBCC,0BAjBD,QAoBO,0BApBP;AAsBA,SAASC,kBAAT,EAA6BC,sBAA7B,QAA2D,SAA3D;AAsBA,IAAMC,MAAM,GAAG,IAAIZ,MAAJ,CAAW,+BAAX,CAAf;;AAEA;AAAA;AAAA;EASC;;;;EAIA,uCAAYa,MAAZ,EAA8B;IAC7B,KAAKC,OAAL,GAAeD,MAAM,GAAGA,MAAH,GAAY,EAAjC;IACAD,MAAM,CAACG,KAAP,CAAa,aAAb,EAA4B,KAAKD,OAAjC;EACA;EAED;;;;;;EAIOE,sDAAP;IACC,OAAOA,6BAA6B,CAACC,QAArC;EACA,CAFM;EAIP;;;;;;EAIOD,0DAAP;IACC,OAAOA,6BAA6B,CAACE,aAArC;EACA,CAFM;EAIP;;;;;;;EAKOF,oDAAP,UAAiBH,MAAjB,EAAwB;IACvBD,MAAM,CAACG,KAAP,CAAa,4CAAb,EAA2DF,MAA3D;IACA,IAAI,CAACA,MAAL,EAAa,OAAO,KAAKC,OAAZ;IACb,KAAKA,OAAL,GAAeK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKN,OAAvB,EAAgCD,MAAhC,CAAf;IACA,OAAO,KAAKC,OAAZ;EACA,CALM;EAOP;;;;;;EAIOE,2DAAP;IACC,KAAKK,mBAAL;;IAEA,IAAMC,SAAS,GAAoC,EAAnD;IACA,IAAMC,aAAa,GAAG,KAAKT,OAAL,CAAaU,IAAb,CAAkBC,KAAxC;IACA,IAAMC,MAAM,GAAG,KAAKZ,OAAL,CAAaY,MAA5B;;IAEA,KAAK,IAAMC,OAAX,IAAsBJ,aAAtB,EAAqC;MACpC,IAAMK,KAAK,GAAGL,aAAa,CAACI,OAAD,CAAb,CAAuBC,KAArC;MACAN,SAAS,CAACO,IAAV,CAAe;QAAEF,OAAO,SAAT;QAAWC,KAAK,OAAhB;QAAkBF,MAAM;MAAxB,CAAf;IACA;;IAED,OAAOJ,SAAP;EACA,CAbM;EAeP;;;;;;EAION,wDAAP;IACC,KAAKK,mBAAL;;IAEA,IAAMM,OAAO,GAAG,KAAKb,OAAL,CAAaU,IAAb,CAAkBM,OAAlC;IACA,IAAMF,KAAK,GAAG,KAAKd,OAAL,CAAaU,IAAb,CAAkBC,KAAlB,CAAwBE,OAAxB,EAAiCC,KAA/C;IACA,IAAMF,MAAM,GAAG,KAAKZ,OAAL,CAAaY,MAA5B;IAEA,OAAO;MAAEC,OAAO,SAAT;MAAWC,KAAK,OAAhB;MAAkBF,MAAM;IAAxB,CAAP;EACA,CARM;EAUP;;;;;;;;EAMaV,uDAAb,UACCe,IADD,EAECC,OAFD,EAE8B;;;;;;YAEP;YAAA;YAAA,EAAM,KAAKC,kBAAL,EAAN;;;YAAhBC,aAAa,GAAGC,SAAhB;;YACN,IAAI,CAACD,aAAL,EAAoB;cACnB,MAAM,IAAIE,KAAJ,CAAU,gBAAV,CAAN;YACA;;YAED,KAAKC,kBAAL,CAAwBL,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEM,eAAjC;;YAKMC,oBAAoB,GAAwC;cACjEC,IAAI,EAAET,IAD2D;cAEjEU,SAAS,EAAE,KAAK3B,OAAL,CAAa4B,cAAb,CAA4BZ;YAF0B,CAA5D;YAKN;;;;YAGA,IAAIE,OAAJ,EAAa;cACZO,oBAAoB,CAACI,eAArB,GAAuCX,OAAO,CAACY,SAA/C;cACAL,oBAAoB,CAACM,UAArB,GAAkCb,OAAO,CAACc,UAA1C;;cAEA,IAAId,OAAO,CAACM,eAAZ,EAA6B;gBAC5BC,oBAAoB,CAACE,SAArB,GAAiCT,OAAO,CAACM,eAAzC;cACA;;cAED,IAAIN,OAAO,CAAC,cAAD,CAAP,IAA2BA,OAAO,CAAC,uBAAD,CAAtC,EAAiE;gBAChE,MAAM,IAAII,KAAJ,CACL,uHADK,CAAN;cAGA;;cACD,IAAIJ,OAAO,CAAC,cAAD,CAAX,EAA6B;gBAC5BO,oBAAoB,CAACQ,YAArB,GAAoCf,OAAO,CAAC,cAAD,CAA3C;cACA;;cACD,IAAIA,OAAO,CAAC,uBAAD,CAAX,EAAsC;gBACrCO,oBAAoB,CAACS,UAArB,GAAkChB,OAAO,CAAC,uBAAD,CAAzC;cACA;YACD;;YAEKiB,MAAM,GAAG,IAAI9C,cAAJ,CAAmB;cACjC+C,WAAW,EAAE,KAAKpC,OAAL,CAAaoC,WADO;cAEjCxB,MAAM,EAAE,KAAKZ,OAAL,CAAaY,MAFY;cAGjCyB,eAAe,EAAEjD,mBAAmB;YAHH,CAAnB,CAAT;YAKAkD,OAAO,GAAG,IAAIhD,8BAAJ,CAAmCmC,oBAAnC,CAAV;;;;;;YAIM;YAAA;YAAA,EAAMU,MAAM,CAACI,IAAP,CAAYD,OAAZ,CAAN;;;YAAXE,QAAQ,GAAGnB,SAAX;;;;;;;YAEAvB,MAAM,CAACG,KAAP,CAAawC,OAAb;YACA,MAAMA,OAAN;;;YAQKC,aAAa,GAAkBF,QAAQ,CAACG,OAAT,CAAiBC,GAAjB,CACpC,kBAAM;cAAI,aAAM,CAACC,KAAP;YAAY,CADc,CAA/B;YAGAC,OAAO,GAAY9D,aAAa,CAAC0D,aAAD,EAAgB;cACrDK,IAAI,EAAE;YAD+C,CAAhB,CAAhC;YAIN;YAAA;YAAA,EAAOD,OAAP;;;;EACA,CAvEY;EAyEb;;;;;;;;EAMa5C,8DAAb,UACC8C,WADD,EAEC9B,OAFD,EAEqC;;;;;;YAEd;YAAA;YAAA,EAAM,KAAKC,kBAAL,EAAN;;;YAAhBC,aAAa,GAAGC,SAAhB;;YACN,IAAI,CAACD,aAAL,EAAoB;cACnB,MAAM,IAAIE,KAAJ,CAAU,gBAAV,CAAN;YACA;;YAED,KAAKC,kBAAL,CAAwBL,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEM,eAAjC;;YAEMC,oBAAoB,GAA4C;cACrEwB,QAAQ,EAAED,WAD2D;cAErErB,SAAS,EAAE,KAAK3B,OAAL,CAAa4B,cAAb,CAA4BZ;YAF8B,CAAhE;;YAKN,IAAIE,OAAJ,EAAa;cACZ,IAAIA,OAAO,CAACM,eAAZ,EAA6B;gBAC5BC,oBAAoB,CAACE,SAArB,GAAiCT,OAAO,CAACM,eAAzC;cACA;;cACDC,oBAAoB,CAACM,UAArB,GAAkCb,OAAO,CAACc,UAA1C;YACA;;YAEKG,MAAM,GAAG,IAAI9C,cAAJ,CAAmB;cACjC+C,WAAW,EAAE,KAAKpC,OAAL,CAAaoC,WADO;cAEjCxB,MAAM,EAAE,KAAKZ,OAAL,CAAaY,MAFY;cAGjCyB,eAAe,EAAEjD,mBAAmB;YAHH,CAAnB,CAAT;YAKAkD,OAAO,GAAG,IAAI/C,kCAAJ,CACfkC,oBADe,CAAV;;;;;;YAMM;YAAA;YAAA,EAAMU,MAAM,CAACI,IAAP,CAAYD,OAAZ,CAAN;;;YAAXE,QAAQ,GAAGnB,SAAX;;;;;;;YAEAvB,MAAM,CAACG,KAAP,CAAaiD,OAAb;YACA,MAAMA,OAAN;;;YAQKR,aAAa,GAAGF,QAAQ,CAACG,OAAT,CAAiBC,GAAjB,CAAqB,kBAAM;cAAI,aAAM,CAACC,KAAP;YAAY,CAA3C,CAAhB;YACAC,OAAO,GAAU9D,aAAa,CAAC0D,aAAa,CAAC,CAAD,CAAd,EAAmB;cACtDK,IAAI,EAAE;YADgD,CAAnB,CAA9B;YAIN;YAAA;YAAA,EAAOD,OAAP;;;;EACA,CAnDY;EAqDb;;;;;;;;;;EAQa5C,wDAAb,UACCiD,SADD,EAECjC,OAFD,EAE+C;;;;;;;;;YAE9C,IAAIiC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;cACzB,MAAM,IAAI9B,KAAJ,CAAU,+BAAV,CAAN;YACA;;YAEqB;YAAA;YAAA,EAAM,KAAKH,kBAAL,EAAN;;;YAAhBC,aAAa,GAAGC,SAAhB;;YACN,IAAI,CAACD,aAAL,EAAoB;cACnB,MAAM,IAAIE,KAAJ,CAAU,gBAAV,CAAN;YACA,EAED;;;YACA,IAAI;cACH,KAAK+B,0BAAL,CAAgCnC,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEoC,cAAzC;YACA,CAFD,CAEE,OAAOC,KAAP,EAAc;cACfzD,MAAM,CAACG,KAAP,CAAasD,KAAb;cACA,MAAMA,KAAN;YACA;;YAED1D,sBAAsB,CAACsD,SAAD,CAAtB;YAGMK,eAAe,GAAmCL,SAAS,CAACP,GAAV,CACvD,UAACvB,EAAD,EAAsC;kBAAnCoC;kBAAwBC;cAC1B,OAAO;gBACNC,UAAU,EAAEF,UADN;gBAENG,QAAQ,EAAE;kBACTC,OAAO,EAAEH;gBADA;cAFJ,CAAP;YAMA,CARsD,CAAlD;YAUAZ,OAAO,GAAyB;cACrCgB,SAAS,EAAE,EAD0B;cAErCC,MAAM,EAAE;YAF6B,CAAhC;YAKAC,eAAe,GAAqC,EAApD;;YAEN,OAAOR,eAAe,CAACJ,MAAhB,GAAyB,CAAhC,EAAmC;cAE5Ba,QAAQ,GAAG,EAAX;cACND,eAAe,CAACjD,IAAhB,CAAqByC,eAAe,CAACU,MAAhB,CAAuB,CAAvB,EAA0BD,QAA1B,CAArB;YACA;;YAED;YAAA;YAAA,EAAME,OAAO,CAACC,GAAR,CACLJ,eAAe,CAACpB,GAAhB,CAAoB,UAAMyB,KAAN,EAAW;cAAA;;;;;;;sBAIlB;sBAAA;sBAAA,EAAM,KAAKC,0CAAL,CAChBD,KADgB,EAEhB,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEf,cAAT,KAA2B,KAAKtD,OAAL,CAAauE,mBAAb,CAAiCvD,OAF5C,CAAN;;;sBAAXwB,QAAQ,GAAGnB,SAAX;;;;;;2CAKA;;sBACAgD,KAAK,CAACG,OAAN,CAAc,oBAAQ;wBACrB1B,OAAO,CAACiB,MAAR,CAAehD,IAAf,CAAoB;0BACnB0C,UAAU,EAAEgB,QAAQ,CAACd,UADF;0BAEnBJ,KAAK,EAAE;4BACNmB,IAAI,EAAE,oBADA;4BAENC,OAAO,EAAEC,OAAK,CAACD;0BAFT;wBAFY,CAApB;sBAOA,CARD;sBASA;sBAAA;sBAAA;;;sBAGD;sBACAnC,QAAQ,CAACqC,SAAT,CAAmBL,OAAnB,CAA2B,mBAAO;wBACzB;wBAAA,IAAYM,+BAAZ;wBAAA,IAAwBC,+BAAxB;wBACRjC,OAAO,CAACgB,SAAR,CAAkB/C,IAAlB,CAAuB;0BACtB0C,UAAU,EAAEE,UADU;0BAEtBqB,UAAU,EAAEF,UAFU;0BAGtBG,UAAU,EAAEF;wBAHU,CAAvB;sBAKA,CAPD,GASA;;sBACAvC,QAAQ,CAAC0C,MAAT,CAAgBV,OAAhB,CAAwB,iBAAK;wBAE3B;wBAAA,IAASW,cAAT;wBAAA,IAAeC,oBAAf;wBAAA,IACAzB,6BADA;wBAGDb,OAAO,CAACiB,MAAR,CAAehD,IAAf,CAAoB;0BACnBwC,KAAK,EAAE;4BACNmB,IAAI,EAAES,IADA;4BAENR,OAAO,EAAES;0BAFH,CADY;0BAKnB3B,UAAU,EAAEE;wBALO,CAApB;sBAOA,CAZD;;;;;;eAjC8B;YA8C9B,CA9CD,CADK,CAAN;;;YAAAtC;;YAkDA;YAAA;YAAA,EAAOyB,OAAP;;;;EACA,CAlGY;EAoGb;;;;;;;;EAMa5C,sDAAb,UACCuD,UADD,EAECvC,OAFD,EAE+C;;;;;;YAExB;YAAA;YAAA,EAAM,KAAKC,kBAAL,EAAN;;;YAAhBC,aAAa,GAAGC,SAAhB;;YACN,IAAI,CAACD,aAAL,EAAoB;cACnB,MAAM,IAAIE,KAAJ,CAAU,gBAAV,CAAN;YACA,EAED;;;YACA,IAAI;cACH,KAAK+B,0BAAL,CAAgCnC,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEoC,cAAzC;YACA,CAFD,CAEE,OAAOC,KAAP,EAAc;cACfzD,MAAM,CAACG,KAAP,CAAasD,KAAb;cACA,MAAMA,KAAN;YACA;;YAED3D,kBAAkB,CAAC6D,UAAD,CAAlB;YAGMtB,MAAM,GAAG,IAAI9C,cAAJ,CAAmB;cACjC+C,WAAW,EAAE,KAAKpC,OAAL,CAAaoC,WADO;cAEjCxB,MAAM,EAAE,KAAKZ,OAAL,CAAaY,MAFY;cAGjCyB,eAAe,EAAEjD,mBAAmB;YAHH,CAAnB,CAAT;YAOAiG,YAAY,GAA4B;cAC7C1B,UAAU,EAAEF,UADiC;cAE7C6B,cAAc,EACb,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEhC,cAAT,KAA2B,KAAKtD,OAAL,CAAauE,mBAAb,CAAiCvD;YAHhB,CAAxC;YAKAsB,OAAO,GAAG,IAAI7C,kBAAJ,CAAuB4F,YAAvB,CAAV;;;;;;YAKM;YAAA;YAAA,EAAMlD,MAAM,CAACI,IAAP,CAAYD,OAAZ,CAAN;;;YAAXE,QAAQ,GAAGnB,SAAX;;;;;;;YAEAvB,MAAM,CAACG,KAAP,CAAasF,OAAb;YACA,MAAMA,OAAN;;;YAIO5B,UAAU,GAA+CnB,QAAQ,WAAjE,EAAYsC,UAAU,GAAmCtC,QAAQ,WAAjE,EAAwBuC,UAAU,GAAuBvC,QAAQ,WAAjE,EAAoCgD,MAAM,GAAehD,QAAQ,OAAjE,EAA4CoB,QAAQ,GAAKpB,QAAQ,SAAjE;YACFiC,QAAQ,GAAkC;cAC/CO,UAAU,EAAEF,UADmC;cAE/CrB,UAAU,EAAEE,UAFmC;cAG/C8B,QAAQ,EAAE;gBACT/B,OAAO,EAAEE,QAAQ,CAACC;cADT,CAHqC;cAM/C6B,MAAM,EAAEF,MANuC;cAO/CP,UAAU,EAAEF;YAPmC,CAA1C;YAUN;YAAA;YAAA,EAAON,QAAP;;;;EACA,CAxDY;EA0Db;;;;;;;;;EAOavE,wDAAb,UACCgB,OADD,EACmD;;;;;;YAE5B;YAAA;YAAA,EAAM,KAAKC,kBAAL,EAAN;;;YAAhBC,aAAa,GAAGC,SAAhB;;YACN,IAAI,CAACD,aAAL,EAAoB;cACnB,MAAM,IAAIE,KAAJ,CAAU,gBAAV,CAAN;YACA,EAED;;;YACA,IAAI;cACH,KAAK+B,0BAAL,CAAgCnC,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEoC,cAAzC;YACA,CAFD,CAEE,OAAOC,KAAP,EAAc;cACfzD,MAAM,CAACG,KAAP,CAAasD,KAAb;cACA,MAAMA,KAAN;YACA;;YAGKpB,MAAM,GAAG,IAAI9C,cAAJ,CAAmB;cACjC+C,WAAW,EAAE,KAAKpC,OAAL,CAAaoC,WADO;cAEjCxB,MAAM,EAAE,KAAKZ,OAAL,CAAaY,MAFY;cAGjCyB,eAAe,EAAEjD,mBAAmB;YAHH,CAAnB,CAAT;YAOAuG,kBAAkB,GAA8B;cACrDC,SAAS,EAAE1E,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAE2E,SADiC;cAErDP,cAAc,EACb,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEhC,cAAT,KAA2B,KAAKtD,OAAL,CAAauE,mBAAb,CAAiCvD;YAHR,CAAhD;YAOAsB,OAAO,GAAyB,IAAI5C,oBAAJ,CACrCiG,kBADqC,CAAhC;;;;;;YAOM;YAAA;YAAA,EAAMxD,MAAM,CAACI,IAAP,CAAYD,OAAZ,CAAN;;;YAAXE,QAAQ,GAAGnB,SAAX;;;;;;;YAEAvB,MAAM,CAACG,KAAP,CAAa6F,OAAb;YACA,MAAMA,OAAN;;;YAIOF,SAAS,GAAcpD,QAAQ,UAA/B,EAAWuD,OAAO,GAAKvD,QAAQ,QAA/B;YAEFM,OAAO,GAAwB;cACpCkD,OAAO,EAAED,OAAO,CAACnD,GAAR,CACR,UAACvB,EAAD,EAMC;oBALAsC;oBACAmB;oBACAC;oBACAS;oBACY3B;gBAEZ,OAAO;kBACNJ,UAAU,EAAEE,UADN;kBAENqB,UAAU,EAAEF,UAFN;kBAGNG,UAAU,EAAEF,UAHN;kBAINW,MAAM,EAAEF,MAJF;kBAKNC,QAAQ,EAAE;oBACT/B,OAAO,EAAEG;kBADA;gBALJ,CAAP;cASA,CAjBO,CAD2B;cAoBpCgC,SAAS,EAAED;YApByB,CAA/B;YAuBN;YAAA;YAAA,EAAO9C,OAAP;;;;EACA,CAvEY;EAyEb;;;;;;;;;;EAQa5C,0DAAb,UACC+F,WADD,EAEC/E,OAFD,EAE+C;;;;;;;;;YAE9C,IAAI+E,WAAW,CAAC7C,MAAZ,GAAqB,CAAzB,EAA4B;cAC3B,MAAM,IAAI9B,KAAJ,CAAU,iCAAV,CAAN;YACA;;YAEqB;YAAA;YAAA,EAAM,KAAKH,kBAAL,EAAN;;;YAAhBC,aAAa,GAAGC,SAAhB;;YACN,IAAI,CAACD,aAAL,EAAoB;cACnB,MAAM,IAAIE,KAAJ,CAAU,gBAAV,CAAN;YACA;;YAED,KAAK+B,0BAAL,CAAgCnC,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEoC,cAAzC;;YAGM4C,cAAc,GAAGD,WAAW,CAACE,MAAZ,CAAmB,sBAAU;cACnD,IAAI;gBACHvG,kBAAkB,CAAC6D,UAAD,CAAlB;cACA,CAFD,CAEE,OAAOF,KAAP,EAAc;gBACf,OAAO,IAAP;cACA;YACD,CANsB,CAAjB;;YAON,IAAI2C,cAAc,CAAC9C,MAAf,GAAwB,CAA5B,EAA+B;cAC9B,MAAM,IAAI9B,KAAJ,CAAU,2BAAyB4E,cAAc,CAACE,IAAf,CAAoB,IAApB,CAAnC,CAAN;YACA;;YAEKtD,OAAO,GAAgD;cAC5DgB,SAAS,EAAE,EADiD;cAE5DC,MAAM,EAAE;YAFoD,CAAvD;YAKAsC,iBAAiB,GAAe,EAAhC;YAEFC,KAAK,GAAG,CAAR;;YACJ,OAAOA,KAAK,GAAGL,WAAW,CAAC7C,MAA3B,EAAmC;cAClCiD,iBAAiB,CAACtF,IAAlB,CAAuBkF,WAAW,CAACM,KAAZ,CAAkBD,KAAlB,EAA0BA,KAAK,IAAI,EAAnC,CAAvB;YACA;;YAED;YAAA;YAAA,EAAMnC,OAAO,CAACC,GAAR,CACLiC,iBAAiB,CAACzD,GAAlB,CAAsB,UAAMyB,KAAN,EAAW;cAAA;;;;;;;;;;sBAGpB;sBAAA;sBAAA,EAAM,KAAKmC,6CAAL,CAChBnC,KADgB,EAEhB,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEf,cAAT,KAA2B,KAAKtD,OAAL,CAAauE,mBAAb,CAAiCvD,OAF5C,CAAN;;;sBAAXwB,QAAQ,GAAGiE,SAAX;;;;;;2CAKA;;sBACApC,KAAK,CAACG,OAAN,CAAc,sBAAU;wBACvB,IAAMkC,WAAW,GAAG;0BACnBjD,UAAU,YADS;0BAEnBF,KAAK,EAAE;4BACNmB,IAAI,EAAEiC,OAAK,CAAChC,OADN;4BAENA,OAAO,EAAEgC,OAAK,CAAChC;0BAFT;wBAFY,CAApB;wBAOA7B,OAAO,CAACiB,MAAR,CAAehD,IAAf,CAAoB2F,WAApB;sBACA,CATD;sBAUA;sBAAA;sBAAA;;;sBAGKR,cAAc,GAAG1D,QAAQ,CAAC0C,MAAT,CAAgBtC,GAAhB,CACtB,UAACvB,EAAD,EAAe;4BAAZoC;wBAAiB;sBAAU,CADR,CAAjB;;sBAGN,aAAO,CAACK,SAAR,EAAkB/C,IAAlB,CAAsB6F,KAAtB,CAAsBvF,EAAtB,EAAsBwF,SAClBxC,KAAK,CAAC8B,MAAN,CAAa,cAAE;wBAAI,QAACD,cAAc,CAACY,QAAf,CAAwBC,EAAxB,CAAD;sBAA4B,CAA/C,CADkB,CAAtB;;;;;;;eAzBgC;YA4BhC,CA5BD,CADK,CAAN;;;YAAA1F;;YA+BA;YAAA;YAAA,EAAOyB,OAAP;;;;EACA,CAvEY;EAyEb;;;;;EAGc5C,6DAAd;;;;;;;;YAEsB;YAAA;YAAA,EAAMf,WAAW,CAAC6H,GAAZ,EAAN;;;YAAd5E,WAAW,GAAGf,SAAd;YACN,IAAI,CAACe,WAAL,EAAkB;YAAA;YAAA,EAAO,KAAP;YACZ6E,IAAI,GAAG9H,WAAW,CAAC+H,KAAZ,CAAkB9E,WAAlB,CAAP;YACNtC,MAAM,CAACG,KAAP,CAAa,+CAAb,EAA8DgH,IAA9D;YACA,KAAKjH,OAAL,CAAaoC,WAAb,GAA2B6E,IAA3B;YACA;YAAA;YAAA,EAAO,IAAP;;;;YAEAnH,MAAM,CAACG,KAAP,CAAa,4CAAb,EAA2DkH,OAA3D;YACA;YAAA;YAAA,EAAO,KAAP;;;;;;;;;EAED,CAZa;;EAcNjH,8DAAR;IACC,IAAI,CAAC,KAAKF,OAAL,CAAaU,IAAlB,EAAwB;MACvB,IAAM0G,WAAW,GAChB,4GADD;MAEAtH,MAAM,CAACG,KAAP,CAAamH,WAAb;MACA,MAAM,IAAI9F,KAAJ,CAAU8F,WAAV,CAAN;IACA;;IACD,IAAI,CAAC,KAAKpH,OAAL,CAAaU,IAAb,CAAkBM,OAAvB,EAAgC;MAC/B,IAAMoG,WAAW,GAChB,mHADD;MAEAtH,MAAM,CAACG,KAAP,CAAamH,WAAb;MACA,MAAM,IAAI9F,KAAJ,CAAU8F,WAAV,CAAN;IACA;EACD,CAbO;;EAeAlH,6DAAR,UAA2BmH,mBAA3B,EAAuD;IACtD,IACC,CAAC,CAAC,KAAKrH,OAAL,CAAa4B,cAAd,IAAgC,CAAC,KAAK5B,OAAL,CAAa4B,cAAb,CAA4BZ,OAA9D,KACA,CAACqG,mBAFF,EAGE;MACD,IAAMD,WAAW,GAChB,mHADD;MAEAtH,MAAM,CAACG,KAAP,CAAamH,WAAb;MACA,MAAM,IAAI9F,KAAJ,CAAU8F,WAAV,CAAN;IACA;EACD,CAVO;;EAYAlH,qEAAR,UAAmCoH,8BAAnC,EAA0E;IACzE,IACC,CAAC,CAAC,KAAKtH,OAAL,CAAauE,mBAAd,IACA,CAAC,KAAKvE,OAAL,CAAauE,mBAAb,CAAiCvD,OADnC,KAEA,CAACsG,8BAHF,EAIE;MACD,IAAMF,WAAW,GAChB,yGADD;MAEAtH,MAAM,CAACG,KAAP,CAAamH,WAAb;MACA,MAAM,IAAI9F,KAAJ,CAAU8F,WAAV,CAAN;IACA;EACD,CAXO;;EAaMlH,qFAAd,UACCsD,eADD,EAECF,cAFD,EAEwB;;;;;;YAGjBiE,aAAa,GAAiC;cACnDxB,OAAO,EAAEvC,eAD0C;cAEnD8B,cAAc,EACbhC,cAAc,IAAI,KAAKtD,OAAL,CAAauE,mBAAb,CAAiCvD;YAHD,CAA9C;YAMAmB,MAAM,GAAG,IAAI9C,cAAJ,CAAmB;cACjC+C,WAAW,EAAE,KAAKpC,OAAL,CAAaoC,WADO;cAEjCxB,MAAM,EAAE,KAAKZ,OAAL,CAAaY,MAFY;cAGjCyB,eAAe,EAAEjD,mBAAmB;YAHH,CAAnB,CAAT;YAKAkD,OAAO,GAAG,IAAI9C,uBAAJ,CAA4B+H,aAA5B,CAAV;;;;;;YAIM;YAAA;YAAA,EAAMpF,MAAM,CAACI,IAAP,CAAYD,OAAZ,CAAN;;;YAAXE,QAAQ,GAAGnB,SAAX;;;;;;;YAEA,MAAMmG,OAAN;;;YAED;YAAA;YAAA,EAAOhF,QAAP;;;;EACA,CAzBa;;EA2BAtC,wFAAd,UACC+F,WADD,EAEC3C,cAFD,EAEwB;;;;;;YAGjBmE,oBAAoB,GAAoC;cAC7DC,WAAW,EAAEzB,WADgD;cAE7DX,cAAc,EACbhC,cAAc,IAAI,KAAKtD,OAAL,CAAauE,mBAAb,CAAiCvD;YAHS,CAAxD;YAMAmB,MAAM,GAAG,IAAI9C,cAAJ,CAAmB;cACjC+C,WAAW,EAAE,KAAKpC,OAAL,CAAaoC,WADO;cAEjCxB,MAAM,EAAE,KAAKZ,OAAL,CAAaY,MAFY;cAGjCyB,eAAe,EAAEjD,mBAAmB;YAHH,CAAnB,CAAT;YAKAkD,OAAO,GAAG,IAAI3C,0BAAJ,CAA+B8H,oBAA/B,CAAV;;;;;;YAIM;YAAA;YAAA,EAAMtF,MAAM,CAACI,IAAP,CAAYD,OAAZ,CAAN;;;YAAXE,QAAQ,GAAGnB,SAAX;;;;;;;YAEA,MAAMsG,OAAN;;;YAED;YAAA;YAAA,EAAOnF,QAAP;;;;EACA,CAzBa;;EAznBPtC,yCAAW,KAAX;EACAA,8CAAgB,uBAAhB;EAkpBR;AAAC,CAppBD;;SAAaA","names":["camelcaseKeys","ConsoleLogger","Logger","Credentials","getAmplifyUserAgent","LocationClient","SearchPlaceIndexForTextCommand","SearchPlaceIndexForPositionCommand","BatchPutGeofenceCommand","GetGeofenceCommand","ListGeofencesCommand","BatchDeleteGeofenceCommand","validateGeofenceId","validateGeofencesInput","logger","config","_config","debug","AmazonLocationServiceProvider","CATEGORY","PROVIDER_NAME","Object","assign","_verifyMapResources","mapStyles","availableMaps","maps","items","region","mapName","style","push","default","text","options","_ensureCredentials","credentialsOK","_a","Error","_verifySearchIndex","searchIndexName","locationServiceInput","Text","IndexName","search_indices","FilterCountries","countries","MaxResults","maxResults","BiasPosition","FilterBBox","client","credentials","customUserAgent","command","send","response","error_1","PascalResults","Results","map","Place","results","deep","coordinates","Position","error_2","geofences","length","_verifyGeofenceCollections","collectionName","error","PascalGeofences","geofenceId","polygon","GeofenceId","Geometry","Polygon","successes","errors","geofenceBatches","apiLimit","splice","Promise","all","batch","_AmazonLocationServiceBatchPutGeofenceCall","geofenceCollections","forEach","geofence","code","message","error_3","Successes","CreateTime","UpdateTime","createTime","updateTime","Errors","Code","Message","commandInput","CollectionName","error_4","Status","geometry","status","listGeofencesInput","NextToken","nextToken","error_5","Entries","entries","geofenceIds","badGeofenceIds","filter","join","geofenceIdBatches","count","slice","_AmazonLocationServiceBatchDeleteGeofenceCall","_b","errorObject","error_6","apply","__spread","includes","Id","get","cred","shear","error_7","errorString","optionalSearchIndex","optionalGeofenceCollectionName","geofenceInput","error_8","deleteGeofencesInput","GeofenceIds","error_9"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-amplify\\geo\\src\\Providers\\AmazonLocationServiceProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport camelcaseKeys from 'camelcase-keys';\n\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport {\n\tPlace as PlaceResult,\n\tSearchPlaceIndexForTextCommandInput,\n\tLocationClient,\n\tSearchPlaceIndexForTextCommand,\n\tSearchPlaceIndexForPositionCommand,\n\tSearchPlaceIndexForPositionCommandInput,\n\tBatchPutGeofenceCommand,\n\tBatchPutGeofenceCommandInput,\n\tBatchPutGeofenceRequestEntry,\n\tBatchPutGeofenceCommandOutput,\n\tGetGeofenceCommand,\n\tGetGeofenceCommandInput,\n\tGetGeofenceCommandOutput,\n\tListGeofencesCommand,\n\tListGeofencesCommandInput,\n\tListGeofencesCommandOutput,\n\tBatchDeleteGeofenceCommand,\n\tBatchDeleteGeofenceCommandInput,\n\tBatchDeleteGeofenceCommandOutput,\n} from '@aws-sdk/client-location';\n\nimport { validateGeofenceId, validateGeofencesInput } from '../util';\n\nimport {\n\tGeoConfig,\n\tSearchByTextOptions,\n\tSearchByCoordinatesOptions,\n\tGeoProvider,\n\tPlace,\n\tAmazonLocationServiceMapStyle,\n\tCoordinates,\n\tGeofenceId,\n\tGeofenceInput,\n\tAmazonLocationServiceGeofenceOptions,\n\tAmazonLocationServiceListGeofenceOptions,\n\tListGeofenceResults,\n\tAmazonLocationServiceGeofenceStatus,\n\tSaveGeofencesResults,\n\tAmazonLocationServiceGeofence,\n\tGeofencePolygon,\n\tAmazonLocationServiceDeleteGeofencesResults,\n} from '../types';\n\nconst logger = new Logger('AmazonLocationServiceProvider');\n\nexport class AmazonLocationServiceProvider implements GeoProvider {\n\tstatic CATEGORY = 'Geo';\n\tstatic PROVIDER_NAME = 'AmazonLocationService';\n\n\t/**\n\t * @private\n\t */\n\tprivate _config;\n\n\t/**\n\t * Initialize Geo with AWS configurations\n\t * @param {Object} config - Configuration object for Geo\n\t */\n\tconstructor(config?: GeoConfig) {\n\t\tthis._config = config ? config : {};\n\t\tlogger.debug('Geo Options', this._config);\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t * @returns {string} name of the category\n\t */\n\tpublic getCategory(): string {\n\t\treturn AmazonLocationServiceProvider.CATEGORY;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t * @returns {string} name of the provider\n\t */\n\tpublic getProviderName(): string {\n\t\treturn AmazonLocationServiceProvider.PROVIDER_NAME;\n\t}\n\n\t/**\n\t * Configure Geo part with aws configuration\n\t * @param {Object} config - Configuration of the Geo\n\t * @return {Object} - Current configuration\n\t */\n\tpublic configure(config?): object {\n\t\tlogger.debug('configure Amazon Location Service Provider', config);\n\t\tif (!config) return this._config;\n\t\tthis._config = Object.assign({}, this._config, config);\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * Get the map resources that are currently available through the provider\n\t * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n\t */\n\tpublic getAvailableMaps(): AmazonLocationServiceMapStyle[] {\n\t\tthis._verifyMapResources();\n\n\t\tconst mapStyles: AmazonLocationServiceMapStyle[] = [];\n\t\tconst availableMaps = this._config.maps.items;\n\t\tconst region = this._config.region;\n\n\t\tfor (const mapName in availableMaps) {\n\t\t\tconst style = availableMaps[mapName].style;\n\t\t\tmapStyles.push({ mapName, style, region });\n\t\t}\n\n\t\treturn mapStyles;\n\t}\n\n\t/**\n\t * Get the map resource set as default in amplify config\n\t * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n\t */\n\tpublic getDefaultMap(): AmazonLocationServiceMapStyle {\n\t\tthis._verifyMapResources();\n\n\t\tconst mapName = this._config.maps.default;\n\t\tconst style = this._config.maps.items[mapName].style;\n\t\tconst region = this._config.region;\n\n\t\treturn { mapName, style, region };\n\t}\n\n\t/**\n\t * Search by text input with optional parameters\n\t * @param  {string} text - The text string that is to be searched for\n\t * @param  {SearchByTextOptions} options? - Optional parameters to the search\n\t * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n\t */\n\tpublic async searchByText(\n\t\ttext: string,\n\t\toptions?: SearchByTextOptions\n\t): Promise<Place[]> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifySearchIndex(options?.searchIndexName);\n\n\t\t/**\n\t\t * Setup the searchInput\n\t\t */\n\t\tconst locationServiceInput: SearchPlaceIndexForTextCommandInput = {\n\t\t\tText: text,\n\t\t\tIndexName: this._config.search_indices.default,\n\t\t};\n\n\t\t/**\n\t\t * Map search options to Amazon Location Service input object\n\t\t */\n\t\tif (options) {\n\t\t\tlocationServiceInput.FilterCountries = options.countries;\n\t\t\tlocationServiceInput.MaxResults = options.maxResults;\n\n\t\t\tif (options.searchIndexName) {\n\t\t\t\tlocationServiceInput.IndexName = options.searchIndexName;\n\t\t\t}\n\n\t\t\tif (options['biasPosition'] && options['searchAreaConstraints']) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'BiasPosition and SearchAreaConstraints are mutually exclusive, please remove one or the other from the options object'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (options['biasPosition']) {\n\t\t\t\tlocationServiceInput.BiasPosition = options['biasPosition'];\n\t\t\t}\n\t\t\tif (options['searchAreaConstraints']) {\n\t\t\t\tlocationServiceInput.FilterBBox = options['searchAreaConstraints'];\n\t\t\t}\n\t\t}\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t * The response from Amazon Location Service is a \"Results\" array of objects with a single `Place` item,\n\t\t * which are Place objects in PascalCase.\n\t\t * Here we want to flatten that to an array of results and change them to camelCase\n\t\t */\n\t\tconst PascalResults: PlaceResult[] = response.Results.map(\n\t\t\tresult => result.Place\n\t\t);\n\t\tconst results: Place[] = camelcaseKeys(PascalResults, {\n\t\t\tdeep: true,\n\t\t}) as undefined as Place[];\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Reverse geocoding search via a coordinate point on the map\n\t * @param coordinates - Coordinates array for the search input\n\t * @param options - Options parameters for the search\n\t * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n\t */\n\tpublic async searchByCoordinates(\n\t\tcoordinates: Coordinates,\n\t\toptions?: SearchByCoordinatesOptions\n\t): Promise<Place> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifySearchIndex(options?.searchIndexName);\n\n\t\tconst locationServiceInput: SearchPlaceIndexForPositionCommandInput = {\n\t\t\tPosition: coordinates,\n\t\t\tIndexName: this._config.search_indices.default,\n\t\t};\n\n\t\tif (options) {\n\t\t\tif (options.searchIndexName) {\n\t\t\t\tlocationServiceInput.IndexName = options.searchIndexName;\n\t\t\t}\n\t\t\tlocationServiceInput.MaxResults = options.maxResults;\n\t\t}\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst command = new SearchPlaceIndexForPositionCommand(\n\t\t\tlocationServiceInput\n\t\t);\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t * The response from Amazon Location Service is a \"Results\" array with a single `Place` object\n\t\t * which are Place objects in PascalCase.\n\t\t * Here we want to flatten that to an array of results and change them to camelCase\n\t\t */\n\t\tconst PascalResults = response.Results.map(result => result.Place);\n\t\tconst results: Place = camelcaseKeys(PascalResults[0], {\n\t\t\tdeep: true,\n\t\t}) as any as Place;\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Create geofences inside of a geofence collection\n\t * @param geofences - Array of geofence objects to create\n\t * @param options? - Optional parameters for creating geofences\n\t * @returns {Promise<AmazonLocationServiceSaveGeofencesResults>} - Promise that resolves to an object with:\n\t *   successes: list of geofences successfully created\n\t *   errors: list of geofences that failed to create\n\t */\n\tpublic async saveGeofences(\n\t\tgeofences: GeofenceInput[],\n\t\toptions?: AmazonLocationServiceGeofenceOptions\n\t): Promise<SaveGeofencesResults> {\n\t\tif (geofences.length < 1) {\n\t\t\tthrow new Error('Geofence input array is empty');\n\t\t}\n\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\t// Verify geofence collection exists in aws-config.js\n\t\ttry {\n\t\t\tthis._verifyGeofenceCollections(options?.collectionName);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\tvalidateGeofencesInput(geofences);\n\n\t\t// Convert geofences to PascalCase for Amazon Location Service format\n\t\tconst PascalGeofences: BatchPutGeofenceRequestEntry[] = geofences.map(\n\t\t\t({ geofenceId, geometry: { polygon } }) => {\n\t\t\t\treturn {\n\t\t\t\t\tGeofenceId: geofenceId,\n\t\t\t\t\tGeometry: {\n\t\t\t\t\t\tPolygon: polygon,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t);\n\t\tconst results: SaveGeofencesResults = {\n\t\t\tsuccesses: [],\n\t\t\terrors: [],\n\t\t};\n\n\t\tconst geofenceBatches: BatchPutGeofenceRequestEntry[][] = [];\n\n\t\twhile (PascalGeofences.length > 0) {\n\t\t\t// Splice off 10 geofences from input clone due to Amazon Location Service API limit\n\t\t\tconst apiLimit = 10;\n\t\t\tgeofenceBatches.push(PascalGeofences.splice(0, apiLimit));\n\t\t}\n\n\t\tawait Promise.all(\n\t\t\tgeofenceBatches.map(async batch => {\n\t\t\t\t// Make API call for the 10 geofences\n\t\t\t\tlet response: BatchPutGeofenceCommandOutput;\n\t\t\t\ttry {\n\t\t\t\t\tresponse = await this._AmazonLocationServiceBatchPutGeofenceCall(\n\t\t\t\t\t\tbatch,\n\t\t\t\t\t\toptions?.collectionName || this._config.geofenceCollections.default\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// If the API call fails, add the geofences to the errors array and move to next batch\n\t\t\t\t\tbatch.forEach(geofence => {\n\t\t\t\t\t\tresults.errors.push({\n\t\t\t\t\t\t\tgeofenceId: geofence.GeofenceId,\n\t\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\t\tcode: 'APIConnectionError',\n\t\t\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Push all successes to results\n\t\t\t\tresponse.Successes.forEach(success => {\n\t\t\t\t\tconst { GeofenceId, CreateTime, UpdateTime } = success;\n\t\t\t\t\tresults.successes.push({\n\t\t\t\t\t\tgeofenceId: GeofenceId,\n\t\t\t\t\t\tcreateTime: CreateTime,\n\t\t\t\t\t\tupdateTime: UpdateTime,\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t// Push all errors to results\n\t\t\t\tresponse.Errors.forEach(error => {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tError: { Code, Message },\n\t\t\t\t\t\tGeofenceId,\n\t\t\t\t\t} = error;\n\t\t\t\t\tresults.errors.push({\n\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\tcode: Code,\n\t\t\t\t\t\t\tmessage: Message,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgeofenceId: GeofenceId,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Get geofence from a geofence collection\n\t * @param geofenceId:string\n\t * @param options?: Optional parameters for getGeofence\n\t * @returns {Promise<AmazonLocationServiceGeofence>} - Promise that resolves to a geofence object\n\t */\n\tpublic async getGeofence(\n\t\tgeofenceId: GeofenceId,\n\t\toptions?: AmazonLocationServiceGeofenceOptions\n\t): Promise<AmazonLocationServiceGeofence> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\t// Verify geofence collection exists in aws-config.js\n\t\ttry {\n\t\t\tthis._verifyGeofenceCollections(options?.collectionName);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\tvalidateGeofenceId(geofenceId);\n\n\t\t// Create Amazon Location Service Client\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\t// Create Amazon Location Service command\n\t\tconst commandInput: GetGeofenceCommandInput = {\n\t\t\tGeofenceId: geofenceId,\n\t\t\tCollectionName:\n\t\t\t\toptions?.collectionName || this._config.geofenceCollections.default,\n\t\t};\n\t\tconst command = new GetGeofenceCommand(commandInput);\n\n\t\t// Make API call\n\t\tlet response: GetGeofenceCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Convert response to camelCase for return\n\t\tconst { GeofenceId, CreateTime, UpdateTime, Status, Geometry } = response;\n\t\tconst geofence: AmazonLocationServiceGeofence = {\n\t\t\tcreateTime: CreateTime,\n\t\t\tgeofenceId: GeofenceId,\n\t\t\tgeometry: {\n\t\t\t\tpolygon: Geometry.Polygon as GeofencePolygon,\n\t\t\t},\n\t\t\tstatus: Status as AmazonLocationServiceGeofenceStatus,\n\t\t\tupdateTime: UpdateTime,\n\t\t};\n\n\t\treturn geofence;\n\t}\n\n\t/**\n\t * List geofences from a geofence collection\n\t * @param  options?: ListGeofenceOptions\n\t * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n\t *   entries: list of geofences - 100 geofences are listed per page\n\t *   nextToken: token for next page of geofences\n\t */\n\tpublic async listGeofences(\n\t\toptions?: AmazonLocationServiceListGeofenceOptions\n\t): Promise<ListGeofenceResults> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\t// Verify geofence collection exists in aws-config.js\n\t\ttry {\n\t\t\tthis._verifyGeofenceCollections(options?.collectionName);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Create Amazon Location Service Client\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\t// Create Amazon Location Service input\n\t\tconst listGeofencesInput: ListGeofencesCommandInput = {\n\t\t\tNextToken: options?.nextToken,\n\t\t\tCollectionName:\n\t\t\t\toptions?.collectionName || this._config.geofenceCollections.default,\n\t\t};\n\n\t\t// Create Amazon Location Service command\n\t\tconst command: ListGeofencesCommand = new ListGeofencesCommand(\n\t\t\tlistGeofencesInput\n\t\t);\n\n\t\t// Make API call\n\t\tlet response: ListGeofencesCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Convert response to camelCase for return\n\t\tconst { NextToken, Entries } = response;\n\n\t\tconst results: ListGeofenceResults = {\n\t\t\tentries: Entries.map(\n\t\t\t\t({\n\t\t\t\t\tGeofenceId,\n\t\t\t\t\tCreateTime,\n\t\t\t\t\tUpdateTime,\n\t\t\t\t\tStatus,\n\t\t\t\t\tGeometry: { Polygon },\n\t\t\t\t}) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgeofenceId: GeofenceId,\n\t\t\t\t\t\tcreateTime: CreateTime,\n\t\t\t\t\t\tupdateTime: UpdateTime,\n\t\t\t\t\t\tstatus: Status,\n\t\t\t\t\t\tgeometry: {\n\t\t\t\t\t\t\tpolygon: Polygon as GeofencePolygon,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t),\n\t\t\tnextToken: NextToken,\n\t\t};\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Delete geofences from a geofence collection\n\t * @param geofenceIds: string|string[]\n\t * @param options?: GeofenceOptions\n\t * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n\t *  successes: list of geofences successfully deleted\n\t *  errors: list of geofences that failed to delete\n\t */\n\tpublic async deleteGeofences(\n\t\tgeofenceIds: string[],\n\t\toptions?: AmazonLocationServiceGeofenceOptions\n\t): Promise<AmazonLocationServiceDeleteGeofencesResults> {\n\t\tif (geofenceIds.length < 1) {\n\t\t\tthrow new Error('GeofenceId input array is empty');\n\t\t}\n\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifyGeofenceCollections(options?.collectionName);\n\n\t\t// Validate all geofenceIds are valid\n\t\tconst badGeofenceIds = geofenceIds.filter(geofenceId => {\n\t\t\ttry {\n\t\t\t\tvalidateGeofenceId(geofenceId);\n\t\t\t} catch (error) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tif (badGeofenceIds.length > 0) {\n\t\t\tthrow new Error(`Invalid geofence ids: ${badGeofenceIds.join(', ')}`);\n\t\t}\n\n\t\tconst results: AmazonLocationServiceDeleteGeofencesResults = {\n\t\t\tsuccesses: [],\n\t\t\terrors: [],\n\t\t};\n\n\t\tconst geofenceIdBatches: string[][] = [];\n\n\t\tlet count = 0;\n\t\twhile (count < geofenceIds.length) {\n\t\t\tgeofenceIdBatches.push(geofenceIds.slice(count, (count += 10)));\n\t\t}\n\n\t\tawait Promise.all(\n\t\t\tgeofenceIdBatches.map(async batch => {\n\t\t\t\tlet response;\n\t\t\t\ttry {\n\t\t\t\t\tresponse = await this._AmazonLocationServiceBatchDeleteGeofenceCall(\n\t\t\t\t\t\tbatch,\n\t\t\t\t\t\toptions?.collectionName || this._config.geofenceCollections.default\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// If the API call fails, add the geofences to the errors array and move to next batch\n\t\t\t\t\tbatch.forEach(geofenceId => {\n\t\t\t\t\t\tconst errorObject = {\n\t\t\t\t\t\t\tgeofenceId,\n\t\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\t\tcode: error.message,\n\t\t\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresults.errors.push(errorObject);\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst badGeofenceIds = response.Errors.map(\n\t\t\t\t\t({ geofenceId }) => geofenceId\n\t\t\t\t);\n\t\t\t\tresults.successes.push(\n\t\t\t\t\t...batch.filter(Id => !badGeofenceIds.includes(Id))\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t\treturn results;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tprivate async _ensureCredentials(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return false;\n\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\tlogger.debug('Set credentials for storage. Credentials are:', cred);\n\t\t\tthis._config.credentials = cred;\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tlogger.debug('Ensure credentials error. Credentials are:', error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate _verifyMapResources() {\n\t\tif (!this._config.maps) {\n\t\t\tconst errorString =\n\t\t\t\t\"No map resources found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t\tif (!this._config.maps.default) {\n\t\t\tconst errorString =\n\t\t\t\t\"No default map resource found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t}\n\n\tprivate _verifySearchIndex(optionalSearchIndex?: string) {\n\t\tif (\n\t\t\t(!this._config.search_indices || !this._config.search_indices.default) &&\n\t\t\t!optionalSearchIndex\n\t\t) {\n\t\t\tconst errorString =\n\t\t\t\t'No Search Index found in amplify config, please run `amplify add geo` to create one and run `amplify push` after.';\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t}\n\n\tprivate _verifyGeofenceCollections(optionalGeofenceCollectionName?: string) {\n\t\tif (\n\t\t\t(!this._config.geofenceCollections ||\n\t\t\t\t!this._config.geofenceCollections.default) &&\n\t\t\t!optionalGeofenceCollectionName\n\t\t) {\n\t\t\tconst errorString =\n\t\t\t\t'No Geofence Collections found, please run `amplify add geo` to create one and run `amplify push` after.';\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t}\n\n\tprivate async _AmazonLocationServiceBatchPutGeofenceCall(\n\t\tPascalGeofences: BatchPutGeofenceRequestEntry[],\n\t\tcollectionName?: string\n\t) {\n\t\t// Create the BatchPutGeofence input\n\t\tconst geofenceInput: BatchPutGeofenceCommandInput = {\n\t\t\tEntries: PascalGeofences,\n\t\t\tCollectionName:\n\t\t\t\tcollectionName || this._config.geofenceCollections.default,\n\t\t};\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst command = new BatchPutGeofenceCommand(geofenceInput);\n\n\t\tlet response: BatchPutGeofenceCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t\treturn response;\n\t}\n\n\tprivate async _AmazonLocationServiceBatchDeleteGeofenceCall(\n\t\tgeofenceIds: string[],\n\t\tcollectionName?: string\n\t): Promise<BatchDeleteGeofenceCommandOutput> {\n\t\t// Create the BatchDeleteGeofence input\n\t\tconst deleteGeofencesInput: BatchDeleteGeofenceCommandInput = {\n\t\t\tGeofenceIds: geofenceIds,\n\t\t\tCollectionName:\n\t\t\t\tcollectionName || this._config.geofenceCollections.default,\n\t\t};\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst command = new BatchDeleteGeofenceCommand(deleteGeofencesInput);\n\n\t\tlet response: BatchDeleteGeofenceCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t\treturn response;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}