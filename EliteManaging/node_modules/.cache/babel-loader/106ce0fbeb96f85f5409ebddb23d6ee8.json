{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartTextTranslationJobRequest, StartTextTranslationJobResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartTextTranslationJobCommand, serializeAws_json1_1StartTextTranslationJobCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Starts an asynchronous batch translation job. Batch translation jobs can be used to\n *       translate large volumes of text across multiple documents at once. For more information, see\n *         <a>async</a>.</p>\n *\n *          <p>Batch translation jobs can be described with the <a>DescribeTextTranslationJob</a> operation, listed with the <a>ListTextTranslationJobs</a> operation, and stopped with the <a>StopTextTranslationJob</a> operation.</p>\n *          <note>\n *             <p>Amazon Translate does not support batch translation of multiple source languages at once.</p>\n *          </note>\n */\n\nvar StartTextTranslationJobCommand =\n/** @class */\nfunction (_super) {\n  __extends(StartTextTranslationJobCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StartTextTranslationJobCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StartTextTranslationJobCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"TranslateClient\";\n    var commandName = \"StartTextTranslationJobCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartTextTranslationJobRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartTextTranslationJobResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StartTextTranslationJobCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartTextTranslationJobCommand(input, context);\n  };\n\n  StartTextTranslationJobCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartTextTranslationJobCommand(output, context);\n  };\n\n  return StartTextTranslationJobCommand;\n}($Command);\n\nexport { StartTextTranslationJobCommand };","map":{"version":3,"mappings":";AACA,SAASA,8BAAT,EAAyCC,+BAAzC,QAAgF,oBAAhF;AACA,SACEC,oDADF,EAEEC,kDAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;AAUA;AAAA;AAAA;EAAoDC,kDAApD,CAKE;EACA;;;EAEA,wCAAqBC,KAArB,EAA+D;IAA/D,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAA0C,CAG7D;EACD;EAED;;;;;EAGAC,uEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,iBAAnB;IACA,IAAMC,WAAW,GAAG,gCAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,8BAA8B,CAAC0B,kBAJD;MAKvDC,wBAAwB,EAAE1B,+BAA+B,CAACyB;IALH,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,qDAAR,UAAkBH,KAAlB,EAA8DuB,OAA9D,EAAqF;IACnF,OAAO5B,kDAAkD,CAACK,KAAD,EAAQuB,OAAR,CAAzD;EACD,CAFO;;EAIApB,uDAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO7B,oDAAoD,CAAC8B,MAAD,EAASD,OAAT,CAA3D;EACD,CAFO;;EAMV;AAAC,CAtDD,CAAoDzB,QAApD","names":["StartTextTranslationJobRequest","StartTextTranslationJobResponse","deserializeAws_json1_1StartTextTranslationJobCommand","serializeAws_json1_1StartTextTranslationJobCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","StartTextTranslationJobCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-translate\\commands\\StartTextTranslationJobCommand.ts"],"sourcesContent":["import { ServiceInputTypes, ServiceOutputTypes, TranslateClientResolvedConfig } from \"../TranslateClient\";\nimport { StartTextTranslationJobRequest, StartTextTranslationJobResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1StartTextTranslationJobCommand,\n  serializeAws_json1_1StartTextTranslationJobCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type StartTextTranslationJobCommandInput = StartTextTranslationJobRequest;\nexport type StartTextTranslationJobCommandOutput = StartTextTranslationJobResponse & __MetadataBearer;\n\n/**\n * <p>Starts an asynchronous batch translation job. Batch translation jobs can be used to\n *       translate large volumes of text across multiple documents at once. For more information, see\n *         <a>async</a>.</p>\n *\n *          <p>Batch translation jobs can be described with the <a>DescribeTextTranslationJob</a> operation, listed with the <a>ListTextTranslationJobs</a> operation, and stopped with the <a>StopTextTranslationJob</a> operation.</p>\n *          <note>\n *             <p>Amazon Translate does not support batch translation of multiple source languages at once.</p>\n *          </note>\n */\nexport class StartTextTranslationJobCommand extends $Command<\n  StartTextTranslationJobCommandInput,\n  StartTextTranslationJobCommandOutput,\n  TranslateClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: StartTextTranslationJobCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: TranslateClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<StartTextTranslationJobCommandInput, StartTextTranslationJobCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"TranslateClient\";\n    const commandName = \"StartTextTranslationJobCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: StartTextTranslationJobRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartTextTranslationJobResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: StartTextTranslationJobCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1StartTextTranslationJobCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<StartTextTranslationJobCommandOutput> {\n    return deserializeAws_json1_1StartTextTranslationJobCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}