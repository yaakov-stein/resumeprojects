{"ast":null,"code":"var __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { browserOrNode, isWebWorker } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\n\nvar ReachabilityNavigator =\n/** @class */\nfunction () {\n  function ReachabilityNavigator() {}\n\n  ReachabilityNavigator.prototype.networkMonitor = function (netInfo) {\n    if (browserOrNode().isNode) {\n      return Observable.from([{\n        online: true\n      }]);\n    }\n\n    var globalObj = isWebWorker() ? self : window;\n    return new Observable(function (observer) {\n      observer.next({\n        online: globalObj.navigator.onLine\n      });\n\n      var notifyOnline = function () {\n        return observer.next({\n          online: true\n        });\n      };\n\n      var notifyOffline = function () {\n        return observer.next({\n          online: false\n        });\n      };\n\n      globalObj.addEventListener('online', notifyOnline);\n      globalObj.addEventListener('offline', notifyOffline);\n\n      ReachabilityNavigator._observers.push(observer);\n\n      return function () {\n        globalObj.removeEventListener('online', notifyOnline);\n        globalObj.removeEventListener('offline', notifyOffline);\n        ReachabilityNavigator._observers = ReachabilityNavigator._observers.filter(function (_observer) {\n          return _observer !== observer;\n        });\n      };\n    });\n  }; // expose observers to simulate offline mode for integration testing\n\n\n  ReachabilityNavigator._observerOverride = function (status) {\n    var e_1, _a;\n\n    var _loop_1 = function (observer) {\n      if (observer.closed) {\n        ReachabilityNavigator._observers = ReachabilityNavigator._observers.filter(function (_observer) {\n          return _observer !== observer;\n        });\n        return \"continue\";\n      }\n\n      observer.next(status);\n    };\n\n    try {\n      for (var _b = __values(ReachabilityNavigator._observers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var observer = _c.value;\n\n        _loop_1(observer);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  ReachabilityNavigator._observers = [];\n  return ReachabilityNavigator;\n}();\n\nexport default ReachabilityNavigator;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAAA,SAASA,aAAT,EAAwBC,WAAxB,QAA2C,mBAA3C;AACA,OAAOC,UAAP,MAA0C,mBAA1C;;AAMA;AAAA;AAAA;EAAA,kCA8CC;;EAzCAC,2DAAeC,OAAf,EAA4B;IAC3B,IAAIJ,aAAa,GAAGK,MAApB,EAA4B;MAC3B,OAAOH,UAAU,CAACI,IAAX,CAAgB,CAAC;QAAEC,MAAM,EAAE;MAAV,CAAD,CAAhB,CAAP;IACA;;IAED,IAAMC,SAAS,GAAGP,WAAW,KAAKQ,IAAL,GAAYC,MAAzC;IAEA,OAAO,IAAIR,UAAJ,CAAe,oBAAQ;MAC7BS,QAAQ,CAACC,IAAT,CAAc;QAAEL,MAAM,EAAEC,SAAS,CAACK,SAAV,CAAoBC;MAA9B,CAAd;;MAEA,IAAMC,YAAY,GAAG;QAAM,eAAQ,CAACH,IAAT,CAAc;UAAEL,MAAM,EAAE;QAAV,CAAd;MAA+B,CAA1D;;MACA,IAAMS,aAAa,GAAG;QAAM,eAAQ,CAACJ,IAAT,CAAc;UAAEL,MAAM,EAAE;QAAV,CAAd;MAAgC,CAA5D;;MAEAC,SAAS,CAACS,gBAAV,CAA2B,QAA3B,EAAqCF,YAArC;MACAP,SAAS,CAACS,gBAAV,CAA2B,SAA3B,EAAsCD,aAAtC;;MAEAb,qBAAqB,CAACe,UAAtB,CAAiCC,IAAjC,CAAsCR,QAAtC;;MAEA,OAAO;QACNH,SAAS,CAACY,mBAAV,CAA8B,QAA9B,EAAwCL,YAAxC;QACAP,SAAS,CAACY,mBAAV,CAA8B,SAA9B,EAAyCJ,aAAzC;QAEAb,qBAAqB,CAACe,UAAtB,GAAmCf,qBAAqB,CAACe,UAAtB,CAAiCG,MAAjC,CAClC,qBAAS;UAAI,gBAAS,KAAKV,QAAd;QAAsB,CADD,CAAnC;MAGA,CAPD;IAQA,CAnBM,CAAP;EAoBA,CA3BD,CALD,CAkCC;;;EACeR,0CAAf,UAAiCmB,MAAjC,EAAsD;;;4BAC1CX,UAAQ;MAClB,IAAIA,QAAQ,CAACY,MAAb,EAAqB;QACpBpB,qBAAqB,CAACe,UAAtB,GAAmCf,qBAAqB,CAACe,UAAtB,CAAiCG,MAAjC,CAClC,qBAAS;UAAI,gBAAS,KAAKV,QAAd;QAAsB,CADD,CAAnC;;MAIA;;MACDA,QAAQ,CAACC,IAAT,CAAcU,MAAd;;;;MAPD,KAAuB,uCAAqB,CAACJ,UAAtB,GAAgCM,cAAvD,EAAuD,QAAvD,EAAuDA,cAAvD,EAAuD;QAAlD,IAAMb,QAAQ,WAAd;;gBAAMA;MAQV;;;;;;;;;;;;EACD,CAVc;;EAlCAR,mCAEX,EAFW;EA6ChB;AAAC,CA9CD;;eAAqBA","names":["browserOrNode","isWebWorker","Observable","ReachabilityNavigator","netInfo","isNode","from","online","globalObj","self","window","observer","next","navigator","onLine","notifyOnline","notifyOffline","addEventListener","_observers","push","removeEventListener","filter","status","closed","_c"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-amplify\\core\\src\\Util\\Reachability.ts"],"sourcesContent":["import { browserOrNode, isWebWorker } from '@aws-amplify/core';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\n\ntype NetworkStatus = {\n\tonline: boolean;\n};\n\nexport default class ReachabilityNavigator implements Reachability {\n\tprivate static _observers: Array<\n\t\tZenObservable.SubscriptionObserver<NetworkStatus>\n\t> = [];\n\n\tnetworkMonitor(netInfo?: any): Observable<NetworkStatus> {\n\t\tif (browserOrNode().isNode) {\n\t\t\treturn Observable.from([{ online: true }]);\n\t\t}\n\n\t\tconst globalObj = isWebWorker() ? self : window;\n\n\t\treturn new Observable(observer => {\n\t\t\tobserver.next({ online: globalObj.navigator.onLine });\n\n\t\t\tconst notifyOnline = () => observer.next({ online: true });\n\t\t\tconst notifyOffline = () => observer.next({ online: false });\n\n\t\t\tglobalObj.addEventListener('online', notifyOnline);\n\t\t\tglobalObj.addEventListener('offline', notifyOffline);\n\n\t\t\tReachabilityNavigator._observers.push(observer);\n\n\t\t\treturn () => {\n\t\t\t\tglobalObj.removeEventListener('online', notifyOnline);\n\t\t\t\tglobalObj.removeEventListener('offline', notifyOffline);\n\n\t\t\t\tReachabilityNavigator._observers = ReachabilityNavigator._observers.filter(\n\t\t\t\t\t_observer => _observer !== observer\n\t\t\t\t);\n\t\t\t};\n\t\t});\n\t}\n\n\t// expose observers to simulate offline mode for integration testing\n\tprivate static _observerOverride(status: NetworkStatus): void {\n\t\tfor (const observer of ReachabilityNavigator._observers) {\n\t\t\tif (observer.closed) {\n\t\t\t\tReachabilityNavigator._observers = ReachabilityNavigator._observers.filter(\n\t\t\t\t\t_observer => _observer !== observer\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tobserver.next(status);\n\t\t}\n\t}\n}\n\ninterface Reachability {\n\tnetworkMonitor(netInfo?: any): Observable<NetworkStatus>;\n}\n"]},"metadata":{},"sourceType":"module"}