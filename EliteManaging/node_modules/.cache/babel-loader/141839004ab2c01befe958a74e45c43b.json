{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { formatUrl } from \"@aws-sdk/util-format-url\";\nimport { S3RequestPresigner } from \"./presigner\";\nexport var getSignedUrl = function (client, command, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    var s3Presigner, presignInterceptMiddleware, middlewareName, presigned, output;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          s3Presigner = new S3RequestPresigner(__assign({}, client.config));\n\n          presignInterceptMiddleware = function (next, context) {\n            return function (args) {\n              return __awaiter(void 0, void 0, void 0, function () {\n                var request, presigned;\n\n                var _a, _b;\n\n                return __generator(this, function (_c) {\n                  switch (_c.label) {\n                    case 0:\n                      request = args.request;\n\n                      if (!HttpRequest.isInstance(request)) {\n                        throw new Error(\"Request to be presigned is not an valid HTTP request.\");\n                      } // Retry information headers are not meaningful in presigned URLs\n\n\n                      delete request.headers[\"amz-sdk-invocation-id\"];\n                      delete request.headers[\"amz-sdk-request\"];\n                      return [4\n                      /*yield*/\n                      , s3Presigner.presign(request, __assign(__assign({}, options), {\n                        signingRegion: (_a = options.signingRegion) !== null && _a !== void 0 ? _a : context[\"signing_region\"],\n                        signingService: (_b = options.signingService) !== null && _b !== void 0 ? _b : context[\"signing_service\"]\n                      }))];\n\n                    case 1:\n                      presigned = _c.sent();\n                      return [2\n                      /*return*/\n                      , {\n                        // Intercept the middleware stack by returning fake response\n                        response: {},\n                        output: {\n                          $metadata: {\n                            httpStatusCode: 200\n                          },\n                          presigned: presigned\n                        }\n                      }];\n                  }\n                });\n              });\n            };\n          };\n\n          middlewareName = \"presignInterceptMiddleware\";\n          client.middlewareStack.addRelativeTo(presignInterceptMiddleware, {\n            name: middlewareName,\n            relation: \"before\",\n            toMiddleware: \"awsAuthMiddleware\",\n            override: true\n          });\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1,, 3, 4]);\n\n          return [4\n          /*yield*/\n          , client.send(command)];\n\n        case 2:\n          output = _a.sent(); //@ts-ignore the output is faked, so it's not actually OutputType\n\n          presigned = output.presigned;\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          client.middlewareStack.remove(middlewareName);\n          return [7\n          /*endfinally*/\n          ];\n\n        case 4:\n          return [2\n          /*return*/\n          , formatUrl(presigned)];\n      }\n    });\n  });\n};","map":{"version":3,"mappings":";AAAA,SAASA,WAAT,QAA4B,wBAA5B;AAGA,SAASC,SAAT,QAA0B,0BAA1B;AAEA,SAASC,kBAAT,QAAmC,aAAnC;AAEA,OAAO,IAAMC,YAAY,GAAG,UAK1BC,MAL0B,EAM1BC,OAN0B,EAO1BC,OAP0B,EAOc;EAAxC;IAAAA;EAAwC;;;;;;;UAElCC,WAAW,GAAG,IAAIL,kBAAJ,CAAsBM,aAAMJ,MAAM,CAACK,MAAb,CAAtB,CAAd;;UACAC,0BAA0B,GAAqD,UAACC,IAAD,EAAOC,OAAP,EAAc;YAAK,iBACtGC,IADsG,EAClG;cAAA;;;;;;;;sBAEIC,OAAO,GAAKD,IAAI,QAAhB;;sBACR,IAAI,CAACb,WAAW,CAACe,UAAZ,CAAuBD,OAAvB,CAAL,EAAsC;wBACpC,MAAM,IAAIE,KAAJ,CAAU,uDAAV,CAAN;sBACD,EACD;;;sBACA,OAAOF,OAAO,CAACG,OAAR,CAAgB,uBAAhB,CAAP;sBACA,OAAOH,OAAO,CAACG,OAAR,CAAgB,iBAAhB,CAAP;sBAEkB;sBAAA;sBAAA,EAAMV,WAAW,CAACW,OAAZ,CAAoBJ,OAApB,EAA2BN,sBAC9CF,OAD8C,GACvC;wBACVa,aAAa,QAAEb,OAAO,CAACa,aAAV,MAAuB,IAAvB,IAAuBC,aAAvB,GAAuBA,EAAvB,GAA2BR,OAAO,CAAC,gBAAD,CADrC;wBAEVS,cAAc,QAAEf,OAAO,CAACe,cAAV,MAAwB,IAAxB,IAAwBC,aAAxB,GAAwBA,EAAxB,GAA4BV,OAAO,CAAC,iBAAD;sBAFvC,CADuC,CAA3B,CAAN;;;sBAAZW,SAAS,GAAGC,SAAZ;sBAKN;sBAAA;sBAAA,EAAO;wBACL;wBACAC,QAAQ,EAAE,EAFL;wBAGLC,MAAM,EAAE;0BACNC,SAAS,EAAE;4BAAEC,cAAc,EAAE;0BAAlB,CADL;0BAENL,SAAS;wBAFH;sBAHH,CAAP;;;eAfI;YAuBL,CAxBuG;UAwBvG,CAxBK;;UAyBAM,cAAc,GAAG,4BAAjB;UACNzB,MAAM,CAAC0B,eAAP,CAAuBC,aAAvB,CAAqCrB,0BAArC,EAAiE;YAC/DsB,IAAI,EAAEH,cADyD;YAE/DI,QAAQ,EAAE,QAFqD;YAG/DC,YAAY,EAAE,mBAHiD;YAI/DC,QAAQ,EAAE;UAJqD,CAAjE;;;;;;UASiB;UAAA;UAAA,EAAM/B,MAAM,CAACgC,IAAP,CAAY/B,OAAZ,CAAN;;;UAATqB,MAAM,GAAGN,SAAT,EACN;;UACAG,SAAS,GAAGG,MAAM,CAACH,SAAnB;;;;;;UAEAnB,MAAM,CAAC0B,eAAP,CAAuBO,MAAvB,CAA8BR,cAA9B;;;;;;UAGF;UAAA;UAAA,EAAO5B,SAAS,CAACsB,SAAD,CAAhB;;;;AACD,CArDM","names":["HttpRequest","formatUrl","S3RequestPresigner","getSignedUrl","client","command","options","s3Presigner","__assign","config","presignInterceptMiddleware","next","context","args","request","isInstance","Error","headers","presign","signingRegion","_a","signingService","_b","presigned","_c","response","output","$metadata","httpStatusCode","middlewareName","middlewareStack","addRelativeTo","name","relation","toMiddleware","override","send","remove"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\s3-request-presigner\\src\\getSignedUrl.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { Client, Command } from \"@aws-sdk/smithy-client\";\nimport { BuildMiddleware, MetadataBearer, RequestPresigningArguments } from \"@aws-sdk/types\";\nimport { formatUrl } from \"@aws-sdk/util-format-url\";\n\nimport { S3RequestPresigner } from \"./presigner\";\n\nexport const getSignedUrl = async <\n  InputTypesUnion extends object,\n  InputType extends InputTypesUnion,\n  OutputType extends MetadataBearer = MetadataBearer\n>(\n  client: Client<any, InputTypesUnion, MetadataBearer, any>,\n  command: Command<InputType, OutputType, any, InputTypesUnion, MetadataBearer>,\n  options: RequestPresigningArguments = {}\n): Promise<string> => {\n  const s3Presigner = new S3RequestPresigner({ ...client.config });\n  const presignInterceptMiddleware: BuildMiddleware<InputTypesUnion, MetadataBearer> = (next, context) => async (\n    args\n  ) => {\n    const { request } = args;\n    if (!HttpRequest.isInstance(request)) {\n      throw new Error(\"Request to be presigned is not an valid HTTP request.\");\n    }\n    // Retry information headers are not meaningful in presigned URLs\n    delete request.headers[\"amz-sdk-invocation-id\"];\n    delete request.headers[\"amz-sdk-request\"];\n\n    const presigned = await s3Presigner.presign(request, {\n      ...options,\n      signingRegion: options.signingRegion ?? context[\"signing_region\"],\n      signingService: options.signingService ?? context[\"signing_service\"],\n    });\n    return {\n      // Intercept the middleware stack by returning fake response\n      response: {},\n      output: {\n        $metadata: { httpStatusCode: 200 },\n        presigned,\n      },\n    } as any;\n  };\n  const middlewareName = \"presignInterceptMiddleware\";\n  client.middlewareStack.addRelativeTo(presignInterceptMiddleware, {\n    name: middlewareName,\n    relation: \"before\",\n    toMiddleware: \"awsAuthMiddleware\",\n    override: true,\n  });\n\n  let presigned: HttpRequest;\n  try {\n    const output = await client.send(command);\n    //@ts-ignore the output is faked, so it's not actually OutputType\n    presigned = output.presigned;\n  } finally {\n    client.middlewareStack.remove(middlewareName);\n  }\n\n  return formatUrl(presigned);\n};\n"]},"metadata":{},"sourceType":"module"}