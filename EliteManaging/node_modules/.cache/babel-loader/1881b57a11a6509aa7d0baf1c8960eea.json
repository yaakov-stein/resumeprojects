{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetPersonTrackingRequest, GetPersonTrackingResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetPersonTrackingCommand, serializeAws_json1_1GetPersonTrackingCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the path tracking results of a Amazon Rekognition Video analysis started by <a>StartPersonTracking</a>.</p>\n *\n *          <p>The person path tracking operation is started by a call to <code>StartPersonTracking</code>\n *      which returns a job identifier (<code>JobId</code>). When the operation finishes, Amazon Rekognition Video publishes a completion status to\n *      the Amazon Simple Notification Service topic registered in the initial call to <code>StartPersonTracking</code>.</p>\n *          <p>To get the results of the person path tracking operation, first check\n *        that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *      If so, call  <a>GetPersonTracking</a> and pass the job identifier\n *      (<code>JobId</code>) from the initial call to <code>StartPersonTracking</code>.</p>\n *          <p>\n *             <code>GetPersonTracking</code> returns an array, <code>Persons</code>, of tracked persons and the time(s) their\n *        paths were tracked in the video. </p>\n *          <note>\n *             <p>\n *                <code>GetPersonTracking</code> only returns the default\n *        facial attributes (<code>BoundingBox</code>, <code>Confidence</code>,\n *        <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n *        in the <code>Face</code> object of the following response syntax are not returned. </p>\n *\n *             <p>For more information, see FaceDetail in the Amazon Rekognition Developer Guide.</p>\n *          </note>\n *\n *\n *          <p>By default, the array is sorted by the time(s) a person's path is tracked in the video.\n *       You can sort by tracked persons by specifying <code>INDEX</code> for the <code>SortBy</code> input parameter.</p>\n *\n *          <p>Use the <code>MaxResults</code> parameter to limit the number of items returned. If there are more results than\n *    specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set\n *    of results. To get the next page of results, call <code>GetPersonTracking</code> and populate the <code>NextToken</code> request parameter with the token\n *     value returned from the previous call to <code>GetPersonTracking</code>.</p>\n */\n\nvar GetPersonTrackingCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetPersonTrackingCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetPersonTrackingCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetPersonTrackingCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetPersonTrackingCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetPersonTrackingRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetPersonTrackingResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetPersonTrackingCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetPersonTrackingCommand(input, context);\n  };\n\n  GetPersonTrackingCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetPersonTrackingCommand(output, context);\n  };\n\n  return GetPersonTrackingCommand;\n}($Command);\n\nexport { GetPersonTrackingCommand };","map":{"version":3,"mappings":";AACA,SAASA,wBAAT,EAAmCC,yBAAnC,QAAoE,oBAApE;AACA,SACEC,8CADF,EAEEC,4CAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AAAA;AAAA;EAA8CC,4CAA9C,CAKE;EACA;;;EAEA,kCAAqBC,KAArB,EAAyD;IAAzD,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAoC,CAGvD;EACD;EAED;;;;;EAGAC,iEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,mBAAnB;IACA,IAAMC,WAAW,GAAG,0BAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,wBAAwB,CAAC0B,kBAJK;MAKvDC,wBAAwB,EAAE1B,yBAAyB,CAACyB;IALG,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,+CAAR,UAAkBH,KAAlB,EAAwDuB,OAAxD,EAA+E;IAC7E,OAAO5B,4CAA4C,CAACK,KAAD,EAAQuB,OAAR,CAAnD;EACD,CAFO;;EAIApB,iDAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO7B,8CAA8C,CAAC8B,MAAD,EAASD,OAAT,CAArD;EACD,CAFO;;EAMV;AAAC,CAtDD,CAA8CzB,QAA9C","names":["GetPersonTrackingRequest","GetPersonTrackingResponse","deserializeAws_json1_1GetPersonTrackingCommand","serializeAws_json1_1GetPersonTrackingCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","GetPersonTrackingCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\client-rekognition\\commands\\GetPersonTrackingCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { GetPersonTrackingRequest, GetPersonTrackingResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1GetPersonTrackingCommand,\n  serializeAws_json1_1GetPersonTrackingCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetPersonTrackingCommandInput = GetPersonTrackingRequest;\nexport type GetPersonTrackingCommandOutput = GetPersonTrackingResponse & __MetadataBearer;\n\n/**\n * <p>Gets the path tracking results of a Amazon Rekognition Video analysis started by <a>StartPersonTracking</a>.</p>\n *\n *          <p>The person path tracking operation is started by a call to <code>StartPersonTracking</code>\n *      which returns a job identifier (<code>JobId</code>). When the operation finishes, Amazon Rekognition Video publishes a completion status to\n *      the Amazon Simple Notification Service topic registered in the initial call to <code>StartPersonTracking</code>.</p>\n *          <p>To get the results of the person path tracking operation, first check\n *        that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>.\n *      If so, call  <a>GetPersonTracking</a> and pass the job identifier\n *      (<code>JobId</code>) from the initial call to <code>StartPersonTracking</code>.</p>\n *          <p>\n *             <code>GetPersonTracking</code> returns an array, <code>Persons</code>, of tracked persons and the time(s) their\n *        paths were tracked in the video. </p>\n *          <note>\n *             <p>\n *                <code>GetPersonTracking</code> only returns the default\n *        facial attributes (<code>BoundingBox</code>, <code>Confidence</code>,\n *        <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n *        in the <code>Face</code> object of the following response syntax are not returned. </p>\n *\n *             <p>For more information, see FaceDetail in the Amazon Rekognition Developer Guide.</p>\n *          </note>\n *\n *\n *          <p>By default, the array is sorted by the time(s) a person's path is tracked in the video.\n *       You can sort by tracked persons by specifying <code>INDEX</code> for the <code>SortBy</code> input parameter.</p>\n *\n *          <p>Use the <code>MaxResults</code> parameter to limit the number of items returned. If there are more results than\n *    specified in <code>MaxResults</code>, the value of <code>NextToken</code> in the operation response contains a pagination token for getting the next set\n *    of results. To get the next page of results, call <code>GetPersonTracking</code> and populate the <code>NextToken</code> request parameter with the token\n *     value returned from the previous call to <code>GetPersonTracking</code>.</p>\n */\nexport class GetPersonTrackingCommand extends $Command<\n  GetPersonTrackingCommandInput,\n  GetPersonTrackingCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetPersonTrackingCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetPersonTrackingCommandInput, GetPersonTrackingCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"GetPersonTrackingCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetPersonTrackingRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetPersonTrackingResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: GetPersonTrackingCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1GetPersonTrackingCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<GetPersonTrackingCommandOutput> {\n    return deserializeAws_json1_1GetPersonTrackingCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}