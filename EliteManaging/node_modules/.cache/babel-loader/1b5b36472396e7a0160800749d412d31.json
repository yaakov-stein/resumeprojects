{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutEventsCommand } from '@aws-sdk/client-pinpoint';\nimport { isAppInForeground } from '../utils/AppUtils';\nvar logger = new Logger('EventsBuffer');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\n\nvar EventsBuffer =\n/** @class */\nfunction () {\n  function EventsBuffer(client, config) {\n    this._pause = false;\n    this._flush = false;\n    logger.debug('Instantiating buffer with config:', config);\n    this._buffer = [];\n    this._client = client;\n    this._config = config;\n    this._sendBatch = this._sendBatch.bind(this);\n\n    this._startLoop();\n  }\n\n  EventsBuffer.prototype.push = function (event) {\n    var _a;\n\n    if (this._buffer > this._config.bufferSize) {\n      logger.debug('Exceeded analytics events buffer size');\n      return event.handlers.reject(new Error('Exceeded the size of analytics events buffer'));\n    }\n\n    var eventId = event.params.event.eventId;\n    var bufferElement = (_a = {}, _a[eventId] = event, _a);\n\n    this._buffer.push(bufferElement);\n  };\n\n  EventsBuffer.prototype.pause = function () {\n    this._pause = true;\n  };\n\n  EventsBuffer.prototype.resume = function () {\n    this._pause = false;\n  };\n\n  EventsBuffer.prototype.updateClient = function (client) {\n    this._client = client;\n  };\n\n  EventsBuffer.prototype.flush = function () {\n    this._flush = true;\n  };\n\n  EventsBuffer.prototype._startLoop = function () {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n\n    var flushInterval = this._config.flushInterval;\n    this._interval = setInterval(this._sendBatch, flushInterval);\n  };\n\n  EventsBuffer.prototype._sendBatch = function () {\n    var bufferLength = this._buffer.length;\n\n    if (this._flush && !bufferLength) {\n      clearInterval(this._interval);\n    } // Do not send the batch of events if\n    // the Buffer is paused or is empty or the App is not in the foreground\n    // Apps should be in the foreground since\n    // the OS may restrict access to the network in the background\n\n\n    if (this._pause || !bufferLength || !isAppInForeground()) {\n      return;\n    }\n\n    var flushSize = this._config.flushSize;\n    var batchSize = Math.min(flushSize, bufferLength);\n\n    var bufferSubset = this._buffer.splice(0, batchSize);\n\n    this._putEvents(bufferSubset);\n  };\n\n  EventsBuffer.prototype._putEvents = function (buffer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventMap, batchEventParams, command, data, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            eventMap = this._bufferToMap(buffer);\n            batchEventParams = this._generateBatchEventParams(eventMap);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            command = new PutEventsCommand(batchEventParams);\n            return [4\n            /*yield*/\n            , this._client.send(command)];\n\n          case 2:\n            data = _a.sent();\n\n            this._processPutEventsSuccessResponse(data, eventMap);\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_1 = _a.sent();\n            return [2\n            /*return*/\n            , this._handlePutEventsFailure(err_1, eventMap)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  EventsBuffer.prototype._generateBatchEventParams = function (eventMap) {\n    var batchEventParams = {\n      ApplicationId: '',\n      EventsRequest: {\n        BatchItem: {}\n      }\n    };\n    Object.values(eventMap).forEach(function (item) {\n      var params = item.params;\n      var event = params.event,\n          timestamp = params.timestamp,\n          config = params.config;\n      var name = event.name,\n          attributes = event.attributes,\n          metrics = event.metrics,\n          eventId = event.eventId,\n          session = event.session;\n      var appId = config.appId,\n          endpointId = config.endpointId;\n      var batchItem = batchEventParams.EventsRequest.BatchItem;\n      batchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n\n      if (!batchItem[endpointId]) {\n        batchItem[endpointId] = {\n          Endpoint: {},\n          Events: {}\n        };\n      }\n\n      batchItem[endpointId].Events[eventId] = {\n        EventType: name,\n        Timestamp: new Date(timestamp).toISOString(),\n        Attributes: attributes,\n        Metrics: metrics,\n        Session: session\n      };\n    });\n    return batchEventParams;\n  };\n\n  EventsBuffer.prototype._handlePutEventsFailure = function (err, eventMap) {\n    logger.debug('_putEvents Failed: ', err);\n    var statusCode = err.$metadata && err.$metadata.httpStatusCode;\n\n    if (RETRYABLE_CODES.includes(statusCode)) {\n      var retryableEvents = Object.values(eventMap);\n\n      this._retry(retryableEvents);\n\n      return;\n    }\n  };\n\n  EventsBuffer.prototype._processPutEventsSuccessResponse = function (data, eventMap) {\n    var Results = data.EventsResponse.Results;\n    var retryableEvents = [];\n    Object.entries(Results).forEach(function (_a) {\n      var _b = __read(_a, 2),\n          endpointId = _b[0],\n          endpointValues = _b[1];\n\n      var responses = endpointValues.EventsItemResponse;\n      Object.entries(responses).forEach(function (_a) {\n        var _b, _c;\n\n        var _d = __read(_a, 2),\n            eventId = _d[0],\n            _e = _d[1],\n            StatusCode = _e.StatusCode,\n            Message = _e.Message;\n\n        var eventObject = eventMap[eventId]; // manually crafting handlers response to keep API consistant\n\n        var response = {\n          EventsResponse: {\n            Results: (_b = {}, _b[endpointId] = {\n              EventsItemResponse: (_c = {}, _c[eventId] = {\n                StatusCode: StatusCode,\n                Message: Message\n              }, _c)\n            }, _b)\n          }\n        };\n\n        if (ACCEPTED_CODES.includes(StatusCode)) {\n          eventObject.handlers.resolve(response);\n          return;\n        }\n\n        if (RETRYABLE_CODES.includes(StatusCode)) {\n          retryableEvents.push(eventObject);\n          return;\n        }\n\n        var name = eventObject.params.event.name;\n        logger.error(\"event \" + eventId + \" : \" + name + \" failed with error: \" + Message);\n        return eventObject.handlers.reject(response);\n      });\n    });\n\n    if (retryableEvents.length) {\n      this._retry(retryableEvents);\n    }\n  };\n\n  EventsBuffer.prototype._retry = function (retryableEvents) {\n    var _a; // retryable events that haven't reached the resendLimit\n\n\n    var eligibleEvents = [];\n    retryableEvents.forEach(function (event) {\n      var _a;\n\n      var params = event.params;\n      var _b = params.event,\n          eventId = _b.eventId,\n          name = _b.name;\n\n      if (params.resendLimit-- > 0) {\n        logger.debug(\"resending event \" + eventId + \" : \" + name + \" with \" + params.resendLimit + \" retry attempts remaining\");\n        eligibleEvents.push((_a = {}, _a[eventId] = event, _a));\n        return;\n      }\n\n      logger.debug(\"no retry attempts remaining for event \" + eventId + \" : \" + name);\n    }); // add the events to the front of the buffer\n\n    (_a = this._buffer).unshift.apply(_a, __spread(eligibleEvents));\n  }; // convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n  // this allows us to easily access the handlers after receiving a batch response\n\n\n  EventsBuffer.prototype._bufferToMap = function (buffer) {\n    return buffer.reduce(function (acc, curVal) {\n      var _a = __read(Object.entries(curVal), 1),\n          _b = __read(_a[0], 2),\n          key = _b[0],\n          value = _b[1];\n\n      acc[key] = value;\n      return acc;\n    }, {});\n  };\n\n  return EventsBuffer;\n}();\n\nexport default EventsBuffer;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","PutEventsCommand","isAppInForeground","logger","RETRYABLE_CODES","ACCEPTED_CODES","client","config","debug","_buffer","_client","_config","_sendBatch","bind","_startLoop","EventsBuffer","event","bufferSize","handlers","reject","Error","bufferElement","_a","eventId","push","_pause","_flush","_interval","clearInterval","setInterval","flushInterval","bufferLength","length","batchSize","Math","min","flushSize","bufferSubset","splice","_putEvents","buffer","eventMap","_bufferToMap","batchEventParams","_generateBatchEventParams","command","send","data","_processPutEventsSuccessResponse","_handlePutEventsFailure","err_1","ApplicationId","EventsRequest","BatchItem","Object","values","forEach","timestamp","attributes","metrics","session","endpointId","batchItem","appId","Endpoint","Events","EventType","name","Timestamp","Date","toISOString","Attributes","Metrics","Session","err","statusCode","$metadata","httpStatusCode","includes","retryableEvents","_retry","entries","Results","_b","endpointValues","responses","EventsItemResponse","_d","_e","StatusCode","Message","eventObject","response","EventsResponse","_c","resolve","error","eligibleEvents","params","resendLimit","unshift","apply","__spread","reduce","acc","curVal","key","value"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-amplify\\analytics\\src\\Providers\\EventBuffer.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from '@aws-amplify/core';\n\nimport {\n\tPutEventsResponse,\n\tEventBuffer,\n\tEventObject,\n\tEventMap,\n} from '../types';\nimport {\n\tPutEventsCommand,\n\tPutEventsCommandOutput,\n} from '@aws-sdk/client-pinpoint';\nimport { isAppInForeground } from '../utils/AppUtils';\n\nconst logger = new Logger('EventsBuffer');\nconst RETRYABLE_CODES = [429, 500];\nconst ACCEPTED_CODES = [202];\n\ntype EventsBufferConfig = {\n\tbufferSize: number;\n\tflushSize: number;\n\tflushInterval: number;\n\tresendLimit: number;\n};\n\nexport default class EventsBuffer {\n\tprivate _config;\n\tprivate _client;\n\tprivate _interval;\n\tprivate _buffer: EventBuffer;\n\tprivate _pause = false;\n\tprivate _flush = false;\n\n\tconstructor(client, config: EventsBufferConfig) {\n\t\tlogger.debug('Instantiating buffer with config:', config);\n\t\tthis._buffer = [];\n\t\tthis._client = client;\n\t\tthis._config = config;\n\n\t\tthis._sendBatch = this._sendBatch.bind(this);\n\n\t\tthis._startLoop();\n\t}\n\n\tpublic push(event: EventObject) {\n\t\tif (this._buffer > this._config.bufferSize) {\n\t\t\tlogger.debug('Exceeded analytics events buffer size');\n\t\t\treturn event.handlers.reject(\n\t\t\t\tnew Error('Exceeded the size of analytics events buffer')\n\t\t\t);\n\t\t}\n\n\t\tconst { eventId } = event.params.event;\n\t\tconst bufferElement = { [eventId]: event };\n\t\tthis._buffer.push(bufferElement);\n\t}\n\n\tpublic pause() {\n\t\tthis._pause = true;\n\t}\n\n\tpublic resume() {\n\t\tthis._pause = false;\n\t}\n\n\tpublic updateClient(client) {\n\t\tthis._client = client;\n\t}\n\n\tpublic flush() {\n\t\tthis._flush = true;\n\t}\n\n\tprivate _startLoop() {\n\t\tif (this._interval) {\n\t\t\tclearInterval(this._interval);\n\t\t}\n\n\t\tconst { flushInterval } = this._config;\n\n\t\tthis._interval = setInterval(this._sendBatch, flushInterval);\n\t}\n\n\tprivate _sendBatch() {\n\t\tconst bufferLength = this._buffer.length;\n\n\t\tif (this._flush && !bufferLength) {\n\t\t\tclearInterval(this._interval);\n\t\t}\n\n\t\t// Do not send the batch of events if\n\t\t// the Buffer is paused or is empty or the App is not in the foreground\n\t\t// Apps should be in the foreground since\n\t\t// the OS may restrict access to the network in the background\n\t\tif (this._pause || !bufferLength || !isAppInForeground()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { flushSize } = this._config;\n\n\t\tconst batchSize = Math.min(flushSize, bufferLength);\n\t\tconst bufferSubset = this._buffer.splice(0, batchSize);\n\n\t\tthis._putEvents(bufferSubset);\n\t}\n\n\tprivate async _putEvents(buffer: EventBuffer) {\n\t\tconst eventMap: EventMap = this._bufferToMap(buffer);\n\t\tconst batchEventParams = this._generateBatchEventParams(eventMap);\n\n\t\ttry {\n\t\t\tconst command: PutEventsCommand = new PutEventsCommand(batchEventParams);\n\t\t\tconst data: PutEventsCommandOutput = await this._client.send(command);\n\t\t\tthis._processPutEventsSuccessResponse(data, eventMap);\n\t\t} catch (err) {\n\t\t\treturn this._handlePutEventsFailure(err, eventMap);\n\t\t}\n\t}\n\n\tprivate _generateBatchEventParams(eventMap: EventMap) {\n\t\tconst batchEventParams = {\n\t\t\tApplicationId: '',\n\t\t\tEventsRequest: {\n\t\t\t\tBatchItem: {},\n\t\t\t},\n\t\t};\n\n\t\tObject.values(eventMap).forEach(item => {\n\t\t\tconst { params } = item;\n\t\t\tconst { event, timestamp, config } = params;\n\t\t\tconst { name, attributes, metrics, eventId, session } = event;\n\t\t\tconst { appId, endpointId } = config;\n\n\t\t\tconst batchItem = batchEventParams.EventsRequest.BatchItem;\n\n\t\t\tbatchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n\n\t\t\tif (!batchItem[endpointId]) {\n\t\t\t\tbatchItem[endpointId] = {\n\t\t\t\t\tEndpoint: {},\n\t\t\t\t\tEvents: {},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tbatchItem[endpointId].Events[eventId] = {\n\t\t\t\tEventType: name,\n\t\t\t\tTimestamp: new Date(timestamp).toISOString(),\n\t\t\t\tAttributes: attributes,\n\t\t\t\tMetrics: metrics,\n\t\t\t\tSession: session,\n\t\t\t};\n\t\t});\n\n\t\treturn batchEventParams;\n\t}\n\n\tprivate _handlePutEventsFailure(err, eventMap: EventMap) {\n\t\tlogger.debug('_putEvents Failed: ', err);\n\t\tconst statusCode = err.$metadata && err.$metadata.httpStatusCode;\n\n\t\tif (RETRYABLE_CODES.includes(statusCode)) {\n\t\t\tconst retryableEvents = Object.values(eventMap);\n\t\t\tthis._retry(retryableEvents);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate _processPutEventsSuccessResponse(\n\t\tdata: PutEventsResponse,\n\t\teventMap: EventMap\n\t) {\n\t\tconst { Results } = data.EventsResponse;\n\t\tconst retryableEvents: EventObject[] = [];\n\n\t\tObject.entries(Results).forEach(([endpointId, endpointValues]) => {\n\t\t\tconst responses = endpointValues.EventsItemResponse;\n\n\t\t\tObject.entries(responses).forEach(\n\t\t\t\t([eventId, { StatusCode, Message }]) => {\n\t\t\t\t\tconst eventObject = eventMap[eventId];\n\n\t\t\t\t\t// manually crafting handlers response to keep API consistant\n\t\t\t\t\tconst response = {\n\t\t\t\t\t\tEventsResponse: {\n\t\t\t\t\t\t\tResults: {\n\t\t\t\t\t\t\t\t[endpointId]: {\n\t\t\t\t\t\t\t\t\tEventsItemResponse: {\n\t\t\t\t\t\t\t\t\t\t[eventId]: { StatusCode, Message },\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tif (ACCEPTED_CODES.includes(StatusCode)) {\n\t\t\t\t\t\teventObject.handlers.resolve(response);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (RETRYABLE_CODES.includes(StatusCode)) {\n\t\t\t\t\t\tretryableEvents.push(eventObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { name } = eventObject.params.event;\n\n\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t`event ${eventId} : ${name} failed with error: ${Message}`\n\t\t\t\t\t);\n\t\t\t\t\treturn eventObject.handlers.reject(response);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\n\t\tif (retryableEvents.length) {\n\t\t\tthis._retry(retryableEvents);\n\t\t}\n\t}\n\n\tprivate _retry(retryableEvents: EventObject[]) {\n\t\t// retryable events that haven't reached the resendLimit\n\t\tconst eligibleEvents: EventBuffer = [];\n\n\t\tretryableEvents.forEach((event: EventObject) => {\n\t\t\tconst { params } = event;\n\t\t\tconst { eventId, name } = params.event;\n\n\t\t\tif (params.resendLimit-- > 0) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`resending event ${eventId} : ${name} with ${params.resendLimit} retry attempts remaining`\n\t\t\t\t);\n\t\t\t\teligibleEvents.push({ [eventId]: event });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(\n\t\t\t\t`no retry attempts remaining for event ${eventId} : ${name}`\n\t\t\t);\n\t\t});\n\n\t\t// add the events to the front of the buffer\n\t\tthis._buffer.unshift(...eligibleEvents);\n\t}\n\n\t// convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n\t// this allows us to easily access the handlers after receiving a batch response\n\tprivate _bufferToMap(buffer: EventBuffer) {\n\t\treturn buffer.reduce((acc, curVal) => {\n\t\t\tconst [[key, value]] = Object.entries(curVal);\n\t\t\tacc[key] = value;\n\t\t\treturn acc;\n\t\t}, {});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}