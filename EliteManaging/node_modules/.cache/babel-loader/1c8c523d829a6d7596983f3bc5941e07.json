{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { ConsoleLogger as Logger } from '../Logger/ConsoleLogger';\nvar logger = new Logger('Util');\n\nvar NonRetryableError =\n/** @class */\nfunction (_super) {\n  __extends(NonRetryableError, _super);\n\n  function NonRetryableError(message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.nonRetryable = true;\n    return _this;\n  }\n\n  return NonRetryableError;\n}(Error);\n\nexport { NonRetryableError };\n\nvar isNonRetryableError = function (obj) {\n  var key = 'nonRetryable';\n  return obj && obj[key];\n};\n/**\n * @private\n * Internal use of Amplify only\n */\n\n\nexport function retry(functionToRetry, args, delayFn, attempt) {\n  if (attempt === void 0) {\n    attempt = 1;\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var err_1, retryIn_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (typeof functionToRetry !== 'function') {\n            throw Error('functionToRetry must be a function');\n          }\n\n          logger.debug(functionToRetry.name + \" attempt #\" + attempt + \" with this vars: \" + JSON.stringify(args));\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 3,, 8]);\n\n          return [4\n          /*yield*/\n          , functionToRetry.apply(void 0, __spread(args))];\n\n        case 2:\n          return [2\n          /*return*/\n          , _a.sent()];\n\n        case 3:\n          err_1 = _a.sent();\n          logger.debug(\"error on \" + functionToRetry.name, err_1);\n\n          if (isNonRetryableError(err_1)) {\n            logger.debug(functionToRetry.name + \" non retryable error\", err_1);\n            throw err_1;\n          }\n\n          retryIn_1 = delayFn(attempt, args, err_1);\n          logger.debug(functionToRetry.name + \" retrying in \" + retryIn_1 + \" ms\");\n          if (!(retryIn_1 !== false)) return [3\n          /*break*/\n          , 6];\n          return [4\n          /*yield*/\n          , new Promise(function (res) {\n            return setTimeout(res, retryIn_1);\n          })];\n\n        case 4:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , retry(functionToRetry, args, delayFn, attempt + 1)];\n\n        case 5:\n          return [2\n          /*return*/\n          , _a.sent()];\n\n        case 6:\n          throw err_1;\n\n        case 7:\n          return [3\n          /*break*/\n          , 8];\n\n        case 8:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\nvar MAX_DELAY_MS = 5 * 60 * 1000;\n/**\n * @private\n * Internal use of Amplify only\n */\n\nexport function jitteredBackoff(maxDelayMs) {\n  if (maxDelayMs === void 0) {\n    maxDelayMs = MAX_DELAY_MS;\n  }\n\n  var BASE_TIME_MS = 100;\n  var JITTER_FACTOR = 100;\n  return function (attempt) {\n    var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();\n    return delay > maxDelayMs ? false : delay;\n  };\n}\n/**\n * @private\n * Internal use of Amplify only\n */\n\nexport var jitteredExponentialRetry = function (functionToRetry, args, maxDelayMs) {\n  if (maxDelayMs === void 0) {\n    maxDelayMs = MAX_DELAY_MS;\n  }\n\n  return retry(functionToRetry, args, jitteredBackoff(maxDelayMs));\n};","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","logger","__extends","message","_super","_this","Error","isNonRetryableError","obj","key","retry","functionToRetry","args","delayFn","attempt","debug","name","JSON","stringify","__spread","_a","err_1","retryIn_1","Promise","res","MAX_DELAY_MS","jitteredBackoff","maxDelayMs","BASE_TIME_MS","JITTER_FACTOR","delay","Math","random","jitteredExponentialRetry"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-amplify\\core\\src\\Util\\Retry.ts"],"sourcesContent":["import { DelayFunction } from '../types';\nimport { ConsoleLogger as Logger } from '../Logger/ConsoleLogger';\nconst logger = new Logger('Util');\n\nexport class NonRetryableError extends Error {\n\tpublic readonly nonRetryable = true;\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t}\n}\n\nconst isNonRetryableError = (obj: any): obj is NonRetryableError => {\n\tconst key: keyof NonRetryableError = 'nonRetryable';\n\treturn obj && obj[key];\n};\n\n/**\n * @private\n * Internal use of Amplify only\n */\nexport async function retry(\n\tfunctionToRetry: Function,\n\targs: any[],\n\tdelayFn: DelayFunction,\n\tattempt: number = 1\n) {\n\tif (typeof functionToRetry !== 'function') {\n\t\tthrow Error('functionToRetry must be a function');\n\t}\n\tlogger.debug(\n\t\t`${\n\t\t\tfunctionToRetry.name\n\t\t} attempt #${attempt} with this vars: ${JSON.stringify(args)}`\n\t);\n\n\ttry {\n\t\treturn await functionToRetry(...args);\n\t} catch (err) {\n\t\tlogger.debug(`error on ${functionToRetry.name}`, err);\n\n\t\tif (isNonRetryableError(err)) {\n\t\t\tlogger.debug(`${functionToRetry.name} non retryable error`, err);\n\t\t\tthrow err;\n\t\t}\n\n\t\tconst retryIn = delayFn(attempt, args, err);\n\t\tlogger.debug(`${functionToRetry.name} retrying in ${retryIn} ms`);\n\n\t\tif (retryIn !== false) {\n\t\t\tawait new Promise(res => setTimeout(res, retryIn));\n\t\t\treturn await retry(functionToRetry, args, delayFn, attempt + 1);\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\nconst MAX_DELAY_MS = 5 * 60 * 1000;\n\n/**\n * @private\n * Internal use of Amplify only\n */\nexport function jitteredBackoff(\n\tmaxDelayMs: number = MAX_DELAY_MS\n): DelayFunction {\n\tconst BASE_TIME_MS = 100;\n\tconst JITTER_FACTOR = 100;\n\n\treturn attempt => {\n\t\tconst delay = 2 ** attempt * BASE_TIME_MS + JITTER_FACTOR * Math.random();\n\t\treturn delay > maxDelayMs ? false : delay;\n\t};\n}\n\n/**\n * @private\n * Internal use of Amplify only\n */\nexport const jitteredExponentialRetry = (\n\tfunctionToRetry: Function,\n\targs: any[],\n\tmaxDelayMs: number = MAX_DELAY_MS\n) => retry(functionToRetry, args, jitteredBackoff(maxDelayMs));\n"]},"metadata":{},"sourceType":"module"}