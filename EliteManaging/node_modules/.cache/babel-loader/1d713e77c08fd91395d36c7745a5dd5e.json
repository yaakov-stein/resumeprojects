{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StopDominantLanguageDetectionJobRequest, StopDominantLanguageDetectionJobResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StopDominantLanguageDetectionJobCommand, serializeAws_json1_1StopDominantLanguageDetectionJobCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Stops a dominant language detection job in progress.</p>\n *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put\n *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it\n *       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the\n *         <code>STOPPED</code> state.</p>\n *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the\n *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400\n *       Internal Request Exception. </p>\n *          <p>When a job is stopped, any documents already processed are written to the output\n *       location.</p>\n */\n\nvar StopDominantLanguageDetectionJobCommand =\n/** @class */\nfunction (_super) {\n  __extends(StopDominantLanguageDetectionJobCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StopDominantLanguageDetectionJobCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StopDominantLanguageDetectionJobCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"ComprehendClient\";\n    var commandName = \"StopDominantLanguageDetectionJobCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StopDominantLanguageDetectionJobRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StopDominantLanguageDetectionJobResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StopDominantLanguageDetectionJobCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StopDominantLanguageDetectionJobCommand(input, context);\n  };\n\n  StopDominantLanguageDetectionJobCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StopDominantLanguageDetectionJobCommand(output, context);\n  };\n\n  return StopDominantLanguageDetectionJobCommand;\n}($Command);\n\nexport { StopDominantLanguageDetectionJobCommand };","map":{"version":3,"mappings":";AACA,SAASA,uCAAT,EAAkDC,wCAAlD,QAAkG,oBAAlG;AACA,SACEC,6DADF,EAEEC,2DAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;AAYA;AAAA;AAAA;EAA6DC,2DAA7D,CAKE;EACA;;;EAEA,iDAAqBC,KAArB,EAAwE;IAAxE,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAmD,CAGtE;EACD;EAED;;;;;EAGAC,gFACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,kBAAnB;IACA,IAAMC,WAAW,GAAG,yCAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,uCAAuC,CAAC0B,kBAJV;MAKvDC,wBAAwB,EAAE1B,wCAAwC,CAACyB;IALZ,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,8DAAR,UACEH,KADF,EAEEuB,OAFF,EAEyB;IAEvB,OAAO5B,2DAA2D,CAACK,KAAD,EAAQuB,OAAR,CAAlE;EACD,CALO;;EAOApB,gEAAR,UACEqB,MADF,EAEED,OAFF,EAEyB;IAEvB,OAAO7B,6DAA6D,CAAC8B,MAAD,EAASD,OAAT,CAApE;EACD,CALO;;EASV;AAAC,CA5DD,CAA6DzB,QAA7D","names":["StopDominantLanguageDetectionJobRequest","StopDominantLanguageDetectionJobResponse","deserializeAws_json1_1StopDominantLanguageDetectionJobCommand","serializeAws_json1_1StopDominantLanguageDetectionJobCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","StopDominantLanguageDetectionJobCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-comprehend\\commands\\StopDominantLanguageDetectionJobCommand.ts"],"sourcesContent":["import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../ComprehendClient\";\nimport { StopDominantLanguageDetectionJobRequest, StopDominantLanguageDetectionJobResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1StopDominantLanguageDetectionJobCommand,\n  serializeAws_json1_1StopDominantLanguageDetectionJobCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type StopDominantLanguageDetectionJobCommandInput = StopDominantLanguageDetectionJobRequest;\nexport type StopDominantLanguageDetectionJobCommandOutput = StopDominantLanguageDetectionJobResponse & __MetadataBearer;\n\n/**\n * <p>Stops a dominant language detection job in progress.</p>\n *          <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put\n *       into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it\n *       is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the\n *         <code>STOPPED</code> state.</p>\n *          <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the\n *         <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400\n *       Internal Request Exception. </p>\n *          <p>When a job is stopped, any documents already processed are written to the output\n *       location.</p>\n */\nexport class StopDominantLanguageDetectionJobCommand extends $Command<\n  StopDominantLanguageDetectionJobCommandInput,\n  StopDominantLanguageDetectionJobCommandOutput,\n  ComprehendClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: StopDominantLanguageDetectionJobCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: ComprehendClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<StopDominantLanguageDetectionJobCommandInput, StopDominantLanguageDetectionJobCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"ComprehendClient\";\n    const commandName = \"StopDominantLanguageDetectionJobCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: StopDominantLanguageDetectionJobRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StopDominantLanguageDetectionJobResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(\n    input: StopDominantLanguageDetectionJobCommandInput,\n    context: __SerdeContext\n  ): Promise<__HttpRequest> {\n    return serializeAws_json1_1StopDominantLanguageDetectionJobCommand(input, context);\n  }\n\n  private deserialize(\n    output: __HttpResponse,\n    context: __SerdeContext\n  ): Promise<StopDominantLanguageDetectionJobCommandOutput> {\n    return deserializeAws_json1_1StopDominantLanguageDetectionJobCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}