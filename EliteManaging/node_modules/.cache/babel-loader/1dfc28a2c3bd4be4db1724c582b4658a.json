{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nvar lists = [];\n\nvar MethodEmbed =\n/** @class */\nfunction () {\n  function MethodEmbed(context, methodName) {\n    this.context = context;\n    this.methodName = methodName;\n    this._originalMethod = context[methodName].bind(context);\n  }\n\n  MethodEmbed.add = function (context, methodName, methodOverride) {\n    getInstance(context, methodName).set(methodOverride);\n  };\n\n  MethodEmbed.remove = function (context, methodName) {\n    getInstance(context, methodName).remove();\n  };\n\n  MethodEmbed.prototype.set = function (methodOverride) {\n    var _this = this;\n\n    this.context[this.methodName] = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return methodOverride(_this._originalMethod.apply(_this, __spread(args)));\n    };\n  };\n\n  MethodEmbed.prototype.remove = function () {\n    this.context[this.methodName] = this._originalMethod;\n  };\n\n  return MethodEmbed;\n}();\n\nexport { MethodEmbed };\n\nfunction getInstance(context, methodName) {\n  var instance = lists.filter(function (h) {\n    return h.context === context && h.methodName === methodName;\n  })[0];\n\n  if (!instance) {\n    instance = new MethodEmbed(context, methodName);\n    lists.push(instance);\n  }\n\n  return instance;\n}\n/**\n * @deprecated use named import\n */\n\n\nexport default MethodEmbed;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAMA,KAAK,GAAkB,EAA7B;;AAEA;AAAA;AAAA;EAcC,qBAAYC,OAAZ,EAAqBC,UAArB,EAA+B;IAC9B,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKC,UAAL,GAAkBA,UAAlB;IAEA,KAAKC,eAAL,GAAuBF,OAAO,CAACC,UAAD,CAAP,CAAoBE,IAApB,CAAyBH,OAAzB,CAAvB;EACA;;EAbMI,kBAAP,UAAWJ,OAAX,EAAoBC,UAApB,EAAgCI,cAAhC,EAA8C;IAC7CC,WAAW,CAACN,OAAD,EAAUC,UAAV,CAAX,CAAiCM,GAAjC,CAAqCF,cAArC;EACA,CAFM;;EAIAD,qBAAP,UAAcJ,OAAd,EAAuBC,UAAvB,EAAiC;IAChCK,WAAW,CAACN,OAAD,EAAUC,UAAV,CAAX,CAAiCO,MAAjC;EACA,CAFM;;EAWAJ,4BAAP,UAAWC,cAAX,EAAyB;IAAzB;;IACC,KAAKL,OAAL,CAAa,KAAKC,UAAlB,IAAgC;MAAC;;WAAA,yCAAO;QAAPQ;;;MAChC,OAAOJ,cAAc,CAACK,KAAI,CAACR,eAAL,CAAoBS,KAApB,QAAIC,SAAoBH,IAApB,CAAJ,CAAD,CAArB;IACA,CAFD;EAGA,CAJM;;EAMAL,+BAAP;IACC,KAAKJ,OAAL,CAAa,KAAKC,UAAlB,IAAgC,KAAKC,eAArC;EACA,CAFM;;EAGR;AAAC,CA9BD;;;;AAgCA,SAASI,WAAT,CAAqBN,OAArB,EAA8BC,UAA9B,EAAwC;EACvC,IAAIY,QAAQ,GAAGd,KAAK,CAACe,MAAN,CACd,aAAC;IAAI,QAAC,CAACd,OAAF,KAAcA,OAAd,IAAyBe,CAAC,CAACd,UAAF,KAAiBA,UAA1C;EAAoD,CAD3C,EAEb,CAFa,CAAf;;EAIA,IAAI,CAACY,QAAL,EAAe;IACdA,QAAQ,GAAG,IAAIT,WAAJ,CAAgBJ,OAAhB,EAAyBC,UAAzB,CAAX;IACAF,KAAK,CAACiB,IAAN,CAAWH,QAAX;EACA;;EAED,OAAOA,QAAP;AACA;AAED;;;;;AAGA,eAAeT,WAAf","names":["lists","context","methodName","_originalMethod","bind","MethodEmbed","methodOverride","getInstance","set","remove","args","_this","apply","__spread","instance","filter","h","push"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-amplify\\analytics\\src\\utils\\MethodEmbed.ts"],"sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nconst lists: MethodEmbed[] = [];\n\nexport class MethodEmbed {\n\tpublic context;\n\tpublic methodName;\n\tprivate _originalMethod;\n\tprivate _bindedMethod;\n\n\tstatic add(context, methodName, methodOverride) {\n\t\tgetInstance(context, methodName).set(methodOverride);\n\t}\n\n\tstatic remove(context, methodName) {\n\t\tgetInstance(context, methodName).remove();\n\t}\n\n\tconstructor(context, methodName) {\n\t\tthis.context = context;\n\t\tthis.methodName = methodName;\n\n\t\tthis._originalMethod = context[methodName].bind(context);\n\t}\n\n\tpublic set(methodOverride) {\n\t\tthis.context[this.methodName] = (...args) => {\n\t\t\treturn methodOverride(this._originalMethod(...args));\n\t\t};\n\t}\n\n\tpublic remove() {\n\t\tthis.context[this.methodName] = this._originalMethod;\n\t}\n}\n\nfunction getInstance(context, methodName): MethodEmbed {\n\tlet instance = lists.filter(\n\t\th => h.context === context && h.methodName === methodName\n\t)[0];\n\n\tif (!instance) {\n\t\tinstance = new MethodEmbed(context, methodName);\n\t\tlists.push(instance);\n\t}\n\n\treturn instance;\n}\n\n/**\n * @deprecated use named import\n */\nexport default MethodEmbed;\n"]},"metadata":{},"sourceType":"module"}