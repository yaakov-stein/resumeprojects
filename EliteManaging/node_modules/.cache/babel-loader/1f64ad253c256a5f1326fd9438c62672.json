{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { CacheList, defaultConfig, getCurrTime, CacheObject } from './Utils';\nimport { StorageCache } from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('InMemoryCache');\n/**\n * Customized in-memory cache with LRU implemented\n * @member cacheObj - object which store items\n * @member cacheList - list of keys in the cache with LRU\n * @member curSizeInBytes - current size of the cache\n * @member maxPriority - max of the priority\n * @member cacheSizeLimit - the limit of cache size\n */\n\nvar InMemoryCacheClass =\n/** @class */\nfunction (_super) {\n  __extends(InMemoryCacheClass, _super);\n  /**\n   * initialize the cache\n   *\n   * @param config - the configuration of the cache\n   */\n\n\n  function InMemoryCacheClass(config) {\n    var _this = this;\n\n    var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\n    _this = _super.call(this, cacheConfig) || this;\n    logger.debug('now we start!');\n    _this.cacheList = [];\n    _this.curSizeInBytes = 0;\n    _this.maxPriority = 5;\n    _this.getItem = _this.getItem.bind(_this);\n    _this.setItem = _this.setItem.bind(_this);\n    _this.removeItem = _this.removeItem.bind(_this); // initialize list for every priority\n\n    for (var i = 0; i < _this.maxPriority; i += 1) {\n      _this.cacheList[i] = new CacheList();\n    }\n\n    return _this;\n  }\n  /**\n   * decrease current size of the cache\n   *\n   * @param amount - the amount of the cache size which needs to be decreased\n   */\n\n\n  InMemoryCacheClass.prototype._decreaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes -= amount;\n  };\n  /**\n   * increase current size of the cache\n   *\n   * @param amount - the amount of the cache szie which need to be increased\n   */\n\n\n  InMemoryCacheClass.prototype._increaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes += amount;\n  };\n  /**\n   * check whether item is expired\n   *\n   * @param key - the key of the item\n   *\n   * @return true if the item is expired.\n   */\n\n\n  InMemoryCacheClass.prototype._isExpired = function (key) {\n    var text = CacheObject.getItem(key);\n    var item = JSON.parse(text);\n\n    if (getCurrTime() >= item.expires) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * delete item from cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n\n\n  InMemoryCacheClass.prototype._removeItem = function (prefixedKey, listIdx) {\n    // delete the key from the list\n    this.cacheList[listIdx].removeItem(prefixedKey); // decrease the current size of the cache\n\n    this._decreaseCurSizeInBytes(JSON.parse(CacheObject.getItem(prefixedKey)).byteSize); // finally remove the item from memory\n\n\n    CacheObject.removeItem(prefixedKey);\n  };\n  /**\n   * put item into cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param itemData - the value of the item\n   * @param itemSizeInBytes - the byte size of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n\n\n  InMemoryCacheClass.prototype._setItem = function (prefixedKey, item, listIdx) {\n    // insert the key into the list\n    this.cacheList[listIdx].insertItem(prefixedKey); // increase the current size of the cache\n\n    this._increaseCurSizeInBytes(item.byteSize); // finally add the item into memory\n\n\n    CacheObject.setItem(prefixedKey, JSON.stringify(item));\n  };\n  /**\n   * see whether cache is full\n   *\n   * @param itemSize\n   *\n   * @return true if cache is full\n   */\n\n\n  InMemoryCacheClass.prototype._isCacheFull = function (itemSize) {\n    return this.curSizeInBytes + itemSize > this.config.capacityInBytes;\n  };\n  /**\n   * check whether the cache contains the key\n   *\n   * @param key\n   */\n\n\n  InMemoryCacheClass.prototype.containsKey = function (key) {\n    var prefixedKey = this.config.keyPrefix + key;\n\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      if (this.cacheList[i].containsKey(prefixedKey)) {\n        return i + 1;\n      }\n    }\n\n    return -1;\n  };\n  /**\n   * * Set item into cache. You can put number, string, boolean or object.\n   * The cache will first check whether has the same key.\n   * If it has, it will delete the old item and then put the new item in\n   * The cache will pop out items if it is full\n   * You can specify the cache item options. The cache will abort and output a warning:\n   * If the key is invalid\n   * If the size of the item exceeds itemMaxSize.\n   * If the value is undefined\n   * If incorrect cache item configuration\n   * If error happened with browser storage\n   *\n   * @param key - the key of the item\n   * @param value - the value of the item\n   * @param options - optional, the specified meta-data\n   *\n   * @throws if the item is too big which exceeds the limit of single item size\n   * @throws if the key is invalid\n   */\n\n\n  InMemoryCacheClass.prototype.setItem = function (key, value, options) {\n    var prefixedKey = this.config.keyPrefix + key; // invalid keys\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return;\n    }\n\n    if (typeof value === 'undefined') {\n      logger.warn(\"The value of item should not be undefined!\");\n      return;\n    }\n\n    var cacheItemOptions = {\n      priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\n      expires: options && options.expires !== undefined ? options.expires : this.config.defaultTTL + getCurrTime()\n    };\n\n    if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n      logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n      return;\n    }\n\n    var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions); // check wether this item is too big;\n\n    if (item.byteSize > this.config.itemMaxSize) {\n      logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n      return;\n    } // if key already in the cache, then delete it.\n\n\n    var presentKeyPrio = this.containsKey(key);\n\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    } // pop out items in the cache when cache is full based on LRU\n    // first start from lowest priority cache list\n\n\n    var cacheListIdx = this.maxPriority - 1;\n\n    while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\n      if (!this.cacheList[cacheListIdx].isEmpty()) {\n        var popedItemKey = this.cacheList[cacheListIdx].getLastItem();\n\n        this._removeItem(popedItemKey, cacheListIdx);\n      } else {\n        cacheListIdx -= 1;\n      }\n    }\n\n    this._setItem(prefixedKey, item, Number(item.priority) - 1);\n  };\n  /**\n   * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\n   * If you specified callback function in the options,\n   * then the function will be executed if no such item in the cache\n   * and finally put the return value into cache.\n   * Please make sure the callback function will return the value you want to put into the cache.\n   * The cache will abort output a warning:\n   * If the key is invalid\n   *\n   * @param key - the key of the item\n   * @param options - the options of callback function\n   */\n\n\n  InMemoryCacheClass.prototype.getItem = function (key, options) {\n    var ret = null;\n    var prefixedKey = this.config.keyPrefix + key;\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return null;\n    } // check whether it's in the cachelist\n\n\n    var presentKeyPrio = this.containsKey(key);\n\n    if (presentKeyPrio !== -1) {\n      if (this._isExpired(prefixedKey)) {\n        // if expired, remove that item and return null\n        this._removeItem(prefixedKey, presentKeyPrio - 1);\n      } else {\n        // if not expired, great, return the value and refresh it\n        ret = CacheObject.getItem(prefixedKey);\n        var item = JSON.parse(ret);\n        this.cacheList[item.priority - 1].refresh(prefixedKey);\n        return item.data;\n      }\n    }\n\n    if (options && options.callback !== undefined) {\n      var val = options.callback();\n\n      if (val !== null) {\n        this.setItem(key, val, options);\n      }\n\n      return val;\n    }\n\n    return null;\n  };\n  /**\n   * remove item from the cache\n   *\n   * @param key - the key of the item\n   */\n\n\n  InMemoryCacheClass.prototype.removeItem = function (key) {\n    var prefixedKey = this.config.keyPrefix + key; // check if the key is in the cache\n\n    var presentKeyPrio = this.containsKey(key);\n\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    }\n  };\n  /**\n   * clear the entire cache\n   */\n\n\n  InMemoryCacheClass.prototype.clear = function () {\n    var e_1, _a;\n\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      try {\n        for (var _b = (e_1 = void 0, __values(this.cacheList[i].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var key = _c.value;\n\n          this._removeItem(key, i);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  /**\n   * Return all the keys in the cache.\n   */\n\n\n  InMemoryCacheClass.prototype.getAllKeys = function () {\n    var e_2, _a;\n\n    var keys = [];\n\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      try {\n        for (var _b = (e_2 = void 0, __values(this.cacheList[i].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var key = _c.value;\n          keys.push(key.substring(this.config.keyPrefix.length));\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n\n    return keys;\n  };\n  /**\n   * return the current size of the cache\n   *\n   * @return the current size of the cache\n   */\n\n\n  InMemoryCacheClass.prototype.getCacheCurSize = function () {\n    return this.curSizeInBytes;\n  };\n  /**\n   * Return a new instance of cache with customized configuration.\n   * @param config - the customized configuration\n   */\n\n\n  InMemoryCacheClass.prototype.createInstance = function (config) {\n    return new InMemoryCacheClass(config);\n  };\n\n  return InMemoryCacheClass;\n}(StorageCache);\n\nexport { InMemoryCacheClass };\nexport var InMemoryCache = new InMemoryCacheClass();\n/**\n * @deprecated use named import\n */\n\nexport default InMemoryCache;","map":{"version":3,"mappings":"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","names":["CacheList","defaultConfig","getCurrTime","CacheObject","StorageCache","ConsoleLogger","Logger","logger","__extends","config","cacheConfig","Object","assign","_this","debug","cacheList","curSizeInBytes","maxPriority","getItem","bind","setItem","removeItem","i","InMemoryCacheClass","amount","key","text","item","JSON","parse","expires","prefixedKey","listIdx","_decreaseCurSizeInBytes","byteSize","insertItem","_increaseCurSizeInBytes","stringify","itemSize","capacityInBytes","keyPrefix","containsKey","value","options","cacheCurSizeKey","warn","cacheItemOptions","priority","undefined","defaultPriority","defaultTTL","fillCacheItem","itemMaxSize","presentKeyPrio","_removeItem","cacheListIdx","_isCacheFull","isEmpty","popedItemKey","getLastItem","_setItem","Number","ret","_isExpired","refresh","data","callback","val","getKeys","_c","keys","push","substring","length","InMemoryCache"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-amplify\\cache\\src\\InMemoryCache.ts"],"sourcesContent":["/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\n\r\nimport { CacheList, defaultConfig, getCurrTime, CacheObject } from './Utils';\r\n\r\nimport { StorageCache } from './StorageCache';\r\nimport { ICache, CacheConfig, CacheItem, CacheItemOptions } from './types';\r\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\r\n\r\nconst logger = new Logger('InMemoryCache');\r\n\r\n/**\r\n * Customized in-memory cache with LRU implemented\r\n * @member cacheObj - object which store items\r\n * @member cacheList - list of keys in the cache with LRU\r\n * @member curSizeInBytes - current size of the cache\r\n * @member maxPriority - max of the priority\r\n * @member cacheSizeLimit - the limit of cache size\r\n */\r\nexport class InMemoryCacheClass extends StorageCache implements ICache {\r\n\tprivate cacheList: CacheList[];\r\n\tprivate curSizeInBytes: number;\r\n\tprivate maxPriority: number;\r\n\tprivate cacheSizeLimit: number;\r\n\r\n\t/**\r\n\t * initialize the cache\r\n\t *\r\n\t * @param config - the configuration of the cache\r\n\t */\r\n\tconstructor(config?: CacheConfig) {\r\n\t\tconst cacheConfig = config\r\n\t\t\t? Object.assign({}, defaultConfig, config)\r\n\t\t\t: defaultConfig;\r\n\t\tsuper(cacheConfig);\r\n\t\tlogger.debug('now we start!');\r\n\t\tthis.cacheList = [];\r\n\t\tthis.curSizeInBytes = 0;\r\n\t\tthis.maxPriority = 5;\r\n\r\n\t\tthis.getItem = this.getItem.bind(this);\r\n\t\tthis.setItem = this.setItem.bind(this);\r\n\t\tthis.removeItem = this.removeItem.bind(this);\r\n\r\n\t\t// initialize list for every priority\r\n\t\tfor (let i = 0; i < this.maxPriority; i += 1) {\r\n\t\t\tthis.cacheList[i] = new CacheList();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * decrease current size of the cache\r\n\t *\r\n\t * @param amount - the amount of the cache size which needs to be decreased\r\n\t */\r\n\tprivate _decreaseCurSizeInBytes(amount: number): void {\r\n\t\tthis.curSizeInBytes -= amount;\r\n\t}\r\n\r\n\t/**\r\n\t * increase current size of the cache\r\n\t *\r\n\t * @param amount - the amount of the cache szie which need to be increased\r\n\t */\r\n\tprivate _increaseCurSizeInBytes(amount: number): void {\r\n\t\tthis.curSizeInBytes += amount;\r\n\t}\r\n\r\n\t/**\r\n\t * check whether item is expired\r\n\t *\r\n\t * @param key - the key of the item\r\n\t *\r\n\t * @return true if the item is expired.\r\n\t */\r\n\tprivate _isExpired(key: string): boolean {\r\n\t\tconst text: string | null = CacheObject.getItem(key);\r\n\t\tconst item: CacheItem = JSON.parse(text);\r\n\t\tif (getCurrTime() >= item.expires) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * delete item from cache\r\n\t *\r\n\t * @param prefixedKey - the key of the item\r\n\t * @param listIdx - indicates which cache list the key belongs to\r\n\t */\r\n\tprivate _removeItem(prefixedKey: string, listIdx: number): void {\r\n\t\t// delete the key from the list\r\n\t\tthis.cacheList[listIdx].removeItem(prefixedKey);\r\n\t\t// decrease the current size of the cache\r\n\t\tthis._decreaseCurSizeInBytes(\r\n\t\t\tJSON.parse(CacheObject.getItem(prefixedKey)).byteSize\r\n\t\t);\r\n\t\t// finally remove the item from memory\r\n\t\tCacheObject.removeItem(prefixedKey);\r\n\t}\r\n\r\n\t/**\r\n\t * put item into cache\r\n\t *\r\n\t * @param prefixedKey - the key of the item\r\n\t * @param itemData - the value of the item\r\n\t * @param itemSizeInBytes - the byte size of the item\r\n\t * @param listIdx - indicates which cache list the key belongs to\r\n\t */\r\n\tprivate _setItem(\r\n\t\tprefixedKey: string,\r\n\t\titem: CacheItem,\r\n\t\tlistIdx: number\r\n\t): void {\r\n\t\t// insert the key into the list\r\n\t\tthis.cacheList[listIdx].insertItem(prefixedKey);\r\n\t\t// increase the current size of the cache\r\n\t\tthis._increaseCurSizeInBytes(item.byteSize);\r\n\t\t// finally add the item into memory\r\n\t\tCacheObject.setItem(prefixedKey, JSON.stringify(item));\r\n\t}\r\n\r\n\t/**\r\n\t * see whether cache is full\r\n\t *\r\n\t * @param itemSize\r\n\t *\r\n\t * @return true if cache is full\r\n\t */\r\n\tprivate _isCacheFull(itemSize: number): boolean {\r\n\t\treturn this.curSizeInBytes + itemSize > this.config.capacityInBytes;\r\n\t}\r\n\r\n\t/**\r\n\t * check whether the cache contains the key\r\n\t *\r\n\t * @param key\r\n\t */\r\n\tprivate containsKey(key: string): number {\r\n\t\tconst prefixedKey: string = this.config.keyPrefix + key;\r\n\t\tfor (let i = 0; i < this.maxPriority; i += 1) {\r\n\t\t\tif (this.cacheList[i].containsKey(prefixedKey)) {\r\n\t\t\t\treturn i + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/**\r\n\t * * Set item into cache. You can put number, string, boolean or object.\r\n\t * The cache will first check whether has the same key.\r\n\t * If it has, it will delete the old item and then put the new item in\r\n\t * The cache will pop out items if it is full\r\n\t * You can specify the cache item options. The cache will abort and output a warning:\r\n\t * If the key is invalid\r\n\t * If the size of the item exceeds itemMaxSize.\r\n\t * If the value is undefined\r\n\t * If incorrect cache item configuration\r\n\t * If error happened with browser storage\r\n\t *\r\n\t * @param key - the key of the item\r\n\t * @param value - the value of the item\r\n\t * @param options - optional, the specified meta-data\r\n\t *\r\n\t * @throws if the item is too big which exceeds the limit of single item size\r\n\t * @throws if the key is invalid\r\n\t */\r\n\tpublic setItem(\r\n\t\tkey: string,\r\n\t\tvalue: object | string | number | boolean,\r\n\t\toptions?: CacheItemOptions\r\n\t): void {\r\n\t\tconst prefixedKey: string = this.config.keyPrefix + key;\r\n\t\t// invalid keys\r\n\t\tif (\r\n\t\t\tprefixedKey === this.config.keyPrefix ||\r\n\t\t\tprefixedKey === this.cacheCurSizeKey\r\n\t\t) {\r\n\t\t\tlogger.warn(`Invalid key: should not be empty or 'CurSize'`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (typeof value === 'undefined') {\r\n\t\t\tlogger.warn(`The value of item should not be undefined!`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst cacheItemOptions: CacheItemOptions = {\r\n\t\t\tpriority:\r\n\t\t\t\toptions && options.priority !== undefined\r\n\t\t\t\t\t? options.priority\r\n\t\t\t\t\t: this.config.defaultPriority,\r\n\t\t\texpires:\r\n\t\t\t\toptions && options.expires !== undefined\r\n\t\t\t\t\t? options.expires\r\n\t\t\t\t\t: this.config.defaultTTL + getCurrTime(),\r\n\t\t};\r\n\r\n\t\tif (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\r\n\t\t\tlogger.warn(\r\n\t\t\t\t`Invalid parameter: priority due to out or range. It should be within 1 and 5.`\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst item: CacheItem = this.fillCacheItem(\r\n\t\t\tprefixedKey,\r\n\t\t\tvalue,\r\n\t\t\tcacheItemOptions\r\n\t\t);\r\n\r\n\t\t// check wether this item is too big;\r\n\t\tif (item.byteSize > this.config.itemMaxSize) {\r\n\t\t\tlogger.warn(\r\n\t\t\t\t`Item with key: ${key} you are trying to put into is too big!`\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// if key already in the cache, then delete it.\r\n\t\tconst presentKeyPrio: number = this.containsKey(key);\r\n\t\tif (presentKeyPrio !== -1) {\r\n\t\t\tthis._removeItem(prefixedKey, presentKeyPrio - 1);\r\n\t\t}\r\n\r\n\t\t// pop out items in the cache when cache is full based on LRU\r\n\t\t// first start from lowest priority cache list\r\n\t\tlet cacheListIdx = this.maxPriority - 1;\r\n\t\twhile (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\r\n\t\t\tif (!this.cacheList[cacheListIdx].isEmpty()) {\r\n\t\t\t\tconst popedItemKey = this.cacheList[cacheListIdx].getLastItem();\r\n\t\t\t\tthis._removeItem(popedItemKey, cacheListIdx);\r\n\t\t\t} else {\r\n\t\t\t\tcacheListIdx -= 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._setItem(prefixedKey, item, Number(item.priority) - 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\r\n\t * If you specified callback function in the options,\r\n\t * then the function will be executed if no such item in the cache\r\n\t * and finally put the return value into cache.\r\n\t * Please make sure the callback function will return the value you want to put into the cache.\r\n\t * The cache will abort output a warning:\r\n\t * If the key is invalid\r\n\t *\r\n\t * @param key - the key of the item\r\n\t * @param options - the options of callback function\r\n\t */\r\n\tpublic getItem(key: string, options?: CacheItemOptions): any {\r\n\t\tlet ret: string | null = null;\r\n\t\tconst prefixedKey: string = this.config.keyPrefix + key;\r\n\r\n\t\tif (\r\n\t\t\tprefixedKey === this.config.keyPrefix ||\r\n\t\t\tprefixedKey === this.cacheCurSizeKey\r\n\t\t) {\r\n\t\t\tlogger.warn(`Invalid key: should not be empty or 'CurSize'`);\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// check whether it's in the cachelist\r\n\t\tconst presentKeyPrio: number = this.containsKey(key);\r\n\t\tif (presentKeyPrio !== -1) {\r\n\t\t\tif (this._isExpired(prefixedKey)) {\r\n\t\t\t\t// if expired, remove that item and return null\r\n\t\t\t\tthis._removeItem(prefixedKey, presentKeyPrio - 1);\r\n\t\t\t} else {\r\n\t\t\t\t// if not expired, great, return the value and refresh it\r\n\t\t\t\tret = CacheObject.getItem(prefixedKey);\r\n\t\t\t\tconst item: CacheItem = JSON.parse(ret);\r\n\t\t\t\tthis.cacheList[item.priority - 1].refresh(prefixedKey);\r\n\t\t\t\treturn item.data;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (options && options.callback !== undefined) {\r\n\t\t\tconst val: object | string | number | boolean = options.callback();\r\n\t\t\tif (val !== null) {\r\n\t\t\t\tthis.setItem(key, val, options);\r\n\t\t\t}\r\n\t\t\treturn val;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * remove item from the cache\r\n\t *\r\n\t * @param key - the key of the item\r\n\t */\r\n\tpublic removeItem(key: string): void {\r\n\t\tconst prefixedKey: string = this.config.keyPrefix + key;\r\n\r\n\t\t// check if the key is in the cache\r\n\t\tconst presentKeyPrio: number = this.containsKey(key);\r\n\t\tif (presentKeyPrio !== -1) {\r\n\t\t\tthis._removeItem(prefixedKey, presentKeyPrio - 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * clear the entire cache\r\n\t */\r\n\tpublic clear(): void {\r\n\t\tfor (let i = 0; i < this.maxPriority; i += 1) {\r\n\t\t\tfor (const key of this.cacheList[i].getKeys()) {\r\n\t\t\t\tthis._removeItem(key, i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return all the keys in the cache.\r\n\t */\r\n\tpublic getAllKeys(): string[] {\r\n\t\tconst keys: string[] = [];\r\n\t\tfor (let i = 0; i < this.maxPriority; i += 1) {\r\n\t\t\tfor (const key of this.cacheList[i].getKeys()) {\r\n\t\t\t\tkeys.push(key.substring(this.config.keyPrefix.length));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn keys;\r\n\t}\r\n\r\n\t/**\r\n\t * return the current size of the cache\r\n\t *\r\n\t * @return the current size of the cache\r\n\t */\r\n\tpublic getCacheCurSize(): number {\r\n\t\treturn this.curSizeInBytes;\r\n\t}\r\n\r\n\t/**\r\n\t * Return a new instance of cache with customized configuration.\r\n\t * @param config - the customized configuration\r\n\t */\r\n\tpublic createInstance(config: CacheConfig): ICache {\r\n\t\treturn new InMemoryCacheClass(config);\r\n\t}\r\n}\r\n\r\nexport const InMemoryCache: ICache = new InMemoryCacheClass();\r\n/**\r\n * @deprecated use named import\r\n */\r\nexport default InMemoryCache;\r\n"]},"metadata":{},"sourceType":"module"}