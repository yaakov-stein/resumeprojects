{"ast":null,"code":"import { __read } from \"tslib\";\n/**\n * @internal\n */\n\nexport function resolveLogins(logins) {\n  return Promise.all(Object.keys(logins).reduce(function (arr, name) {\n    var tokenOrProvider = logins[name];\n\n    if (typeof tokenOrProvider === \"string\") {\n      arr.push([name, tokenOrProvider]);\n    } else {\n      arr.push(tokenOrProvider().then(function (token) {\n        return [name, token];\n      }));\n    }\n\n    return arr;\n  }, [])).then(function (resolvedPairs) {\n    return resolvedPairs.reduce(function (logins, _a) {\n      var _b = __read(_a, 2),\n          key = _b[0],\n          value = _b[1];\n\n      logins[key] = value;\n      return logins;\n    }, {});\n  });\n}","map":{"version":3,"mappings":";AAEA;;;;AAGA,OAAM,SAAUA,aAAV,CAAwBC,MAAxB,EAAsC;EAC1C,OAAOC,OAAO,CAACC,GAAR,CACLC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,MAApB,CAA2B,UAACC,GAAD,EAA2DC,IAA3D,EAAuE;IAChG,IAAMC,eAAe,GAAGR,MAAM,CAACO,IAAD,CAA9B;;IACA,IAAI,OAAOC,eAAP,KAA2B,QAA/B,EAAyC;MACvCF,GAAG,CAACG,IAAJ,CAAS,CAACF,IAAD,EAAOC,eAAP,CAAT;IACD,CAFD,MAEO;MACLF,GAAG,CAACG,IAAJ,CAASD,eAAe,GAAGE,IAAlB,CAAuB,UAACC,KAAD,EAAM;QAAK,QAACJ,IAAD,EAAOI,KAAP;MAAiC,CAAnE,CAAT;IACD;;IACD,OAAOL,GAAP;EACD,CARD,EAQG,EARH,CADK,EAULI,IAVK,CAUA,UAACE,aAAD,EAAc;IACnB,oBAAa,CAACP,MAAd,CAAqB,UAACL,MAAD,EAAyBa,EAAzB,EAAqC;UAAZC;UAACC,GAAG;UAAEC,KAAK;;MACvDhB,MAAM,CAACe,GAAD,CAAN,GAAcC,KAAd;MACA,OAAOhB,MAAP;IACD,CAHD,EAGG,EAHH;EAGwB,CAdnB,CAAP;AAgBD","names":["resolveLogins","logins","Promise","all","Object","keys","reduce","arr","name","tokenOrProvider","push","then","token","resolvedPairs","_a","_b","key","value"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\credential-provider-cognito-identity\\src\\resolveLogins.ts"],"sourcesContent":["import { Logins, ResolvedLogins } from \"./Logins\";\n\n/**\n * @internal\n */\nexport function resolveLogins(logins: Logins): Promise<ResolvedLogins> {\n  return Promise.all(\n    Object.keys(logins).reduce((arr: Array<[string, string] | Promise<[string, string]>>, name: string) => {\n      const tokenOrProvider = logins[name];\n      if (typeof tokenOrProvider === \"string\") {\n        arr.push([name, tokenOrProvider] as [string, string]);\n      } else {\n        arr.push(tokenOrProvider().then((token) => [name, token] as [string, string]));\n      }\n      return arr;\n    }, [] as Array<Promise<[string, string]>>)\n  ).then((resolvedPairs) =>\n    resolvedPairs.reduce((logins: ResolvedLogins, [key, value]) => {\n      logins[key] = value;\n      return logins;\n    }, {} as ResolvedLogins)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}