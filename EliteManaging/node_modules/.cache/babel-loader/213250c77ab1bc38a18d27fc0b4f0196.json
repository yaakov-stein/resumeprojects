{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __asyncValues = this && this.__asyncValues || function (o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n      i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelPredicateCreator, ModelSortPredicateCreator } from '../../predicates';\nimport { isPredicateObj, OpType, QueryOne } from '../../types';\nimport { exhaustiveCheck, getIndex, getIndexFromAssociation, isModelConstructor, isPrivateMode, traverseModel, validatePredicate, sortCompareFunction } from '../../util';\nvar logger = new Logger('DataStore');\nvar DB_NAME = 'amplify-datastore';\n\nvar IndexedDBAdapter =\n/** @class */\nfunction () {\n  function IndexedDBAdapter() {\n    this.dbName = DB_NAME;\n  }\n\n  IndexedDBAdapter.prototype.checkPrivate = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var isPrivate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , isPrivateMode().then(function (isPrivate) {\n              return isPrivate;\n            })];\n\n          case 1:\n            isPrivate = _a.sent();\n\n            if (isPrivate) {\n              logger.error(\"IndexedDB not supported in this browser's private mode\");\n              return [2\n              /*return*/\n              , Promise.reject(\"IndexedDB not supported in this browser's private mode\")];\n            } else {\n              return [2\n              /*return*/\n              , Promise.resolve()];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return this.getStorename(namespace, modelName);\n  };\n\n  IndexedDBAdapter.prototype.getStorename = function (namespace, modelName) {\n    var storeName = namespace + \"_\" + modelName;\n    return storeName;\n  };\n\n  IndexedDBAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName, sessionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var VERSION, _a, error_1;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _b.sent();\n\n            if (!!this.initPromise) return [3\n            /*break*/\n            , 2];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.initPromise];\n\n          case 3:\n            _b.sent();\n\n            _b.label = 4;\n\n          case 4:\n            if (sessionId) {\n              this.dbName = DB_NAME + \"-\" + sessionId;\n            }\n\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _b.label = 5;\n\n          case 5:\n            _b.trys.push([5, 8,, 9]);\n\n            if (!!this.db) return [3\n            /*break*/\n            , 7];\n            VERSION = 2;\n            _a = this;\n            return [4\n            /*yield*/\n            , idb.openDB(this.dbName, VERSION, {\n              upgrade: function (db, oldVersion, newVersion, txn) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var _a, _b, storeName, origStore, tmpName, newStore, cursor, count, e_1_1, error_2;\n\n                  var e_1, _c;\n\n                  var _this = this;\n\n                  return __generator(this, function (_d) {\n                    switch (_d.label) {\n                      case 0:\n                        if (oldVersion === 0) {\n                          Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                            var namespace = theSchema.namespaces[namespaceName];\n                            Object.keys(namespace.models).forEach(function (modelName) {\n                              var storeName = _this.getStorename(namespaceName, modelName);\n\n                              _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                            });\n                          });\n                          return [2\n                          /*return*/\n                          ];\n                        }\n\n                        if (!(oldVersion === 1 && newVersion === 2)) return [3\n                        /*break*/\n                        , 16];\n                        _d.label = 1;\n\n                      case 1:\n                        _d.trys.push([1, 14,, 15]);\n\n                        _d.label = 2;\n\n                      case 2:\n                        _d.trys.push([2, 11, 12, 13]);\n\n                        _a = __values(txn.objectStoreNames), _b = _a.next();\n                        _d.label = 3;\n\n                      case 3:\n                        if (!!_b.done) return [3\n                        /*break*/\n                        , 10];\n                        storeName = _b.value;\n                        origStore = txn.objectStore(storeName);\n                        tmpName = \"tmp_\" + storeName;\n                        origStore.name = tmpName;\n                        newStore = db.createObjectStore(storeName, {\n                          keyPath: undefined,\n                          autoIncrement: true\n                        });\n                        newStore.createIndex('byId', 'id', {\n                          unique: true\n                        });\n                        return [4\n                        /*yield*/\n                        , origStore.openCursor()];\n\n                      case 4:\n                        cursor = _d.sent();\n                        count = 0;\n                        _d.label = 5;\n\n                      case 5:\n                        if (!(cursor && cursor.value)) return [3\n                        /*break*/\n                        , 8]; // we don't pass key, since they are all new entries in the new store\n\n                        return [4\n                        /*yield*/\n                        , newStore.put(cursor.value)];\n\n                      case 6:\n                        // we don't pass key, since they are all new entries in the new store\n                        _d.sent();\n\n                        return [4\n                        /*yield*/\n                        , cursor.continue()];\n\n                      case 7:\n                        cursor = _d.sent();\n                        count++;\n                        return [3\n                        /*break*/\n                        , 5];\n\n                      case 8:\n                        // delete original\n                        db.deleteObjectStore(tmpName);\n                        logger.debug(count + \" \" + storeName + \" records migrated\");\n                        _d.label = 9;\n\n                      case 9:\n                        _b = _a.next();\n                        return [3\n                        /*break*/\n                        , 3];\n\n                      case 10:\n                        return [3\n                        /*break*/\n                        , 13];\n\n                      case 11:\n                        e_1_1 = _d.sent();\n                        e_1 = {\n                          error: e_1_1\n                        };\n                        return [3\n                        /*break*/\n                        , 13];\n\n                      case 12:\n                        try {\n                          if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                        } finally {\n                          if (e_1) throw e_1.error;\n                        }\n\n                        return [7\n                        /*endfinally*/\n                        ];\n\n                      case 13:\n                        // add new models created after IndexedDB, but before migration\n                        // this case may happen when a user has not opened an app for\n                        // some time and a new model is added during that time\n                        Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                          var namespace = theSchema.namespaces[namespaceName];\n                          var objectStoreNames = new Set(txn.objectStoreNames);\n                          Object.keys(namespace.models).map(function (modelName) {\n                            return [modelName, _this.getStorename(namespaceName, modelName)];\n                          }).filter(function (_a) {\n                            var _b = __read(_a, 2),\n                                storeName = _b[1];\n\n                            return !objectStoreNames.has(storeName);\n                          }).forEach(function (_a) {\n                            var _b = __read(_a, 2),\n                                modelName = _b[0],\n                                storeName = _b[1];\n\n                            _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                          });\n                        });\n                        return [3\n                        /*break*/\n                        , 15];\n\n                      case 14:\n                        error_2 = _d.sent();\n                        logger.error('Error migrating IndexedDB data', error_2);\n                        txn.abort();\n                        throw error_2;\n\n                      case 15:\n                        return [2\n                        /*return*/\n                        ];\n\n                      case 16:\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              }\n            })];\n\n          case 6:\n            _a.db = _b.sent();\n            this.resolve();\n            _b.label = 7;\n\n          case 7:\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            error_1 = _b.sent();\n            this.reject(error_1);\n            return [3\n            /*break*/\n            , 9];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype._get = function (storeOrStoreName, id) {\n    return __awaiter(this, void 0, void 0, function () {\n      var index, storeName, store, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (typeof storeOrStoreName === 'string') {\n              storeName = storeOrStoreName;\n              index = this.db.transaction(storeName, 'readonly').store.index('byId');\n            } else {\n              store = storeOrStoreName;\n              index = store.index('byId');\n            }\n\n            return [4\n            /*yield*/\n            , index.get(id)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.save = function (model, condition) {\n    var e_2, _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var modelConstructor, storeName, connectedModels, namespaceName, set, connectionStoreNames, tx, store, fromDB, predicates, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, store_1, id, fromDB_1, opType, key, e_2_1;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _b.sent();\n\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            storeName = this.getStorenameForModel(modelConstructor);\n            connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[this.namespaceResolver(modelConstructor)], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            set = new Set();\n            connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n              var modelName = _a.modelName,\n                  item = _a.item,\n                  instance = _a.instance;\n\n              var storeName = _this.getStorename(namespaceName, modelName);\n\n              set.add(storeName);\n              return {\n                storeName: storeName,\n                item: item,\n                instance: instance\n              };\n            });\n            tx = this.db.transaction(__spread([storeName], Array.from(set.values())), 'readwrite');\n            store = tx.objectStore(storeName);\n            return [4\n            /*yield*/\n            , this._get(store, model.id)];\n\n          case 2:\n            fromDB = _b.sent();\n\n            if (condition && fromDB) {\n              predicates = ModelPredicateCreator.getPredicates(condition);\n              predicateObjs = predicates.predicates, type = predicates.type;\n              isValid = validatePredicate(fromDB, type, predicateObjs);\n\n              if (!isValid) {\n                msg = 'Conditional update failed';\n                logger.error(msg, {\n                  model: fromDB,\n                  condition: predicateObjs\n                });\n                throw new Error(msg);\n              }\n            }\n\n            result = [];\n            _b.label = 3;\n\n          case 3:\n            _b.trys.push([3, 11, 12, 17]);\n\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _b.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , connectionStoreNames_1.next()];\n\n          case 5:\n            if (!(connectionStoreNames_1_1 = _b.sent(), !connectionStoreNames_1_1.done)) return [3\n            /*break*/\n            , 10];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance;\n            store_1 = tx.objectStore(storeName_1);\n            id = item.id;\n            return [4\n            /*yield*/\n            , this._get(store_1, id)];\n\n          case 6:\n            fromDB_1 = _b.sent();\n            opType = fromDB_1 === undefined ? OpType.INSERT : OpType.UPDATE;\n            if (!(id === model.id || opType === OpType.INSERT)) return [3\n            /*break*/\n            , 9];\n            return [4\n            /*yield*/\n            , store_1.index('byId').getKey(item.id)];\n\n          case 7:\n            key = _b.sent();\n            return [4\n            /*yield*/\n            , store_1.put(item, key)];\n\n          case 8:\n            _b.sent();\n\n            result.push([instance, opType]);\n            _b.label = 9;\n\n          case 9:\n            return [3\n            /*break*/\n            , 4];\n\n          case 10:\n            return [3\n            /*break*/\n            , 17];\n\n          case 11:\n            e_2_1 = _b.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3\n            /*break*/\n            , 17];\n\n          case 12:\n            _b.trys.push([12,, 15, 16]);\n\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3\n            /*break*/\n            , 14];\n            return [4\n            /*yield*/\n            , _a.call(connectionStoreNames_1)];\n\n          case 13:\n            _b.sent();\n\n            _b.label = 14;\n\n          case 14:\n            return [3\n            /*break*/\n            , 16];\n\n          case 15:\n            if (e_2) throw e_2.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 16:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 17:\n            return [4\n            /*yield*/\n            , tx.done];\n\n          case 18:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n    var records_1, records_1_1, records_2, records_2_1;\n\n    var e_3, _a, e_4, _b, e_5, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor, tx, relations_1, relations_1_1, relation, fieldName, modelName, targetName, storeName, store, modelConstructor_1, _d, recordItem, getByfield, connectionRecord, e_4_1, recordItem, connectionRecord, e_5_1, e_3_1;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            namespace = this.schema.namespaces[namespaceName];\n            relations = namespace.relationships[srcModelName].relationTypes;\n            connectionStoreNames = relations.map(function (_a) {\n              var modelName = _a.modelName;\n              return _this.getStorename(namespaceName, modelName);\n            });\n            modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n\n            if (connectionStoreNames.length === 0) {\n              return [2\n              /*return*/\n              , records.map(function (record) {\n                return _this.modelInstanceCreator(modelConstructor, record);\n              })];\n            }\n\n            tx = this.db.transaction(__spread(connectionStoreNames), 'readonly');\n            _e.label = 1;\n\n          case 1:\n            _e.trys.push([1, 34, 35, 40]);\n\n            relations_1 = __asyncValues(relations);\n            _e.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , relations_1.next()];\n\n          case 3:\n            if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3\n            /*break*/\n            , 33];\n            relation = relations_1_1.value;\n            fieldName = relation.fieldName, modelName = relation.modelName, targetName = relation.targetName;\n            storeName = this.getStorename(namespaceName, modelName);\n            store = tx.objectStore(storeName);\n            modelConstructor_1 = this.getModelConstructorByModelName(namespaceName, modelName);\n            _d = relation.relationType;\n\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3\n                /*break*/\n                , 4];\n\n              case 'BELONGS_TO':\n                return [3\n                /*break*/\n                , 17];\n\n              case 'HAS_MANY':\n                return [3\n                /*break*/\n                , 30];\n            }\n\n            return [3\n            /*break*/\n            , 31];\n\n          case 4:\n            _e.trys.push([4, 10, 11, 16]);\n\n            records_1 = __asyncValues(records);\n            _e.label = 5;\n\n          case 5:\n            return [4\n            /*yield*/\n            , records_1.next()];\n\n          case 6:\n            if (!(records_1_1 = _e.sent(), !records_1_1.done)) return [3\n            /*break*/\n            , 9];\n            recordItem = records_1_1.value;\n            getByfield = recordItem[targetName] ? targetName : fieldName;\n            if (!recordItem[getByfield]) return [3\n            /*break*/\n            , 9];\n            return [4\n            /*yield*/\n            , this._get(store, recordItem[getByfield])];\n\n          case 7:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            _e.label = 8;\n\n          case 8:\n            return [3\n            /*break*/\n            , 5];\n\n          case 9:\n            return [3\n            /*break*/\n            , 16];\n\n          case 10:\n            e_4_1 = _e.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3\n            /*break*/\n            , 16];\n\n          case 11:\n            _e.trys.push([11,, 14, 15]);\n\n            if (!(records_1_1 && !records_1_1.done && (_b = records_1.return))) return [3\n            /*break*/\n            , 13];\n            return [4\n            /*yield*/\n            , _b.call(records_1)];\n\n          case 12:\n            _e.sent();\n\n            _e.label = 13;\n\n          case 13:\n            return [3\n            /*break*/\n            , 15];\n\n          case 14:\n            if (e_4) throw e_4.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 15:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 16:\n            return [3\n            /*break*/\n            , 32];\n\n          case 17:\n            _e.trys.push([17, 23, 24, 29]);\n\n            records_2 = __asyncValues(records);\n            _e.label = 18;\n\n          case 18:\n            return [4\n            /*yield*/\n            , records_2.next()];\n\n          case 19:\n            if (!(records_2_1 = _e.sent(), !records_2_1.done)) return [3\n            /*break*/\n            , 22];\n            recordItem = records_2_1.value;\n            if (!recordItem[targetName]) return [3\n            /*break*/\n            , 21];\n            return [4\n            /*yield*/\n            , this._get(store, recordItem[targetName])];\n\n          case 20:\n            connectionRecord = _e.sent();\n            recordItem[fieldName] = connectionRecord && this.modelInstanceCreator(modelConstructor_1, connectionRecord);\n            delete recordItem[targetName];\n            _e.label = 21;\n\n          case 21:\n            return [3\n            /*break*/\n            , 18];\n\n          case 22:\n            return [3\n            /*break*/\n            , 29];\n\n          case 23:\n            e_5_1 = _e.sent();\n            e_5 = {\n              error: e_5_1\n            };\n            return [3\n            /*break*/\n            , 29];\n\n          case 24:\n            _e.trys.push([24,, 27, 28]);\n\n            if (!(records_2_1 && !records_2_1.done && (_c = records_2.return))) return [3\n            /*break*/\n            , 26];\n            return [4\n            /*yield*/\n            , _c.call(records_2)];\n\n          case 25:\n            _e.sent();\n\n            _e.label = 26;\n\n          case 26:\n            return [3\n            /*break*/\n            , 28];\n\n          case 27:\n            if (e_5) throw e_5.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 28:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 29:\n            return [3\n            /*break*/\n            , 32];\n\n          case 30:\n            // TODO: Lazy loading\n            return [3\n            /*break*/\n            , 32];\n\n          case 31:\n            exhaustiveCheck(relation.relationType);\n            return [3\n            /*break*/\n            , 32];\n\n          case 32:\n            return [3\n            /*break*/\n            , 2];\n\n          case 33:\n            return [3\n            /*break*/\n            , 40];\n\n          case 34:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3\n            /*break*/\n            , 40];\n\n          case 35:\n            _e.trys.push([35,, 38, 39]);\n\n            if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3\n            /*break*/\n            , 37];\n            return [4\n            /*yield*/\n            , _a.call(relations_1)];\n\n          case 36:\n            _e.sent();\n\n            _e.label = 37;\n\n          case 37:\n            return [3\n            /*break*/\n            , 39];\n\n          case 38:\n            if (e_3) throw e_3.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 39:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 40:\n            return [2\n            /*return*/\n            , records.map(function (record) {\n              return _this.modelInstanceCreator(modelConstructor, record);\n            })];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, namespaceName, predicates, queryById, hasSort, hasPagination, records;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _a.sent();\n\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n            queryById = predicates && this.idFromPredicate(predicates);\n            hasSort = pagination && pagination.sort;\n            hasPagination = pagination && pagination.limit;\n            return [4\n            /*yield*/\n            , function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var record, filtered, all;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!queryById) return [3\n                      /*break*/\n                      , 2];\n                      return [4\n                      /*yield*/\n                      , this.getById(storeName, queryById)];\n\n                    case 1:\n                      record = _a.sent();\n                      return [2\n                      /*return*/\n                      , record ? [record] : []];\n\n                    case 2:\n                      if (!predicates) return [3\n                      /*break*/\n                      , 4];\n                      return [4\n                      /*yield*/\n                      , this.filterOnPredicate(storeName, predicates)];\n\n                    case 3:\n                      filtered = _a.sent();\n                      return [2\n                      /*return*/\n                      , this.inMemoryPagination(filtered, pagination)];\n\n                    case 4:\n                      if (!hasSort) return [3\n                      /*break*/\n                      , 6];\n                      return [4\n                      /*yield*/\n                      , this.getAll(storeName)];\n\n                    case 5:\n                      all = _a.sent();\n                      return [2\n                      /*return*/\n                      , this.inMemoryPagination(all, pagination)];\n\n                    case 6:\n                      if (hasPagination) {\n                        return [2\n                        /*return*/\n                        , this.enginePagination(storeName, pagination)];\n                      }\n\n                      return [2\n                      /*return*/\n                      , this.getAll(storeName)];\n                  }\n                });\n              });\n            }()];\n\n          case 2:\n            records = _a.sent();\n            return [4\n            /*yield*/\n            , this.load(namespaceName, modelConstructor.name, records)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getById = function (storeName, id) {\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._get(storeName, id)];\n\n          case 1:\n            record = _a.sent();\n            return [2\n            /*return*/\n            , record];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getAll = function (storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.idFromPredicate = function (predicates) {\n    var predicateObjs = predicates.predicates;\n    var idPredicate = predicateObjs.length === 1 && predicateObjs.find(function (p) {\n      return isPredicateObj(p) && p.field === 'id' && p.operator === 'eq';\n    });\n    return idPredicate && idPredicate.operand;\n  };\n\n  IndexedDBAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, all, filtered;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            return [4\n            /*yield*/\n            , this.getAll(storeName)];\n\n          case 1:\n            all = _a.sent();\n            filtered = predicateObjs ? all.filter(function (m) {\n              return validatePredicate(m, type, predicateObjs);\n            }) : all;\n            return [2\n            /*return*/\n            , filtered];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    if (pagination && records.length > 1) {\n      if (pagination.sort) {\n        var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n\n        if (sortPredicates.length) {\n          var compareFn = sortCompareFunction(sortPredicates);\n          records.sort(compareFn);\n        }\n      }\n\n      var _a = pagination.page,\n          page = _a === void 0 ? 0 : _a,\n          _b = pagination.limit,\n          limit = _b === void 0 ? 0 : _b;\n      var start = Math.max(0, page * limit) || 0;\n      var end = limit > 0 ? start + limit : records.length;\n      return records.slice(start, end);\n    }\n\n    return records;\n  };\n\n  IndexedDBAdapter.prototype.enginePagination = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, _a, page, _b, limit, initialRecord, cursor, pageResults, hasLimit;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!pagination) return [3\n            /*break*/\n            , 7];\n            _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n            initialRecord = Math.max(0, page * limit) || 0;\n            return [4\n            /*yield*/\n            , this.db.transaction(storeName).objectStore(storeName).openCursor()];\n\n          case 1:\n            cursor = _c.sent();\n            if (!(cursor && initialRecord > 0)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , cursor.advance(initialRecord)];\n\n          case 2:\n            _c.sent();\n\n            _c.label = 3;\n\n          case 3:\n            pageResults = [];\n            hasLimit = typeof limit === 'number' && limit > 0;\n            _c.label = 4;\n\n          case 4:\n            if (!(cursor && cursor.value)) return [3\n            /*break*/\n            , 6];\n            pageResults.push(cursor.value);\n\n            if (hasLimit && pageResults.length === limit) {\n              return [3\n              /*break*/\n              , 6];\n            }\n\n            return [4\n            /*yield*/\n            , cursor.continue()];\n\n          case 5:\n            cursor = _c.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 6:\n            result = pageResults;\n            return [3\n            /*break*/\n            , 9];\n\n          case 7:\n            return [4\n            /*yield*/\n            , this.db.getAll(storeName)];\n\n          case 8:\n            result = _c.sent();\n            _c.label = 9;\n\n          case 9:\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, cursor, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _a.sent();\n\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4\n            /*yield*/\n            , this.db.transaction([storeName], 'readonly').objectStore(storeName).openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev')];\n\n          case 2:\n            cursor = _a.sent();\n            result = cursor ? cursor.value : undefined;\n            return [2\n            /*return*/\n            , result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, nameSpace, storeName, models, relations, deletedModels, deletedModels, model, modelConstructor, nameSpace, storeName, tx, store, fromDB, msg, predicates, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _a.sent();\n\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3\n            /*break*/\n            , 9];\n            modelConstructor = modelOrModelConstructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4\n            /*yield*/\n            , this.query(modelConstructor, condition)];\n\n          case 2:\n            models = _a.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            if (!(condition !== undefined)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 3:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 4:\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [models, deletedModels]];\n\n          case 5:\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 6:\n            _a.sent(); // Delete all\n\n\n            return [4\n            /*yield*/\n            , this.db.transaction([storeName], 'readwrite').objectStore(storeName).clear()];\n\n          case 7:\n            // Delete all\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [models, deletedModels]];\n\n          case 8:\n            return [3\n            /*break*/\n            , 17];\n\n          case 9:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3\n            /*break*/\n            , 13];\n            tx = this.db.transaction([storeName], 'readwrite');\n            store = tx.objectStore(storeName);\n            return [4\n            /*yield*/\n            , this._get(store, model.id)];\n\n          case 10:\n            fromDB = _a.sent();\n\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2\n              /*return*/\n              , [[model], []]];\n            }\n\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            predicateObjs = predicates.predicates, type = predicates.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n\n            return [4\n            /*yield*/\n            , tx.done];\n\n          case 11:\n            _a.sent();\n\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 12:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 15];\n\n          case 13:\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            return [4\n            /*yield*/\n            , this.deleteTraverse(relations, [model], modelConstructor.name, nameSpace, deleteQueue)];\n\n          case 14:\n            _a.sent();\n\n            _a.label = 15;\n\n          case 15:\n            return [4\n            /*yield*/\n            , this.deleteItem(deleteQueue)];\n\n          case 16:\n            _a.sent();\n\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2\n            /*return*/\n            , [[model], deletedModels]];\n\n          case 17:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteItem = function (deleteQueue) {\n    var deleteQueue_1, deleteQueue_1_1;\n\n    var e_6, _a, e_7, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var connectionStoreNames, tx, deleteItem, storeName, items, store, items_1, items_1_1, item, key, e_7_1, e_6_1;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            connectionStoreNames = deleteQueue.map(function (_a) {\n              var storeName = _a.storeName;\n              return storeName;\n            });\n            tx = this.db.transaction(__spread(connectionStoreNames), 'readwrite');\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 22, 23, 28]);\n\n            deleteQueue_1 = __asyncValues(deleteQueue);\n            _c.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , deleteQueue_1.next()];\n\n          case 3:\n            if (!(deleteQueue_1_1 = _c.sent(), !deleteQueue_1_1.done)) return [3\n            /*break*/\n            , 21];\n            deleteItem = deleteQueue_1_1.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            store = tx.objectStore(storeName);\n            _c.label = 4;\n\n          case 4:\n            _c.trys.push([4, 14, 15, 20]);\n\n            items_1 = __asyncValues(items);\n            _c.label = 5;\n\n          case 5:\n            return [4\n            /*yield*/\n            , items_1.next()];\n\n          case 6:\n            if (!(items_1_1 = _c.sent(), !items_1_1.done)) return [3\n            /*break*/\n            , 13];\n            item = items_1_1.value;\n            if (!item) return [3\n            /*break*/\n            , 12];\n            key = void 0;\n            if (!(typeof item === 'object')) return [3\n            /*break*/\n            , 8];\n            return [4\n            /*yield*/\n            , store.index('byId').getKey(item['id'])];\n\n          case 7:\n            key = _c.sent();\n            return [3\n            /*break*/\n            , 10];\n\n          case 8:\n            return [4\n            /*yield*/\n            , store.index('byId').getKey(item.toString())];\n\n          case 9:\n            key = _c.sent();\n            _c.label = 10;\n\n          case 10:\n            if (!(key !== undefined)) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , store.delete(key)];\n\n          case 11:\n            _c.sent();\n\n            _c.label = 12;\n\n          case 12:\n            return [3\n            /*break*/\n            , 5];\n\n          case 13:\n            return [3\n            /*break*/\n            , 20];\n\n          case 14:\n            e_7_1 = _c.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3\n            /*break*/\n            , 20];\n\n          case 15:\n            _c.trys.push([15,, 18, 19]);\n\n            if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3\n            /*break*/\n            , 17];\n            return [4\n            /*yield*/\n            , _b.call(items_1)];\n\n          case 16:\n            _c.sent();\n\n            _c.label = 17;\n\n          case 17:\n            return [3\n            /*break*/\n            , 19];\n\n          case 18:\n            if (e_7) throw e_7.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 19:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 20:\n            return [3\n            /*break*/\n            , 2];\n\n          case 21:\n            return [3\n            /*break*/\n            , 28];\n\n          case 22:\n            e_6_1 = _c.sent();\n            e_6 = {\n              error: e_6_1\n            };\n            return [3\n            /*break*/\n            , 28];\n\n          case 23:\n            _c.trys.push([23,, 26, 27]);\n\n            if (!(deleteQueue_1_1 && !deleteQueue_1_1.done && (_a = deleteQueue_1.return))) return [3\n            /*break*/\n            , 25];\n            return [4\n            /*yield*/\n            , _a.call(deleteQueue_1)];\n\n          case 24:\n            _c.sent();\n\n            _c.label = 25;\n\n          case 25:\n            return [3\n            /*break*/\n            , 27];\n\n          case 26:\n            if (e_6) throw e_6.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 27:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 28:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n    var relations_2, relations_2_1, models_1, models_1_1, models_2, models_2_1;\n\n    var e_8, _a, e_9, _b, e_10, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var rel, relationType, fieldName, modelName, targetName, storeName, index, _d, model, hasOneIndex, hasOneCustomField, value, recordToDelete, e_9_1, model, childrenArray, e_10_1, e_8_1;\n\n      var _this = this;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 35, 36, 41]);\n\n            relations_2 = __asyncValues(relations);\n            _e.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , relations_2.next()];\n\n          case 2:\n            if (!(relations_2_1 = _e.sent(), !relations_2_1.done)) return [3\n            /*break*/\n            , 34];\n            rel = relations_2_1.value;\n            relationType = rel.relationType, fieldName = rel.fieldName, modelName = rel.modelName, targetName = rel.targetName;\n            storeName = this.getStorename(nameSpace, modelName);\n            index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel) || // if we were unable to find an index via relationTypes\n            // i.e. for keyName connections, attempt to find one by the\n            // associatedWith property\n            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName].indexes, rel.associatedWith);\n            _d = relationType;\n\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3\n                /*break*/\n                , 3];\n\n              case 'HAS_MANY':\n                return [3\n                /*break*/\n                , 17];\n\n              case 'BELONGS_TO':\n                return [3\n                /*break*/\n                , 31];\n            }\n\n            return [3\n            /*break*/\n            , 32];\n\n          case 3:\n            _e.trys.push([3, 10, 11, 16]);\n\n            models_1 = __asyncValues(models);\n            _e.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , models_1.next()];\n\n          case 5:\n            if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3\n            /*break*/\n            , 9];\n            model = models_1_1.value;\n            hasOneIndex = index || 'byId';\n            hasOneCustomField = targetName in model;\n            value = hasOneCustomField ? model[targetName] : model.id;\n            if (!value) return [3\n            /*break*/\n            , 9];\n            return [4\n            /*yield*/\n            , this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(hasOneIndex).get(value)];\n\n          case 6:\n            recordToDelete = _e.sent();\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n\n          case 7:\n            _e.sent();\n\n            _e.label = 8;\n\n          case 8:\n            return [3\n            /*break*/\n            , 4];\n\n          case 9:\n            return [3\n            /*break*/\n            , 16];\n\n          case 10:\n            e_9_1 = _e.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3\n            /*break*/\n            , 16];\n\n          case 11:\n            _e.trys.push([11,, 14, 15]);\n\n            if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3\n            /*break*/\n            , 13];\n            return [4\n            /*yield*/\n            , _b.call(models_1)];\n\n          case 12:\n            _e.sent();\n\n            _e.label = 13;\n\n          case 13:\n            return [3\n            /*break*/\n            , 15];\n\n          case 14:\n            if (e_9) throw e_9.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 15:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 16:\n            return [3\n            /*break*/\n            , 33];\n\n          case 17:\n            _e.trys.push([17, 24, 25, 30]);\n\n            models_2 = __asyncValues(models);\n            _e.label = 18;\n\n          case 18:\n            return [4\n            /*yield*/\n            , models_2.next()];\n\n          case 19:\n            if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3\n            /*break*/\n            , 23];\n            model = models_2_1.value;\n            return [4\n            /*yield*/\n            , this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index).getAll(model['id'])];\n\n          case 20:\n            childrenArray = _e.sent();\n            return [4\n            /*yield*/\n            , this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n\n          case 21:\n            _e.sent();\n\n            _e.label = 22;\n\n          case 22:\n            return [3\n            /*break*/\n            , 18];\n\n          case 23:\n            return [3\n            /*break*/\n            , 30];\n\n          case 24:\n            e_10_1 = _e.sent();\n            e_10 = {\n              error: e_10_1\n            };\n            return [3\n            /*break*/\n            , 30];\n\n          case 25:\n            _e.trys.push([25,, 28, 29]);\n\n            if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3\n            /*break*/\n            , 27];\n            return [4\n            /*yield*/\n            , _c.call(models_2)];\n\n          case 26:\n            _e.sent();\n\n            _e.label = 27;\n\n          case 27:\n            return [3\n            /*break*/\n            , 29];\n\n          case 28:\n            if (e_10) throw e_10.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 29:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 30:\n            return [3\n            /*break*/\n            , 33];\n\n          case 31:\n            // Intentionally blank\n            return [3\n            /*break*/\n            , 33];\n\n          case 32:\n            exhaustiveCheck(relationType);\n            return [3\n            /*break*/\n            , 33];\n\n          case 33:\n            return [3\n            /*break*/\n            , 1];\n\n          case 34:\n            return [3\n            /*break*/\n            , 41];\n\n          case 35:\n            e_8_1 = _e.sent();\n            e_8 = {\n              error: e_8_1\n            };\n            return [3\n            /*break*/\n            , 41];\n\n          case 36:\n            _e.trys.push([36,, 39, 40]);\n\n            if (!(relations_2_1 && !relations_2_1.done && (_a = relations_2.return))) return [3\n            /*break*/\n            , 38];\n            return [4\n            /*yield*/\n            , _a.call(relations_2)];\n\n          case 37:\n            _e.sent();\n\n            _e.label = 38;\n\n          case 38:\n            return [3\n            /*break*/\n            , 40];\n\n          case 39:\n            if (e_8) throw e_8.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 40:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 41:\n            deleteQueue.push({\n              storeName: this.getStorename(nameSpace, srcModel),\n              items: models.map(function (record) {\n                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n              })\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _a.sent();\n\n            this.db.close();\n            return [4\n            /*yield*/\n            , idb.deleteDB(this.dbName)];\n\n          case 2:\n            _a.sent();\n\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.batchSave = function (modelConstructor, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, storeName, txn, store, _loop_1, this_1, items_2, items_2_1, item, e_11_1;\n\n      var e_11, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (items.length === 0) {\n              return [2\n              /*return*/\n              , []];\n            }\n\n            return [4\n            /*yield*/\n            , this.checkPrivate()];\n\n          case 1:\n            _b.sent();\n\n            result = [];\n            storeName = this.getStorenameForModel(modelConstructor);\n            txn = this.db.transaction(storeName, 'readwrite');\n            store = txn.store;\n\n            _loop_1 = function (item) {\n              var connectedModels, id, _deleted, index, key, instance;\n\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    connectedModels = traverseModel(modelConstructor.name, this_1.modelInstanceCreator(modelConstructor, item), this_1.schema.namespaces[this_1.namespaceResolver(modelConstructor)], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n                    id = item.id, _deleted = item._deleted;\n                    index = store.index('byId');\n                    return [4\n                    /*yield*/\n                    , index.getKey(id)];\n\n                  case 1:\n                    key = _a.sent();\n                    if (!!_deleted) return [3\n                    /*break*/\n                    , 3];\n                    instance = connectedModels.find(function (_a) {\n                      var instance = _a.instance;\n                      return instance.id === id;\n                    }).instance;\n                    result.push([instance, key ? OpType.UPDATE : OpType.INSERT]);\n                    return [4\n                    /*yield*/\n                    , store.put(instance, key)];\n\n                  case 2:\n                    _a.sent();\n\n                    return [3\n                    /*break*/\n                    , 5];\n\n                  case 3:\n                    result.push([item, OpType.DELETE]);\n                    if (!key) return [3\n                    /*break*/\n                    , 5];\n                    return [4\n                    /*yield*/\n                    , store.delete(key)];\n\n                  case 4:\n                    _a.sent();\n\n                    _a.label = 5;\n\n                  case 5:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_1 = this;\n            _b.label = 2;\n\n          case 2:\n            _b.trys.push([2, 7, 8, 9]);\n\n            items_2 = __values(items), items_2_1 = items_2.next();\n            _b.label = 3;\n\n          case 3:\n            if (!!items_2_1.done) return [3\n            /*break*/\n            , 6];\n            item = items_2_1.value;\n            return [5\n            /*yield**/\n            , _loop_1(item)];\n\n          case 4:\n            _b.sent();\n\n            _b.label = 5;\n\n          case 5:\n            items_2_1 = items_2.next();\n            return [3\n            /*break*/\n            , 3];\n\n          case 6:\n            return [3\n            /*break*/\n            , 9];\n\n          case 7:\n            e_11_1 = _b.sent();\n            e_11 = {\n              error: e_11_1\n            };\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            try {\n              if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n            } finally {\n              if (e_11) throw e_11.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 9:\n            return [4\n            /*yield*/\n            , txn.done];\n\n          case 10:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.createObjectStoreForModel = function (db, namespaceName, storeName, modelName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var store, indexes;\n      return __generator(this, function (_a) {\n        store = db.createObjectStore(storeName, {\n          autoIncrement: true\n        });\n        indexes = this.schema.namespaces[namespaceName].relationships[modelName].indexes;\n        indexes.forEach(function (index) {\n          return store.createIndex(index, index);\n        });\n        store.createIndex('byId', 'id', {\n          unique: true\n        });\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  return IndexedDBAdapter;\n}();\n\nexport default new IndexedDBAdapter();","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","idb","ModelPredicateCreator","ModelSortPredicateCreator","isPredicateObj","OpType","QueryOne","exhaustiveCheck","getIndex","getIndexFromAssociation","isModelConstructor","isPrivateMode","traverseModel","validatePredicate","sortCompareFunction","logger","DB_NAME","IndexedDBAdapter","then","isPrivate","_a","error","Promise","reject","resolve","modelConstructor","namespace","namespaceResolver","getStorename","modelName","storeName","theSchema","modelInstanceCreator","getModelConstructorByModelName","sessionId","checkPrivate","_b","initPromise","res","rej","_this","dbName","schema","db","VERSION","openDB","upgrade","oldVersion","newVersion","txn","Object","keys","namespaces","forEach","namespaceName","models","createObjectStoreForModel","objectStoreNames","origStore","objectStore","tmpName","name","newStore","createObjectStore","keyPath","undefined","autoIncrement","createIndex","unique","openCursor","cursor","_d","count","value","put","continue","deleteObjectStore","debug","Set","map","filter","has","error_2","abort","error_1","storeOrStoreName","id","index","transaction","store","get","result","model","condition","getPrototypeOf","constructor","getStorenameForModel","connectedModels","set","connectionStoreNames","values","item","instance","add","tx","__spread","Array","from","_get","fromDB","predicates","getPredicates","predicateObjs","type","isValid","msg","Error","connectionStoreNames_1","resItem","storeName_1","store_1","fromDB_1","opType","INSERT","UPDATE","getKey","key","push","done","srcModelName","records","relations","relationships","relationTypes","length","record","relations_1","relation","fieldName","targetName","modelConstructor_1","relationType","records_1","recordItem","getByfield","connectionRecord","_e","records_2","predicate","pagination","queryById","idFromPredicate","hasSort","sort","hasPagination","limit","getById","filterOnPredicate","filtered","inMemoryPagination","getAll","all","enginePagination","load","idPredicate","find","p","field","operator","operand","m","sortPredicates","compareFn","start","Math","max","page","end","slice","initialRecord","_c","advance","pageResults","hasLimit","firstOrLast","FIRST","modelOrModelConstructor","deleteQueue","nameSpace","query","deleteTraverse","deleteItem","deletedModels","reduce","acc","items","concat","clear","warn","deleteQueue_1","items_1","toString","delete","srcModel","relations_2","rel","indexes","associatedWith","models_1","hasOneIndex","hasOneCustomField","recordToDelete","models_2","childrenArray","close","deleteDB","this_1","_deleted","DELETE","items_2","items_2_1"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-amplify\\datastore\\src\\storage\\adapter\\IndexedDBAdapter.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelInstanceCreator } from '../../datastore/datastore';\nimport {\n\tModelPredicateCreator,\n\tModelSortPredicateCreator,\n} from '../../predicates';\nimport {\n\tInternalSchema,\n\tisPredicateObj,\n\tModelInstanceMetadata,\n\tModelPredicate,\n\tNamespaceResolver,\n\tOpType,\n\tPaginationInput,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicateObject,\n\tPredicatesGroup,\n\tQueryOne,\n\tRelationType,\n} from '../../types';\nimport {\n\texhaustiveCheck,\n\tgetIndex,\n\tgetIndexFromAssociation,\n\tisModelConstructor,\n\tisPrivateMode,\n\ttraverseModel,\n\tvalidatePredicate,\n\tsortCompareFunction,\n} from '../../util';\nimport { Adapter } from './index';\n\nconst logger = new Logger('DataStore');\n\nconst DB_NAME = 'amplify-datastore';\n\nclass IndexedDBAdapter implements Adapter {\n\tprivate schema: InternalSchema;\n\tprivate namespaceResolver: NamespaceResolver;\n\tprivate modelInstanceCreator: ModelInstanceCreator;\n\tprivate getModelConstructorByModelName: (\n\t\tnamsespaceName: string,\n\t\tmodelName: string\n\t) => PersistentModelConstructor<any>;\n\tprivate db: idb.IDBPDatabase;\n\tprivate initPromise: Promise<void>;\n\tprivate resolve: (value?: any) => void;\n\tprivate reject: (value?: any) => void;\n\tprivate dbName: string = DB_NAME;\n\n\tprivate async checkPrivate() {\n\t\tconst isPrivate = await isPrivateMode().then(isPrivate => {\n\t\t\treturn isPrivate;\n\t\t});\n\t\tif (isPrivate) {\n\t\t\tlogger.error(\"IndexedDB not supported in this browser's private mode\");\n\t\t\treturn Promise.reject(\n\t\t\t\t\"IndexedDB not supported in this browser's private mode\"\n\t\t\t);\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\tprivate getStorenameForModel(\n\t\tmodelConstructor: PersistentModelConstructor<any>\n\t) {\n\t\tconst namespace = this.namespaceResolver(modelConstructor);\n\t\tconst { name: modelName } = modelConstructor;\n\n\t\treturn this.getStorename(namespace, modelName);\n\t}\n\n\tprivate getStorename(namespace: string, modelName: string) {\n\t\tconst storeName = `${namespace}_${modelName}`;\n\n\t\treturn storeName;\n\t}\n\n\tasync setUp(\n\t\ttheSchema: InternalSchema,\n\t\tnamespaceResolver: NamespaceResolver,\n\t\tmodelInstanceCreator: ModelInstanceCreator,\n\t\tgetModelConstructorByModelName: (\n\t\t\tnamsespaceName: string,\n\t\t\tmodelName: string\n\t\t) => PersistentModelConstructor<any>,\n\t\tsessionId?: string\n\t) {\n\t\tawait this.checkPrivate();\n\t\tif (!this.initPromise) {\n\t\t\tthis.initPromise = new Promise((res, rej) => {\n\t\t\t\tthis.resolve = res;\n\t\t\t\tthis.reject = rej;\n\t\t\t});\n\t\t} else {\n\t\t\tawait this.initPromise;\n\t\t}\n\t\tif (sessionId) {\n\t\t\tthis.dbName = `${DB_NAME}-${sessionId}`;\n\t\t}\n\t\tthis.schema = theSchema;\n\t\tthis.namespaceResolver = namespaceResolver;\n\t\tthis.modelInstanceCreator = modelInstanceCreator;\n\t\tthis.getModelConstructorByModelName = getModelConstructorByModelName;\n\n\t\ttry {\n\t\t\tif (!this.db) {\n\t\t\t\tconst VERSION = 2;\n\t\t\t\tthis.db = await idb.openDB(this.dbName, VERSION, {\n\t\t\t\t\tupgrade: async (db, oldVersion, newVersion, txn) => {\n\t\t\t\t\t\tif (oldVersion === 0) {\n\t\t\t\t\t\t\tObject.keys(theSchema.namespaces).forEach(namespaceName => {\n\t\t\t\t\t\t\t\tconst namespace = theSchema.namespaces[namespaceName];\n\n\t\t\t\t\t\t\t\tObject.keys(namespace.models).forEach(modelName => {\n\t\t\t\t\t\t\t\t\tconst storeName = this.getStorename(namespaceName, modelName);\n\t\t\t\t\t\t\t\t\tthis.createObjectStoreForModel(\n\t\t\t\t\t\t\t\t\t\tdb,\n\t\t\t\t\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\t\t\t\t\tstoreName,\n\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (oldVersion === 1 && newVersion === 2) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tfor (const storeName of txn.objectStoreNames) {\n\t\t\t\t\t\t\t\t\tconst origStore = txn.objectStore(storeName);\n\n\t\t\t\t\t\t\t\t\t// rename original store\n\t\t\t\t\t\t\t\t\tconst tmpName = `tmp_${storeName}`;\n\t\t\t\t\t\t\t\t\torigStore.name = tmpName;\n\n\t\t\t\t\t\t\t\t\t// create new store with original name\n\t\t\t\t\t\t\t\t\tconst newStore = db.createObjectStore(storeName, {\n\t\t\t\t\t\t\t\t\t\tkeyPath: undefined,\n\t\t\t\t\t\t\t\t\t\tautoIncrement: true,\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\tnewStore.createIndex('byId', 'id', { unique: true });\n\n\t\t\t\t\t\t\t\t\tlet cursor = await origStore.openCursor();\n\t\t\t\t\t\t\t\t\tlet count = 0;\n\n\t\t\t\t\t\t\t\t\t// Copy data from original to new\n\t\t\t\t\t\t\t\t\twhile (cursor && cursor.value) {\n\t\t\t\t\t\t\t\t\t\t// we don't pass key, since they are all new entries in the new store\n\t\t\t\t\t\t\t\t\t\tawait newStore.put(cursor.value);\n\n\t\t\t\t\t\t\t\t\t\tcursor = await cursor.continue();\n\t\t\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// delete original\n\t\t\t\t\t\t\t\t\tdb.deleteObjectStore(tmpName);\n\n\t\t\t\t\t\t\t\t\tlogger.debug(`${count} ${storeName} records migrated`);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// add new models created after IndexedDB, but before migration\n\t\t\t\t\t\t\t\t// this case may happen when a user has not opened an app for\n\t\t\t\t\t\t\t\t// some time and a new model is added during that time\n\t\t\t\t\t\t\t\tObject.keys(theSchema.namespaces).forEach(namespaceName => {\n\t\t\t\t\t\t\t\t\tconst namespace = theSchema.namespaces[namespaceName];\n\t\t\t\t\t\t\t\t\tconst objectStoreNames = new Set(txn.objectStoreNames);\n\n\t\t\t\t\t\t\t\t\tObject.keys(namespace.models)\n\t\t\t\t\t\t\t\t\t\t.map(modelName => {\n\t\t\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\t\t\t\t\tthis.getStorename(namespaceName, modelName),\n\t\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.filter(([, storeName]) => !objectStoreNames.has(storeName))\n\t\t\t\t\t\t\t\t\t\t.forEach(([modelName, storeName]) => {\n\t\t\t\t\t\t\t\t\t\t\tthis.createObjectStoreForModel(\n\t\t\t\t\t\t\t\t\t\t\t\tdb,\n\t\t\t\t\t\t\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\t\t\t\t\t\t\tstoreName,\n\t\t\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tlogger.error('Error migrating IndexedDB data', error);\n\t\t\t\t\t\t\t\ttxn.abort();\n\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tthis.resolve();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.reject(error);\n\t\t}\n\t}\n\n\tprivate async _get<T>(\n\t\tstoreOrStoreName: idb.IDBPObjectStore | string,\n\t\tid: string\n\t): Promise<T> {\n\t\tlet index: idb.IDBPIndex;\n\n\t\tif (typeof storeOrStoreName === 'string') {\n\t\t\tconst storeName = storeOrStoreName;\n\t\t\tindex = this.db.transaction(storeName, 'readonly').store.index('byId');\n\t\t} else {\n\t\t\tconst store = storeOrStoreName;\n\t\t\tindex = store.index('byId');\n\t\t}\n\n\t\tconst result = await index.get(id);\n\n\t\treturn result;\n\t}\n\n\tasync save<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T, OpType.INSERT | OpType.UPDATE][]> {\n\t\tawait this.checkPrivate();\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst connectedModels = traverseModel(\n\t\t\tmodelConstructor.name,\n\t\t\tmodel,\n\t\t\tthis.schema.namespaces[this.namespaceResolver(modelConstructor)],\n\t\t\tthis.modelInstanceCreator,\n\t\t\tthis.getModelConstructorByModelName\n\t\t);\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst set = new Set<string>();\n\t\tconst connectionStoreNames = Object.values(connectedModels).map(\n\t\t\t({ modelName, item, instance }) => {\n\t\t\t\tconst storeName = this.getStorename(namespaceName, modelName);\n\t\t\t\tset.add(storeName);\n\t\t\t\treturn { storeName, item, instance };\n\t\t\t}\n\t\t);\n\n\t\tconst tx = this.db.transaction(\n\t\t\t[storeName, ...Array.from(set.values())],\n\t\t\t'readwrite'\n\t\t);\n\t\tconst store = tx.objectStore(storeName);\n\n\t\tconst fromDB = await this._get(store, model.id);\n\n\t\tif (condition && fromDB) {\n\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\t\tconst isValid = validatePredicate(fromDB, type, predicateObjs);\n\n\t\t\tif (!isValid) {\n\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\t\t}\n\n\t\tconst result: [T, OpType.INSERT | OpType.UPDATE][] = [];\n\n\t\tfor await (const resItem of connectionStoreNames) {\n\t\t\tconst { storeName, item, instance } = resItem;\n\t\t\tconst store = tx.objectStore(storeName);\n\t\t\tconst { id } = item;\n\n\t\t\tconst fromDB = <T>await this._get(store, id);\n\t\t\tconst opType: OpType =\n\t\t\t\tfromDB === undefined ? OpType.INSERT : OpType.UPDATE;\n\n\t\t\t// Even if the parent is an INSERT, the child might not be, so we need to get its key\n\t\t\tif (id === model.id || opType === OpType.INSERT) {\n\t\t\t\tconst key = await store.index('byId').getKey(item.id);\n\t\t\t\tawait store.put(item, key);\n\n\t\t\t\tresult.push([instance, opType]);\n\t\t\t}\n\t\t}\n\n\t\tawait tx.done;\n\n\t\treturn result;\n\t}\n\n\tprivate async load<T>(\n\t\tnamespaceName: string,\n\t\tsrcModelName: string,\n\t\trecords: T[]\n\t): Promise<T[]> {\n\t\tconst namespace = this.schema.namespaces[namespaceName];\n\t\tconst relations = namespace.relationships[srcModelName].relationTypes;\n\t\tconst connectionStoreNames = relations.map(({ modelName }) => {\n\t\t\treturn this.getStorename(namespaceName, modelName);\n\t\t});\n\t\tconst modelConstructor = this.getModelConstructorByModelName(\n\t\t\tnamespaceName,\n\t\t\tsrcModelName\n\t\t);\n\n\t\tif (connectionStoreNames.length === 0) {\n\t\t\treturn records.map(record =>\n\t\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t\t);\n\t\t}\n\n\t\tconst tx = this.db.transaction([...connectionStoreNames], 'readonly');\n\n\t\tfor await (const relation of relations) {\n\t\t\tconst { fieldName, modelName, targetName } = relation;\n\t\t\tconst storeName = this.getStorename(namespaceName, modelName);\n\t\t\tconst store = tx.objectStore(storeName);\n\t\t\tconst modelConstructor = this.getModelConstructorByModelName(\n\t\t\t\tnamespaceName,\n\t\t\t\tmodelName\n\t\t\t);\n\n\t\t\tswitch (relation.relationType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\t\tfor await (const recordItem of records) {\n\t\t\t\t\t\tconst getByfield = recordItem[targetName] ? targetName : fieldName;\n\t\t\t\t\t\tif (!recordItem[getByfield]) break;\n\n\t\t\t\t\t\tconst connectionRecord = await this._get(\n\t\t\t\t\t\t\tstore,\n\t\t\t\t\t\t\trecordItem[getByfield]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\trecordItem[fieldName] =\n\t\t\t\t\t\t\tconnectionRecord &&\n\t\t\t\t\t\t\tthis.modelInstanceCreator(modelConstructor, connectionRecord);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\tfor await (const recordItem of records) {\n\t\t\t\t\t\tif (recordItem[targetName]) {\n\t\t\t\t\t\t\tconst connectionRecord = await this._get(\n\t\t\t\t\t\t\t\tstore,\n\t\t\t\t\t\t\t\trecordItem[targetName]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\trecordItem[fieldName] =\n\t\t\t\t\t\t\t\tconnectionRecord &&\n\t\t\t\t\t\t\t\tthis.modelInstanceCreator(modelConstructor, connectionRecord);\n\t\t\t\t\t\t\tdelete recordItem[targetName];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\t// TODO: Lazy loading\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\texhaustiveCheck(relation.relationType);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn records.map(record =>\n\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t);\n\t}\n\n\tasync query<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tawait this.checkPrivate();\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst predicates =\n\t\t\tpredicate && ModelPredicateCreator.getPredicates(predicate);\n\t\tconst queryById = predicates && this.idFromPredicate(predicates);\n\t\tconst hasSort = pagination && pagination.sort;\n\t\tconst hasPagination = pagination && pagination.limit;\n\n\t\tconst records: T[] = await (async () => {\n\t\t\tif (queryById) {\n\t\t\t\tconst record = await this.getById(storeName, queryById);\n\t\t\t\treturn record ? [record] : [];\n\t\t\t}\n\n\t\t\tif (predicates) {\n\t\t\t\tconst filtered = await this.filterOnPredicate(storeName, predicates);\n\t\t\t\treturn this.inMemoryPagination(filtered, pagination);\n\t\t\t}\n\n\t\t\tif (hasSort) {\n\t\t\t\tconst all = await this.getAll(storeName);\n\t\t\t\treturn this.inMemoryPagination(all, pagination);\n\t\t\t}\n\n\t\t\tif (hasPagination) {\n\t\t\t\treturn this.enginePagination(storeName, pagination);\n\t\t\t}\n\n\t\t\treturn this.getAll(storeName);\n\t\t})();\n\n\t\treturn await this.load(namespaceName, modelConstructor.name, records);\n\t}\n\n\tprivate async getById<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tid: string\n\t): Promise<T> {\n\t\tconst record = <T>await this._get(storeName, id);\n\t\treturn record;\n\t}\n\n\tprivate async getAll<T extends PersistentModel>(\n\t\tstoreName: string\n\t): Promise<T[]> {\n\t\treturn await this.db.getAll(storeName);\n\t}\n\n\tprivate idFromPredicate<T extends PersistentModel>(\n\t\tpredicates: PredicatesGroup<T>\n\t) {\n\t\tconst { predicates: predicateObjs } = predicates;\n\t\tconst idPredicate =\n\t\t\tpredicateObjs.length === 1 &&\n\t\t\t(predicateObjs.find(\n\t\t\t\tp => isPredicateObj(p) && p.field === 'id' && p.operator === 'eq'\n\t\t\t) as PredicateObject<T>);\n\n\t\treturn idPredicate && idPredicate.operand;\n\t}\n\n\tprivate async filterOnPredicate<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpredicates: PredicatesGroup<T>\n\t) {\n\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\tconst all = <T[]>await this.getAll(storeName);\n\n\t\tconst filtered = predicateObjs\n\t\t\t? all.filter(m => validatePredicate(m, type, predicateObjs))\n\t\t\t: all;\n\n\t\treturn filtered;\n\t}\n\n\tprivate inMemoryPagination<T extends PersistentModel>(\n\t\trecords: T[],\n\t\tpagination?: PaginationInput<T>\n\t): T[] {\n\t\tif (pagination && records.length > 1) {\n\t\t\tif (pagination.sort) {\n\t\t\t\tconst sortPredicates = ModelSortPredicateCreator.getPredicates(\n\t\t\t\t\tpagination.sort\n\t\t\t\t);\n\n\t\t\t\tif (sortPredicates.length) {\n\t\t\t\t\tconst compareFn = sortCompareFunction(sortPredicates);\n\t\t\t\t\trecords.sort(compareFn);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst { page = 0, limit = 0 } = pagination;\n\t\t\tconst start = Math.max(0, page * limit) || 0;\n\n\t\t\tconst end = limit > 0 ? start + limit : records.length;\n\n\t\t\treturn records.slice(start, end);\n\t\t}\n\t\treturn records;\n\t}\n\n\tprivate async enginePagination<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tlet result: T[];\n\n\t\tif (pagination) {\n\t\t\tconst { page = 0, limit = 0 } = pagination;\n\t\t\tconst initialRecord = Math.max(0, page * limit) || 0;\n\n\t\t\tlet cursor = await this.db\n\t\t\t\t.transaction(storeName)\n\t\t\t\t.objectStore(storeName)\n\t\t\t\t.openCursor();\n\n\t\t\tif (cursor && initialRecord > 0) {\n\t\t\t\tawait cursor.advance(initialRecord);\n\t\t\t}\n\n\t\t\tconst pageResults: T[] = [];\n\t\t\tconst hasLimit = typeof limit === 'number' && limit > 0;\n\n\t\t\twhile (cursor && cursor.value) {\n\t\t\t\tpageResults.push(cursor.value);\n\n\t\t\t\tif (hasLimit && pageResults.length === limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcursor = await cursor.continue();\n\t\t\t}\n\n\t\t\tresult = pageResults;\n\t\t} else {\n\t\t\tresult = <T[]>await this.db.getAll(storeName);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync queryOne<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tfirstOrLast: QueryOne = QueryOne.FIRST\n\t): Promise<T | undefined> {\n\t\tawait this.checkPrivate();\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\tconst cursor = await this.db\n\t\t\t.transaction([storeName], 'readonly')\n\t\t\t.objectStore(storeName)\n\t\t\t.openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev');\n\n\t\tconst result = cursor ? <T>cursor.value : undefined;\n\n\t\treturn result && this.modelInstanceCreator(modelConstructor, result);\n\t}\n\n\tasync delete<T extends PersistentModel>(\n\t\tmodelOrModelConstructor: T | PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T[], T[]]> {\n\t\tawait this.checkPrivate();\n\t\tconst deleteQueue: { storeName: string; items: T[] }[] = [];\n\n\t\tif (isModelConstructor(modelOrModelConstructor)) {\n\t\t\tconst modelConstructor = modelOrModelConstructor;\n\t\t\tconst nameSpace = this.namespaceResolver(modelConstructor);\n\n\t\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\t\tconst models = await this.query(modelConstructor, condition);\n\t\t\tconst relations =\n\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelConstructor.name]\n\t\t\t\t\t.relationTypes;\n\n\t\t\tif (condition !== undefined) {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t} else {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\t// Delete all\n\t\t\t\tawait this.db\n\t\t\t\t\t.transaction([storeName], 'readwrite')\n\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t.clear();\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t}\n\t\t} else {\n\t\t\tconst model = modelOrModelConstructor;\n\n\t\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\t\tconst nameSpace = this.namespaceResolver(modelConstructor);\n\n\t\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\t\tif (condition) {\n\t\t\t\tconst tx = this.db.transaction([storeName], 'readwrite');\n\t\t\t\tconst store = tx.objectStore(storeName);\n\n\t\t\t\tconst fromDB = await this._get(store, model.id);\n\n\t\t\t\tif (fromDB === undefined) {\n\t\t\t\t\tconst msg = 'Model instance not found in storage';\n\t\t\t\t\tlogger.warn(msg, { model });\n\n\t\t\t\t\treturn [[model], []];\n\t\t\t\t}\n\n\t\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\t\tconst { predicates: predicateObjs, type } = predicates;\n\n\t\t\t\tconst isValid = validatePredicate(fromDB, type, predicateObjs);\n\n\t\t\t\tif (!isValid) {\n\t\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\t\t\t\tawait tx.done;\n\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelConstructor.name]\n\t\t\t\t\t\t.relationTypes;\n\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelConstructor.name]\n\t\t\t\t\t\t.relationTypes;\n\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t<T[]>[]\n\t\t\t);\n\n\t\t\treturn [[model], deletedModels];\n\t\t}\n\t}\n\n\tprivate async deleteItem<T extends PersistentModel>(\n\t\tdeleteQueue?: { storeName: string; items: T[] | IDBValidKey[] }[]\n\t) {\n\t\tconst connectionStoreNames = deleteQueue.map(({ storeName }) => {\n\t\t\treturn storeName;\n\t\t});\n\n\t\tconst tx = this.db.transaction([...connectionStoreNames], 'readwrite');\n\t\tfor await (const deleteItem of deleteQueue) {\n\t\t\tconst { storeName, items } = deleteItem;\n\t\t\tconst store = tx.objectStore(storeName);\n\n\t\t\tfor await (const item of items) {\n\t\t\t\tif (item) {\n\t\t\t\t\tlet key: IDBValidKey;\n\n\t\t\t\t\tif (typeof item === 'object') {\n\t\t\t\t\t\tkey = await store.index('byId').getKey(item['id']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkey = await store.index('byId').getKey(item.toString());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (key !== undefined) {\n\t\t\t\t\t\tawait store.delete(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async deleteTraverse<T extends PersistentModel>(\n\t\trelations: RelationType[],\n\t\tmodels: T[],\n\t\tsrcModel: string,\n\t\tnameSpace: string,\n\t\tdeleteQueue: { storeName: string; items: T[] }[]\n\t): Promise<void> {\n\t\tfor await (const rel of relations) {\n\t\t\tconst { relationType, fieldName, modelName, targetName } = rel;\n\t\t\tconst storeName = this.getStorename(nameSpace, modelName);\n\n\t\t\tconst index: string =\n\t\t\t\tgetIndex(\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\tsrcModel\n\t\t\t\t) ||\n\t\t\t\t// if we were unable to find an index via relationTypes\n\t\t\t\t// i.e. for keyName connections, attempt to find one by the\n\t\t\t\t// associatedWith property\n\t\t\t\tgetIndexFromAssociation(\n\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName].indexes,\n\t\t\t\t\trel.associatedWith\n\t\t\t\t);\n\n\t\t\tswitch (relationType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\tconst hasOneIndex = index || 'byId';\n\n\t\t\t\t\t\tconst hasOneCustomField = targetName in model;\n\t\t\t\t\t\tconst value = hasOneCustomField ? model[targetName] : model.id;\n\t\t\t\t\t\tif (!value) break;\n\n\t\t\t\t\t\tconst recordToDelete = <T>(\n\t\t\t\t\t\t\tawait this.db\n\t\t\t\t\t\t\t\t.transaction(storeName, 'readwrite')\n\t\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t\t.index(hasOneIndex)\n\t\t\t\t\t\t\t\t.get(value)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\trecordToDelete ? [recordToDelete] : [],\n\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\tconst childrenArray = await this.db\n\t\t\t\t\t\t\t.transaction(storeName, 'readwrite')\n\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t.index(index)\n\t\t\t\t\t\t\t.getAll(model['id']);\n\n\t\t\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships[modelName]\n\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\tchildrenArray,\n\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\t// Intentionally blank\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\texhaustiveCheck(relationType);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tdeleteQueue.push({\n\t\t\tstoreName: this.getStorename(nameSpace, srcModel),\n\t\t\titems: models.map(record =>\n\t\t\t\tthis.modelInstanceCreator(\n\t\t\t\t\tthis.getModelConstructorByModelName(nameSpace, srcModel),\n\t\t\t\t\trecord\n\t\t\t\t)\n\t\t\t),\n\t\t});\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tawait this.checkPrivate();\n\n\t\tthis.db.close();\n\n\t\tawait idb.deleteDB(this.dbName);\n\n\t\tthis.db = undefined;\n\t\tthis.initPromise = undefined;\n\t}\n\n\tasync batchSave<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<any>,\n\t\titems: ModelInstanceMetadata[]\n\t): Promise<[T, OpType][]> {\n\t\tif (items.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tawait this.checkPrivate();\n\n\t\tconst result: [T, OpType][] = [];\n\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\tconst txn = this.db.transaction(storeName, 'readwrite');\n\t\tconst store = txn.store;\n\n\t\tfor (const item of items) {\n\t\t\tconst connectedModels = traverseModel(\n\t\t\t\tmodelConstructor.name,\n\t\t\t\tthis.modelInstanceCreator(modelConstructor, item),\n\t\t\t\tthis.schema.namespaces[this.namespaceResolver(modelConstructor)],\n\t\t\t\tthis.modelInstanceCreator,\n\t\t\t\tthis.getModelConstructorByModelName\n\t\t\t);\n\n\t\t\tconst { id, _deleted } = item;\n\t\t\tconst index = store.index('byId');\n\t\t\tconst key = await index.getKey(id);\n\n\t\t\tif (!_deleted) {\n\t\t\t\tconst { instance } = connectedModels.find(\n\t\t\t\t\t({ instance }) => instance.id === id\n\t\t\t\t);\n\n\t\t\t\tresult.push([\n\t\t\t\t\t<T>(<unknown>instance),\n\t\t\t\t\tkey ? OpType.UPDATE : OpType.INSERT,\n\t\t\t\t]);\n\t\t\t\tawait store.put(instance, key);\n\t\t\t} else {\n\t\t\t\tresult.push([<T>(<unknown>item), OpType.DELETE]);\n\n\t\t\t\tif (key) {\n\t\t\t\t\tawait store.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait txn.done;\n\n\t\treturn result;\n\t}\n\n\tprivate async createObjectStoreForModel(\n\t\tdb: idb.IDBPDatabase,\n\t\tnamespaceName: string,\n\t\tstoreName: string,\n\t\tmodelName: string\n\t) {\n\t\tconst store = db.createObjectStore(storeName, {\n\t\t\tautoIncrement: true,\n\t\t});\n\n\t\tconst indexes =\n\t\t\tthis.schema.namespaces[namespaceName].relationships[modelName].indexes;\n\t\tindexes.forEach(index => store.createIndex(index, index));\n\n\t\tstore.createIndex('byId', 'id', { unique: true });\n\t}\n}\n\nexport default new IndexedDBAdapter();\n"]},"metadata":{},"sourceType":"module"}