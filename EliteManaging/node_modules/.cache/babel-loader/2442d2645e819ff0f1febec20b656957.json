{"ast":null,"code":"import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { Buffer } from \"buffer\";\nexport var fromArrayBuffer = function (input, offset, length) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  if (length === void 0) {\n    length = input.byteLength - offset;\n  }\n\n  if (!isArrayBuffer(input)) {\n    throw new TypeError(\"The \\\"input\\\" argument must be ArrayBuffer. Received type \" + typeof input + \" (\" + input + \")\");\n  }\n\n  return Buffer.from(input, offset, length);\n};\nexport var fromString = function (input, encoding) {\n  if (typeof input !== \"string\") {\n    throw new TypeError(\"The \\\"input\\\" argument must be of type string. Received type \" + typeof input + \" (\" + input + \")\");\n  }\n\n  return encoding ? Buffer.from(input, encoding) : Buffer.from(input);\n};","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,QAA8B,0BAA9B;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,OAAO,IAAMC,eAAe,GAAG,UAACC,KAAD,EAAqBC,MAArB,EAAiCC,MAAjC,EAA2E;EAAtD;IAAAD;EAAU;;EAAE;IAAAC,SAAiBF,KAAK,CAACG,UAAN,GAAmBF,MAApC;EAA0C;;EACxG,IAAI,CAACJ,aAAa,CAACG,KAAD,CAAlB,EAA2B;IACzB,MAAM,IAAII,SAAJ,CAAc,+DAA2D,OAAOJ,KAAlE,GAAuE,IAAvE,GAA4EA,KAA5E,GAAiF,GAA/F,CAAN;EACD;;EAED,OAAOF,MAAM,CAACO,IAAP,CAAYL,KAAZ,EAAmBC,MAAnB,EAA2BC,MAA3B,CAAP;AACD,CANM;AAUP,OAAO,IAAMI,UAAU,GAAG,UAACN,KAAD,EAAgBO,QAAhB,EAAyC;EACjE,IAAI,OAAOP,KAAP,KAAiB,QAArB,EAA+B;IAC7B,MAAM,IAAII,SAAJ,CAAc,kEAA8D,OAAOJ,KAArE,GAA0E,IAA1E,GAA+EA,KAA/E,GAAoF,GAAlG,CAAN;EACD;;EAED,OAAOO,QAAQ,GAAGT,MAAM,CAACO,IAAP,CAAYL,KAAZ,EAAmBO,QAAnB,CAAH,GAAkCT,MAAM,CAACO,IAAP,CAAYL,KAAZ,CAAjD;AACD,CANM","names":["isArrayBuffer","Buffer","fromArrayBuffer","input","offset","length","byteLength","TypeError","from","fromString","encoding"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\util-buffer-from\\src\\index.ts"],"sourcesContent":["import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { Buffer } from \"buffer\";\n\nexport const fromArrayBuffer = (input: ArrayBuffer, offset = 0, length: number = input.byteLength - offset): Buffer => {\n  if (!isArrayBuffer(input)) {\n    throw new TypeError(`The \"input\" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);\n  }\n\n  return Buffer.from(input, offset, length);\n};\n\nexport type StringEncoding = \"ascii\" | \"utf8\" | \"utf16le\" | \"ucs2\" | \"base64\" | \"latin1\" | \"binary\" | \"hex\";\n\nexport const fromString = (input: string, encoding?: StringEncoding): Buffer => {\n  if (typeof input !== \"string\") {\n    throw new TypeError(`The \"input\" argument must be of type string. Received type ${typeof input} (${input})`);\n  }\n\n  return encoding ? Buffer.from(input, encoding) : Buffer.from(input);\n};\n"]},"metadata":{},"sourceType":"module"}