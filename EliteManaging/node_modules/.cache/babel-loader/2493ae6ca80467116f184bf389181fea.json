{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { Amplify, ConsoleLogger as Logger, Hub, JS } from '@aws-amplify/core';\nimport { immerable, produce, setAutoFreeze, enablePatches } from 'immer';\nimport { v4 as uuid4 } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { defaultAuthStrategy, multiAuthStrategy } from '../authModeStrategies';\nimport { isPredicatesAll, ModelPredicateCreator, ModelSortPredicateCreator } from '../predicates';\nimport { ExclusiveStorage as Storage } from '../storage/storage';\nimport { ControlMessage, SyncEngine } from '../sync';\nimport { GraphQLScalarType, isGraphQLScalarType, AuthModeStrategyType, isNonModelFieldType, isModelFieldType } from '../types';\nimport { DATASTORE, establishRelationAndKeys, exhaustiveCheck, isModelConstructor, monotonicUlidFactory, STORAGE, SYNC, USER, isNullOrUndefined, registerNonModelClass, sortCompareFunction, DeferredCallbackResolver, validatePredicate, mergePatches } from '../util';\nsetAutoFreeze(true);\nenablePatches();\nvar logger = new Logger('DataStore');\nvar ulid = monotonicUlidFactory(Date.now());\nvar isNode = JS.browserOrNode().isNode;\nvar SETTING_SCHEMA_VERSION = 'schemaVersion';\nvar schema;\nvar modelNamespaceMap = new WeakMap(); // stores data for crafting the correct update mutation input for a model\n// Patch[] - array of changed fields and metadata\n// PersistentModel - the source model, used for diffing object-type fields\n\nvar modelPatchesMap = new WeakMap();\n\nvar getModelDefinition = function (modelConstructor) {\n  var namespace = modelNamespaceMap.get(modelConstructor);\n  return schema.namespaces[namespace].models[modelConstructor.name];\n};\n\nvar isValidModelConstructor = function (obj) {\n  return isModelConstructor(obj) && modelNamespaceMap.has(obj);\n};\n\nvar namespaceResolver = function (modelConstructor) {\n  return modelNamespaceMap.get(modelConstructor);\n}; // exporting syncClasses for testing outbox.test.ts\n\n\nexport var syncClasses;\nvar userClasses;\nvar dataStoreClasses;\nvar storageClasses;\n\nvar initSchema = function (userSchema) {\n  var _a;\n\n  if (schema !== undefined) {\n    console.warn('The schema has already been initialized');\n    return userClasses;\n  }\n\n  logger.log('validating schema', {\n    schema: userSchema\n  });\n\n  var internalUserNamespace = __assign({\n    name: USER\n  }, userSchema);\n\n  logger.log('DataStore', 'Init models');\n  userClasses = createTypeClasses(internalUserNamespace);\n  logger.log('DataStore', 'Models initialized');\n  var dataStoreNamespace = getNamespace();\n  var storageNamespace = Storage.getNamespace();\n  var syncNamespace = SyncEngine.getNamespace();\n  dataStoreClasses = createTypeClasses(dataStoreNamespace);\n  storageClasses = createTypeClasses(storageNamespace);\n  syncClasses = createTypeClasses(syncNamespace);\n  schema = {\n    namespaces: (_a = {}, _a[dataStoreNamespace.name] = dataStoreNamespace, _a[internalUserNamespace.name] = internalUserNamespace, _a[storageNamespace.name] = storageNamespace, _a[syncNamespace.name] = syncNamespace, _a),\n    version: userSchema.version\n  };\n  Object.keys(schema.namespaces).forEach(function (namespace) {\n    var e_1, _a;\n\n    var _b = __read(establishRelationAndKeys(schema.namespaces[namespace]), 2),\n        relations = _b[0],\n        keys = _b[1];\n\n    schema.namespaces[namespace].relationships = relations;\n    schema.namespaces[namespace].keys = keys;\n    var modelAssociations = new Map();\n    Object.values(schema.namespaces[namespace].models).forEach(function (model) {\n      var connectedModels = [];\n      Object.values(model.fields).filter(function (field) {\n        return field.association && field.association.connectionType === 'BELONGS_TO' && field.type.model !== model.name;\n      }).forEach(function (field) {\n        return connectedModels.push(field.type.model);\n      });\n      modelAssociations.set(model.name, connectedModels);\n    });\n    var result = new Map();\n    var count = 1000;\n\n    while (true && count > 0) {\n      if (modelAssociations.size === 0) {\n        break;\n      }\n\n      count--;\n\n      if (count === 0) {\n        throw new Error('Models are not topologically sortable. Please verify your schema.');\n      }\n\n      try {\n        for (var _c = (e_1 = void 0, __values(Array.from(modelAssociations.keys()))), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var modelName = _d.value;\n          var parents = modelAssociations.get(modelName);\n\n          if (parents.every(function (x) {\n            return result.has(x);\n          })) {\n            result.set(modelName, parents);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      Array.from(result.keys()).forEach(function (x) {\n        return modelAssociations.delete(x);\n      });\n    }\n\n    schema.namespaces[namespace].modelTopologicalOrdering = result;\n  });\n  return userClasses;\n};\n/* Checks if the schema has been initialized by initSchema().\n *\n * Call this function before accessing schema.\n * Currently this only needs to be called in start() and clear() because all other functions will call start first.\n */\n\n\nvar checkSchemaInitialized = function () {\n  if (schema === undefined) {\n    var message = 'Schema is not initialized. DataStore will not function as expected. This could happen if you have multiple versions of DataStore installed. Please see https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js/#check-for-duplicate-versions';\n    logger.error(message);\n    throw new Error(message);\n  }\n};\n\nvar createTypeClasses = function (namespace) {\n  var classes = {};\n  Object.entries(namespace.models).forEach(function (_a) {\n    var _b = __read(_a, 2),\n        modelName = _b[0],\n        modelDefinition = _b[1];\n\n    var clazz = createModelClass(modelDefinition);\n    classes[modelName] = clazz;\n    modelNamespaceMap.set(clazz, namespace.name);\n  });\n  Object.entries(namespace.nonModels || {}).forEach(function (_a) {\n    var _b = __read(_a, 2),\n        typeName = _b[0],\n        typeDefinition = _b[1];\n\n    var clazz = createNonModelClass(typeDefinition);\n    classes[typeName] = clazz;\n  });\n  return classes;\n};\n\nvar instancesMetadata = new WeakSet();\n\nfunction modelInstanceCreator(modelConstructor, init) {\n  instancesMetadata.add(init);\n  return new modelConstructor(init);\n}\n\nvar validateModelFields = function (modelDefinition) {\n  return function (k, v) {\n    var fieldDefinition = modelDefinition.fields[k];\n\n    if (fieldDefinition !== undefined) {\n      var type = fieldDefinition.type,\n          isRequired_1 = fieldDefinition.isRequired,\n          isArrayNullable = fieldDefinition.isArrayNullable,\n          name_1 = fieldDefinition.name,\n          isArray = fieldDefinition.isArray;\n\n      if ((!isArray && isRequired_1 || isArray && !isArrayNullable) && (v === null || v === undefined)) {\n        throw new Error(\"Field \" + name_1 + \" is required\");\n      }\n\n      if (isGraphQLScalarType(type)) {\n        var jsType_1 = GraphQLScalarType.getJSType(type);\n        var validateScalar_1 = GraphQLScalarType.getValidationFunction(type);\n\n        if (type === 'AWSJSON') {\n          if (typeof v === jsType_1) {\n            return;\n          }\n\n          if (typeof v === 'string') {\n            try {\n              JSON.parse(v);\n              return;\n            } catch (error) {\n              throw new Error(\"Field \" + name_1 + \" is an invalid JSON object. \" + v);\n            }\n          }\n        }\n\n        if (isArray) {\n          var errorTypeText = jsType_1;\n\n          if (!isRequired_1) {\n            errorTypeText = jsType_1 + \" | null | undefined\";\n          }\n\n          if (!Array.isArray(v) && !isArrayNullable) {\n            throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n          }\n\n          if (!isNullOrUndefined(v) && v.some(function (e) {\n            return isNullOrUndefined(e) ? isRequired_1 : typeof e !== jsType_1;\n          })) {\n            var elemTypes = v.map(function (e) {\n              return e === null ? 'null' : typeof e;\n            }).join(',');\n            throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + errorTypeText + \", [\" + elemTypes + \"] received. \" + v);\n          }\n\n          if (validateScalar_1 && !isNullOrUndefined(v)) {\n            var validationStatus = v.map(function (e) {\n              if (!isNullOrUndefined(e)) {\n                return validateScalar_1(e);\n              } else if (isNullOrUndefined(e) && !isRequired_1) {\n                return true;\n              } else {\n                return false;\n              }\n            });\n\n            if (!validationStatus.every(function (s) {\n              return s;\n            })) {\n              throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type + \", validation failed for one or more elements. \" + v);\n            }\n          }\n        } else if (!isRequired_1 && v === undefined) {\n          return;\n        } else if (typeof v !== jsType_1 && v !== null) {\n          throw new Error(\"Field \" + name_1 + \" should be of type \" + jsType_1 + \", \" + typeof v + \" received. \" + v);\n        } else if (!isNullOrUndefined(v) && validateScalar_1 && !validateScalar_1(v)) {\n          throw new Error(\"Field \" + name_1 + \" should be of type \" + type + \", validation failed. \" + v);\n        }\n      }\n    }\n  };\n};\n\nvar castInstanceType = function (modelDefinition, k, v) {\n  var _a = modelDefinition.fields[k] || {},\n      isArray = _a.isArray,\n      type = _a.type; // attempt to parse stringified JSON\n\n\n  if (typeof v === 'string' && (isArray || type === 'AWSJSON' || isNonModelFieldType(type) || isModelFieldType(type))) {\n    try {\n      return JSON.parse(v);\n    } catch (_b) {// if JSON is invalid, don't throw and let modelValidator handle it\n    }\n  } // cast from numeric representation of boolean to JS boolean\n\n\n  if (typeof v === 'number' && type === 'Boolean') {\n    return Boolean(v);\n  }\n\n  return v;\n};\n\nvar initializeInstance = function (init, modelDefinition, draft) {\n  var modelValidator = validateModelFields(modelDefinition);\n  Object.entries(init).forEach(function (_a) {\n    var _b = __read(_a, 2),\n        k = _b[0],\n        v = _b[1];\n\n    var parsedValue = castInstanceType(modelDefinition, k, v);\n    modelValidator(k, parsedValue);\n    draft[k] = parsedValue;\n  });\n};\n\nvar createModelClass = function (modelDefinition) {\n  var clazz =\n  /** @class */\n  function () {\n    function Model(init) {\n      var instance = produce(this, function (draft) {\n        initializeInstance(init, modelDefinition, draft);\n        var modelInstanceMetadata = instancesMetadata.has(init) ? init : {};\n        var _id = modelInstanceMetadata.id,\n            _version = modelInstanceMetadata._version,\n            _lastChangedAt = modelInstanceMetadata._lastChangedAt,\n            _deleted = modelInstanceMetadata._deleted; // instancesIds are set by modelInstanceCreator, it is accessible only internally\n\n        var isInternal = _id !== null && _id !== undefined;\n        var id = isInternal ? _id : modelDefinition.syncable ? uuid4() : ulid();\n\n        if (!isInternal) {\n          checkReadOnlyPropertyOnCreate(draft, modelDefinition);\n        }\n\n        draft.id = id;\n\n        if (modelDefinition.syncable) {\n          draft._version = _version;\n          draft._lastChangedAt = _lastChangedAt;\n          draft._deleted = _deleted;\n        }\n      });\n      return instance;\n    }\n\n    Model.copyOf = function (source, fn) {\n      var modelConstructor = Object.getPrototypeOf(source || {}).constructor;\n\n      if (!isValidModelConstructor(modelConstructor)) {\n        var msg = 'The source object is not a valid model';\n        logger.error(msg, {\n          source: source\n        });\n        throw new Error(msg);\n      }\n\n      var patches;\n      var model = produce(source, function (draft) {\n        fn(draft);\n        draft.id = source.id;\n        var modelValidator = validateModelFields(modelDefinition);\n        Object.entries(draft).forEach(function (_a) {\n          var _b = __read(_a, 2),\n              k = _b[0],\n              v = _b[1];\n\n          var parsedValue = castInstanceType(modelDefinition, k, v);\n          modelValidator(k, parsedValue);\n        });\n      }, function (p) {\n        return patches = p;\n      });\n      var hasExistingPatches = modelPatchesMap.has(source);\n\n      if (patches.length || hasExistingPatches) {\n        if (hasExistingPatches) {\n          var _a = __read(modelPatchesMap.get(source), 2),\n              existingPatches = _a[0],\n              existingSource = _a[1];\n\n          var mergedPatches = mergePatches(existingSource, existingPatches, patches);\n          modelPatchesMap.set(model, [mergedPatches, existingSource]);\n          checkReadOnlyPropertyOnUpdate(mergedPatches, modelDefinition);\n        } else {\n          modelPatchesMap.set(model, [patches, source]);\n          checkReadOnlyPropertyOnUpdate(patches, modelDefinition);\n        }\n      }\n\n      return model;\n    }; // \"private\" method (that's hidden via `Setting`) for `withSSRContext` to use\n    // to gain access to `modelInstanceCreator` and `clazz` for persisting IDs from server to client.\n\n\n    Model.fromJSON = function (json) {\n      var _this = this;\n\n      if (Array.isArray(json)) {\n        return json.map(function (init) {\n          return _this.fromJSON(init);\n        });\n      }\n\n      var instance = modelInstanceCreator(clazz, json);\n      var modelValidator = validateModelFields(modelDefinition);\n      Object.entries(instance).forEach(function (_a) {\n        var _b = __read(_a, 2),\n            k = _b[0],\n            v = _b[1];\n\n        modelValidator(k, v);\n      });\n      return instance;\n    };\n\n    return Model;\n  }();\n\n  clazz[immerable] = true;\n  Object.defineProperty(clazz, 'name', {\n    value: modelDefinition.name\n  });\n  return clazz;\n};\n\nvar checkReadOnlyPropertyOnCreate = function (draft, modelDefinition) {\n  var modelKeys = Object.keys(draft);\n  var fields = modelDefinition.fields;\n  modelKeys.forEach(function (key) {\n    if (fields[key] && fields[key].isReadOnly) {\n      throw new Error(key + \" is read-only.\");\n    }\n  });\n};\n\nvar checkReadOnlyPropertyOnUpdate = function (patches, modelDefinition) {\n  var patchArray = patches.map(function (p) {\n    return [p.path[0], p.value];\n  });\n  var fields = modelDefinition.fields;\n  patchArray.forEach(function (_a) {\n    var _b = __read(_a, 2),\n        key = _b[0],\n        val = _b[1];\n\n    if (!val || !fields[key]) return;\n\n    if (fields[key].isReadOnly) {\n      throw new Error(key + \" is read-only.\");\n    }\n  });\n};\n\nvar createNonModelClass = function (typeDefinition) {\n  var clazz =\n  /** @class */\n  function () {\n    function Model(init) {\n      var instance = produce(this, function (draft) {\n        initializeInstance(init, typeDefinition, draft);\n      });\n      return instance;\n    }\n\n    return Model;\n  }();\n\n  clazz[immerable] = true;\n  Object.defineProperty(clazz, 'name', {\n    value: typeDefinition.name\n  });\n  registerNonModelClass(clazz);\n  return clazz;\n};\n\nfunction isQueryOne(obj) {\n  return typeof obj === 'string';\n}\n\nfunction defaultConflictHandler(conflictData) {\n  var localModel = conflictData.localModel,\n      modelConstructor = conflictData.modelConstructor,\n      remoteModel = conflictData.remoteModel;\n  var _version = remoteModel._version;\n  return modelInstanceCreator(modelConstructor, __assign(__assign({}, localModel), {\n    _version: _version\n  }));\n}\n\nfunction defaultErrorHandler(error) {\n  logger.warn(error);\n}\n\nfunction getModelConstructorByModelName(namespaceName, modelName) {\n  var result;\n\n  switch (namespaceName) {\n    case DATASTORE:\n      result = dataStoreClasses[modelName];\n      break;\n\n    case USER:\n      result = userClasses[modelName];\n      break;\n\n    case SYNC:\n      result = syncClasses[modelName];\n      break;\n\n    case STORAGE:\n      result = storageClasses[modelName];\n      break;\n\n    default:\n      exhaustiveCheck(namespaceName);\n      break;\n  }\n\n  if (isValidModelConstructor(result)) {\n    return result;\n  } else {\n    var msg = \"Model name is not valid for namespace. modelName: \" + modelName + \", namespace: \" + namespaceName;\n    logger.error(msg);\n    throw new Error(msg);\n  }\n}\n\nfunction checkSchemaVersion(storage, version) {\n  return __awaiter(this, void 0, void 0, function () {\n    var Setting, modelDefinition;\n\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          Setting = dataStoreClasses.Setting;\n          modelDefinition = schema.namespaces[DATASTORE].models.Setting;\n          return [4\n          /*yield*/\n          , storage.runExclusive(function (s) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var _a, schemaVersionSetting, storedValue;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , s.query(Setting, ModelPredicateCreator.createFromExisting(modelDefinition, function (c) {\n                      // @ts-ignore Argument of type '\"eq\"' is not assignable to parameter of type 'never'.\n                      return c.key('eq', SETTING_SCHEMA_VERSION);\n                    }), {\n                      page: 0,\n                      limit: 1\n                    })];\n\n                  case 1:\n                    _a = __read.apply(void 0, [_b.sent(), 1]), schemaVersionSetting = _a[0];\n                    if (!(schemaVersionSetting !== undefined && schemaVersionSetting.value !== undefined)) return [3\n                    /*break*/\n                    , 4];\n                    storedValue = JSON.parse(schemaVersionSetting.value);\n                    if (!(storedValue !== version)) return [3\n                    /*break*/\n                    , 3];\n                    return [4\n                    /*yield*/\n                    , s.clear(false)];\n\n                  case 2:\n                    _b.sent();\n\n                    _b.label = 3;\n\n                  case 3:\n                    return [3\n                    /*break*/\n                    , 6];\n\n                  case 4:\n                    return [4\n                    /*yield*/\n                    , s.save(modelInstanceCreator(Setting, {\n                      key: SETTING_SCHEMA_VERSION,\n                      value: JSON.stringify(version)\n                    }))];\n\n                  case 5:\n                    _b.sent();\n\n                    _b.label = 6;\n\n                  case 6:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          })];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nvar syncSubscription;\n\nfunction getNamespace() {\n  var namespace = {\n    name: DATASTORE,\n    relationships: {},\n    enums: {},\n    nonModels: {},\n    models: {\n      Setting: {\n        name: 'Setting',\n        pluralName: 'Settings',\n        syncable: false,\n        fields: {\n          id: {\n            name: 'id',\n            type: 'ID',\n            isRequired: true,\n            isArray: false\n          },\n          key: {\n            name: 'key',\n            type: 'String',\n            isRequired: true,\n            isArray: false\n          },\n          value: {\n            name: 'value',\n            type: 'String',\n            isRequired: true,\n            isArray: false\n          }\n        }\n      }\n    }\n  };\n  return namespace;\n}\n\nvar DataStore =\n/** @class */\nfunction () {\n  function DataStore() {\n    var _this = this;\n\n    this.amplifyConfig = {};\n    this.syncPredicates = new WeakMap();\n\n    this.start = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var aws_appsync_graphqlEndpoint, _a, fullSyncIntervalInMilliseconds;\n\n        var _this = this;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              if (!(this.initialized === undefined)) return [3\n              /*break*/\n              , 1];\n              logger.debug('Starting DataStore');\n              this.initialized = new Promise(function (res, rej) {\n                _this.initResolve = res;\n                _this.initReject = rej;\n              });\n              return [3\n              /*break*/\n              , 3];\n\n            case 1:\n              return [4\n              /*yield*/\n              , this.initialized];\n\n            case 2:\n              _b.sent();\n\n              return [2\n              /*return*/\n              ];\n\n            case 3:\n              this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n              return [4\n              /*yield*/\n              , this.storage.init()];\n\n            case 4:\n              _b.sent();\n\n              checkSchemaInitialized();\n              return [4\n              /*yield*/\n              , checkSchemaVersion(this.storage, schema.version)];\n\n            case 5:\n              _b.sent();\n\n              aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n              if (!aws_appsync_graphqlEndpoint) return [3\n              /*break*/\n              , 7];\n              logger.debug('GraphQL endpoint available', aws_appsync_graphqlEndpoint);\n              _a = this;\n              return [4\n              /*yield*/\n              , this.processSyncExpressions()];\n\n            case 6:\n              _a.syncPredicates = _b.sent();\n              this.sync = new SyncEngine(schema, namespaceResolver, syncClasses, userClasses, this.storage, modelInstanceCreator, this.conflictHandler, this.errorHandler, this.syncPredicates, this.amplifyConfig, this.authModeStrategy);\n              fullSyncIntervalInMilliseconds = this.fullSyncInterval * 1000 * 60;\n              syncSubscription = this.sync.start({\n                fullSyncInterval: fullSyncIntervalInMilliseconds\n              }).subscribe({\n                next: function (_a) {\n                  var type = _a.type,\n                      data = _a.data; // In Node, we need to wait for queries to be synced to prevent returning empty arrays.\n                  // In the Browser, we can begin returning data once subscriptions are in place.\n\n                  var readyType = isNode ? ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY : ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED;\n\n                  if (type === readyType) {\n                    _this.initResolve();\n                  }\n\n                  Hub.dispatch('datastore', {\n                    event: type,\n                    data: data\n                  });\n                },\n                error: function (err) {\n                  logger.warn('Sync error', err);\n\n                  _this.initReject();\n                }\n              });\n              return [3\n              /*break*/\n              , 8];\n\n            case 7:\n              logger.warn(\"Data won't be synchronized. No GraphQL endpoint configured. Did you forget `Amplify.configure(awsconfig)`?\", {\n                config: this.amplifyConfig\n              });\n              this.initResolve();\n              _b.label = 8;\n\n            case 8:\n              return [4\n              /*yield*/\n              , this.initialized];\n\n            case 9:\n              _b.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    this.query = function (modelConstructor, idOrCriteria, paginationProducer) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var msg, modelDefinition, predicate, pagination, result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.start()];\n\n            case 1:\n              _a.sent(); //#region Input validation\n\n\n              if (!isValidModelConstructor(modelConstructor)) {\n                msg = 'Constructor is not for a valid model';\n                logger.error(msg, {\n                  modelConstructor: modelConstructor\n                });\n                throw new Error(msg);\n              }\n\n              if (typeof idOrCriteria === 'string') {\n                if (paginationProducer !== undefined) {\n                  logger.warn('Pagination is ignored when querying by id');\n                }\n              }\n\n              modelDefinition = getModelDefinition(modelConstructor);\n\n              if (isQueryOne(idOrCriteria)) {\n                predicate = ModelPredicateCreator.createForId(modelDefinition, idOrCriteria);\n              } else {\n                if (isPredicatesAll(idOrCriteria)) {\n                  // Predicates.ALL means \"all records\", so no predicate (undefined)\n                  predicate = undefined;\n                } else {\n                  predicate = ModelPredicateCreator.createFromExisting(modelDefinition, idOrCriteria);\n                }\n              }\n\n              pagination = this.processPagination(modelDefinition, paginationProducer); //#endregion\n\n              logger.debug('params ready', {\n                modelConstructor: modelConstructor,\n                predicate: ModelPredicateCreator.getPredicates(predicate, false),\n                pagination: __assign(__assign({}, pagination), {\n                  sort: ModelSortPredicateCreator.getPredicates(pagination && pagination.sort, false)\n                })\n              });\n              return [4\n              /*yield*/\n              , this.storage.query(modelConstructor, predicate, pagination)];\n\n            case 2:\n              result = _a.sent();\n              return [2\n              /*return*/\n              , isQueryOne(idOrCriteria) ? result[0] : result];\n          }\n        });\n      });\n    };\n\n    this.save = function (model, condition) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var patchesTuple, modelConstructor, msg, modelDefinition, producedCondition, _a, savedModel;\n\n        var _this = this;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.start()];\n\n            case 1:\n              _b.sent();\n\n              patchesTuple = modelPatchesMap.get(model);\n              modelConstructor = model ? model.constructor : undefined;\n\n              if (!isValidModelConstructor(modelConstructor)) {\n                msg = 'Object is not an instance of a valid model';\n                logger.error(msg, {\n                  model: model\n                });\n                throw new Error(msg);\n              }\n\n              modelDefinition = getModelDefinition(modelConstructor);\n              producedCondition = ModelPredicateCreator.createFromExisting(modelDefinition, condition);\n              return [4\n              /*yield*/\n              , this.storage.runExclusive(function (s) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        return [4\n                        /*yield*/\n                        , s.save(model, producedCondition, undefined, patchesTuple)];\n\n                      case 1:\n                        _a.sent();\n\n                        return [2\n                        /*return*/\n                        , s.query(modelConstructor, ModelPredicateCreator.createForId(modelDefinition, model.id))];\n                    }\n                  });\n                });\n              })];\n\n            case 2:\n              _a = __read.apply(void 0, [_b.sent(), 1]), savedModel = _a[0];\n              return [2\n              /*return*/\n              , savedModel];\n          }\n        });\n      });\n    };\n\n    this.setConflictHandler = function (config) {\n      var configDataStore = config.DataStore;\n\n      var conflictHandlerIsDefault = function () {\n        return _this.conflictHandler === defaultConflictHandler;\n      };\n\n      if (configDataStore && configDataStore.conflictHandler) {\n        return configDataStore.conflictHandler;\n      }\n\n      if (conflictHandlerIsDefault() && config.conflictHandler) {\n        return config.conflictHandler;\n      }\n\n      return _this.conflictHandler || defaultConflictHandler;\n    };\n\n    this.setErrorHandler = function (config) {\n      var configDataStore = config.DataStore;\n\n      var errorHandlerIsDefault = function () {\n        return _this.errorHandler === defaultErrorHandler;\n      };\n\n      if (configDataStore && configDataStore.errorHandler) {\n        return configDataStore.errorHandler;\n      }\n\n      if (errorHandlerIsDefault() && config.errorHandler) {\n        return config.errorHandler;\n      }\n\n      return _this.errorHandler || defaultErrorHandler;\n    };\n\n    this.delete = function (modelOrConstructor, idOrCriteria) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var condition, msg, modelConstructor, msg, msg, _a, deleted, model, modelConstructor, msg, modelDefinition, idPredicate, msg, _b, _c, deleted;\n\n        return __generator(this, function (_d) {\n          switch (_d.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.start()];\n\n            case 1:\n              _d.sent();\n\n              if (!modelOrConstructor) {\n                msg = 'Model or Model Constructor required';\n                logger.error(msg, {\n                  modelOrConstructor: modelOrConstructor\n                });\n                throw new Error(msg);\n              }\n\n              if (!isValidModelConstructor(modelOrConstructor)) return [3\n              /*break*/\n              , 3];\n              modelConstructor = modelOrConstructor;\n\n              if (!idOrCriteria) {\n                msg = 'Id to delete or criteria required. Do you want to delete all? Pass Predicates.ALL';\n                logger.error(msg, {\n                  idOrCriteria: idOrCriteria\n                });\n                throw new Error(msg);\n              }\n\n              if (typeof idOrCriteria === 'string') {\n                condition = ModelPredicateCreator.createForId(getModelDefinition(modelConstructor), idOrCriteria);\n              } else {\n                condition = ModelPredicateCreator.createFromExisting(getModelDefinition(modelConstructor),\n                /**\n                 * idOrCriteria is always a ProducerModelPredicate<T>, never a symbol.\n                 * The symbol is used only for typing purposes. e.g. see Predicates.ALL\n                 */\n                idOrCriteria);\n\n                if (!condition || !ModelPredicateCreator.isValidPredicate(condition)) {\n                  msg = 'Criteria required. Do you want to delete all? Pass Predicates.ALL';\n                  logger.error(msg, {\n                    condition: condition\n                  });\n                  throw new Error(msg);\n                }\n              }\n\n              return [4\n              /*yield*/\n              , this.storage.delete(modelConstructor, condition)];\n\n            case 2:\n              _a = __read.apply(void 0, [_d.sent(), 1]), deleted = _a[0];\n              return [2\n              /*return*/\n              , deleted];\n\n            case 3:\n              model = modelOrConstructor;\n              modelConstructor = Object.getPrototypeOf(model || {}).constructor;\n\n              if (!isValidModelConstructor(modelConstructor)) {\n                msg = 'Object is not an instance of a valid model';\n                logger.error(msg, {\n                  model: model\n                });\n                throw new Error(msg);\n              }\n\n              modelDefinition = getModelDefinition(modelConstructor);\n              idPredicate = ModelPredicateCreator.createForId(modelDefinition, model.id);\n\n              if (idOrCriteria) {\n                if (typeof idOrCriteria !== 'function') {\n                  msg = 'Invalid criteria';\n                  logger.error(msg, {\n                    idOrCriteria: idOrCriteria\n                  });\n                  throw new Error(msg);\n                }\n\n                condition = idOrCriteria(idPredicate);\n              } else {\n                condition = idPredicate;\n              }\n\n              return [4\n              /*yield*/\n              , this.storage.delete(model, condition)];\n\n            case 4:\n              _b = __read.apply(void 0, [_d.sent(), 1]), _c = __read(_b[0], 1), deleted = _c[0];\n              return [2\n              /*return*/\n              , deleted];\n          }\n        });\n      });\n    };\n\n    this.observe = function (modelOrConstructor, idOrCriteria) {\n      var predicate;\n      var modelConstructor = modelOrConstructor && isValidModelConstructor(modelOrConstructor) ? modelOrConstructor : undefined;\n\n      if (modelOrConstructor && modelConstructor === undefined) {\n        var model = modelOrConstructor;\n        var modelConstructor_1 = model && Object.getPrototypeOf(model).constructor;\n\n        if (isValidModelConstructor(modelConstructor_1)) {\n          if (idOrCriteria) {\n            logger.warn('idOrCriteria is ignored when using a model instance', {\n              model: model,\n              idOrCriteria: idOrCriteria\n            });\n          }\n\n          return _this.observe(modelConstructor_1, model.id);\n        } else {\n          var msg = 'The model is not an instance of a PersistentModelConstructor';\n          logger.error(msg, {\n            model: model\n          });\n          throw new Error(msg);\n        }\n      }\n\n      if (idOrCriteria !== undefined && modelConstructor === undefined) {\n        var msg = 'Cannot provide criteria without a modelConstructor';\n        logger.error(msg, idOrCriteria);\n        throw new Error(msg);\n      }\n\n      if (modelConstructor && !isValidModelConstructor(modelConstructor)) {\n        var msg = 'Constructor is not for a valid model';\n        logger.error(msg, {\n          modelConstructor: modelConstructor\n        });\n        throw new Error(msg);\n      }\n\n      if (typeof idOrCriteria === 'string') {\n        predicate = ModelPredicateCreator.createForId(getModelDefinition(modelConstructor), idOrCriteria);\n      } else {\n        predicate = modelConstructor && ModelPredicateCreator.createFromExisting(getModelDefinition(modelConstructor), idOrCriteria);\n      }\n\n      return new Observable(function (observer) {\n        var handle;\n\n        (function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4\n                  /*yield*/\n                  , this.start()];\n\n                case 1:\n                  _a.sent(); // Filter the events returned by Storage according to namespace,\n                  // append original element data, and subscribe to the observable\n\n\n                  handle = this.storage.observe(modelConstructor, predicate).filter(function (_a) {\n                    var model = _a.model;\n                    return namespaceResolver(model) === USER;\n                  }).subscribe({\n                    next: function (item) {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var message, freshElement;\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              message = item;\n                              if (!(item.opType !== 'DELETE')) return [3\n                              /*break*/\n                              , 2];\n                              return [4\n                              /*yield*/\n                              , this.query(item.model, item.element.id)];\n\n                            case 1:\n                              freshElement = _a.sent();\n                              message = __assign(__assign({}, message), {\n                                element: freshElement\n                              });\n                              _a.label = 2;\n\n                            case 2:\n                              observer.next(message);\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      });\n                    },\n                    error: function (err) {\n                      return observer.error(err);\n                    },\n                    complete: function () {\n                      return observer.complete();\n                    }\n                  });\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        })();\n\n        return function () {\n          if (handle) {\n            handle.unsubscribe();\n          }\n        };\n      });\n    };\n\n    this.observeQuery = function (model, criteria, options) {\n      return new Observable(function (observer) {\n        var items = new Map();\n        var itemsChanged = new Map();\n        var deletedItemIds = [];\n        var handle;\n        var predicate;\n        /**\n         * As the name suggests, this geneates a snapshot in the form of\n         * \t`{items: T[], isSynced: boolean}`\n         * and sends it to the observer.\n         *\n         * SIDE EFFECT: The underlying generation and emission methods may touch:\n         * `items`, `itemsChanged`, and `deletedItemIds`.\n         *\n         * Refer to `generateSnapshot` and `emitSnapshot` for more details.\n         */\n\n        var generateAndEmitSnapshot = function () {\n          var snapshot = generateSnapshot();\n          emitSnapshot(snapshot);\n        }; // a mechanism to return data after X amount of seconds OR after the\n        // \"limit\" (itemsChanged >= this.syncPageSize) has been reached, whichever comes first\n\n\n        var limitTimerRace = new DeferredCallbackResolver({\n          callback: generateAndEmitSnapshot,\n          errorHandler: observer.error,\n          maxInterval: 2000\n        });\n        var sort = (options || {}).sort;\n        var sortOptions = sort ? {\n          sort: sort\n        } : undefined;\n        var modelDefinition = getModelDefinition(model);\n\n        if (isQueryOne(criteria)) {\n          predicate = ModelPredicateCreator.createForId(modelDefinition, criteria);\n        } else {\n          if (isPredicatesAll(criteria)) {\n            // Predicates.ALL means \"all records\", so no predicate (undefined)\n            predicate = undefined;\n          } else {\n            predicate = ModelPredicateCreator.createFromExisting(modelDefinition, criteria);\n          }\n        }\n\n        var _a = ModelPredicateCreator.getPredicates(predicate, false) || {},\n            predicates = _a.predicates,\n            predicateGroupType = _a.type;\n\n        var hasPredicate = !!predicates;\n\n        (function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var err_1;\n\n            var _this = this;\n\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2,, 3]);\n\n                  return [4\n                  /*yield*/\n                  , this.query(model, criteria, sortOptions)];\n\n                case 1:\n                  // first, query and return any locally-available records\n                  _a.sent().forEach(function (item) {\n                    return items.set(item.id, item);\n                  }); // Observe the model and send a stream of updates (debounced).\n                  // We need to post-filter results instead of passing criteria through\n                  // to have visibility into items that move from in-set to out-of-set.\n                  // We need to explicitly remove those items from the existing snapshot.\n\n\n                  handle = this.observe(model).subscribe(function (_a) {\n                    var element = _a.element,\n                        model = _a.model,\n                        opType = _a.opType;\n\n                    var _b, _c;\n\n                    if (hasPredicate && !validatePredicate(element, predicateGroupType, predicates)) {\n                      if (opType === 'UPDATE' && (items.has(element.id) || itemsChanged.has(element.id))) {\n                        // tracking as a \"deleted item\" will include the item in\n                        // page limit calculations and ensure it is removed from the\n                        // final items collection, regardless of which collection(s)\n                        // it is currently in. (I mean, it could be in both, right!?)\n                        deletedItemIds.push(element.id);\n                      } else {\n                        // ignore updates for irrelevant/filtered items.\n                        return;\n                      }\n                    } // Flag items which have been recently deleted\n                    // NOTE: Merging of separate operations to the same model instance is handled upstream\n                    // in the `mergePage` method within src/sync/merger.ts. The final state of a model instance\n                    // depends on the LATEST record (for a given id).\n\n\n                    if (opType === 'DELETE') {\n                      deletedItemIds.push(element.id);\n                    } else {\n                      itemsChanged.set(element.id, element);\n                    }\n\n                    var isSynced = (_c = (_b = _this.sync) === null || _b === void 0 ? void 0 : _b.getModelSyncedStatus(model)) !== null && _c !== void 0 ? _c : false;\n                    var limit = itemsChanged.size - deletedItemIds.length >= _this.syncPageSize;\n\n                    if (limit || isSynced) {\n                      limitTimerRace.resolve();\n                    } // kicks off every subsequent race as results sync down\n\n\n                    limitTimerRace.start();\n                  }); // returns a set of initial/locally-available results\n\n                  generateAndEmitSnapshot();\n                  return [3\n                  /*break*/\n                  , 3];\n\n                case 2:\n                  err_1 = _a.sent();\n                  observer.error(err_1);\n                  return [3\n                  /*break*/\n                  , 3];\n\n                case 3:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        })();\n        /**\n         * Combines the `items`, `itemsChanged`, and `deletedItemIds` collections into\n         * a snapshot in the form of `{ items: T[], isSynced: boolean}`.\n         *\n         * SIDE EFFECT: The shared `items` collection is recreated.\n         */\n\n\n        var generateSnapshot = function () {\n          var _a, _b;\n\n          var isSynced = (_b = (_a = _this.sync) === null || _a === void 0 ? void 0 : _a.getModelSyncedStatus(model)) !== null && _b !== void 0 ? _b : false;\n\n          var itemsArray = __spread(Array.from(items.values()), Array.from(itemsChanged.values()));\n\n          if (options === null || options === void 0 ? void 0 : options.sort) {\n            sortItems(itemsArray);\n          }\n\n          items.clear();\n          itemsArray.forEach(function (item) {\n            return items.set(item.id, item);\n          }); // remove deleted items from the final result set\n\n          deletedItemIds.forEach(function (id) {\n            return items.delete(id);\n          });\n          return {\n            items: Array.from(items.values()),\n            isSynced: isSynced\n          };\n        };\n        /**\n         * Emits the list of items to the observer.\n         *\n         * SIDE EFFECT: `itemsChanged` and `deletedItemIds` are cleared to prepare\n         * for the next snapshot.\n         *\n         * @param snapshot The generated items data to emit.\n         */\n\n\n        var emitSnapshot = function (snapshot) {\n          // send the generated snapshot to the primary subscription\n          observer.next(snapshot); // reset the changed items sets\n\n          itemsChanged.clear();\n          deletedItemIds = [];\n        };\n        /**\n         * Sorts an `Array` of `T` according to the sort instructions given in the\n         * original  `observeQuery()` call.\n         *\n         * @param itemsToSort A array of model type.\n         */\n\n\n        var sortItems = function (itemsToSort) {\n          var modelDefinition = getModelDefinition(model);\n\n          var pagination = _this.processPagination(modelDefinition, options);\n\n          var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n\n          if (sortPredicates.length) {\n            var compareFn = sortCompareFunction(sortPredicates);\n            itemsToSort.sort(compareFn);\n          }\n        };\n        /**\n         * Force one last snapshot when the model is fully synced.\n         *\n         * This reduces latency for that last snapshot, which will otherwise\n         * wait for the configured timeout.\n         *\n         * @param payload The payload from the Hub event.\n         */\n\n\n        var hubCallback = function (_a) {\n          var payload = _a.payload;\n\n          var _b;\n\n          var event = payload.event,\n              data = payload.data;\n\n          if (event === ControlMessage.SYNC_ENGINE_MODEL_SYNCED && ((_b = data === null || data === void 0 ? void 0 : data.model) === null || _b === void 0 ? void 0 : _b.name) === model.name) {\n            generateAndEmitSnapshot();\n            Hub.remove('api', hubCallback);\n          }\n        };\n\n        Hub.listen('datastore', hubCallback);\n        return function () {\n          if (handle) {\n            handle.unsubscribe();\n          }\n        };\n      });\n    };\n\n    this.configure = function (config) {\n      if (config === void 0) {\n        config = {};\n      }\n\n      var configDataStore = config.DataStore,\n          configAuthModeStrategyType = config.authModeStrategyType,\n          configConflictHandler = config.conflictHandler,\n          configErrorHandler = config.errorHandler,\n          configMaxRecordsToSync = config.maxRecordsToSync,\n          configSyncPageSize = config.syncPageSize,\n          configFullSyncInterval = config.fullSyncInterval,\n          configSyncExpressions = config.syncExpressions,\n          configAuthProviders = config.authProviders,\n          configStorageAdapter = config.storageAdapter,\n          configFromAmplify = __rest(config, [\"DataStore\", \"authModeStrategyType\", \"conflictHandler\", \"errorHandler\", \"maxRecordsToSync\", \"syncPageSize\", \"fullSyncInterval\", \"syncExpressions\", \"authProviders\", \"storageAdapter\"]);\n\n      _this.amplifyConfig = __assign(__assign({}, configFromAmplify), _this.amplifyConfig);\n      _this.conflictHandler = _this.setConflictHandler(config);\n      _this.errorHandler = _this.setErrorHandler(config);\n      var authModeStrategyType = configDataStore && configDataStore.authModeStrategyType || configAuthModeStrategyType || AuthModeStrategyType.DEFAULT;\n\n      switch (authModeStrategyType) {\n        case AuthModeStrategyType.MULTI_AUTH:\n          _this.authModeStrategy = multiAuthStrategy;\n          break;\n\n        case AuthModeStrategyType.DEFAULT:\n          _this.authModeStrategy = defaultAuthStrategy;\n          break;\n\n        default:\n          _this.authModeStrategy = defaultAuthStrategy;\n          break;\n      } // store on config object, so that Sync, Subscription, and Mutation processors can have access\n\n\n      _this.amplifyConfig.authProviders = configDataStore && configDataStore.authProviders || configAuthProviders;\n      _this.syncExpressions = configDataStore && configDataStore.syncExpressions || configSyncExpressions || _this.syncExpressions;\n      _this.maxRecordsToSync = configDataStore && configDataStore.maxRecordsToSync || configMaxRecordsToSync || _this.maxRecordsToSync || 10000; // store on config object, so that Sync, Subscription, and Mutation processors can have access\n\n      _this.amplifyConfig.maxRecordsToSync = _this.maxRecordsToSync;\n      _this.syncPageSize = configDataStore && configDataStore.syncPageSize || configSyncPageSize || _this.syncPageSize || 1000; // store on config object, so that Sync, Subscription, and Mutation processors can have access\n\n      _this.amplifyConfig.syncPageSize = _this.syncPageSize;\n      _this.fullSyncInterval = configDataStore && configDataStore.fullSyncInterval || configFullSyncInterval || _this.fullSyncInterval || 24 * 60; // 1 day\n\n      _this.storageAdapter = configDataStore && configDataStore.storageAdapter || configStorageAdapter || _this.storageAdapter || undefined;\n      _this.sessionId = _this.retrieveSessionId();\n    };\n\n    this.clear = function clear() {\n      return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              checkSchemaInitialized();\n              if (!(this.storage === undefined)) return [3\n              /*break*/\n              , 2]; // connect to storage so that it can be cleared without fully starting DataStore\n\n              this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n              return [4\n              /*yield*/\n              , this.storage.init()];\n\n            case 1:\n              _a.sent();\n\n              _a.label = 2;\n\n            case 2:\n              if (syncSubscription && !syncSubscription.closed) {\n                syncSubscription.unsubscribe();\n              }\n\n              return [4\n              /*yield*/\n              , this.storage.clear()];\n\n            case 3:\n              _a.sent();\n\n              if (this.sync) {\n                this.sync.unsubscribeConnectivity();\n              }\n\n              this.initialized = undefined; // Should re-initialize when start() is called.\n\n              this.storage = undefined;\n              this.sync = undefined;\n              this.syncPredicates = new WeakMap();\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    this.stop = function stop() {\n      return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!(this.initialized !== undefined)) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , this.start()];\n\n            case 1:\n              _a.sent();\n\n              _a.label = 2;\n\n            case 2:\n              if (syncSubscription && !syncSubscription.closed) {\n                syncSubscription.unsubscribe();\n              }\n\n              if (this.sync) {\n                this.sync.unsubscribeConnectivity();\n              }\n\n              this.initialized = undefined; // Should re-initialize when start() is called.\n\n              this.sync = undefined;\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n  }\n\n  DataStore.prototype.getModuleName = function () {\n    return 'DataStore';\n  };\n\n  DataStore.prototype.processPagination = function (modelDefinition, paginationProducer) {\n    var sortPredicate;\n\n    var _a = paginationProducer || {},\n        limit = _a.limit,\n        page = _a.page,\n        sort = _a.sort;\n\n    if (limit === undefined && page === undefined && sort === undefined) {\n      return undefined;\n    }\n\n    if (page !== undefined && limit === undefined) {\n      throw new Error('Limit is required when requesting a page');\n    }\n\n    if (page !== undefined) {\n      if (typeof page !== 'number') {\n        throw new Error('Page should be a number');\n      }\n\n      if (page < 0) {\n        throw new Error(\"Page can't be negative\");\n      }\n    }\n\n    if (limit !== undefined) {\n      if (typeof limit !== 'number') {\n        throw new Error('Limit should be a number');\n      }\n\n      if (limit < 0) {\n        throw new Error(\"Limit can't be negative\");\n      }\n    }\n\n    if (sort) {\n      sortPredicate = ModelSortPredicateCreator.createFromExisting(modelDefinition, paginationProducer.sort);\n    }\n\n    return {\n      limit: limit,\n      page: page,\n      sort: sortPredicate\n    };\n  };\n\n  DataStore.prototype.processSyncExpressions = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var syncPredicates;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.syncExpressions || !this.syncExpressions.length) {\n              return [2\n              /*return*/\n              , new WeakMap()];\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(this.syncExpressions.map(function (syncExpression) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, modelConstructor, conditionProducer, modelDefinition, condition, predicate;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , syncExpression];\n\n                    case 1:\n                      _a = _b.sent(), modelConstructor = _a.modelConstructor, conditionProducer = _a.conditionProducer;\n                      modelDefinition = getModelDefinition(modelConstructor);\n                      return [4\n                      /*yield*/\n                      , this.unwrapPromise(conditionProducer)];\n\n                    case 2:\n                      condition = _b.sent();\n\n                      if (isPredicatesAll(condition)) {\n                        return [2\n                        /*return*/\n                        , [modelDefinition, null]];\n                      }\n\n                      predicate = this.createFromCondition(modelDefinition, condition);\n                      return [2\n                      /*return*/\n                      , [modelDefinition, predicate]];\n                  }\n                });\n              });\n            }))];\n\n          case 1:\n            syncPredicates = _a.sent();\n            return [2\n            /*return*/\n            , this.weakMapFromEntries(syncPredicates)];\n        }\n      });\n    });\n  };\n\n  DataStore.prototype.createFromCondition = function (modelDefinition, condition) {\n    try {\n      return ModelPredicateCreator.createFromExisting(modelDefinition, condition);\n    } catch (error) {\n      logger.error('Error creating Sync Predicate');\n      throw error;\n    }\n  };\n\n  DataStore.prototype.unwrapPromise = function (conditionProducer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var condition, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , conditionProducer()];\n\n          case 1:\n            condition = _a.sent();\n            return [2\n            /*return*/\n            , condition];\n\n          case 2:\n            error_1 = _a.sent();\n\n            if (error_1 instanceof TypeError) {\n              return [2\n              /*return*/\n              , conditionProducer];\n            }\n\n            throw error_1;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  DataStore.prototype.weakMapFromEntries = function (entries) {\n    return entries.reduce(function (map, _a) {\n      var _b = __read(_a, 2),\n          modelDefinition = _b[0],\n          predicate = _b[1];\n\n      if (map.has(modelDefinition)) {\n        var name_2 = modelDefinition.name;\n        logger.warn(\"You can only utilize one Sync Expression per model.\\n          Subsequent sync expressions for the \" + name_2 + \" model will be ignored.\");\n        return map;\n      }\n\n      if (predicate) {\n        map.set(modelDefinition, predicate);\n      }\n\n      return map;\n    }, new WeakMap());\n  }; // database separation for Amplify Console. Not a public API\n\n\n  DataStore.prototype.retrieveSessionId = function () {\n    try {\n      var sessionId = sessionStorage.getItem('datastoreSessionId');\n\n      if (sessionId) {\n        var aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n        var appSyncUrl = aws_appsync_graphqlEndpoint.split('/')[2];\n\n        var _a = __read(appSyncUrl.split('.'), 1),\n            appSyncId = _a[0];\n\n        return sessionId + \"-\" + appSyncId;\n      }\n    } catch (_b) {\n      return undefined;\n    }\n  };\n\n  return DataStore;\n}();\n\nvar instance = new DataStore();\nAmplify.register(instance);\nexport { DataStore as DataStoreClass, initSchema, instance as DataStore };","map":{"version":3,"mappings":"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","names":["Amplify","ConsoleLogger","Logger","Hub","JS","immerable","produce","setAutoFreeze","enablePatches","v4","uuid4","Observable","defaultAuthStrategy","multiAuthStrategy","isPredicatesAll","ModelPredicateCreator","ModelSortPredicateCreator","ExclusiveStorage","Storage","ControlMessage","SyncEngine","GraphQLScalarType","isGraphQLScalarType","AuthModeStrategyType","isNonModelFieldType","isModelFieldType","DATASTORE","establishRelationAndKeys","exhaustiveCheck","isModelConstructor","monotonicUlidFactory","STORAGE","SYNC","USER","isNullOrUndefined","registerNonModelClass","sortCompareFunction","DeferredCallbackResolver","validatePredicate","mergePatches","logger","ulid","Date","now","SETTING_SCHEMA_VERSION","schema","modelNamespaceMap","WeakMap","modelPatchesMap","getModelDefinition","modelConstructor","namespace","get","namespaces","models","name","isValidModelConstructor","obj","has","namespaceResolver","syncClasses","userClasses","dataStoreClasses","storageClasses","initSchema","userSchema","undefined","console","warn","log","internalUserNamespace","createTypeClasses","dataStoreNamespace","getNamespace","storageNamespace","syncNamespace","_a","version","Object","keys","forEach","relations","relationships","modelAssociations","Map","values","connectedModels","model","fields","filter","association","field","connectionType","type","push","set","result","count","size","Error","from","_d","modelName","parents","every","x","Array","delete","modelTopologicalOrdering","checkSchemaInitialized","message","error","classes","entries","_b","modelDefinition","clazz","createModelClass","nonModels","typeName","typeDefinition","createNonModelClass","instancesMetadata","WeakSet","modelInstanceCreator","init","add","validateModelFields","k","v","fieldDefinition","isRequired_1","isArrayNullable","name_1","isArray","jsType_1","getJSType","validateScalar_1","getValidationFunction","JSON","parse","errorTypeText","some","e","elemTypes","map","join","validationStatus","castInstanceType","Boolean","initializeInstance","draft","modelValidator","parsedValue","instance","modelInstanceMetadata","_version","_lastChangedAt","_deleted","isInternal","_id","id","syncable","checkReadOnlyPropertyOnCreate","Model","source","fn","getPrototypeOf","constructor","msg","patches","p","hasExistingPatches","length","existingPatches","existingSource","mergedPatches","checkReadOnlyPropertyOnUpdate","json","fromJSON","defineProperty","value","modelKeys","key","isReadOnly","patchArray","path","val","isQueryOne","defaultConflictHandler","conflictData","remoteModel","__assign","localModel","defaultErrorHandler","getModelConstructorByModelName","namespaceName","checkSchemaVersion","storage","Setting","runExclusive","s","query","createFromExisting","page","limit","schemaVersionSetting","storedValue","clear","save","stringify","syncSubscription","enums","pluralName","isRequired","initialized","debug","Promise","res","rej","_this","initResolve","initReject","storageAdapter","sessionId","aws_appsync_graphqlEndpoint","amplifyConfig","processSyncExpressions","syncPredicates","sync","conflictHandler","errorHandler","authModeStrategy","fullSyncIntervalInMilliseconds","fullSyncInterval","start","subscribe","next","data","readyType","isNode","SYNC_ENGINE_SYNC_QUERIES_READY","SYNC_ENGINE_STORAGE_SUBSCRIBED","dispatch","event","err","config","idOrCriteria","paginationProducer","predicate","createForId","pagination","processPagination","getPredicates","sort","condition","patchesTuple","producedCondition","savedModel","conflictHandlerIsDefault","configDataStore","errorHandlerIsDefault","modelOrConstructor","isValidPredicate","deleted","idPredicate","_c","modelConstructor_1","observe","handle","item","opType","element","freshElement","observer","complete","unsubscribe","criteria","options","items","itemsChanged","deletedItemIds","generateAndEmitSnapshot","snapshot","generateSnapshot","emitSnapshot","limitTimerRace","callback","maxInterval","sortOptions","predicates","predicateGroupType","hasPredicate","isSynced","getModelSyncedStatus","syncPageSize","resolve","err_1","itemsArray","sortItems","itemsToSort","sortPredicates","compareFn","hubCallback","payload","SYNC_ENGINE_MODEL_SYNCED","remove","listen","configAuthModeStrategyType","configConflictHandler","configErrorHandler","configMaxRecordsToSync","configSyncPageSize","configFullSyncInterval","configSyncExpressions","configAuthProviders","configStorageAdapter","configFromAmplify","setConflictHandler","setErrorHandler","authModeStrategyType","DEFAULT","MULTI_AUTH","authProviders","syncExpressions","maxRecordsToSync","retrieveSessionId","closed","unsubscribeConnectivity","stop","DataStore","sortPredicate","all","syncExpression","conditionProducer","unwrapPromise","createFromCondition","weakMapFromEntries","error_1","TypeError","reduce","name_2","sessionStorage","getItem","appSyncUrl","split","appSyncId","register","DataStoreClass"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-amplify\\datastore\\src\\datastore\\datastore.ts"],"sourcesContent":["import { Amplify, ConsoleLogger as Logger, Hub, JS } from '@aws-amplify/core';\nimport {\n\tDraft,\n\timmerable,\n\tproduce,\n\tsetAutoFreeze,\n\tenablePatches,\n\tPatch,\n} from 'immer';\nimport { v4 as uuid4 } from 'uuid';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { defaultAuthStrategy, multiAuthStrategy } from '../authModeStrategies';\nimport {\n\tisPredicatesAll,\n\tModelPredicateCreator,\n\tModelSortPredicateCreator,\n\tPredicateAll,\n} from '../predicates';\nimport { Adapter } from '../storage/adapter';\nimport { ExclusiveStorage as Storage } from '../storage/storage';\nimport { ControlMessage, SyncEngine } from '../sync';\nimport {\n\tAuthModeStrategy,\n\tConflictHandler,\n\tDataStoreConfig,\n\tGraphQLScalarType,\n\tInternalSchema,\n\tisGraphQLScalarType,\n\tModelFieldType,\n\tModelInit,\n\tModelInstanceMetadata,\n\tModelPredicate,\n\tSortPredicate,\n\tMutableModel,\n\tNamespaceResolver,\n\tNonModelTypeConstructor,\n\tProducerPaginationInput,\n\tPaginationInput,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tProducerModelPredicate,\n\tSchema,\n\tSchemaModel,\n\tSchemaNamespace,\n\tSchemaNonModel,\n\tSubscriptionMessage,\n\tDataStoreSnapshot,\n\tSyncConflict,\n\tSyncError,\n\tTypeConstructorMap,\n\tErrorHandler,\n\tSyncExpression,\n\tAuthModeStrategyType,\n\tisNonModelFieldType,\n\tisModelFieldType,\n\tObserveQueryOptions,\n} from '../types';\nimport {\n\tDATASTORE,\n\testablishRelationAndKeys,\n\texhaustiveCheck,\n\tisModelConstructor,\n\tmonotonicUlidFactory,\n\tNAMESPACES,\n\tSTORAGE,\n\tSYNC,\n\tUSER,\n\tisNullOrUndefined,\n\tregisterNonModelClass,\n\tsortCompareFunction,\n\tDeferredCallbackResolver,\n\tvalidatePredicate,\n\tmergePatches,\n} from '../util';\n\nsetAutoFreeze(true);\nenablePatches();\n\nconst logger = new Logger('DataStore');\n\nconst ulid = monotonicUlidFactory(Date.now());\nconst { isNode } = JS.browserOrNode();\n\ndeclare class Setting {\n\tconstructor(init: ModelInit<Setting>);\n\tstatic copyOf(\n\t\tsrc: Setting,\n\t\tmutator: (draft: MutableModel<Setting>) => void | Setting\n\t): Setting;\n\tpublic readonly id: string;\n\tpublic readonly key: string;\n\tpublic readonly value: string;\n}\n\nconst SETTING_SCHEMA_VERSION = 'schemaVersion';\n\nlet schema: InternalSchema;\nconst modelNamespaceMap = new WeakMap<\n\tPersistentModelConstructor<any>,\n\tstring\n>();\n// stores data for crafting the correct update mutation input for a model\n// Patch[] - array of changed fields and metadata\n// PersistentModel - the source model, used for diffing object-type fields\nconst modelPatchesMap = new WeakMap<\n\tPersistentModel,\n\t[Patch[], PersistentModel]\n>();\n\nconst getModelDefinition = (\n\tmodelConstructor: PersistentModelConstructor<any>\n) => {\n\tconst namespace = modelNamespaceMap.get(modelConstructor);\n\n\treturn schema.namespaces[namespace].models[modelConstructor.name];\n};\n\nconst isValidModelConstructor = <T extends PersistentModel>(\n\tobj: any\n): obj is PersistentModelConstructor<T> => {\n\treturn isModelConstructor(obj) && modelNamespaceMap.has(obj);\n};\n\nconst namespaceResolver: NamespaceResolver = modelConstructor =>\n\tmodelNamespaceMap.get(modelConstructor);\n\n// exporting syncClasses for testing outbox.test.ts\nexport let syncClasses: TypeConstructorMap;\nlet userClasses: TypeConstructorMap;\nlet dataStoreClasses: TypeConstructorMap;\nlet storageClasses: TypeConstructorMap;\n\nconst initSchema = (userSchema: Schema) => {\n\tif (schema !== undefined) {\n\t\tconsole.warn('The schema has already been initialized');\n\n\t\treturn userClasses;\n\t}\n\n\tlogger.log('validating schema', { schema: userSchema });\n\n\tconst internalUserNamespace: SchemaNamespace = {\n\t\tname: USER,\n\t\t...userSchema,\n\t};\n\n\tlogger.log('DataStore', 'Init models');\n\tuserClasses = createTypeClasses(internalUserNamespace);\n\tlogger.log('DataStore', 'Models initialized');\n\n\tconst dataStoreNamespace = getNamespace();\n\tconst storageNamespace = Storage.getNamespace();\n\tconst syncNamespace = SyncEngine.getNamespace();\n\n\tdataStoreClasses = createTypeClasses(dataStoreNamespace);\n\tstorageClasses = createTypeClasses(storageNamespace);\n\tsyncClasses = createTypeClasses(syncNamespace);\n\n\tschema = {\n\t\tnamespaces: {\n\t\t\t[dataStoreNamespace.name]: dataStoreNamespace,\n\t\t\t[internalUserNamespace.name]: internalUserNamespace,\n\t\t\t[storageNamespace.name]: storageNamespace,\n\t\t\t[syncNamespace.name]: syncNamespace,\n\t\t},\n\t\tversion: userSchema.version,\n\t};\n\n\tObject.keys(schema.namespaces).forEach(namespace => {\n\t\tconst [relations, keys] = establishRelationAndKeys(\n\t\t\tschema.namespaces[namespace]\n\t\t);\n\n\t\tschema.namespaces[namespace].relationships = relations;\n\t\tschema.namespaces[namespace].keys = keys;\n\n\t\tconst modelAssociations = new Map<string, string[]>();\n\n\t\tObject.values(schema.namespaces[namespace].models).forEach(model => {\n\t\t\tconst connectedModels: string[] = [];\n\n\t\t\tObject.values(model.fields)\n\t\t\t\t.filter(\n\t\t\t\t\tfield =>\n\t\t\t\t\t\tfield.association &&\n\t\t\t\t\t\tfield.association.connectionType === 'BELONGS_TO' &&\n\t\t\t\t\t\t(<ModelFieldType>field.type).model !== model.name\n\t\t\t\t)\n\t\t\t\t.forEach(field =>\n\t\t\t\t\tconnectedModels.push((<ModelFieldType>field.type).model)\n\t\t\t\t);\n\n\t\t\tmodelAssociations.set(model.name, connectedModels);\n\t\t});\n\n\t\tconst result = new Map<string, string[]>();\n\n\t\tlet count = 1000;\n\t\twhile (true && count > 0) {\n\t\t\tif (modelAssociations.size === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount--;\n\t\t\tif (count === 0) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Models are not topologically sortable. Please verify your schema.'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tfor (const modelName of Array.from(modelAssociations.keys())) {\n\t\t\t\tconst parents = modelAssociations.get(modelName);\n\n\t\t\t\tif (parents.every(x => result.has(x))) {\n\t\t\t\t\tresult.set(modelName, parents);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tArray.from(result.keys()).forEach(x => modelAssociations.delete(x));\n\t\t}\n\n\t\tschema.namespaces[namespace].modelTopologicalOrdering = result;\n\t});\n\n\treturn userClasses;\n};\n\n/* Checks if the schema has been initialized by initSchema().\n *\n * Call this function before accessing schema.\n * Currently this only needs to be called in start() and clear() because all other functions will call start first.\n */\nconst checkSchemaInitialized = () => {\n\tif (schema === undefined) {\n\t\tconst message =\n\t\t\t'Schema is not initialized. DataStore will not function as expected. This could happen if you have multiple versions of DataStore installed. Please see https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js/#check-for-duplicate-versions';\n\t\tlogger.error(message);\n\t\tthrow new Error(message);\n\t}\n};\n\nconst createTypeClasses: (\n\tnamespace: SchemaNamespace\n) => TypeConstructorMap = namespace => {\n\tconst classes: TypeConstructorMap = {};\n\n\tObject.entries(namespace.models).forEach(([modelName, modelDefinition]) => {\n\t\tconst clazz = createModelClass(modelDefinition);\n\t\tclasses[modelName] = clazz;\n\n\t\tmodelNamespaceMap.set(clazz, namespace.name);\n\t});\n\n\tObject.entries(namespace.nonModels || {}).forEach(\n\t\t([typeName, typeDefinition]) => {\n\t\t\tconst clazz = createNonModelClass(typeDefinition);\n\t\t\tclasses[typeName] = clazz;\n\t\t}\n\t);\n\n\treturn classes;\n};\n\nexport declare type ModelInstanceCreator = typeof modelInstanceCreator;\n\nconst instancesMetadata = new WeakSet<\n\tModelInit<PersistentModel & Partial<ModelInstanceMetadata>>\n>();\nfunction modelInstanceCreator<T extends PersistentModel = PersistentModel>(\n\tmodelConstructor: PersistentModelConstructor<T>,\n\tinit: ModelInit<T> & Partial<ModelInstanceMetadata>\n): T {\n\tinstancesMetadata.add(init);\n\n\treturn <T>new modelConstructor(init);\n}\n\nconst validateModelFields =\n\t(modelDefinition: SchemaModel | SchemaNonModel) => (k: string, v: any) => {\n\t\tconst fieldDefinition = modelDefinition.fields[k];\n\n\t\tif (fieldDefinition !== undefined) {\n\t\t\tconst { type, isRequired, isArrayNullable, name, isArray } =\n\t\t\t\tfieldDefinition;\n\n\t\t\tif (\n\t\t\t\t((!isArray && isRequired) || (isArray && !isArrayNullable)) &&\n\t\t\t\t(v === null || v === undefined)\n\t\t\t) {\n\t\t\t\tthrow new Error(`Field ${name} is required`);\n\t\t\t}\n\n\t\t\tif (isGraphQLScalarType(type)) {\n\t\t\t\tconst jsType = GraphQLScalarType.getJSType(type);\n\t\t\t\tconst validateScalar = GraphQLScalarType.getValidationFunction(type);\n\n\t\t\t\tif (type === 'AWSJSON') {\n\t\t\t\t\tif (typeof v === jsType) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof v === 'string') {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tJSON.parse(v);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthrow new Error(`Field ${name} is an invalid JSON object. ${v}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (isArray) {\n\t\t\t\t\tlet errorTypeText: string = jsType;\n\t\t\t\t\tif (!isRequired) {\n\t\t\t\t\t\terrorTypeText = `${jsType} | null | undefined`;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!Array.isArray(v) && !isArrayNullable) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Field ${name} should be of type [${errorTypeText}], ${typeof v} received. ${v}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!isNullOrUndefined(v) &&\n\t\t\t\t\t\t(<[]>v).some(e =>\n\t\t\t\t\t\t\tisNullOrUndefined(e) ? isRequired : typeof e !== jsType\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst elemTypes = (<[]>v)\n\t\t\t\t\t\t\t.map(e => (e === null ? 'null' : typeof e))\n\t\t\t\t\t\t\t.join(',');\n\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`All elements in the ${name} array should be of type ${errorTypeText}, [${elemTypes}] received. ${v}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (validateScalar && !isNullOrUndefined(v)) {\n\t\t\t\t\t\tconst validationStatus = (<[]>v).map(e => {\n\t\t\t\t\t\t\tif (!isNullOrUndefined(e)) {\n\t\t\t\t\t\t\t\treturn validateScalar(e);\n\t\t\t\t\t\t\t} else if (isNullOrUndefined(e) && !isRequired) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (!validationStatus.every(s => s)) {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`All elements in the ${name} array should be of type ${type}, validation failed for one or more elements. ${v}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (!isRequired && v === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t} else if (typeof v !== jsType && v !== null) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Field ${name} should be of type ${jsType}, ${typeof v} received. ${v}`\n\t\t\t\t\t);\n\t\t\t\t} else if (\n\t\t\t\t\t!isNullOrUndefined(v) &&\n\t\t\t\t\tvalidateScalar &&\n\t\t\t\t\t!validateScalar(v)\n\t\t\t\t) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Field ${name} should be of type ${type}, validation failed. ${v}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\nconst castInstanceType = (\n\tmodelDefinition: SchemaModel | SchemaNonModel,\n\tk: string,\n\tv: any\n) => {\n\tconst { isArray, type } = modelDefinition.fields[k] || {};\n\t// attempt to parse stringified JSON\n\tif (\n\t\ttypeof v === 'string' &&\n\t\t(isArray ||\n\t\t\ttype === 'AWSJSON' ||\n\t\t\tisNonModelFieldType(type) ||\n\t\t\tisModelFieldType(type))\n\t) {\n\t\ttry {\n\t\t\treturn JSON.parse(v);\n\t\t} catch {\n\t\t\t// if JSON is invalid, don't throw and let modelValidator handle it\n\t\t}\n\t}\n\n\t// cast from numeric representation of boolean to JS boolean\n\tif (typeof v === 'number' && type === 'Boolean') {\n\t\treturn Boolean(v);\n\t}\n\n\treturn v;\n};\n\nconst initializeInstance = <T>(\n\tinit: ModelInit<T>,\n\tmodelDefinition: SchemaModel | SchemaNonModel,\n\tdraft: Draft<T & ModelInstanceMetadata>\n) => {\n\tconst modelValidator = validateModelFields(modelDefinition);\n\tObject.entries(init).forEach(([k, v]) => {\n\t\tconst parsedValue = castInstanceType(modelDefinition, k, v);\n\n\t\tmodelValidator(k, parsedValue);\n\t\t(<any>draft)[k] = parsedValue;\n\t});\n};\n\nconst createModelClass = <T extends PersistentModel>(\n\tmodelDefinition: SchemaModel\n) => {\n\tconst clazz = <PersistentModelConstructor<T>>(<unknown>class Model {\n\t\tconstructor(init: ModelInit<T>) {\n\t\t\tconst instance = produce(\n\t\t\t\tthis,\n\t\t\t\t(draft: Draft<T & ModelInstanceMetadata>) => {\n\t\t\t\t\tinitializeInstance(init, modelDefinition, draft);\n\n\t\t\t\t\tconst modelInstanceMetadata: ModelInstanceMetadata =\n\t\t\t\t\t\tinstancesMetadata.has(init)\n\t\t\t\t\t\t\t? <ModelInstanceMetadata>(<unknown>init)\n\t\t\t\t\t\t\t: <ModelInstanceMetadata>{};\n\t\t\t\t\tconst {\n\t\t\t\t\t\tid: _id,\n\t\t\t\t\t\t_version,\n\t\t\t\t\t\t_lastChangedAt,\n\t\t\t\t\t\t_deleted,\n\t\t\t\t\t} = modelInstanceMetadata;\n\n\t\t\t\t\t// instancesIds are set by modelInstanceCreator, it is accessible only internally\n\t\t\t\t\tconst isInternal = _id !== null && _id !== undefined;\n\n\t\t\t\t\tconst id = isInternal\n\t\t\t\t\t\t? _id\n\t\t\t\t\t\t: modelDefinition.syncable\n\t\t\t\t\t\t? uuid4()\n\t\t\t\t\t\t: ulid();\n\n\t\t\t\t\tif (!isInternal) {\n\t\t\t\t\t\tcheckReadOnlyPropertyOnCreate(draft, modelDefinition);\n\t\t\t\t\t}\n\n\t\t\t\t\tdraft.id = id;\n\n\t\t\t\t\tif (modelDefinition.syncable) {\n\t\t\t\t\t\tdraft._version = _version;\n\t\t\t\t\t\tdraft._lastChangedAt = _lastChangedAt;\n\t\t\t\t\t\tdraft._deleted = _deleted;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn instance;\n\t\t}\n\n\t\tstatic copyOf(source: T, fn: (draft: MutableModel<T>) => T) {\n\t\t\tconst modelConstructor = Object.getPrototypeOf(source || {}).constructor;\n\t\t\tif (!isValidModelConstructor(modelConstructor)) {\n\t\t\t\tconst msg = 'The source object is not a valid model';\n\t\t\t\tlogger.error(msg, { source });\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\n\t\t\tlet patches;\n\t\t\tconst model = produce(\n\t\t\t\tsource,\n\t\t\t\tdraft => {\n\t\t\t\t\tfn(<MutableModel<T>>(draft as unknown));\n\t\t\t\t\tdraft.id = source.id;\n\t\t\t\t\tconst modelValidator = validateModelFields(modelDefinition);\n\t\t\t\t\tObject.entries(draft).forEach(([k, v]) => {\n\t\t\t\t\t\tconst parsedValue = castInstanceType(modelDefinition, k, v);\n\n\t\t\t\t\t\tmodelValidator(k, parsedValue);\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tp => (patches = p)\n\t\t\t);\n\n\t\t\tconst hasExistingPatches = modelPatchesMap.has(source);\n\t\t\tif (patches.length || hasExistingPatches) {\n\t\t\t\tif (hasExistingPatches) {\n\t\t\t\t\tconst [existingPatches, existingSource] = modelPatchesMap.get(source);\n\t\t\t\t\tconst mergedPatches = mergePatches(\n\t\t\t\t\t\texistingSource,\n\t\t\t\t\t\texistingPatches,\n\t\t\t\t\t\tpatches\n\t\t\t\t\t);\n\t\t\t\t\tmodelPatchesMap.set(model, [mergedPatches, existingSource]);\n\t\t\t\t\tcheckReadOnlyPropertyOnUpdate(mergedPatches, modelDefinition);\n\t\t\t\t} else {\n\t\t\t\t\tmodelPatchesMap.set(model, [patches, source]);\n\t\t\t\t\tcheckReadOnlyPropertyOnUpdate(patches, modelDefinition);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn model;\n\t\t}\n\n\t\t// \"private\" method (that's hidden via `Setting`) for `withSSRContext` to use\n\t\t// to gain access to `modelInstanceCreator` and `clazz` for persisting IDs from server to client.\n\t\tstatic fromJSON(json: T | T[]) {\n\t\t\tif (Array.isArray(json)) {\n\t\t\t\treturn json.map(init => this.fromJSON(init));\n\t\t\t}\n\n\t\t\tconst instance = modelInstanceCreator(clazz, json);\n\t\t\tconst modelValidator = validateModelFields(modelDefinition);\n\n\t\t\tObject.entries(instance).forEach(([k, v]) => {\n\t\t\t\tmodelValidator(k, v);\n\t\t\t});\n\n\t\t\treturn instance;\n\t\t}\n\t});\n\n\tclazz[immerable] = true;\n\n\tObject.defineProperty(clazz, 'name', { value: modelDefinition.name });\n\n\treturn clazz;\n};\n\nconst checkReadOnlyPropertyOnCreate = <T extends PersistentModel>(\n\tdraft: T,\n\tmodelDefinition: SchemaModel\n) => {\n\tconst modelKeys = Object.keys(draft);\n\tconst { fields } = modelDefinition;\n\n\tmodelKeys.forEach(key => {\n\t\tif (fields[key] && fields[key].isReadOnly) {\n\t\t\tthrow new Error(`${key} is read-only.`);\n\t\t}\n\t});\n};\n\nconst checkReadOnlyPropertyOnUpdate = (\n\tpatches: Patch[],\n\tmodelDefinition: SchemaModel\n) => {\n\tconst patchArray = patches.map(p => [p.path[0], p.value]);\n\tconst { fields } = modelDefinition;\n\n\tpatchArray.forEach(([key, val]) => {\n\t\tif (!val || !fields[key]) return;\n\n\t\tif (fields[key].isReadOnly) {\n\t\t\tthrow new Error(`${key} is read-only.`);\n\t\t}\n\t});\n};\n\nconst createNonModelClass = <T>(typeDefinition: SchemaNonModel) => {\n\tconst clazz = <NonModelTypeConstructor<T>>(<unknown>class Model {\n\t\tconstructor(init: ModelInit<T>) {\n\t\t\tconst instance = produce(\n\t\t\t\tthis,\n\t\t\t\t(draft: Draft<T & ModelInstanceMetadata>) => {\n\t\t\t\t\tinitializeInstance(init, typeDefinition, draft);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn instance;\n\t\t}\n\t});\n\n\tclazz[immerable] = true;\n\n\tObject.defineProperty(clazz, 'name', { value: typeDefinition.name });\n\n\tregisterNonModelClass(clazz);\n\n\treturn clazz;\n};\n\nfunction isQueryOne(obj: any): obj is string {\n\treturn typeof obj === 'string';\n}\n\nfunction defaultConflictHandler(conflictData: SyncConflict): PersistentModel {\n\tconst { localModel, modelConstructor, remoteModel } = conflictData;\n\tconst { _version } = remoteModel;\n\treturn modelInstanceCreator(modelConstructor, { ...localModel, _version });\n}\n\nfunction defaultErrorHandler(error: SyncError<PersistentModel>): void {\n\tlogger.warn(error);\n}\n\nfunction getModelConstructorByModelName(\n\tnamespaceName: NAMESPACES,\n\tmodelName: string\n): PersistentModelConstructor<any> {\n\tlet result: PersistentModelConstructor<any> | NonModelTypeConstructor<any>;\n\n\tswitch (namespaceName) {\n\t\tcase DATASTORE:\n\t\t\tresult = dataStoreClasses[modelName];\n\t\t\tbreak;\n\t\tcase USER:\n\t\t\tresult = userClasses[modelName];\n\t\t\tbreak;\n\t\tcase SYNC:\n\t\t\tresult = syncClasses[modelName];\n\t\t\tbreak;\n\t\tcase STORAGE:\n\t\t\tresult = storageClasses[modelName];\n\t\t\tbreak;\n\t\tdefault:\n\t\t\texhaustiveCheck(namespaceName);\n\t\t\tbreak;\n\t}\n\n\tif (isValidModelConstructor(result)) {\n\t\treturn result;\n\t} else {\n\t\tconst msg = `Model name is not valid for namespace. modelName: ${modelName}, namespace: ${namespaceName}`;\n\t\tlogger.error(msg);\n\n\t\tthrow new Error(msg);\n\t}\n}\n\nasync function checkSchemaVersion(\n\tstorage: Storage,\n\tversion: string\n): Promise<void> {\n\tconst Setting =\n\t\tdataStoreClasses.Setting as PersistentModelConstructor<Setting>;\n\n\tconst modelDefinition = schema.namespaces[DATASTORE].models.Setting;\n\n\tawait storage.runExclusive(async s => {\n\t\tconst [schemaVersionSetting] = await s.query(\n\t\t\tSetting,\n\t\t\tModelPredicateCreator.createFromExisting(modelDefinition, c =>\n\t\t\t\t// @ts-ignore Argument of type '\"eq\"' is not assignable to parameter of type 'never'.\n\t\t\t\tc.key('eq', SETTING_SCHEMA_VERSION)\n\t\t\t),\n\t\t\t{ page: 0, limit: 1 }\n\t\t);\n\n\t\tif (\n\t\t\tschemaVersionSetting !== undefined &&\n\t\t\tschemaVersionSetting.value !== undefined\n\t\t) {\n\t\t\tconst storedValue = JSON.parse(schemaVersionSetting.value);\n\n\t\t\tif (storedValue !== version) {\n\t\t\t\tawait s.clear(false);\n\t\t\t}\n\t\t} else {\n\t\t\tawait s.save(\n\t\t\t\tmodelInstanceCreator(Setting, {\n\t\t\t\t\tkey: SETTING_SCHEMA_VERSION,\n\t\t\t\t\tvalue: JSON.stringify(version),\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t});\n}\n\nlet syncSubscription: ZenObservable.Subscription;\n\nfunction getNamespace(): SchemaNamespace {\n\tconst namespace: SchemaNamespace = {\n\t\tname: DATASTORE,\n\t\trelationships: {},\n\t\tenums: {},\n\t\tnonModels: {},\n\t\tmodels: {\n\t\t\tSetting: {\n\t\t\t\tname: 'Setting',\n\t\t\t\tpluralName: 'Settings',\n\t\t\t\tsyncable: false,\n\t\t\t\tfields: {\n\t\t\t\t\tid: {\n\t\t\t\t\t\tname: 'id',\n\t\t\t\t\t\ttype: 'ID',\n\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t},\n\t\t\t\t\tkey: {\n\t\t\t\t\t\tname: 'key',\n\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t},\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tname: 'value',\n\t\t\t\t\t\ttype: 'String',\n\t\t\t\t\t\tisRequired: true,\n\t\t\t\t\t\tisArray: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n\n\treturn namespace;\n}\n\nclass DataStore {\n\tprivate amplifyConfig: Record<string, any> = {};\n\tprivate authModeStrategy: AuthModeStrategy;\n\tprivate conflictHandler: ConflictHandler;\n\tprivate errorHandler: (error: SyncError<PersistentModel>) => void;\n\tprivate fullSyncInterval: number;\n\tprivate initialized: Promise<void>;\n\tprivate initReject: Function;\n\tprivate initResolve: Function;\n\tprivate maxRecordsToSync: number;\n\tprivate storage: Storage;\n\tprivate sync: SyncEngine;\n\tprivate syncPageSize: number;\n\tprivate syncExpressions: SyncExpression[];\n\tprivate syncPredicates: WeakMap<SchemaModel, ModelPredicate<any>> =\n\t\tnew WeakMap<SchemaModel, ModelPredicate<any>>();\n\tprivate sessionId: string;\n\tprivate storageAdapter: Adapter;\n\n\tgetModuleName() {\n\t\treturn 'DataStore';\n\t}\n\n\tstart = async (): Promise<void> => {\n\t\tif (this.initialized === undefined) {\n\t\t\tlogger.debug('Starting DataStore');\n\t\t\tthis.initialized = new Promise((res, rej) => {\n\t\t\t\tthis.initResolve = res;\n\t\t\t\tthis.initReject = rej;\n\t\t\t});\n\t\t} else {\n\t\t\tawait this.initialized;\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.storage = new Storage(\n\t\t\tschema,\n\t\t\tnamespaceResolver,\n\t\t\tgetModelConstructorByModelName,\n\t\t\tmodelInstanceCreator,\n\t\t\tthis.storageAdapter,\n\t\t\tthis.sessionId\n\t\t);\n\n\t\tawait this.storage.init();\n\n\t\tcheckSchemaInitialized();\n\t\tawait checkSchemaVersion(this.storage, schema.version);\n\n\t\tconst { aws_appsync_graphqlEndpoint } = this.amplifyConfig;\n\n\t\tif (aws_appsync_graphqlEndpoint) {\n\t\t\tlogger.debug('GraphQL endpoint available', aws_appsync_graphqlEndpoint);\n\n\t\t\tthis.syncPredicates = await this.processSyncExpressions();\n\n\t\t\tthis.sync = new SyncEngine(\n\t\t\t\tschema,\n\t\t\t\tnamespaceResolver,\n\t\t\t\tsyncClasses,\n\t\t\t\tuserClasses,\n\t\t\t\tthis.storage,\n\t\t\t\tmodelInstanceCreator,\n\t\t\t\tthis.conflictHandler,\n\t\t\t\tthis.errorHandler,\n\t\t\t\tthis.syncPredicates,\n\t\t\t\tthis.amplifyConfig,\n\t\t\t\tthis.authModeStrategy\n\t\t\t);\n\n\t\t\t// tslint:disable-next-line:max-line-length\n\t\t\tconst fullSyncIntervalInMilliseconds = this.fullSyncInterval * 1000 * 60; // fullSyncInterval from param is in minutes\n\t\t\tsyncSubscription = this.sync\n\t\t\t\t.start({ fullSyncInterval: fullSyncIntervalInMilliseconds })\n\t\t\t\t.subscribe({\n\t\t\t\t\tnext: ({ type, data }) => {\n\t\t\t\t\t\t// In Node, we need to wait for queries to be synced to prevent returning empty arrays.\n\t\t\t\t\t\t// In the Browser, we can begin returning data once subscriptions are in place.\n\t\t\t\t\t\tconst readyType = isNode\n\t\t\t\t\t\t\t? ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY\n\t\t\t\t\t\t\t: ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED;\n\n\t\t\t\t\t\tif (type === readyType) {\n\t\t\t\t\t\t\tthis.initResolve();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tHub.dispatch('datastore', {\n\t\t\t\t\t\t\tevent: type,\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\terror: err => {\n\t\t\t\t\t\tlogger.warn('Sync error', err);\n\t\t\t\t\t\tthis.initReject();\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t} else {\n\t\t\tlogger.warn(\n\t\t\t\t\"Data won't be synchronized. No GraphQL endpoint configured. Did you forget `Amplify.configure(awsconfig)`?\",\n\t\t\t\t{\n\t\t\t\t\tconfig: this.amplifyConfig,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tthis.initResolve();\n\t\t}\n\n\t\tawait this.initialized;\n\t};\n\n\tquery: {\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tid: string\n\t\t): Promise<T | undefined>;\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tcriteria?: ProducerModelPredicate<T> | typeof PredicateAll,\n\t\t\tpaginationProducer?: ProducerPaginationInput<T>\n\t\t): Promise<T[]>;\n\t} = async <T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tidOrCriteria?: string | ProducerModelPredicate<T> | typeof PredicateAll,\n\t\tpaginationProducer?: ProducerPaginationInput<T>\n\t): Promise<T | T[] | undefined> => {\n\t\tawait this.start();\n\n\t\t//#region Input validation\n\n\t\tif (!isValidModelConstructor(modelConstructor)) {\n\t\t\tconst msg = 'Constructor is not for a valid model';\n\t\t\tlogger.error(msg, { modelConstructor });\n\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (typeof idOrCriteria === 'string') {\n\t\t\tif (paginationProducer !== undefined) {\n\t\t\t\tlogger.warn('Pagination is ignored when querying by id');\n\t\t\t}\n\t\t}\n\n\t\tconst modelDefinition = getModelDefinition(modelConstructor);\n\t\tlet predicate: ModelPredicate<T>;\n\n\t\tif (isQueryOne(idOrCriteria)) {\n\t\t\tpredicate = ModelPredicateCreator.createForId<T>(\n\t\t\t\tmodelDefinition,\n\t\t\t\tidOrCriteria\n\t\t\t);\n\t\t} else {\n\t\t\tif (isPredicatesAll(idOrCriteria)) {\n\t\t\t\t// Predicates.ALL means \"all records\", so no predicate (undefined)\n\t\t\t\tpredicate = undefined;\n\t\t\t} else {\n\t\t\t\tpredicate = ModelPredicateCreator.createFromExisting(\n\t\t\t\t\tmodelDefinition,\n\t\t\t\t\tidOrCriteria\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst pagination = this.processPagination(\n\t\t\tmodelDefinition,\n\t\t\tpaginationProducer\n\t\t);\n\n\t\t//#endregion\n\n\t\tlogger.debug('params ready', {\n\t\t\tmodelConstructor,\n\t\t\tpredicate: ModelPredicateCreator.getPredicates(predicate, false),\n\t\t\tpagination: {\n\t\t\t\t...pagination,\n\t\t\t\tsort: ModelSortPredicateCreator.getPredicates(\n\t\t\t\t\tpagination && pagination.sort,\n\t\t\t\t\tfalse\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\n\t\tconst result = await this.storage.query(\n\t\t\tmodelConstructor,\n\t\t\tpredicate,\n\t\t\tpagination\n\t\t);\n\n\t\treturn isQueryOne(idOrCriteria) ? result[0] : result;\n\t};\n\n\tsave = async <T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ProducerModelPredicate<T>\n\t): Promise<T> => {\n\t\tawait this.start();\n\n\t\t// Immer patches for constructing a correct update mutation input\n\t\t// Allows us to only include changed fields for updates\n\t\tconst patchesTuple = modelPatchesMap.get(model);\n\n\t\tconst modelConstructor: PersistentModelConstructor<T> = model\n\t\t\t? <PersistentModelConstructor<T>>model.constructor\n\t\t\t: undefined;\n\n\t\tif (!isValidModelConstructor(modelConstructor)) {\n\t\t\tconst msg = 'Object is not an instance of a valid model';\n\t\t\tlogger.error(msg, { model });\n\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tconst modelDefinition = getModelDefinition(modelConstructor);\n\n\t\tconst producedCondition = ModelPredicateCreator.createFromExisting(\n\t\t\tmodelDefinition,\n\t\t\tcondition\n\t\t);\n\n\t\tconst [savedModel] = await this.storage.runExclusive(async s => {\n\t\t\tawait s.save(model, producedCondition, undefined, patchesTuple);\n\n\t\t\treturn s.query(\n\t\t\t\tmodelConstructor,\n\t\t\t\tModelPredicateCreator.createForId(modelDefinition, model.id)\n\t\t\t);\n\t\t});\n\n\t\treturn savedModel;\n\t};\n\n\tsetConflictHandler = (config: DataStoreConfig): ConflictHandler => {\n\t\tconst { DataStore: configDataStore } = config;\n\n\t\tconst conflictHandlerIsDefault: () => boolean = () =>\n\t\t\tthis.conflictHandler === defaultConflictHandler;\n\n\t\tif (configDataStore && configDataStore.conflictHandler) {\n\t\t\treturn configDataStore.conflictHandler;\n\t\t}\n\t\tif (conflictHandlerIsDefault() && config.conflictHandler) {\n\t\t\treturn config.conflictHandler;\n\t\t}\n\n\t\treturn this.conflictHandler || defaultConflictHandler;\n\t};\n\n\tsetErrorHandler = (config: DataStoreConfig): ErrorHandler => {\n\t\tconst { DataStore: configDataStore } = config;\n\n\t\tconst errorHandlerIsDefault: () => boolean = () =>\n\t\t\tthis.errorHandler === defaultErrorHandler;\n\n\t\tif (configDataStore && configDataStore.errorHandler) {\n\t\t\treturn configDataStore.errorHandler;\n\t\t}\n\t\tif (errorHandlerIsDefault() && config.errorHandler) {\n\t\t\treturn config.errorHandler;\n\t\t}\n\n\t\treturn this.errorHandler || defaultErrorHandler;\n\t};\n\n\tdelete: {\n\t\t<T extends PersistentModel>(\n\t\t\tmodel: T,\n\t\t\tcondition?: ProducerModelPredicate<T>\n\t\t): Promise<T>;\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tid: string\n\t\t): Promise<T[]>;\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tcondition: ProducerModelPredicate<T> | typeof PredicateAll\n\t\t): Promise<T[]>;\n\t} = async <T extends PersistentModel>(\n\t\tmodelOrConstructor: T | PersistentModelConstructor<T>,\n\t\tidOrCriteria?: string | ProducerModelPredicate<T> | typeof PredicateAll\n\t) => {\n\t\tawait this.start();\n\n\t\tlet condition: ModelPredicate<T>;\n\n\t\tif (!modelOrConstructor) {\n\t\t\tconst msg = 'Model or Model Constructor required';\n\t\t\tlogger.error(msg, { modelOrConstructor });\n\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (isValidModelConstructor(modelOrConstructor)) {\n\t\t\tconst modelConstructor = modelOrConstructor;\n\n\t\t\tif (!idOrCriteria) {\n\t\t\t\tconst msg =\n\t\t\t\t\t'Id to delete or criteria required. Do you want to delete all? Pass Predicates.ALL';\n\t\t\t\tlogger.error(msg, { idOrCriteria });\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\n\t\t\tif (typeof idOrCriteria === 'string') {\n\t\t\t\tcondition = ModelPredicateCreator.createForId<T>(\n\t\t\t\t\tgetModelDefinition(modelConstructor),\n\t\t\t\t\tidOrCriteria\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tcondition = ModelPredicateCreator.createFromExisting(\n\t\t\t\t\tgetModelDefinition(modelConstructor),\n\t\t\t\t\t/**\n\t\t\t\t\t * idOrCriteria is always a ProducerModelPredicate<T>, never a symbol.\n\t\t\t\t\t * The symbol is used only for typing purposes. e.g. see Predicates.ALL\n\t\t\t\t\t */\n\t\t\t\t\tidOrCriteria as ProducerModelPredicate<T>\n\t\t\t\t);\n\n\t\t\t\tif (!condition || !ModelPredicateCreator.isValidPredicate(condition)) {\n\t\t\t\t\tconst msg =\n\t\t\t\t\t\t'Criteria required. Do you want to delete all? Pass Predicates.ALL';\n\t\t\t\t\tlogger.error(msg, { condition });\n\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst [deleted] = await this.storage.delete(modelConstructor, condition);\n\n\t\t\treturn deleted;\n\t\t} else {\n\t\t\tconst model = modelOrConstructor;\n\t\t\tconst modelConstructor = Object.getPrototypeOf(model || {})\n\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\n\t\t\tif (!isValidModelConstructor(modelConstructor)) {\n\t\t\t\tconst msg = 'Object is not an instance of a valid model';\n\t\t\t\tlogger.error(msg, { model });\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\n\t\t\tconst modelDefinition = getModelDefinition(modelConstructor);\n\n\t\t\tconst idPredicate = ModelPredicateCreator.createForId<T>(\n\t\t\t\tmodelDefinition,\n\t\t\t\tmodel.id\n\t\t\t);\n\n\t\t\tif (idOrCriteria) {\n\t\t\t\tif (typeof idOrCriteria !== 'function') {\n\t\t\t\t\tconst msg = 'Invalid criteria';\n\t\t\t\t\tlogger.error(msg, { idOrCriteria });\n\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\n\t\t\t\tcondition = idOrCriteria(idPredicate);\n\t\t\t} else {\n\t\t\t\tcondition = idPredicate;\n\t\t\t}\n\n\t\t\tconst [[deleted]] = await this.storage.delete(model, condition);\n\n\t\t\treturn deleted;\n\t\t}\n\t};\n\n\tobserve: {\n\t\t(): Observable<SubscriptionMessage<PersistentModel>>;\n\n\t\t<T extends PersistentModel>(model: T): Observable<SubscriptionMessage<T>>;\n\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tcriteria?: string | ProducerModelPredicate<T>\n\t\t): Observable<SubscriptionMessage<T>>;\n\t} = <T extends PersistentModel = PersistentModel>(\n\t\tmodelOrConstructor?: T | PersistentModelConstructor<T>,\n\t\tidOrCriteria?: string | ProducerModelPredicate<T>\n\t): Observable<SubscriptionMessage<T>> => {\n\t\tlet predicate: ModelPredicate<T>;\n\n\t\tconst modelConstructor: PersistentModelConstructor<T> =\n\t\t\tmodelOrConstructor && isValidModelConstructor(modelOrConstructor)\n\t\t\t\t? modelOrConstructor\n\t\t\t\t: undefined;\n\n\t\tif (modelOrConstructor && modelConstructor === undefined) {\n\t\t\tconst model = <T>modelOrConstructor;\n\t\t\tconst modelConstructor =\n\t\t\t\tmodel && (<Object>Object.getPrototypeOf(model)).constructor;\n\n\t\t\tif (isValidModelConstructor<T>(modelConstructor)) {\n\t\t\t\tif (idOrCriteria) {\n\t\t\t\t\tlogger.warn('idOrCriteria is ignored when using a model instance', {\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tidOrCriteria,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn this.observe(modelConstructor, model.id);\n\t\t\t} else {\n\t\t\t\tconst msg =\n\t\t\t\t\t'The model is not an instance of a PersistentModelConstructor';\n\t\t\t\tlogger.error(msg, { model });\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\t\t}\n\n\t\tif (idOrCriteria !== undefined && modelConstructor === undefined) {\n\t\t\tconst msg = 'Cannot provide criteria without a modelConstructor';\n\t\t\tlogger.error(msg, idOrCriteria);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (modelConstructor && !isValidModelConstructor(modelConstructor)) {\n\t\t\tconst msg = 'Constructor is not for a valid model';\n\t\t\tlogger.error(msg, { modelConstructor });\n\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (typeof idOrCriteria === 'string') {\n\t\t\tpredicate = ModelPredicateCreator.createForId<T>(\n\t\t\t\tgetModelDefinition(modelConstructor),\n\t\t\t\tidOrCriteria\n\t\t\t);\n\t\t} else {\n\t\t\tpredicate =\n\t\t\t\tmodelConstructor &&\n\t\t\t\tModelPredicateCreator.createFromExisting<T>(\n\t\t\t\t\tgetModelDefinition(modelConstructor),\n\t\t\t\t\tidOrCriteria\n\t\t\t\t);\n\t\t}\n\n\t\treturn new Observable<SubscriptionMessage<T>>(observer => {\n\t\t\tlet handle: ZenObservable.Subscription;\n\n\t\t\t(async () => {\n\t\t\t\tawait this.start();\n\n\t\t\t\t// Filter the events returned by Storage according to namespace,\n\t\t\t\t// append original element data, and subscribe to the observable\n\t\t\t\thandle = this.storage\n\t\t\t\t\t.observe(modelConstructor, predicate)\n\t\t\t\t\t.filter(({ model }) => namespaceResolver(model) === USER)\n\t\t\t\t\t.subscribe({\n\t\t\t\t\t\tnext: async item => {\n\t\t\t\t\t\t\t// the `element` doesn't necessarily contain all item details or\n\t\t\t\t\t\t\t// have related records attached consistently with that of a query()\n\t\t\t\t\t\t\t// result item. for consistency, we attach them here.\n\n\t\t\t\t\t\t\tlet message = item;\n\n\t\t\t\t\t\t\t// as lnog as we're not dealing with a DELETE, we need to fetch a fresh\n\t\t\t\t\t\t\t// item from storage to ensure it's fully populated.\n\t\t\t\t\t\t\tif (item.opType !== 'DELETE') {\n\t\t\t\t\t\t\t\tconst freshElement = await this.query(\n\t\t\t\t\t\t\t\t\titem.model,\n\t\t\t\t\t\t\t\t\titem.element.id\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tmessage = {\n\t\t\t\t\t\t\t\t\t...message,\n\t\t\t\t\t\t\t\t\telement: freshElement as T,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tobserver.next(message as SubscriptionMessage<T>);\n\t\t\t\t\t\t},\n\t\t\t\t\t\terror: err => observer.error(err),\n\t\t\t\t\t\tcomplete: () => observer.complete(),\n\t\t\t\t\t});\n\t\t\t})();\n\n\t\t\treturn () => {\n\t\t\t\tif (handle) {\n\t\t\t\t\thandle.unsubscribe();\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t};\n\n\tobserveQuery: {\n\t\t<T extends PersistentModel>(\n\t\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\t\tcriteria?: ProducerModelPredicate<T> | typeof PredicateAll,\n\t\t\tpaginationProducer?: ObserveQueryOptions<T>\n\t\t): Observable<DataStoreSnapshot<T>>;\n\t} = <T extends PersistentModel = PersistentModel>(\n\t\tmodel: PersistentModelConstructor<T>,\n\t\tcriteria?: ProducerModelPredicate<T> | typeof PredicateAll,\n\t\toptions?: ObserveQueryOptions<T>\n\t): Observable<DataStoreSnapshot<T>> => {\n\t\treturn new Observable<DataStoreSnapshot<T>>(observer => {\n\t\t\tconst items = new Map<string, T>();\n\t\t\tconst itemsChanged = new Map<string, T>();\n\t\t\tlet deletedItemIds: string[] = [];\n\t\t\tlet handle: ZenObservable.Subscription;\n\t\t\tlet predicate: ModelPredicate<T>;\n\n\t\t\t/**\n\t\t\t * As the name suggests, this geneates a snapshot in the form of\n\t\t\t * \t`{items: T[], isSynced: boolean}`\n\t\t\t * and sends it to the observer.\n\t\t\t *\n\t\t\t * SIDE EFFECT: The underlying generation and emission methods may touch:\n\t\t\t * `items`, `itemsChanged`, and `deletedItemIds`.\n\t\t\t *\n\t\t\t * Refer to `generateSnapshot` and `emitSnapshot` for more details.\n\t\t\t */\n\t\t\tconst generateAndEmitSnapshot = (): void => {\n\t\t\t\tconst snapshot = generateSnapshot();\n\t\t\t\temitSnapshot(snapshot);\n\t\t\t};\n\n\t\t\t// a mechanism to return data after X amount of seconds OR after the\n\t\t\t// \"limit\" (itemsChanged >= this.syncPageSize) has been reached, whichever comes first\n\t\t\tconst limitTimerRace = new DeferredCallbackResolver({\n\t\t\t\tcallback: generateAndEmitSnapshot,\n\t\t\t\terrorHandler: observer.error,\n\t\t\t\tmaxInterval: 2000,\n\t\t\t});\n\n\t\t\tconst { sort } = options || {};\n\t\t\tconst sortOptions = sort ? { sort } : undefined;\n\n\t\t\tconst modelDefinition = getModelDefinition(model);\n\t\t\tif (isQueryOne(criteria)) {\n\t\t\t\tpredicate = ModelPredicateCreator.createForId<T>(\n\t\t\t\t\tmodelDefinition,\n\t\t\t\t\tcriteria\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tif (isPredicatesAll(criteria)) {\n\t\t\t\t\t// Predicates.ALL means \"all records\", so no predicate (undefined)\n\t\t\t\t\tpredicate = undefined;\n\t\t\t\t} else {\n\t\t\t\t\tpredicate = ModelPredicateCreator.createFromExisting(\n\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\tcriteria\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst { predicates, type: predicateGroupType } =\n\t\t\t\tModelPredicateCreator.getPredicates(predicate, false) || {};\n\t\t\tconst hasPredicate = !!predicates;\n\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\t// first, query and return any locally-available records\n\t\t\t\t\t(await this.query(model, criteria, sortOptions)).forEach(item =>\n\t\t\t\t\t\titems.set(item.id, item)\n\t\t\t\t\t);\n\n\t\t\t\t\t// Observe the model and send a stream of updates (debounced).\n\t\t\t\t\t// We need to post-filter results instead of passing criteria through\n\t\t\t\t\t// to have visibility into items that move from in-set to out-of-set.\n\t\t\t\t\t// We need to explicitly remove those items from the existing snapshot.\n\t\t\t\t\thandle = this.observe(model).subscribe(\n\t\t\t\t\t\t({ element, model, opType }) => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\thasPredicate &&\n\t\t\t\t\t\t\t\t!validatePredicate(element, predicateGroupType, predicates)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\topType === 'UPDATE' &&\n\t\t\t\t\t\t\t\t\t(items.has(element.id) || itemsChanged.has(element.id))\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t// tracking as a \"deleted item\" will include the item in\n\t\t\t\t\t\t\t\t\t// page limit calculations and ensure it is removed from the\n\t\t\t\t\t\t\t\t\t// final items collection, regardless of which collection(s)\n\t\t\t\t\t\t\t\t\t// it is currently in. (I mean, it could be in both, right!?)\n\t\t\t\t\t\t\t\t\tdeletedItemIds.push(element.id);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// ignore updates for irrelevant/filtered items.\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Flag items which have been recently deleted\n\t\t\t\t\t\t\t// NOTE: Merging of separate operations to the same model instance is handled upstream\n\t\t\t\t\t\t\t// in the `mergePage` method within src/sync/merger.ts. The final state of a model instance\n\t\t\t\t\t\t\t// depends on the LATEST record (for a given id).\n\t\t\t\t\t\t\tif (opType === 'DELETE') {\n\t\t\t\t\t\t\t\tdeletedItemIds.push(element.id);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\titemsChanged.set(element.id, element);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst isSynced = this.sync?.getModelSyncedStatus(model) ?? false;\n\n\t\t\t\t\t\t\tconst limit =\n\t\t\t\t\t\t\t\titemsChanged.size - deletedItemIds.length >= this.syncPageSize;\n\n\t\t\t\t\t\t\tif (limit || isSynced) {\n\t\t\t\t\t\t\t\tlimitTimerRace.resolve();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// kicks off every subsequent race as results sync down\n\t\t\t\t\t\t\tlimitTimerRace.start();\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t\t// returns a set of initial/locally-available results\n\t\t\t\t\tgenerateAndEmitSnapshot();\n\t\t\t\t} catch (err) {\n\t\t\t\t\tobserver.error(err);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\t/**\n\t\t\t * Combines the `items`, `itemsChanged`, and `deletedItemIds` collections into\n\t\t\t * a snapshot in the form of `{ items: T[], isSynced: boolean}`.\n\t\t\t *\n\t\t\t * SIDE EFFECT: The shared `items` collection is recreated.\n\t\t\t */\n\t\t\tconst generateSnapshot = (): DataStoreSnapshot<T> => {\n\t\t\t\tconst isSynced = this.sync?.getModelSyncedStatus(model) ?? false;\n\t\t\t\tconst itemsArray = [\n\t\t\t\t\t...Array.from(items.values()),\n\t\t\t\t\t...Array.from(itemsChanged.values()),\n\t\t\t\t];\n\n\t\t\t\tif (options?.sort) {\n\t\t\t\t\tsortItems(itemsArray);\n\t\t\t\t}\n\n\t\t\t\titems.clear();\n\t\t\t\titemsArray.forEach(item => items.set(item.id, item));\n\n\t\t\t\t// remove deleted items from the final result set\n\t\t\t\tdeletedItemIds.forEach(id => items.delete(id));\n\n\t\t\t\treturn {\n\t\t\t\t\titems: Array.from(items.values()),\n\t\t\t\t\tisSynced,\n\t\t\t\t};\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Emits the list of items to the observer.\n\t\t\t *\n\t\t\t * SIDE EFFECT: `itemsChanged` and `deletedItemIds` are cleared to prepare\n\t\t\t * for the next snapshot.\n\t\t\t *\n\t\t\t * @param snapshot The generated items data to emit.\n\t\t\t */\n\t\t\tconst emitSnapshot = (snapshot: DataStoreSnapshot<T>): void => {\n\t\t\t\t// send the generated snapshot to the primary subscription\n\t\t\t\tobserver.next(snapshot);\n\n\t\t\t\t// reset the changed items sets\n\t\t\t\titemsChanged.clear();\n\t\t\t\tdeletedItemIds = [];\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Sorts an `Array` of `T` according to the sort instructions given in the\n\t\t\t * original  `observeQuery()` call.\n\t\t\t *\n\t\t\t * @param itemsToSort A array of model type.\n\t\t\t */\n\t\t\tconst sortItems = (itemsToSort: T[]): void => {\n\t\t\t\tconst modelDefinition = getModelDefinition(model);\n\t\t\t\tconst pagination = this.processPagination(modelDefinition, options);\n\n\t\t\t\tconst sortPredicates = ModelSortPredicateCreator.getPredicates(\n\t\t\t\t\tpagination.sort\n\t\t\t\t);\n\n\t\t\t\tif (sortPredicates.length) {\n\t\t\t\t\tconst compareFn = sortCompareFunction(sortPredicates);\n\t\t\t\t\titemsToSort.sort(compareFn);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Force one last snapshot when the model is fully synced.\n\t\t\t *\n\t\t\t * This reduces latency for that last snapshot, which will otherwise\n\t\t\t * wait for the configured timeout.\n\t\t\t *\n\t\t\t * @param payload The payload from the Hub event.\n\t\t\t */\n\t\t\tconst hubCallback = ({ payload }): void => {\n\t\t\t\tconst { event, data } = payload;\n\t\t\t\tif (\n\t\t\t\t\tevent === ControlMessage.SYNC_ENGINE_MODEL_SYNCED &&\n\t\t\t\t\tdata?.model?.name === model.name\n\t\t\t\t) {\n\t\t\t\t\tgenerateAndEmitSnapshot();\n\t\t\t\t\tHub.remove('api', hubCallback);\n\t\t\t\t}\n\t\t\t};\n\t\t\tHub.listen('datastore', hubCallback);\n\n\t\t\treturn () => {\n\t\t\t\tif (handle) {\n\t\t\t\t\thandle.unsubscribe();\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t};\n\n\tconfigure = (config: DataStoreConfig = {}) => {\n\t\tconst {\n\t\t\tDataStore: configDataStore,\n\t\t\tauthModeStrategyType: configAuthModeStrategyType,\n\t\t\tconflictHandler: configConflictHandler,\n\t\t\terrorHandler: configErrorHandler,\n\t\t\tmaxRecordsToSync: configMaxRecordsToSync,\n\t\t\tsyncPageSize: configSyncPageSize,\n\t\t\tfullSyncInterval: configFullSyncInterval,\n\t\t\tsyncExpressions: configSyncExpressions,\n\t\t\tauthProviders: configAuthProviders,\n\t\t\tstorageAdapter: configStorageAdapter,\n\t\t\t...configFromAmplify\n\t\t} = config;\n\n\t\tthis.amplifyConfig = {\n\t\t\t...configFromAmplify,\n\t\t\t...this.amplifyConfig,\n\t\t};\n\n\t\tthis.conflictHandler = this.setConflictHandler(config);\n\t\tthis.errorHandler = this.setErrorHandler(config);\n\n\t\tconst authModeStrategyType =\n\t\t\t(configDataStore && configDataStore.authModeStrategyType) ||\n\t\t\tconfigAuthModeStrategyType ||\n\t\t\tAuthModeStrategyType.DEFAULT;\n\n\t\tswitch (authModeStrategyType) {\n\t\t\tcase AuthModeStrategyType.MULTI_AUTH:\n\t\t\t\tthis.authModeStrategy = multiAuthStrategy;\n\t\t\t\tbreak;\n\t\t\tcase AuthModeStrategyType.DEFAULT:\n\t\t\t\tthis.authModeStrategy = defaultAuthStrategy;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.authModeStrategy = defaultAuthStrategy;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// store on config object, so that Sync, Subscription, and Mutation processors can have access\n\t\tthis.amplifyConfig.authProviders =\n\t\t\t(configDataStore && configDataStore.authProviders) || configAuthProviders;\n\n\t\tthis.syncExpressions =\n\t\t\t(configDataStore && configDataStore.syncExpressions) ||\n\t\t\tconfigSyncExpressions ||\n\t\t\tthis.syncExpressions;\n\n\t\tthis.maxRecordsToSync =\n\t\t\t(configDataStore && configDataStore.maxRecordsToSync) ||\n\t\t\tconfigMaxRecordsToSync ||\n\t\t\tthis.maxRecordsToSync ||\n\t\t\t10000;\n\n\t\t// store on config object, so that Sync, Subscription, and Mutation processors can have access\n\t\tthis.amplifyConfig.maxRecordsToSync = this.maxRecordsToSync;\n\n\t\tthis.syncPageSize =\n\t\t\t(configDataStore && configDataStore.syncPageSize) ||\n\t\t\tconfigSyncPageSize ||\n\t\t\tthis.syncPageSize ||\n\t\t\t1000;\n\n\t\t// store on config object, so that Sync, Subscription, and Mutation processors can have access\n\t\tthis.amplifyConfig.syncPageSize = this.syncPageSize;\n\n\t\tthis.fullSyncInterval =\n\t\t\t(configDataStore && configDataStore.fullSyncInterval) ||\n\t\t\tconfigFullSyncInterval ||\n\t\t\tthis.fullSyncInterval ||\n\t\t\t24 * 60; // 1 day\n\n\t\tthis.storageAdapter =\n\t\t\t(configDataStore && configDataStore.storageAdapter) ||\n\t\t\tconfigStorageAdapter ||\n\t\t\tthis.storageAdapter ||\n\t\t\tundefined;\n\n\t\tthis.sessionId = this.retrieveSessionId();\n\t};\n\n\tclear = async function clear() {\n\t\tcheckSchemaInitialized();\n\t\tif (this.storage === undefined) {\n\t\t\t// connect to storage so that it can be cleared without fully starting DataStore\n\t\t\tthis.storage = new Storage(\n\t\t\t\tschema,\n\t\t\t\tnamespaceResolver,\n\t\t\t\tgetModelConstructorByModelName,\n\t\t\t\tmodelInstanceCreator,\n\t\t\t\tthis.storageAdapter,\n\t\t\t\tthis.sessionId\n\t\t\t);\n\t\t\tawait this.storage.init();\n\t\t}\n\n\t\tif (syncSubscription && !syncSubscription.closed) {\n\t\t\tsyncSubscription.unsubscribe();\n\t\t}\n\n\t\tawait this.storage.clear();\n\n\t\tif (this.sync) {\n\t\t\tthis.sync.unsubscribeConnectivity();\n\t\t}\n\n\t\tthis.initialized = undefined; // Should re-initialize when start() is called.\n\t\tthis.storage = undefined;\n\t\tthis.sync = undefined;\n\t\tthis.syncPredicates = new WeakMap<SchemaModel, ModelPredicate<any>>();\n\t};\n\n\tstop = async function stop() {\n\t\tif (this.initialized !== undefined) {\n\t\t\tawait this.start();\n\t\t}\n\n\t\tif (syncSubscription && !syncSubscription.closed) {\n\t\t\tsyncSubscription.unsubscribe();\n\t\t}\n\n\t\tif (this.sync) {\n\t\t\tthis.sync.unsubscribeConnectivity();\n\t\t}\n\n\t\tthis.initialized = undefined; // Should re-initialize when start() is called.\n\t\tthis.sync = undefined;\n\t};\n\n\tprivate processPagination<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tpaginationProducer: ProducerPaginationInput<T>\n\t): PaginationInput<T> | undefined {\n\t\tlet sortPredicate: SortPredicate<T>;\n\t\tconst { limit, page, sort } = paginationProducer || {};\n\n\t\tif (limit === undefined && page === undefined && sort === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (page !== undefined && limit === undefined) {\n\t\t\tthrow new Error('Limit is required when requesting a page');\n\t\t}\n\n\t\tif (page !== undefined) {\n\t\t\tif (typeof page !== 'number') {\n\t\t\t\tthrow new Error('Page should be a number');\n\t\t\t}\n\n\t\t\tif (page < 0) {\n\t\t\t\tthrow new Error(\"Page can't be negative\");\n\t\t\t}\n\t\t}\n\n\t\tif (limit !== undefined) {\n\t\t\tif (typeof limit !== 'number') {\n\t\t\t\tthrow new Error('Limit should be a number');\n\t\t\t}\n\n\t\t\tif (limit < 0) {\n\t\t\t\tthrow new Error(\"Limit can't be negative\");\n\t\t\t}\n\t\t}\n\n\t\tif (sort) {\n\t\t\tsortPredicate = ModelSortPredicateCreator.createFromExisting(\n\t\t\t\tmodelDefinition,\n\t\t\t\tpaginationProducer.sort\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\tlimit,\n\t\t\tpage,\n\t\t\tsort: sortPredicate,\n\t\t};\n\t}\n\n\tprivate async processSyncExpressions(): Promise<\n\t\tWeakMap<SchemaModel, ModelPredicate<any>>\n\t> {\n\t\tif (!this.syncExpressions || !this.syncExpressions.length) {\n\t\t\treturn new WeakMap<SchemaModel, ModelPredicate<any>>();\n\t\t}\n\n\t\tconst syncPredicates = await Promise.all(\n\t\t\tthis.syncExpressions.map(\n\t\t\t\tasync (\n\t\t\t\t\tsyncExpression: SyncExpression\n\t\t\t\t): Promise<[SchemaModel, ModelPredicate<any>]> => {\n\t\t\t\t\tconst { modelConstructor, conditionProducer } = await syncExpression;\n\t\t\t\t\tconst modelDefinition = getModelDefinition(modelConstructor);\n\n\t\t\t\t\t// conditionProducer is either a predicate, e.g. (c) => c.field('eq', 1)\n\t\t\t\t\t// OR a function/promise that returns a predicate\n\t\t\t\t\tconst condition = await this.unwrapPromise(conditionProducer);\n\t\t\t\t\tif (isPredicatesAll(condition)) {\n\t\t\t\t\t\treturn [modelDefinition, null];\n\t\t\t\t\t}\n\n\t\t\t\t\tconst predicate = this.createFromCondition(\n\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\tcondition\n\t\t\t\t\t);\n\n\t\t\t\t\treturn [modelDefinition, predicate];\n\t\t\t\t}\n\t\t\t)\n\t\t);\n\n\t\treturn this.weakMapFromEntries(syncPredicates);\n\t}\n\n\tprivate createFromCondition(\n\t\tmodelDefinition: SchemaModel,\n\t\tcondition: ProducerModelPredicate<PersistentModel>\n\t) {\n\t\ttry {\n\t\t\treturn ModelPredicateCreator.createFromExisting(\n\t\t\t\tmodelDefinition,\n\t\t\t\tcondition\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tlogger.error('Error creating Sync Predicate');\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async unwrapPromise<T extends PersistentModel>(\n\t\tconditionProducer\n\t): Promise<ProducerModelPredicate<T>> {\n\t\ttry {\n\t\t\tconst condition = await conditionProducer();\n\t\t\treturn condition;\n\t\t} catch (error) {\n\t\t\tif (error instanceof TypeError) {\n\t\t\t\treturn conditionProducer;\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate weakMapFromEntries(\n\t\tentries: [SchemaModel, ModelPredicate<any>][]\n\t): WeakMap<SchemaModel, ModelPredicate<any>> {\n\t\treturn entries.reduce((map, [modelDefinition, predicate]) => {\n\t\t\tif (map.has(modelDefinition)) {\n\t\t\t\tconst { name } = modelDefinition;\n\t\t\t\tlogger.warn(\n\t\t\t\t\t`You can only utilize one Sync Expression per model.\n          Subsequent sync expressions for the ${name} model will be ignored.`\n\t\t\t\t);\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\tif (predicate) {\n\t\t\t\tmap.set(modelDefinition, predicate);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t}, new WeakMap<SchemaModel, ModelPredicate<any>>());\n\t}\n\n\t// database separation for Amplify Console. Not a public API\n\tprivate retrieveSessionId(): string | undefined {\n\t\ttry {\n\t\t\tconst sessionId = sessionStorage.getItem('datastoreSessionId');\n\n\t\t\tif (sessionId) {\n\t\t\t\tconst { aws_appsync_graphqlEndpoint } = this.amplifyConfig;\n\n\t\t\t\tconst appSyncUrl = aws_appsync_graphqlEndpoint.split('/')[2];\n\t\t\t\tconst [appSyncId] = appSyncUrl.split('.');\n\n\t\t\t\treturn `${sessionId}-${appSyncId}`;\n\t\t\t}\n\t\t} catch {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\nconst instance = new DataStore();\nAmplify.register(instance);\n\nexport { DataStore as DataStoreClass, initSchema, instance as DataStore };\n"]},"metadata":{},"sourceType":"module"}