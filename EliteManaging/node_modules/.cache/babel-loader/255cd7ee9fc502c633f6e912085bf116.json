{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ListMultipartUploadsOutput, ListMultipartUploadsRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlListMultipartUploadsCommand, serializeAws_restXmlListMultipartUploadsCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>This operation lists in-progress multipart uploads. An in-progress multipart upload is a\n *          multipart upload that has been initiated using the Initiate Multipart Upload request, but\n *          has not yet been completed or aborted.</p>\n *\n *          <p>This operation returns at most 1,000 multipart uploads in the response. 1,000 multipart\n *          uploads is the maximum number of uploads a response can include, which is also the default\n *          value. You can further limit the number of uploads in a response by specifying the\n *             <code>max-uploads</code> parameter in the response. If additional multipart uploads\n *          satisfy the list criteria, the response will contain an <code>IsTruncated</code> element\n *          with the value true. To list the additional multipart uploads, use the\n *             <code>key-marker</code> and <code>upload-id-marker</code> request parameters.</p>\n *\n *          <p>In the response, the uploads are sorted by key. If your application has initiated more\n *          than one multipart upload using the same object key, then uploads in the response are first\n *          sorted by key. Additionally, uploads are sorted in ascending order within each key by the\n *          upload initiation time.</p>\n *\n *          <p>For more information on multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html\">Uploading Objects Using Multipart\n *             Upload</a>.</p>\n *\n *          <p>For information on permissions required to use the multipart upload API, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html\">Multipart Upload API and\n *          Permissions</a>.</p>\n *\n *          <p>The following operations are related to <code>ListMultipartUploads</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html\">ListParts</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html\">AbortMultipartUpload</a>\n *                </p>\n *             </li>\n *          </ul>\n */\n\nvar ListMultipartUploadsCommand =\n/** @class */\nfunction (_super) {\n  __extends(ListMultipartUploadsCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function ListMultipartUploadsCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  ListMultipartUploadsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"ListMultipartUploadsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: ListMultipartUploadsRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: ListMultipartUploadsOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  ListMultipartUploadsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlListMultipartUploadsCommand(input, context);\n  };\n\n  ListMultipartUploadsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlListMultipartUploadsCommand(output, context);\n  };\n\n  return ListMultipartUploadsCommand;\n}($Command);\n\nexport { ListMultipartUploadsCommand };","map":{"version":3,"mappings":";AACA,SAASA,0BAAT,EAAqCC,2BAArC,QAAwE,oBAAxE;AACA,SACEC,iDADF,EAEEC,+CAFF,QAGO,0BAHP;AAIA,SAASC,uBAAT,QAAwC,qCAAxC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;AAAA;AAAA;EAAiDC,+CAAjD,CAKE;EACA;;;EAEA,qCAAqBC,KAArB,EAA4D;IAA5D,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAuC,CAG1D;EACD;EAED;;;;;EAGAC,oEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,KAAKH,eAAL,CAAqBC,GAArB,CAAyBb,uBAAuB,CAACU,aAAD,CAAhD;IAEA,IAAMM,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,UAAnB;IACA,IAAMC,WAAW,GAAG,6BAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,2BAA2B,CAAC0B,kBAJE;MAKvDC,wBAAwB,EAAE5B,0BAA0B,CAAC2B;IALE,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CA1BD;;EA4BQZ,kDAAR,UAAkBH,KAAlB,EAA2DuB,OAA3D,EAAkF;IAChF,OAAO7B,+CAA+C,CAACM,KAAD,EAAQuB,OAAR,CAAtD;EACD,CAFO;;EAIApB,oDAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO9B,iDAAiD,CAAC+B,MAAD,EAASD,OAAT,CAAxD;EACD,CAFO;;EAMV;AAAC,CAvDD,CAAiDzB,QAAjD","names":["ListMultipartUploadsOutput","ListMultipartUploadsRequest","deserializeAws_restXmlListMultipartUploadsCommand","serializeAws_restXmlListMultipartUploadsCommand","getBucketEndpointPlugin","getSerdePlugin","Command","$Command","__extends","input","_super","_this","ListMultipartUploadsCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-s3\\commands\\ListMultipartUploadsCommand.ts"],"sourcesContent":["import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { ListMultipartUploadsOutput, ListMultipartUploadsRequest } from \"../models/models_0\";\nimport {\n  deserializeAws_restXmlListMultipartUploadsCommand,\n  serializeAws_restXmlListMultipartUploadsCommand,\n} from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type ListMultipartUploadsCommandInput = ListMultipartUploadsRequest;\nexport type ListMultipartUploadsCommandOutput = ListMultipartUploadsOutput & __MetadataBearer;\n\n/**\n * <p>This operation lists in-progress multipart uploads. An in-progress multipart upload is a\n *          multipart upload that has been initiated using the Initiate Multipart Upload request, but\n *          has not yet been completed or aborted.</p>\n *\n *          <p>This operation returns at most 1,000 multipart uploads in the response. 1,000 multipart\n *          uploads is the maximum number of uploads a response can include, which is also the default\n *          value. You can further limit the number of uploads in a response by specifying the\n *             <code>max-uploads</code> parameter in the response. If additional multipart uploads\n *          satisfy the list criteria, the response will contain an <code>IsTruncated</code> element\n *          with the value true. To list the additional multipart uploads, use the\n *             <code>key-marker</code> and <code>upload-id-marker</code> request parameters.</p>\n *\n *          <p>In the response, the uploads are sorted by key. If your application has initiated more\n *          than one multipart upload using the same object key, then uploads in the response are first\n *          sorted by key. Additionally, uploads are sorted in ascending order within each key by the\n *          upload initiation time.</p>\n *\n *          <p>For more information on multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html\">Uploading Objects Using Multipart\n *             Upload</a>.</p>\n *\n *          <p>For information on permissions required to use the multipart upload API, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html\">Multipart Upload API and\n *          Permissions</a>.</p>\n *\n *          <p>The following operations are related to <code>ListMultipartUploads</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html\">CreateMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html\">ListParts</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html\">AbortMultipartUpload</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class ListMultipartUploadsCommand extends $Command<\n  ListMultipartUploadsCommandInput,\n  ListMultipartUploadsCommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: ListMultipartUploadsCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<ListMultipartUploadsCommandInput, ListMultipartUploadsCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"ListMultipartUploadsCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: ListMultipartUploadsRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: ListMultipartUploadsOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: ListMultipartUploadsCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlListMultipartUploadsCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<ListMultipartUploadsCommandOutput> {\n    return deserializeAws_restXmlListMultipartUploadsCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}