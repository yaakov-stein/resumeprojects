{"ast":null,"code":"/*\n * Copyright 2019-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { ConsoleLogger as Logger, Credentials, JS, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { PersonalizeEventsClient, PutEventsCommand } from '@aws-sdk/client-personalize-events';\nimport { SessionInfoManager, MediaAutoTrack } from './AmazonPersonalizeHelper';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nvar logger = new Logger('AmazonPersonalizeProvider'); // events buffer\n\nvar FLUSH_SIZE = 5;\nvar FLUSH_SIZE_THRESHHOLD = 10;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\n\nvar IDENTIFY_EVENT = 'Identify';\n\nvar AmazonPersonalizeProvider =\n/** @class */\nfunction () {\n  function AmazonPersonalizeProvider(config) {\n    this._buffer = [];\n    this._config = config ? config : {};\n    this._config.flushSize = this._config.flushSize > 0 && this._config.flushSize <= FLUSH_SIZE_THRESHHOLD ? this._config.flushSize : FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._sessionManager = new SessionInfoManager();\n\n    if (!isEmpty(this._config.trackingId)) {\n      this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n    }\n\n    this._isBrowser = JS.browserOrNode().isBrowser; // flush event buffer\n\n    this._setupTimer();\n  }\n\n  AmazonPersonalizeProvider.prototype._setupTimer = function () {\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n\n    var flushInterval = this._config.flushInterval;\n    var that = this;\n    this._timer = setInterval(function () {\n      that._sendFromBuffer();\n    }, flushInterval);\n  };\n  /**\n   * Record event\n   * @param eventType      - type of the event action. e.g. \"Click\"\n   * @param properties     - properties of the event\n   * @return Promise\n   */\n\n\n  AmazonPersonalizeProvider.prototype.record = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, eventType, properties, requestParams, isLoaded;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._getCredentials()];\n\n          case 1:\n            credentials = _b.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.resolve(false)];\n            Object.assign(params, {\n              config: this._config,\n              credentials: credentials,\n              sentAt: new Date()\n            });\n            _a = params.event, eventType = _a.eventType, properties = _a.properties;\n\n            if (eventType === IDENTIFY_EVENT) {\n              this._sessionManager.updateSessionInfo(properties && properties.userId ? properties.userId : '', this._sessionInfo);\n\n              return [2\n              /*return*/\n              ];\n            } else if (!isEmpty(params.event.userId)) {\n              this._sessionManager.updateSessionInfo(params.event.userId, this._sessionInfo);\n            }\n\n            requestParams = this.generateRequestParams(params, this._sessionInfo);\n            if (!(eventType === 'MediaAutoTrack')) return [3\n            /*break*/\n            , 7];\n            if (!this._isBrowser) return [3\n            /*break*/\n            , 5];\n            if (!!isEmpty(get(requestParams, 'eventData.properties.domElementId', null))) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.isElementFullyLoaded(this.loadElement, requestParams.eventData.properties['domElementId'], 500, 5)];\n\n          case 2:\n            isLoaded = _b.sent();\n\n            if (isLoaded) {\n              new MediaAutoTrack(requestParams, this);\n            } else {\n              logger.debug('Cannot find the media element.');\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            logger.debug(\"Missing domElementId field in 'properties' for MediaAutoTrack event type.\");\n            _b.label = 4;\n\n          case 4:\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            logger.debug('MediaAutoTrack only for browser');\n            _b.label = 6;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            , this.putToBuffer(requestParams)];\n        }\n      });\n    });\n  };\n\n  AmazonPersonalizeProvider.prototype.loadElement = function (domId) {\n    return new Promise(function (resolve, reject) {\n      if (document.getElementById(domId) && document.getElementById(domId).clientHeight) {\n        return resolve(true);\n      } else {\n        return reject(true);\n      }\n    });\n  };\n\n  AmazonPersonalizeProvider.prototype.isElementFullyLoaded = function (operation, params, delay, times) {\n    var _this = this;\n\n    var wait = function (ms) {\n      return new Promise(function (r) {\n        return setTimeout(r, ms);\n      });\n    };\n\n    return new Promise(function (resolve, reject) {\n      return operation(params).then(resolve).catch(function (reason) {\n        if (times - 1 > 0) {\n          return wait(delay).then(_this.isElementFullyLoaded.bind(null, operation, params, delay, times - 1)).then(resolve).catch(reject);\n        }\n\n        return reject(reason);\n      });\n    });\n  };\n  /**\n   * get the category of the plugin\n   */\n\n\n  AmazonPersonalizeProvider.prototype.getCategory = function () {\n    return 'Analytics';\n  };\n  /**\n   * get provider name of the plugin\n   */\n\n\n  AmazonPersonalizeProvider.prototype.getProviderName = function () {\n    return 'AmazonPersonalize';\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n\n\n  AmazonPersonalizeProvider.prototype.configure = function (config) {\n    logger.debug('configure Analytics', config);\n    var conf = config ? config : {};\n    this._config = Object.assign({}, this._config, conf);\n\n    if (!isEmpty(this._config.trackingId)) {\n      this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n    }\n\n    this._setupTimer();\n\n    return this._config;\n  };\n  /**\n   * Generate the requestParams from customer input params and sessionInfo\n   * @private\n   * @param eventData      - customer input for event data\n   * @param api            - api name\n   * @return RequestParams - wrapper object with all information required for make request\n   */\n\n\n  AmazonPersonalizeProvider.prototype.generateRequestParams = function (params, sessionInfo) {\n    var requestParams = {};\n    var _a = params.event,\n        eventType = _a.eventType,\n        properties = _a.properties;\n    requestParams.eventData = {\n      eventType: eventType,\n      properties: properties\n    };\n    requestParams.sessionInfo = sessionInfo;\n    requestParams.sentAt = params.sentAt;\n    requestParams.credentials = params.credentials;\n    requestParams.config = params.config;\n    return requestParams;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n\n\n  AmazonPersonalizeProvider.prototype._sendEvents = function (group) {\n    var groupLen = group.length;\n\n    if (groupLen === 0) {\n      logger.debug('events array is empty, directly return');\n      return;\n    }\n\n    var _a = group[0],\n        config = _a.config,\n        credentials = _a.credentials,\n        sessionInfo = _a.sessionInfo;\n\n    var initClients = this._init(config, credentials);\n\n    if (!initClients) return false;\n\n    if (groupLen > 0) {\n      var events = [];\n\n      for (var i = 0; i < groupLen; i += 1) {\n        var params = group.shift();\n\n        var eventPayload = this._generateSingleRecordPayload(params, sessionInfo);\n\n        events.push(eventPayload);\n      }\n\n      var payload_1 = {};\n      payload_1.trackingId = sessionInfo.trackingId;\n      payload_1.sessionId = sessionInfo.sessionId;\n      payload_1.userId = sessionInfo.userId;\n      payload_1.eventList = [];\n      events.forEach(function (event) {\n        // @ts-ignore\n        payload_1.eventList.push(event);\n      });\n      var command = new PutEventsCommand(payload_1);\n\n      this._personalize.send(command, function (err) {\n        if (err) logger.debug('Failed to call putEvents in Personalize', err);else logger.debug('Put events');\n      });\n    }\n  };\n  /**\n   * Put event into buffer\n   * @private\n   * @param params - params for the event recording\n   */\n\n\n  AmazonPersonalizeProvider.prototype.putToBuffer = function (params) {\n    if (this._buffer.length < this._config.flushSize) {\n      this._buffer.push(params);\n    } else {\n      this._buffer.push(params);\n\n      this._sendFromBuffer();\n    }\n\n    return Promise.resolve(true);\n  };\n  /**\n   * flush the buffer and batch sending the request\n   * @private\n   * @param eventsParams - the buffer for cache the payload\n   */\n\n\n  AmazonPersonalizeProvider.prototype._sendFromBuffer = function () {\n    var _this = this;\n\n    var size = this._buffer.length;\n    if (size <= 0) return;\n    var eventsGroups = [];\n    var preCred = null;\n    var group = [];\n\n    for (var i = 0; i < size; i += 1) {\n      var currRequestParams = this._buffer.shift();\n\n      var cred = currRequestParams.credentials;\n      var sessionInfo = currRequestParams.sessionInfo;\n\n      if (i === 0) {\n        group.push(currRequestParams);\n        preCred = cred;\n      } else {\n        if (isEqual(sessionInfo, this._sessionInfo) && cred.sessionToken === preCred.sessionToken && cred.identityId === preCred.identityId) {\n          logger.debug('no change for cred, put event in the same group');\n          group.push(currRequestParams);\n        } else {\n          eventsGroups.push(group);\n          group = [];\n          group.push(currRequestParams);\n          preCred = cred;\n          this._sessionInfo = sessionInfo;\n        }\n      }\n    }\n\n    eventsGroups.push(group);\n    eventsGroups.map(function (group) {\n      _this._sendEvents(group);\n    });\n  };\n  /**\n   * Generate the record payload for single event\n   * @private\n   * @param params - RequestParams\n   */\n\n\n  AmazonPersonalizeProvider.prototype._generateSingleRecordPayload = function (params, sessionInfo) {\n    var eventData = params.eventData,\n        sentAt = params.sentAt;\n    var trackPayload = {};\n    trackPayload.sentAt = sentAt;\n    trackPayload.properties = eventData.properties && JSON.stringify(eventData.properties);\n    trackPayload.eventId = this._sessionManager.getTimerKey() + sessionInfo.sessionId;\n    trackPayload.eventType = eventData.eventType;\n    return trackPayload;\n  };\n  /**\n   * Initialize the personalize client\n   * @private\n   * @param params - RequestParams\n   */\n\n\n  AmazonPersonalizeProvider.prototype._init = function (config, credentials) {\n    logger.debug('init clients');\n\n    if (this._personalize && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n      logger.debug('no change for analytics config, directly return from init');\n      return true;\n    }\n\n    this._config.credentials = credentials;\n    var region = config.region;\n    logger.debug('initialize personalize with credentials', credentials);\n    this._personalize = new PersonalizeEventsClient({\n      region: region,\n      credentials: credentials,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    return true;\n  };\n  /**\n   * check if current credentials exists\n   * @private\n   */\n\n\n  AmazonPersonalizeProvider.prototype._getCredentials = function () {\n    var that = this;\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return null;\n      logger.debug('set credentials for analytics', that._config.credentials);\n      return Credentials.shear(credentials);\n    }).catch(function (err) {\n      logger.debug('ensure credentials error', err);\n      return null;\n    });\n  };\n\n  return AmazonPersonalizeProvider;\n}();\n\nexport { AmazonPersonalizeProvider };\n/**\n * @deprecated use named import\n */\n\nexport default AmazonPersonalizeProvider;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","Credentials","JS","getAmplifyUserAgent","PersonalizeEventsClient","PutEventsCommand","SessionInfoManager","MediaAutoTrack","get","isEmpty","isEqual","logger","FLUSH_SIZE","FLUSH_SIZE_THRESHHOLD","FLUSH_INTERVAL","IDENTIFY_EVENT","config","_buffer","_config","flushSize","flushInterval","_sessionManager","trackingId","_sessionInfo","retrieveSessionInfo","_isBrowser","browserOrNode","isBrowser","_setupTimer","AmazonPersonalizeProvider","_timer","clearInterval","that","setInterval","_sendFromBuffer","params","_getCredentials","credentials","_b","Promise","resolve","Object","assign","sentAt","Date","_a","event","eventType","properties","updateSessionInfo","userId","requestParams","generateRequestParams","isElementFullyLoaded","loadElement","eventData","isLoaded","debug","putToBuffer","domId","reject","document","getElementById","clientHeight","operation","delay","times","wait","r","ms","then","catch","_this","bind","reason","conf","sessionInfo","group","groupLen","length","initClients","_init","events","i","shift","eventPayload","_generateSingleRecordPayload","push","payload_1","sessionId","eventList","forEach","command","_personalize","send","err","size","eventsGroups","preCred","currRequestParams","cred","sessionToken","identityId","map","_sendEvents","trackPayload","JSON","stringify","eventId","getTimerKey","region","customUserAgent","shear"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-amplify\\analytics\\src\\Providers\\AmazonPersonalizeProvider.ts"],"sourcesContent":["/*\n * Copyright 2019-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tJS,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport {\n\tPersonalizeEventsClient,\n\tPutEventsCommand,\n\tPutEventsCommandInput,\n} from '@aws-sdk/client-personalize-events';\nimport {\n\tSessionInfo,\n\tRequestParams,\n\tRecordEventPayload,\n\tSessionInfoManager,\n\tMediaAutoTrack,\n} from './AmazonPersonalizeHelper';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport { AnalyticsProvider } from '../types';\n\nconst logger = new Logger('AmazonPersonalizeProvider');\n\n// events buffer\nconst FLUSH_SIZE = 5;\nconst FLUSH_SIZE_THRESHHOLD = 10;\nconst FLUSH_INTERVAL = 5 * 1000; // 5s\n\nconst IDENTIFY_EVENT = 'Identify';\n\nexport class AmazonPersonalizeProvider implements AnalyticsProvider {\n\tprivate _config;\n\tprivate _personalize;\n\tprivate _buffer;\n\tprivate _timer;\n\tprivate _sessionInfo: SessionInfo;\n\tprivate _sessionManager;\n\tprivate _isBrowser;\n\n\tconstructor(config?) {\n\t\tthis._buffer = [];\n\t\tthis._config = config ? config : {};\n\t\tthis._config.flushSize =\n\t\t\tthis._config.flushSize > 0 &&\n\t\t\tthis._config.flushSize <= FLUSH_SIZE_THRESHHOLD\n\t\t\t\t? this._config.flushSize\n\t\t\t\t: FLUSH_SIZE;\n\t\tthis._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n\t\tthis._sessionManager = new SessionInfoManager();\n\t\tif (!isEmpty(this._config.trackingId)) {\n\t\t\tthis._sessionInfo = this._sessionManager.retrieveSessionInfo(\n\t\t\t\tthis._config.trackingId\n\t\t\t);\n\t\t}\n\t\tthis._isBrowser = JS.browserOrNode().isBrowser;\n\n\t\t// flush event buffer\n\t\tthis._setupTimer();\n\t}\n\n\tprivate _setupTimer() {\n\t\tif (this._timer) {\n\t\t\tclearInterval(this._timer);\n\t\t}\n\t\tconst { flushInterval } = this._config;\n\t\tconst that = this;\n\t\tthis._timer = setInterval(() => {\n\t\t\tthat._sendFromBuffer();\n\t\t}, flushInterval);\n\t}\n\n\t/**\n\t * Record event\n\t * @param eventType      - type of the event action. e.g. \"Click\"\n\t * @param properties     - properties of the event\n\t * @return Promise\n\t */\n\tpublic async record(params): Promise<boolean> {\n\t\tconst credentials = await this._getCredentials();\n\t\tif (!credentials) return Promise.resolve(false);\n\n\t\tObject.assign(params, {\n\t\t\tconfig: this._config,\n\t\t\tcredentials,\n\t\t\tsentAt: new Date(),\n\t\t});\n\t\tconst { eventType, properties } = params.event;\n\n\t\tif (eventType === IDENTIFY_EVENT) {\n\t\t\tthis._sessionManager.updateSessionInfo(\n\t\t\t\tproperties && properties.userId ? properties.userId : '',\n\t\t\t\tthis._sessionInfo\n\t\t\t);\n\t\t\treturn;\n\t\t} else if (!isEmpty(params.event.userId)) {\n\t\t\tthis._sessionManager.updateSessionInfo(\n\t\t\t\tparams.event.userId,\n\t\t\t\tthis._sessionInfo\n\t\t\t);\n\t\t}\n\t\tconst requestParams: RequestParams = this.generateRequestParams(\n\t\t\tparams,\n\t\t\tthis._sessionInfo\n\t\t);\n\t\tif (eventType === 'MediaAutoTrack') {\n\t\t\tif (this._isBrowser) {\n\t\t\t\tif (\n\t\t\t\t\t!isEmpty(\n\t\t\t\t\t\tget(requestParams, 'eventData.properties.domElementId', null)\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tconst isLoaded = await this.isElementFullyLoaded(\n\t\t\t\t\t\tthis.loadElement,\n\t\t\t\t\t\trequestParams.eventData.properties['domElementId'],\n\t\t\t\t\t\t500,\n\t\t\t\t\t\t5\n\t\t\t\t\t);\n\t\t\t\t\tif (isLoaded) {\n\t\t\t\t\t\tnew MediaAutoTrack(requestParams, this);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.debug('Cannot find the media element.');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\"Missing domElementId field in 'properties' for MediaAutoTrack event type.\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlogger.debug('MediaAutoTrack only for browser');\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.putToBuffer(requestParams);\n\t}\n\n\tprivate loadElement(domId): Promise<boolean> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (\n\t\t\t\tdocument.getElementById(domId) &&\n\t\t\t\tdocument.getElementById(domId).clientHeight\n\t\t\t) {\n\t\t\t\treturn resolve(true);\n\t\t\t} else {\n\t\t\t\treturn reject(true);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate isElementFullyLoaded(\n\t\toperation,\n\t\tparams,\n\t\tdelay,\n\t\ttimes\n\t): Promise<boolean> {\n\t\tconst wait = ms => new Promise(r => setTimeout(r, ms));\n\t\treturn new Promise((resolve, reject) => {\n\t\t\treturn operation(params)\n\t\t\t\t.then(resolve)\n\t\t\t\t.catch(reason => {\n\t\t\t\t\tif (times - 1 > 0) {\n\t\t\t\t\t\treturn wait(delay)\n\t\t\t\t\t\t\t.then(\n\t\t\t\t\t\t\t\tthis.isElementFullyLoaded.bind(\n\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\tparams,\n\t\t\t\t\t\t\t\t\tdelay,\n\t\t\t\t\t\t\t\t\ttimes - 1\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.then(resolve)\n\t\t\t\t\t\t\t.catch(reject);\n\t\t\t\t\t}\n\t\t\t\t\treturn reject(reason);\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tpublic getCategory(): string {\n\t\treturn 'Analytics';\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tpublic getProviderName(): string {\n\t\treturn 'AmazonPersonalize';\n\t}\n\n\t/**\n\t * configure the plugin\n\t * @param {Object} config - configuration\n\t */\n\tpublic configure(config): object {\n\t\tlogger.debug('configure Analytics', config);\n\t\tconst conf = config ? config : {};\n\t\tthis._config = Object.assign({}, this._config, conf);\n\t\tif (!isEmpty(this._config.trackingId)) {\n\t\t\tthis._sessionInfo = this._sessionManager.retrieveSessionInfo(\n\t\t\t\tthis._config.trackingId\n\t\t\t);\n\t\t}\n\t\tthis._setupTimer();\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * Generate the requestParams from customer input params and sessionInfo\n\t * @private\n\t * @param eventData      - customer input for event data\n\t * @param api            - api name\n\t * @return RequestParams - wrapper object with all information required for make request\n\t */\n\tprivate generateRequestParams(params, sessionInfo): RequestParams {\n\t\tconst requestParams = <RequestParams>{};\n\t\tconst { eventType, properties } = params.event;\n\t\trequestParams.eventData = { eventType, properties };\n\t\trequestParams.sessionInfo = sessionInfo;\n\t\trequestParams.sentAt = params.sentAt;\n\t\trequestParams.credentials = params.credentials;\n\t\trequestParams.config = params.config;\n\t\treturn requestParams;\n\t}\n\n\t/**\n\t * record an event\n\t * @param {Object} params - the params of an event\n\t */\n\tprivate _sendEvents(group) {\n\t\tconst groupLen = group.length;\n\t\tif (groupLen === 0) {\n\t\t\tlogger.debug('events array is empty, directly return');\n\t\t\treturn;\n\t\t}\n\n\t\tconst { config, credentials, sessionInfo } = group[0];\n\n\t\tconst initClients = this._init(config, credentials);\n\t\tif (!initClients) return false;\n\t\tif (groupLen > 0) {\n\t\t\tconst events: RecordEventPayload[] = [];\n\t\t\tfor (let i = 0; i < groupLen; i += 1) {\n\t\t\t\tconst params: RequestParams = group.shift();\n\t\t\t\tconst eventPayload: RecordEventPayload = this._generateSingleRecordPayload(\n\t\t\t\t\tparams,\n\t\t\t\t\tsessionInfo\n\t\t\t\t);\n\t\t\t\tevents.push(eventPayload);\n\t\t\t}\n\t\t\tconst payload = <PutEventsCommandInput>{};\n\t\t\tpayload.trackingId = sessionInfo.trackingId;\n\t\t\tpayload.sessionId = sessionInfo.sessionId;\n\t\t\tpayload.userId = sessionInfo.userId;\n\t\t\tpayload.eventList = [];\n\t\t\tevents.forEach(event => {\n\t\t\t\t// @ts-ignore\n\t\t\t\tpayload.eventList.push(event);\n\t\t\t});\n\t\t\tconst command: PutEventsCommand = new PutEventsCommand(payload);\n\t\t\tthis._personalize.send(command, err => {\n\t\t\t\tif (err) logger.debug('Failed to call putEvents in Personalize', err);\n\t\t\t\telse logger.debug('Put events');\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Put event into buffer\n\t * @private\n\t * @param params - params for the event recording\n\t */\n\tprivate putToBuffer(params: RequestParams) {\n\t\tif (this._buffer.length < this._config.flushSize) {\n\t\t\tthis._buffer.push(params);\n\t\t} else {\n\t\t\tthis._buffer.push(params);\n\t\t\tthis._sendFromBuffer();\n\t\t}\n\t\treturn Promise.resolve(true);\n\t}\n\n\t/**\n\t * flush the buffer and batch sending the request\n\t * @private\n\t * @param eventsParams - the buffer for cache the payload\n\t */\n\tprivate _sendFromBuffer() {\n\t\tconst size = this._buffer.length;\n\t\tif (size <= 0) return;\n\t\tconst eventsGroups = [];\n\t\tlet preCred = null;\n\t\tlet group = [];\n\t\tfor (let i = 0; i < size; i += 1) {\n\t\t\tconst currRequestParams: RequestParams = this._buffer.shift();\n\t\t\tconst cred = currRequestParams.credentials;\n\t\t\tconst sessionInfo = currRequestParams.sessionInfo;\n\t\t\tif (i === 0) {\n\t\t\t\tgroup.push(currRequestParams);\n\t\t\t\tpreCred = cred;\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tisEqual(sessionInfo, this._sessionInfo) &&\n\t\t\t\t\tcred.sessionToken === preCred.sessionToken &&\n\t\t\t\t\tcred.identityId === preCred.identityId\n\t\t\t\t) {\n\t\t\t\t\tlogger.debug('no change for cred, put event in the same group');\n\t\t\t\t\tgroup.push(currRequestParams);\n\t\t\t\t} else {\n\t\t\t\t\teventsGroups.push(group);\n\t\t\t\t\tgroup = [];\n\t\t\t\t\tgroup.push(currRequestParams);\n\t\t\t\t\tpreCred = cred;\n\t\t\t\t\tthis._sessionInfo = sessionInfo;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\teventsGroups.push(group);\n\n\t\teventsGroups.map(group => {\n\t\t\tthis._sendEvents(group);\n\t\t});\n\t}\n\n\t/**\n\t * Generate the record payload for single event\n\t * @private\n\t * @param params - RequestParams\n\t */\n\tprivate _generateSingleRecordPayload(\n\t\tparams: RequestParams,\n\t\tsessionInfo\n\t): RecordEventPayload {\n\t\tconst { eventData, sentAt } = params;\n\t\tconst trackPayload = <RecordEventPayload>{};\n\t\ttrackPayload.sentAt = sentAt;\n\t\ttrackPayload.properties =\n\t\t\teventData.properties && JSON.stringify(eventData.properties);\n\t\ttrackPayload.eventId =\n\t\t\tthis._sessionManager.getTimerKey() + sessionInfo.sessionId;\n\t\ttrackPayload.eventType = eventData.eventType;\n\t\treturn trackPayload;\n\t}\n\n\t/**\n\t * Initialize the personalize client\n\t * @private\n\t * @param params - RequestParams\n\t */\n\tprivate _init(config, credentials) {\n\t\tlogger.debug('init clients');\n\n\t\tif (\n\t\t\tthis._personalize &&\n\t\t\tthis._config.credentials &&\n\t\t\tthis._config.credentials.sessionToken === credentials.sessionToken &&\n\t\t\tthis._config.credentials.identityId === credentials.identityId\n\t\t) {\n\t\t\tlogger.debug('no change for analytics config, directly return from init');\n\t\t\treturn true;\n\t\t}\n\n\t\tthis._config.credentials = credentials;\n\t\tconst { region } = config;\n\t\tlogger.debug('initialize personalize with credentials', credentials);\n\t\tthis._personalize = new PersonalizeEventsClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\treturn true;\n\t}\n\n\t/**\n\t * check if current credentials exists\n\t * @private\n\t */\n\tprivate _getCredentials() {\n\t\tconst that = this;\n\t\treturn Credentials.get()\n\t\t\t.then(credentials => {\n\t\t\t\tif (!credentials) return null;\n\t\t\t\tlogger.debug('set credentials for analytics', that._config.credentials);\n\t\t\t\treturn Credentials.shear(credentials);\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tlogger.debug('ensure credentials error', err);\n\t\t\t\treturn null;\n\t\t\t});\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default AmazonPersonalizeProvider;\n"]},"metadata":{},"sourceType":"module"}