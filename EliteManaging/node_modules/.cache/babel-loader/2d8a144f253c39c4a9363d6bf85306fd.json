{"ast":null,"code":"import { MAXIMUM_RETRY_DELAY } from \"./constants\";\n/**\n * Calculate a capped, fully-jittered exponential backoff time.\n */\n\nexport var defaultDelayDecider = function (delayBase, attempts) {\n  return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * Math.pow(2, attempts) * delayBase));\n};","map":{"version":3,"mappings":"AAAA,SAASA,mBAAT,QAAoC,aAApC;AAEA;;;;AAGA,OAAO,IAAMC,mBAAmB,GAAG,UAACC,SAAD,EAAoBC,QAApB,EAAoC;EACrE,WAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,CAASN,mBAAT,EAA8BK,IAAI,CAACE,MAAL,KAAgBF,YAAKF,QAAL,CAAhB,GAAgCD,SAA9D,CAAX;AAAoF,CAD/E","names":["MAXIMUM_RETRY_DELAY","defaultDelayDecider","delayBase","attempts","floor","Math","min","random"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\middleware-retry\\src\\delayDecider.ts"],"sourcesContent":["import { MAXIMUM_RETRY_DELAY } from \"./constants\";\n\n/**\n * Calculate a capped, fully-jittered exponential backoff time.\n */\nexport const defaultDelayDecider = (delayBase: number, attempts: number) =>\n  Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));\n"]},"metadata":{},"sourceType":"module"}