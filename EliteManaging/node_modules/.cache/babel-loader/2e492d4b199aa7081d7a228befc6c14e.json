{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetOpenIdTokenForDeveloperIdentityInput, GetOpenIdTokenForDeveloperIdentityResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand, serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getAwsAuthPlugin } from \"@aws-sdk/middleware-signing\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect\n *          token for a user authenticated by your backend authentication process. Supplying multiple\n *          logins will create an implicit linked account. You can only specify one developer provider\n *          as part of the <code>Logins</code> map, which is linked to the identity pool. The developer\n *          provider is the \"domain\" by which Cognito will refer to your users.</p>\n *          <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity\n *          and to link new logins (that is, user credentials issued by a public provider or developer\n *          provider) to an existing identity. When you want to create a new identity, the\n *             <code>IdentityId</code> should be null. When you want to associate a new login with an\n *          existing authenticated/unauthenticated identity, you can do so by providing the existing\n *             <code>IdentityId</code>. This API will create the identity in the specified\n *             <code>IdentityPoolId</code>.</p>\n *          <p>You must use AWS Developer credentials to call this API.</p>\n */\n\nvar GetOpenIdTokenForDeveloperIdentityCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetOpenIdTokenForDeveloperIdentityCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetOpenIdTokenForDeveloperIdentityCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetOpenIdTokenForDeveloperIdentityCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getAwsAuthPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"CognitoIdentityClient\";\n    var commandName = \"GetOpenIdTokenForDeveloperIdentityCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetOpenIdTokenForDeveloperIdentityInput.filterSensitiveLog,\n      outputFilterSensitiveLog: GetOpenIdTokenForDeveloperIdentityResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetOpenIdTokenForDeveloperIdentityCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand(input, context);\n  };\n\n  GetOpenIdTokenForDeveloperIdentityCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand(output, context);\n  };\n\n  return GetOpenIdTokenForDeveloperIdentityCommand;\n}($Command);\n\nexport { GetOpenIdTokenForDeveloperIdentityCommand };","map":{"version":3,"mappings":";AACA,SACEA,uCADF,EAEEC,0CAFF,QAGO,oBAHP;AAIA,SACEC,+DADF,EAEEC,6DAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAeA;;;;;;;;;;;;;;;;AAeA;AAAA;AAAA;EAA+DC,6DAA/D,CAKE;EACA;;;EAEA,mDAAqBC,KAArB,EAA0E;IAA1E,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAqD,CAGxE;EACD;EAED;;;;;EAGAC,kFACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBb,cAAc,CAACU,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,KAAKH,eAAL,CAAqBC,GAArB,CAAyBZ,gBAAgB,CAACS,aAAD,CAAzC;IAEA,IAAMM,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,uBAAnB;IACA,IAAMC,WAAW,GAAG,2CAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAE1B,uCAAuC,CAAC2B,kBAJV;MAKvDC,wBAAwB,EAAE3B,0CAA0C,CAAC0B;IALd,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CA1BD;;EA4BQZ,gEAAR,UACEH,KADF,EAEEuB,OAFF,EAEyB;IAEvB,OAAO7B,6DAA6D,CAACM,KAAD,EAAQuB,OAAR,CAApE;EACD,CALO;;EAOApB,kEAAR,UACEqB,MADF,EAEED,OAFF,EAEyB;IAEvB,OAAO9B,+DAA+D,CAAC+B,MAAD,EAASD,OAAT,CAAtE;EACD,CALO;;EASV;AAAC,CA7DD,CAA+DzB,QAA/D","names":["GetOpenIdTokenForDeveloperIdentityInput","GetOpenIdTokenForDeveloperIdentityResponse","deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand","serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand","getSerdePlugin","getAwsAuthPlugin","Command","$Command","__extends","input","_super","_this","GetOpenIdTokenForDeveloperIdentityCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\client-cognito-identity\\commands\\GetOpenIdTokenForDeveloperIdentityCommand.ts"],"sourcesContent":["import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../CognitoIdentityClient\";\nimport {\n  GetOpenIdTokenForDeveloperIdentityInput,\n  GetOpenIdTokenForDeveloperIdentityResponse,\n} from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand,\n  serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getAwsAuthPlugin } from \"@aws-sdk/middleware-signing\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetOpenIdTokenForDeveloperIdentityCommandInput = GetOpenIdTokenForDeveloperIdentityInput;\nexport type GetOpenIdTokenForDeveloperIdentityCommandOutput = GetOpenIdTokenForDeveloperIdentityResponse &\n  __MetadataBearer;\n\n/**\n * <p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect\n *          token for a user authenticated by your backend authentication process. Supplying multiple\n *          logins will create an implicit linked account. You can only specify one developer provider\n *          as part of the <code>Logins</code> map, which is linked to the identity pool. The developer\n *          provider is the \"domain\" by which Cognito will refer to your users.</p>\n *          <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity\n *          and to link new logins (that is, user credentials issued by a public provider or developer\n *          provider) to an existing identity. When you want to create a new identity, the\n *             <code>IdentityId</code> should be null. When you want to associate a new login with an\n *          existing authenticated/unauthenticated identity, you can do so by providing the existing\n *             <code>IdentityId</code>. This API will create the identity in the specified\n *             <code>IdentityPoolId</code>.</p>\n *          <p>You must use AWS Developer credentials to call this API.</p>\n */\nexport class GetOpenIdTokenForDeveloperIdentityCommand extends $Command<\n  GetOpenIdTokenForDeveloperIdentityCommandInput,\n  GetOpenIdTokenForDeveloperIdentityCommandOutput,\n  CognitoIdentityClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetOpenIdTokenForDeveloperIdentityCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: CognitoIdentityClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetOpenIdTokenForDeveloperIdentityCommandInput, GetOpenIdTokenForDeveloperIdentityCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getAwsAuthPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"CognitoIdentityClient\";\n    const commandName = \"GetOpenIdTokenForDeveloperIdentityCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetOpenIdTokenForDeveloperIdentityInput.filterSensitiveLog,\n      outputFilterSensitiveLog: GetOpenIdTokenForDeveloperIdentityResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(\n    input: GetOpenIdTokenForDeveloperIdentityCommandInput,\n    context: __SerdeContext\n  ): Promise<__HttpRequest> {\n    return serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand(input, context);\n  }\n\n  private deserialize(\n    output: __HttpResponse,\n    context: __SerdeContext\n  ): Promise<GetOpenIdTokenForDeveloperIdentityCommandOutput> {\n    return deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}