{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { validate as validateArn } from \"@aws-sdk/util-arn-parser\";\n/**\n * @internal\n */\n\nexport function validateBucketNameMiddleware() {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var Bucket, err;\n        return __generator(this, function (_a) {\n          Bucket = args.input.Bucket;\n\n          if (typeof Bucket === \"string\" && !validateArn(Bucket) && Bucket.indexOf(\"/\") >= 0) {\n            err = new Error(\"Bucket name shouldn't contain '/', received '\" + Bucket + \"'\");\n            err.name = \"InvalidBucketName\";\n            throw err;\n          }\n\n          return [2\n          /*return*/\n          , next(__assign({}, args))];\n        });\n      });\n    };\n  };\n}\n/**\n * @internal\n */\n\nexport var validateBucketNameMiddlewareOptions = {\n  step: \"initialize\",\n  tags: [\"VALIDATE_BUCKET_NAME\"],\n  name: \"validateBucketNameMiddleware\",\n  override: true\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport var getValidateBucketNamePlugin = function (unused) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":";AASA,SAASA,QAAQ,IAAIC,WAArB,QAAwC,0BAAxC;AAEA;;;;AAGA,OAAM,SAAUC,4BAAV,GAAsC;EAA5C;;EACE,OAAO,UACLC,IADK,EAC+B;IACD,iBACnCC,IADmC,EACE;MAAA;;;UAG1BC,MAAM,GACbD,IAAI,MAAJ,CAAIC,MADG;;UAEX,IAAI,OAAOA,MAAP,KAAkB,QAAlB,IAA8B,CAACJ,WAAW,CAACI,MAAD,CAA1C,IAAsDA,MAAM,CAACC,OAAP,CAAe,GAAf,KAAuB,CAAjF,EAAoF;YAC5EC,GAAG,GAAG,IAAIC,KAAJ,CAAU,kDAAgDH,MAAhD,GAAsD,GAAhE,CAAN;YACNE,GAAG,CAACE,IAAJ,GAAW,mBAAX;YACA,MAAMF,GAAN;UACD;;UACD;UAAA;UAAA,EAAOJ,IAAI,cAAMC,IAAN,EAAX;;OAVqC;IAWtC,CAZoC;EAYpC,CAdD;AAeD;AAED;;;;AAGA,OAAO,IAAMM,mCAAmC,GAA6B;EAC3EC,IAAI,EAAE,YADqE;EAE3EC,IAAI,EAAE,CAAC,sBAAD,CAFqE;EAG3EH,IAAI,EAAE,8BAHqE;EAI3EI,QAAQ,EAAE;AAJiE,CAAtE;AAOP;;;AAGA;;AACA,OAAO,IAAMC,2BAA2B,GAAG,UAACC,MAAD,EAAY;EAA0B,OAAC;IAChFC,YAAY,EAAE,UAACC,WAAD,EAAY;MACxBA,WAAW,CAACC,GAAZ,CAAgBhB,4BAA4B,EAA5C,EAAgDQ,mCAAhD;IACD;EAH+E,CAAD;AAI/E,CAJK","names":["validate","validateArn","validateBucketNameMiddleware","next","args","Bucket","indexOf","err","Error","name","validateBucketNameMiddlewareOptions","step","tags","override","getValidateBucketNamePlugin","unused","applyToStack","clientStack","add"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\middleware-sdk-s3\\src\\validate-bucket-name.ts"],"sourcesContent":["import {\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  InitializeMiddleware,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\nimport { validate as validateArn } from \"@aws-sdk/util-arn-parser\";\n\n/**\n * @internal\n */\nexport function validateBucketNameMiddleware(): InitializeMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: InitializeHandler<any, Output>\n  ): InitializeHandler<any, Output> => async (\n    args: InitializeHandlerArguments<any>\n  ): Promise<InitializeHandlerOutput<Output>> => {\n    const {\n      input: { Bucket },\n    } = args;\n    if (typeof Bucket === \"string\" && !validateArn(Bucket) && Bucket.indexOf(\"/\") >= 0) {\n      const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);\n      err.name = \"InvalidBucketName\";\n      throw err;\n    }\n    return next({ ...args });\n  };\n}\n\n/**\n * @internal\n */\nexport const validateBucketNameMiddlewareOptions: InitializeHandlerOptions = {\n  step: \"initialize\",\n  tags: [\"VALIDATE_BUCKET_NAME\"],\n  name: \"validateBucketNameMiddleware\",\n  override: true,\n};\n\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const getValidateBucketNamePlugin = (unused: any): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}