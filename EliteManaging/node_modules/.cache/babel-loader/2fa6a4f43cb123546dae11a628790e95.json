{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { AWS_CLOUDWATCH_CATEGORY } from '../Util/Constants';\nvar LOG_LEVELS = {\n  VERBOSE: 1,\n  DEBUG: 2,\n  INFO: 3,\n  WARN: 4,\n  ERROR: 5\n};\nexport var LOG_TYPE;\n\n(function (LOG_TYPE) {\n  LOG_TYPE[\"DEBUG\"] = \"DEBUG\";\n  LOG_TYPE[\"ERROR\"] = \"ERROR\";\n  LOG_TYPE[\"INFO\"] = \"INFO\";\n  LOG_TYPE[\"WARN\"] = \"WARN\";\n  LOG_TYPE[\"VERBOSE\"] = \"VERBOSE\";\n})(LOG_TYPE || (LOG_TYPE = {}));\n/**\n * Write logs\n * @class Logger\n */\n\n\nvar ConsoleLogger =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {string} name - Name of the logger\n   */\n  function ConsoleLogger(name, level) {\n    if (level === void 0) {\n      level = LOG_TYPE.WARN;\n    }\n\n    this.name = name;\n    this.level = level;\n    this._pluggables = [];\n  }\n\n  ConsoleLogger.prototype._padding = function (n) {\n    return n < 10 ? '0' + n : '' + n;\n  };\n\n  ConsoleLogger.prototype._ts = function () {\n    var dt = new Date();\n    return [this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(':') + '.' + dt.getMilliseconds();\n  };\n\n  ConsoleLogger.prototype.configure = function (config) {\n    if (!config) return this._config;\n    this._config = config;\n    return this._config;\n  };\n  /**\n   * Write log\n   * @method\n   * @memeberof Logger\n   * @param {LOG_TYPE|string} type - log type, default INFO\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype._log = function (type) {\n    var e_1, _a;\n\n    var msg = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      msg[_i - 1] = arguments[_i];\n    }\n\n    var logger_level_name = this.level;\n\n    if (ConsoleLogger.LOG_LEVEL) {\n      logger_level_name = ConsoleLogger.LOG_LEVEL;\n    }\n\n    if (typeof window !== 'undefined' && window.LOG_LEVEL) {\n      logger_level_name = window.LOG_LEVEL;\n    }\n\n    var logger_level = LOG_LEVELS[logger_level_name];\n    var type_level = LOG_LEVELS[type];\n\n    if (!(type_level >= logger_level)) {\n      // Do nothing if type is not greater than or equal to logger level (handle undefined)\n      return;\n    }\n\n    var log = console.log.bind(console);\n\n    if (type === LOG_TYPE.ERROR && console.error) {\n      log = console.error.bind(console);\n    }\n\n    if (type === LOG_TYPE.WARN && console.warn) {\n      log = console.warn.bind(console);\n    }\n\n    var prefix = \"[\" + type + \"] \" + this._ts() + \" \" + this.name;\n    var message = '';\n\n    if (msg.length === 1 && typeof msg[0] === 'string') {\n      message = prefix + \" - \" + msg[0];\n      log(message);\n    } else if (msg.length === 1) {\n      message = prefix + \" \" + msg[0];\n      log(prefix, msg[0]);\n    } else if (typeof msg[0] === 'string') {\n      var obj = msg.slice(1);\n\n      if (obj.length === 1) {\n        obj = obj[0];\n      }\n\n      message = prefix + \" - \" + msg[0] + \" \" + obj;\n      log(prefix + \" - \" + msg[0], obj);\n    } else {\n      message = prefix + \" \" + msg;\n      log(prefix, msg);\n    }\n\n    try {\n      for (var _b = __values(this._pluggables), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var plugin = _c.value;\n        var logEvent = {\n          message: message,\n          timestamp: Date.now()\n        };\n        plugin.pushLogs([logEvent]);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  /**\n   * Write General log. Default to INFO\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.log = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spread([LOG_TYPE.INFO], msg));\n  };\n  /**\n   * Write INFO log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.info = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spread([LOG_TYPE.INFO], msg));\n  };\n  /**\n   * Write WARN log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.warn = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spread([LOG_TYPE.WARN], msg));\n  };\n  /**\n   * Write ERROR log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.error = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spread([LOG_TYPE.ERROR], msg));\n  };\n  /**\n   * Write DEBUG log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.debug = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spread([LOG_TYPE.DEBUG], msg));\n  };\n  /**\n   * Write VERBOSE log\n   * @method\n   * @memeberof Logger\n   * @param {string|object} msg - Logging message or object\n   */\n\n\n  ConsoleLogger.prototype.verbose = function () {\n    var msg = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      msg[_i] = arguments[_i];\n    }\n\n    this._log.apply(this, __spread([LOG_TYPE.VERBOSE], msg));\n  };\n\n  ConsoleLogger.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {\n      this._pluggables.push(pluggable);\n\n      pluggable.configure(this._config);\n    }\n  };\n\n  ConsoleLogger.prototype.listPluggables = function () {\n    return this._pluggables;\n  };\n\n  ConsoleLogger.LOG_LEVEL = null;\n  return ConsoleLogger;\n}();\n\nexport { ConsoleLogger };","map":{"version":3,"mappings":"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","names":["AWS_CLOUDWATCH_CATEGORY","LOG_LEVELS","VERBOSE","DEBUG","INFO","WARN","ERROR","LOG_TYPE","name","level","_pluggables","ConsoleLogger","n","dt","Date","_padding","getMinutes","getSeconds","join","getMilliseconds","config","_config","type","msg","logger_level_name","LOG_LEVEL","window","logger_level","type_level","log","console","bind","error","warn","prefix","_ts","message","length","obj","slice","_c","plugin","logEvent","timestamp","now","pushLogs","_log","apply","__spread","pluggable","getCategoryName","push","configure"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-amplify\\core\\src\\Logger\\ConsoleLogger.ts"],"sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { InputLogEvent } from '@aws-sdk/client-cloudwatch-logs';\nimport { LoggingProvider } from '../types';\nimport { AWS_CLOUDWATCH_CATEGORY } from '../Util/Constants';\nimport { Logger } from './logger-interface';\n\nconst LOG_LEVELS = {\n\tVERBOSE: 1,\n\tDEBUG: 2,\n\tINFO: 3,\n\tWARN: 4,\n\tERROR: 5,\n};\n\nexport enum LOG_TYPE {\n\tDEBUG = 'DEBUG',\n\tERROR = 'ERROR',\n\tINFO = 'INFO',\n\tWARN = 'WARN',\n\tVERBOSE = 'VERBOSE',\n}\n\n/**\n * Write logs\n * @class Logger\n */\nexport class ConsoleLogger implements Logger {\n\tname: string;\n\tlevel: LOG_TYPE | string;\n\tprivate _pluggables: LoggingProvider[];\n\tprivate _config: object;\n\n\t/**\n\t * @constructor\n\t * @param {string} name - Name of the logger\n\t */\n\tconstructor(name: string, level: LOG_TYPE | string = LOG_TYPE.WARN) {\n\t\tthis.name = name;\n\t\tthis.level = level;\n\t\tthis._pluggables = [];\n\t}\n\n\tstatic LOG_LEVEL = null;\n\n\t_padding(n) {\n\t\treturn n < 10 ? '0' + n : '' + n;\n\t}\n\n\t_ts() {\n\t\tconst dt = new Date();\n\t\treturn (\n\t\t\t[this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(\n\t\t\t\t':'\n\t\t\t) +\n\t\t\t'.' +\n\t\t\tdt.getMilliseconds()\n\t\t);\n\t}\n\n\tconfigure(config?: object) {\n\t\tif (!config) return this._config;\n\n\t\tthis._config = config;\n\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * Write log\n\t * @method\n\t * @memeberof Logger\n\t * @param {LOG_TYPE|string} type - log type, default INFO\n\t * @param {string|object} msg - Logging message or object\n\t */\n\t_log(type: LOG_TYPE | string, ...msg) {\n\t\tlet logger_level_name = this.level;\n\t\tif (ConsoleLogger.LOG_LEVEL) {\n\t\t\tlogger_level_name = ConsoleLogger.LOG_LEVEL;\n\t\t}\n\t\tif (typeof (<any>window) !== 'undefined' && (<any>window).LOG_LEVEL) {\n\t\t\tlogger_level_name = (<any>window).LOG_LEVEL;\n\t\t}\n\t\tconst logger_level = LOG_LEVELS[logger_level_name];\n\t\tconst type_level = LOG_LEVELS[type];\n\t\tif (!(type_level >= logger_level)) {\n\t\t\t// Do nothing if type is not greater than or equal to logger level (handle undefined)\n\t\t\treturn;\n\t\t}\n\n\t\tlet log = console.log.bind(console);\n\t\tif (type === LOG_TYPE.ERROR && console.error) {\n\t\t\tlog = console.error.bind(console);\n\t\t}\n\t\tif (type === LOG_TYPE.WARN && console.warn) {\n\t\t\tlog = console.warn.bind(console);\n\t\t}\n\n\t\tconst prefix = `[${type}] ${this._ts()} ${this.name}`;\n\t\tlet message = '';\n\n\t\tif (msg.length === 1 && typeof msg[0] === 'string') {\n\t\t\tmessage = `${prefix} - ${msg[0]}`;\n\t\t\tlog(message);\n\t\t} else if (msg.length === 1) {\n\t\t\tmessage = `${prefix} ${msg[0]}`;\n\t\t\tlog(prefix, msg[0]);\n\t\t} else if (typeof msg[0] === 'string') {\n\t\t\tlet obj = msg.slice(1);\n\t\t\tif (obj.length === 1) {\n\t\t\t\tobj = obj[0];\n\t\t\t}\n\t\t\tmessage = `${prefix} - ${msg[0]} ${obj}`;\n\t\t\tlog(`${prefix} - ${msg[0]}`, obj);\n\t\t} else {\n\t\t\tmessage = `${prefix} ${msg}`;\n\t\t\tlog(prefix, msg);\n\t\t}\n\n\t\tfor (const plugin of this._pluggables) {\n\t\t\tconst logEvent: InputLogEvent = { message, timestamp: Date.now() };\n\t\t\tplugin.pushLogs([logEvent]);\n\t\t}\n\t}\n\n\t/**\n\t * Write General log. Default to INFO\n\t * @method\n\t * @memeberof Logger\n\t * @param {string|object} msg - Logging message or object\n\t */\n\tlog(...msg) {\n\t\tthis._log(LOG_TYPE.INFO, ...msg);\n\t}\n\n\t/**\n\t * Write INFO log\n\t * @method\n\t * @memeberof Logger\n\t * @param {string|object} msg - Logging message or object\n\t */\n\tinfo(...msg) {\n\t\tthis._log(LOG_TYPE.INFO, ...msg);\n\t}\n\n\t/**\n\t * Write WARN log\n\t * @method\n\t * @memeberof Logger\n\t * @param {string|object} msg - Logging message or object\n\t */\n\twarn(...msg) {\n\t\tthis._log(LOG_TYPE.WARN, ...msg);\n\t}\n\n\t/**\n\t * Write ERROR log\n\t * @method\n\t * @memeberof Logger\n\t * @param {string|object} msg - Logging message or object\n\t */\n\terror(...msg) {\n\t\tthis._log(LOG_TYPE.ERROR, ...msg);\n\t}\n\n\t/**\n\t * Write DEBUG log\n\t * @method\n\t * @memeberof Logger\n\t * @param {string|object} msg - Logging message or object\n\t */\n\tdebug(...msg) {\n\t\tthis._log(LOG_TYPE.DEBUG, ...msg);\n\t}\n\n\t/**\n\t * Write VERBOSE log\n\t * @method\n\t * @memeberof Logger\n\t * @param {string|object} msg - Logging message or object\n\t */\n\tverbose(...msg) {\n\t\tthis._log(LOG_TYPE.VERBOSE, ...msg);\n\t}\n\n\taddPluggable(pluggable: LoggingProvider) {\n\t\tif (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {\n\t\t\tthis._pluggables.push(pluggable);\n\t\t\tpluggable.configure(this._config);\n\t\t}\n\t}\n\n\tlistPluggables() {\n\t\treturn this._pluggables;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}