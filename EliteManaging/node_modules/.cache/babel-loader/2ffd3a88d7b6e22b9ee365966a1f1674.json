{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutLogEventsRequest, PutLogEventsResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1PutLogEventsCommand, serializeAws_json1_1PutLogEventsCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Uploads a batch of log events to the specified log stream.</p>\n *          <p>You must include the sequence token obtained from the response of the previous call. An\n *       upload in a newly created log stream does not require a sequence token. You can also get the\n *       sequence token in the <code>expectedSequenceToken</code> field from\n *         <code>InvalidSequenceTokenException</code>. If you call <code>PutLogEvents</code> twice\n *       within a narrow time period using the same value for <code>sequenceToken</code>, both calls\n *       might be successful or one might be rejected.</p>\n *          <p>The batch of events must satisfy the following constraints:</p>\n *          <ul>\n *             <li>\n *                <p>The maximum batch size is 1,048,576 bytes. This size is calculated as the sum of\n *           all event messages in UTF-8, plus 26 bytes for each log event.</p>\n *             </li>\n *             <li>\n *                <p>None of the log events in the batch can be more than 2 hours in the future.</p>\n *             </li>\n *             <li>\n *                <p>None of the log events in the batch can be older than 14 days or older than the retention\n *           period of the log group.</p>\n *             </li>\n *             <li>\n *                <p>The log events in the batch must be in chronological order by their timestamp. The\n *           timestamp is the time the event occurred, expressed as the number of milliseconds after\n *           Jan 1, 1970 00:00:00 UTC. (In AWS Tools for PowerShell and the AWS SDK for .NET, the\n *           timestamp is specified in .NET format: yyyy-mm-ddThh:mm:ss. For example,\n *           2017-09-15T13:45:30.) </p>\n *             </li>\n *             <li>\n *                <p>A batch of log events in a single request cannot span more than 24 hours. Otherwise, the operation fails.</p>\n *             </li>\n *             <li>\n *                <p>The maximum number of log events in a batch is 10,000.</p>\n *             </li>\n *             <li>\n *                <p>There is a quota of 5 requests per second per log stream. Additional requests are throttled. This quota can't be changed.</p>\n *             </li>\n *          </ul>\n *          <p>If a call to <code>PutLogEvents</code> returns \"UnrecognizedClientException\" the most likely cause is an invalid AWS access key ID or secret key. </p>\n */\n\nvar PutLogEventsCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutLogEventsCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutLogEventsCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutLogEventsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"CloudWatchLogsClient\";\n    var commandName = \"PutLogEventsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutLogEventsRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: PutLogEventsResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutLogEventsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1PutLogEventsCommand(input, context);\n  };\n\n  PutLogEventsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1PutLogEventsCommand(output, context);\n  };\n\n  return PutLogEventsCommand;\n}($Command);\n\nexport { PutLogEventsCommand };","map":{"version":3,"mappings":";AACA,SAASA,mBAAT,EAA8BC,oBAA9B,QAA0D,oBAA1D;AACA,SACEC,yCADF,EAEEC,uCAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;AAAA;AAAA;EAAyCC,uCAAzC,CAKE;EACA;;;EAEA,6BAAqBC,KAArB,EAAoD;IAApD,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAA+B,CAGlD;EACD;EAED;;;;;EAGAC,4DACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,sBAAnB;IACA,IAAMC,WAAW,GAAG,qBAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,mBAAmB,CAAC0B,kBAJU;MAKvDC,wBAAwB,EAAE1B,oBAAoB,CAACyB;IALQ,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,0CAAR,UAAkBH,KAAlB,EAAmDuB,OAAnD,EAA0E;IACxE,OAAO5B,uCAAuC,CAACK,KAAD,EAAQuB,OAAR,CAA9C;EACD,CAFO;;EAIApB,4CAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO7B,yCAAyC,CAAC8B,MAAD,EAASD,OAAT,CAAhD;EACD,CAFO;;EAMV;AAAC,CAtDD,CAAyCzB,QAAzC","names":["PutLogEventsRequest","PutLogEventsResponse","deserializeAws_json1_1PutLogEventsCommand","serializeAws_json1_1PutLogEventsCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","PutLogEventsCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\client-cloudwatch-logs\\commands\\PutLogEventsCommand.ts"],"sourcesContent":["import { CloudWatchLogsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../CloudWatchLogsClient\";\nimport { PutLogEventsRequest, PutLogEventsResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1PutLogEventsCommand,\n  serializeAws_json1_1PutLogEventsCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type PutLogEventsCommandInput = PutLogEventsRequest;\nexport type PutLogEventsCommandOutput = PutLogEventsResponse & __MetadataBearer;\n\n/**\n * <p>Uploads a batch of log events to the specified log stream.</p>\n *          <p>You must include the sequence token obtained from the response of the previous call. An\n *       upload in a newly created log stream does not require a sequence token. You can also get the\n *       sequence token in the <code>expectedSequenceToken</code> field from\n *         <code>InvalidSequenceTokenException</code>. If you call <code>PutLogEvents</code> twice\n *       within a narrow time period using the same value for <code>sequenceToken</code>, both calls\n *       might be successful or one might be rejected.</p>\n *          <p>The batch of events must satisfy the following constraints:</p>\n *          <ul>\n *             <li>\n *                <p>The maximum batch size is 1,048,576 bytes. This size is calculated as the sum of\n *           all event messages in UTF-8, plus 26 bytes for each log event.</p>\n *             </li>\n *             <li>\n *                <p>None of the log events in the batch can be more than 2 hours in the future.</p>\n *             </li>\n *             <li>\n *                <p>None of the log events in the batch can be older than 14 days or older than the retention\n *           period of the log group.</p>\n *             </li>\n *             <li>\n *                <p>The log events in the batch must be in chronological order by their timestamp. The\n *           timestamp is the time the event occurred, expressed as the number of milliseconds after\n *           Jan 1, 1970 00:00:00 UTC. (In AWS Tools for PowerShell and the AWS SDK for .NET, the\n *           timestamp is specified in .NET format: yyyy-mm-ddThh:mm:ss. For example,\n *           2017-09-15T13:45:30.) </p>\n *             </li>\n *             <li>\n *                <p>A batch of log events in a single request cannot span more than 24 hours. Otherwise, the operation fails.</p>\n *             </li>\n *             <li>\n *                <p>The maximum number of log events in a batch is 10,000.</p>\n *             </li>\n *             <li>\n *                <p>There is a quota of 5 requests per second per log stream. Additional requests are throttled. This quota can't be changed.</p>\n *             </li>\n *          </ul>\n *          <p>If a call to <code>PutLogEvents</code> returns \"UnrecognizedClientException\" the most likely cause is an invalid AWS access key ID or secret key. </p>\n */\nexport class PutLogEventsCommand extends $Command<\n  PutLogEventsCommandInput,\n  PutLogEventsCommandOutput,\n  CloudWatchLogsClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: PutLogEventsCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: CloudWatchLogsClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<PutLogEventsCommandInput, PutLogEventsCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"CloudWatchLogsClient\";\n    const commandName = \"PutLogEventsCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: PutLogEventsRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: PutLogEventsResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: PutLogEventsCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1PutLogEventsCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<PutLogEventsCommandOutput> {\n    return deserializeAws_json1_1PutLogEventsCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}