{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport function resolveHostHeaderConfig(input) {\n  return input;\n}\nexport var hostHeaderMiddleware = function (options) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var request, _a, handlerProtocol;\n\n        return __generator(this, function (_b) {\n          if (!HttpRequest.isInstance(args.request)) return [2\n          /*return*/\n          , next(args)];\n          request = args.request;\n          _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? \"\" : _a; //For H2 request, remove 'host' header and use ':authority' header instead\n          //reference: https://nodejs.org/dist/latest-v13.x/docs/api/errors.html#ERR_HTTP2_INVALID_CONNECTION_HEADERS\n\n          if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n            delete request.headers[\"host\"];\n            request.headers[\":authority\"] = \"\"; //non-H2 request and 'host' header is not set, set the 'host' header to request's hostname.\n          } else if (!request.headers[\"host\"]) {\n            request.headers[\"host\"] = request.hostname;\n          }\n\n          return [2\n          /*return*/\n          , next(args)];\n        });\n      });\n    };\n  };\n};\nexport var hostHeaderMiddlewareOptions = {\n  name: \"hostHeaderMiddleware\",\n  step: \"build\",\n  priority: \"low\",\n  tags: [\"HOST\"],\n  override: true\n};\nexport var getHostHeaderPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,WAAT,QAA4B,wBAA5B;AAUA,OAAM,SAAUC,uBAAV,CACJC,KADI,EACiD;EAErD,OAAOA,KAAP;AACD;AAED,OAAO,IAAMC,oBAAoB,GAAG,UAClCC,OADkC,EACD;EACE,iBAACC,IAAD,EAAK;IAAK,iBAAOC,IAAP,EAAW;MAAA;;;;UACxD,IAAI,CAACN,WAAW,CAACO,UAAZ,CAAuBD,IAAI,CAACE,OAA5B,CAAL,EAA2C;UAAA;UAAA,EAAOH,IAAI,CAACC,IAAD,CAAX;UACnCE,OAAO,GAAKF,IAAI,QAAhB;UACAG,KAAyB,QAAO,CAACC,cAAR,CAAuBC,QAAvB,IAAmC,EAAnC,EAAqCC,eAA9D,iBAAe,mBAAG,EAAH,GAAKH,EAApB,EACR;UACA;;UACA,IAAIG,eAAe,CAACC,OAAhB,CAAwB,IAAxB,KAAiC,CAAjC,IAAsC,CAACL,OAAO,CAACM,OAAR,CAAgB,YAAhB,CAA3C,EAA0E;YACxE,OAAON,OAAO,CAACM,OAAR,CAAgB,MAAhB,CAAP;YACAN,OAAO,CAACM,OAAR,CAAgB,YAAhB,IAAgC,EAAhC,CAFwE,CAGxE;UACD,CAJD,MAIO,IAAI,CAACN,OAAO,CAACM,OAAR,CAAgB,MAAhB,CAAL,EAA8B;YACnCN,OAAO,CAACM,OAAR,CAAgB,MAAhB,IAA0BN,OAAO,CAACO,QAAlC;UACD;;UACD;UAAA;UAAA,EAAOV,IAAI,CAACC,IAAD,CAAX;;OAbwD;IAczD,CAd8C;EAc9C,CAdoC;AAcpC,CAhBM;AAkBP,OAAO,IAAMU,2BAA2B,GAA2C;EACjFC,IAAI,EAAE,sBAD2E;EAEjFC,IAAI,EAAE,OAF2E;EAGjFC,QAAQ,EAAE,KAHuE;EAIjFC,IAAI,EAAE,CAAC,MAAD,CAJ2E;EAKjFC,QAAQ,EAAE;AALuE,CAA5E;AAQP,OAAO,IAAMC,mBAAmB,GAAG,UAAClB,OAAD,EAAkC;EAA0B,OAAC;IAC9FmB,YAAY,EAAE,UAACC,WAAD,EAAY;MACxBA,WAAW,CAACC,GAAZ,CAAgBtB,oBAAoB,CAACC,OAAD,CAApC,EAA+CY,2BAA/C;IACD;EAH6F,CAAD;AAI7F,CAJK","names":["HttpRequest","resolveHostHeaderConfig","input","hostHeaderMiddleware","options","next","args","isInstance","request","_a","requestHandler","metadata","handlerProtocol","indexOf","headers","hostname","hostHeaderMiddlewareOptions","name","step","priority","tags","override","getHostHeaderPlugin","applyToStack","clientStack","add"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\middleware-host-header\\src\\index.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { AbsoluteLocation, BuildHandlerOptions, BuildMiddleware, Pluggable, RequestHandler } from \"@aws-sdk/types\";\n\nexport interface HostHeaderInputConfig {}\ninterface PreviouslyResolved {\n  requestHandler: RequestHandler<any, any>;\n}\nexport interface HostHeaderResolvedConfig {\n  requestHandler: RequestHandler<any, any>;\n}\nexport function resolveHostHeaderConfig<T>(\n  input: T & PreviouslyResolved & HostHeaderInputConfig\n): T & HostHeaderResolvedConfig {\n  return input;\n}\n\nexport const hostHeaderMiddleware = <Input extends object, Output extends object>(\n  options: HostHeaderResolvedConfig\n): BuildMiddleware<Input, Output> => (next) => async (args) => {\n  if (!HttpRequest.isInstance(args.request)) return next(args);\n  const { request } = args;\n  const { handlerProtocol = \"\" } = options.requestHandler.metadata || {};\n  //For H2 request, remove 'host' header and use ':authority' header instead\n  //reference: https://nodejs.org/dist/latest-v13.x/docs/api/errors.html#ERR_HTTP2_INVALID_CONNECTION_HEADERS\n  if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n    delete request.headers[\"host\"];\n    request.headers[\":authority\"] = \"\";\n    //non-H2 request and 'host' header is not set, set the 'host' header to request's hostname.\n  } else if (!request.headers[\"host\"]) {\n    request.headers[\"host\"] = request.hostname;\n  }\n  return next(args);\n};\n\nexport const hostHeaderMiddlewareOptions: BuildHandlerOptions & AbsoluteLocation = {\n  name: \"hostHeaderMiddleware\",\n  step: \"build\",\n  priority: \"low\",\n  tags: [\"HOST\"],\n  override: true,\n};\n\nexport const getHostHeaderPlugin = (options: HostHeaderResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}