{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar InMemoryStore =\n/** @class */\nfunction () {\n  function InMemoryStore() {\n    var _this = this;\n\n    this.db = new Map();\n\n    this.getAllKeys = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , Array.from(this.db.keys())];\n        });\n      });\n    };\n\n    this.multiGet = function (keys) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , keys.reduce(function (res, k) {\n            return res.push([k, _this.db.get(k)]), res;\n          }, [])];\n        });\n      });\n    };\n\n    this.multiRemove = function (keys, callback) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          keys.forEach(function (k) {\n            return _this.db.delete(k);\n          });\n          typeof callback === 'function' && callback();\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    };\n\n    this.multiSet = function (entries, callback) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          entries.forEach(function (_a) {\n            var _b = __read(_a, 2),\n                key = _b[0],\n                value = _b[1];\n\n            _this.setItem(key, value);\n          });\n          typeof callback === 'function' && callback();\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    };\n\n    this.setItem = function (key, value) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , this.db.set(key, value)];\n        });\n      });\n    };\n\n    this.removeItem = function (key) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , this.db.delete(key)];\n        });\n      });\n    };\n\n    this.getItem = function (key) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , this.db.get(key)];\n        });\n      });\n    };\n  }\n\n  return InMemoryStore;\n}();\n\nexport { InMemoryStore };\nexport function createInMemoryStore() {\n  return new InMemoryStore();\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;EAAA;IAAA;;IACC,UAAK,IAAIA,GAAJ,EAAL;;IAEA,kBAAa;MAAA;;UACZ;UAAA;UAAA,EAAOC,KAAK,CAACC,IAAN,CAAW,KAAKC,EAAL,CAAQC,IAAR,EAAX,CAAP;;OADY;IAEZ,CAFD;;IAIA,gBAAW,UAAOA,IAAP,EAAqB;MAAA;;;;UAC/B;UAAA;UAAA,EAAOA,IAAI,CAACC,MAAL,CAAY,UAACC,GAAD,EAAMC,CAAN,EAAO;YAAK,OAACD,GAAG,CAACE,IAAJ,CAAS,CAACD,CAAD,EAAIE,KAAI,CAACN,EAAL,CAAQO,GAAR,CAAYH,CAAZ,CAAJ,CAAT,GAA+BD,GAAhC;UAAoC,CAA5D,EAA8D,EAA9D,CAAP;;OAD+B;IAE/B,CAFD;;IAIA,mBAAc,UAAOF,IAAP,EAAuBO,QAAvB,EAAgC;MAAA;;;;UAC7CP,IAAI,CAACQ,OAAL,CAAa,aAAC;YAAI,YAAI,CAACT,EAAL,CAAQU,MAAR,CAAeN,CAAf;UAAiB,CAAnC;UAEA,OAAOI,QAAP,KAAoB,UAApB,IAAkCA,QAAQ,EAA1C;;;;;OAH6C;IAI7C,CAJD;;IAMA,gBAAW,UAAOG,OAAP,EAA4BH,QAA5B,EAAqC;MAAA;;;;UAC/CG,OAAO,CAACF,OAAR,CAAgB,UAACG,EAAD,EAAa;gBAAZC;gBAACC;gBAAKC;;YACtBT,KAAI,CAACU,OAAL,CAAaF,GAAb,EAAkBC,KAAlB;UACA,CAFD;UAIA,OAAOP,QAAP,KAAoB,UAApB,IAAkCA,QAAQ,EAA1C;;;;;OAL+C;IAM/C,CAND;;IAQA,eAAU,UAAOM,GAAP,EAAoBC,KAApB,EAAiC;MAAA;;UAC1C;UAAA;UAAA,EAAO,KAAKf,EAAL,CAAQiB,GAAR,CAAYH,GAAZ,EAAiBC,KAAjB,CAAP;;OAD0C;IAE1C,CAFD;;IAIA,kBAAa,UAAOD,GAAP,EAAkB;MAAA;;UAC9B;UAAA;UAAA,EAAO,KAAKd,EAAL,CAAQU,MAAR,CAAeI,GAAf,CAAP;;OAD8B;IAE9B,CAFD;;IAIA,eAAU,UAAOA,GAAP,EAAkB;MAAA;;UAC3B;UAAA;UAAA,EAAO,KAAKd,EAAL,CAAQO,GAAR,CAAYO,GAAZ,CAAP;;OAD2B;IAE3B,CAFD;EAGA;;EAAD;AAAC,CApCD;;;AAsCA,OAAM,SAAUI,mBAAV,GAA6B;EAClC,OAAO,IAAIC,aAAJ,EAAP;AACA","names":["Map","Array","from","db","keys","reduce","res","k","push","_this","get","callback","forEach","delete","entries","_a","_b","key","value","setItem","set","createInMemoryStore","InMemoryStore"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-amplify\\datastore\\src\\storage\\adapter\\InMemoryStore.ts"],"sourcesContent":["export class InMemoryStore {\n\tdb = new Map<string, string>();\n\n\tgetAllKeys = async () => {\n\t\treturn Array.from(this.db.keys());\n\t};\n\n\tmultiGet = async (keys: string[]) => {\n\t\treturn keys.reduce((res, k) => (res.push([k, this.db.get(k)]), res), []);\n\t};\n\n\tmultiRemove = async (keys: string[], callback?) => {\n\t\tkeys.forEach(k => this.db.delete(k));\n\n\t\ttypeof callback === 'function' && callback();\n\t};\n\n\tmultiSet = async (entries: string[][], callback?) => {\n\t\tentries.forEach(([key, value]) => {\n\t\t\tthis.setItem(key, value);\n\t\t});\n\n\t\ttypeof callback === 'function' && callback();\n\t};\n\n\tsetItem = async (key: string, value: string) => {\n\t\treturn this.db.set(key, value);\n\t};\n\n\tremoveItem = async (key: string) => {\n\t\treturn this.db.delete(key);\n\t};\n\n\tgetItem = async (key: string) => {\n\t\treturn this.db.get(key);\n\t};\n}\n\nexport function createInMemoryStore() {\n\treturn new InMemoryStore();\n}\n"]},"metadata":{},"sourceType":"module"}