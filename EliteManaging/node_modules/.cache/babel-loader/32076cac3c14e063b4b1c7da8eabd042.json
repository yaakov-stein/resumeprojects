{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HeadBucketCommand } from \"../commands/HeadBucketCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nvar checkState = function (client, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var result, exception_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , client.send(new HeadBucketCommand(input))];\n\n        case 1:\n          result = _a.sent();\n          return [2\n          /*return*/\n          , {\n            state: WaiterState.SUCCESS\n          }];\n\n        case 2:\n          exception_1 = _a.sent();\n          return [3\n          /*break*/\n          , 3];\n\n        case 3:\n          return [2\n          /*return*/\n          , {\n            state: WaiterState.RETRY\n          }];\n      }\n    });\n  });\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to HeadBucketCommand for polling.\n */\n\n\nexport var waitForBucketExists = function (params, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n      serviceDefaults = {\n        minDelay: 5,\n        maxDelay: 120\n      };\n      return [2\n      /*return*/\n      , createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n  });\n};","map":{"version":3,"mappings":";AACA,SAASA,iBAAT,QAA0D,+BAA1D;AACA,SAA4CC,WAA5C,EAAyDC,YAAzD,QAA6E,sBAA7E;;AAEA,IAAMC,UAAU,GAAG,UAAOC,MAAP,EAAyBC,KAAzB,EAAsD;EAAA;;;;;;;UAEnD;UAAA;UAAA,EAAMD,MAAM,CAACE,IAAP,CAAY,IAAIN,iBAAJ,CAAsBK,KAAtB,CAAZ,CAAN;;;UAAdE,MAAM,GAAQC,SAAd;UACJ;UAAA;UAAA,EAAO;YAAEC,KAAK,EAAER,WAAW,CAACS;UAArB,CAAP;;;;;;;;;UAEF;UAAA;UAAA,EAAO;YAAED,KAAK,EAAER,WAAW,CAACU;UAArB,CAAP;;;GALuE;AAMxE,CAND;AAOA;;;;;;;AAKA,OAAO,IAAMC,mBAAmB,GAAG,UACjCC,MADiC,EAEjCR,KAFiC,EAEJ;EAAA;;;MAEvBS,eAAe,GAAG;QAAEC,QAAQ,EAAE,CAAZ;QAAeC,QAAQ,EAAE;MAAzB,CAAlB;MACN;MAAA;MAAA,EAAOd,YAAY,uBAAMY,eAAN,GAA0BD,MAA1B,GAAoCR,KAApC,EAA2CF,UAA3C,CAAnB;;GAH6B;AAI9B,CANM","names":["HeadBucketCommand","WaiterState","createWaiter","checkState","client","input","send","result","_a","state","SUCCESS","RETRY","waitForBucketExists","params","serviceDefaults","minDelay","maxDelay"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\client-s3\\waiters\\waitForBucketExists.ts"],"sourcesContent":["import { S3Client } from \"../S3Client\";\nimport { HeadBucketCommand, HeadBucketCommandInput } from \"../commands/HeadBucketCommand\";\nimport { WaiterConfiguration, WaiterResult, WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nconst checkState = async (client: S3Client, input: HeadBucketCommandInput): Promise<WaiterResult> => {\n  try {\n    let result: any = await client.send(new HeadBucketCommand(input));\n    return { state: WaiterState.SUCCESS };\n  } catch (exception) {}\n  return { state: WaiterState.RETRY };\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to HeadBucketCommand for polling.\n */\nexport const waitForBucketExists = async (\n  params: WaiterConfiguration<S3Client>,\n  input: HeadBucketCommandInput\n): Promise<WaiterResult> => {\n  const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n  return createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n};\n"]},"metadata":{},"sourceType":"module"}