{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread, __values } from \"tslib\";\nimport { DescribeProjectVersionsCommand } from \"../commands/DescribeProjectVersionsCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nvar checkState = function (client, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var result_1, returnComparator, allStringEq_5, _a, _b, element_4, returnComparator, _c, _d, anyStringEq_4, exception_1;\n\n    var e_1, _e, e_2, _f;\n\n    return __generator(this, function (_g) {\n      switch (_g.label) {\n        case 0:\n          _g.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , client.send(new DescribeProjectVersionsCommand(input))];\n\n        case 1:\n          result_1 = _g.sent();\n\n          try {\n            returnComparator = function () {\n              var flat_1 = [].concat.apply([], __spread(result_1.ProjectVersionDescriptions));\n              var projection_3 = flat_1.map(function (element_2) {\n                return element_2.Status;\n              });\n              return projection_3;\n            };\n\n            allStringEq_5 = returnComparator().length > 0;\n\n            try {\n              for (_a = __values(returnComparator()), _b = _a.next(); !_b.done; _b = _a.next()) {\n                element_4 = _b.value;\n                allStringEq_5 = allStringEq_5 && element_4 == \"RUNNING\";\n              }\n            } catch (e_1_1) {\n              e_1 = {\n                error: e_1_1\n              };\n            } finally {\n              try {\n                if (_b && !_b.done && (_e = _a.return)) _e.call(_a);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n            }\n\n            if (allStringEq_5) {\n              return [2\n              /*return*/\n              , {\n                state: WaiterState.SUCCESS\n              }];\n            }\n          } catch (e) {}\n\n          try {\n            returnComparator = function () {\n              var flat_1 = [].concat.apply([], __spread(result_1.ProjectVersionDescriptions));\n              var projection_3 = flat_1.map(function (element_2) {\n                return element_2.Status;\n              });\n              return projection_3;\n            };\n\n            try {\n              for (_c = __values(returnComparator()), _d = _c.next(); !_d.done; _d = _c.next()) {\n                anyStringEq_4 = _d.value;\n\n                if (anyStringEq_4 == \"FAILED\") {\n                  return [2\n                  /*return*/\n                  , {\n                    state: WaiterState.FAILURE\n                  }];\n                }\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (_d && !_d.done && (_f = _c.return)) _f.call(_c);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n          } catch (e) {}\n\n          return [3\n          /*break*/\n          , 3];\n\n        case 2:\n          exception_1 = _g.sent();\n          return [3\n          /*break*/\n          , 3];\n\n        case 3:\n          return [2\n          /*return*/\n          , {\n            state: WaiterState.RETRY\n          }];\n      }\n    });\n  });\n};\n/**\n * Wait until the ProjectVersion is running.\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeProjectVersionsCommand for polling.\n */\n\n\nexport var waitForProjectVersionRunning = function (params, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n      serviceDefaults = {\n        minDelay: 30,\n        maxDelay: 120\n      };\n      return [2\n      /*return*/\n      , createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n  });\n};","map":{"version":3,"mappings":";AACA,SACEA,8BADF,QAGO,4CAHP;AAIA,SAA4CC,WAA5C,EAAyDC,YAAzD,QAA6E,sBAA7E;;AAEA,IAAMC,UAAU,GAAG,UACjBC,MADiB,EAEjBC,KAFiB,EAEyB;EAAA;;;;;;;;;;UAGtB;UAAA;UAAA,EAAMD,MAAM,CAACE,IAAP,CAAY,IAAIN,8BAAJ,CAAmCK,KAAnC,CAAZ,CAAN;;;UAAdE,WAAcC,SAAd;;UACJ,IAAI;YACEC,gBAAgB,GAAG;cACrB,IAAIC,MAAM,GAAU,GAAGC,MAAH,CAASC,KAAT,KAAEC,SAAWN,QAAM,CAACO,0BAAlB,CAAF,CAApB;cACA,IAAIC,YAAY,GAAGL,MAAM,CAACM,GAAP,CAAW,UAACC,SAAD,EAAe;gBAC3C,OAAOA,SAAS,CAACC,MAAjB;cACD,CAFkB,CAAnB;cAGA,OAAOH,YAAP;YACD,CANG;;YAOAI,aAAa,GAAGV,gBAAgB,GAAGW,MAAnB,GAA4B,CAA5C;;;cACJ,KAAsBC,8BAAgB,EAAhB,GAAkBC,cAAxC,EAAwC,QAAxC,EAAwCA,cAAxC,EAA0C;gBAAjCC,SAAS,WAAT;gBACPJ,aAAa,GAAGA,aAAa,IAAII,SAAS,IAAI,SAA9C;cACD;;;;;;;;;;;;;YACD,IAAIJ,aAAJ,EAAmB;cACjB;cAAA;cAAA,EAAO;gBAAEK,KAAK,EAAEvB,WAAW,CAACwB;cAArB,CAAP;YACD;UACF,CAfD,CAeE,OAAOC,CAAP,EAAU,CAAE;;UACd,IAAI;YACEjB,gBAAgB,GAAG;cACrB,IAAIC,MAAM,GAAU,GAAGC,MAAH,CAASC,KAAT,KAAEC,SAAWN,QAAM,CAACO,0BAAlB,CAAF,CAApB;cACA,IAAIC,YAAY,GAAGL,MAAM,CAACM,GAAP,CAAW,UAACC,SAAD,EAAe;gBAC3C,OAAOA,SAAS,CAACC,MAAjB;cACD,CAFkB,CAAnB;cAGA,OAAOH,YAAP;YACD,CANG;;;cAOJ,KAA0BY,8BAAgB,EAAhB,GAAkBC,cAA5C,EAA4C,QAA5C,EAA4CA,cAA5C,EAA8C;gBAArCC,aAAa,WAAb;;gBACP,IAAIA,aAAa,IAAI,QAArB,EAA+B;kBAC7B;kBAAA;kBAAA,EAAO;oBAAEL,KAAK,EAAEvB,WAAW,CAAC6B;kBAArB,CAAP;gBACD;cACF;;;;;;;;;;;;UACF,CAbD,CAaE,OAAOJ,CAAP,EAAU,CAAE;;;;;;;;;;;;;UAEhB;UAAA;UAAA,EAAO;YAAEF,KAAK,EAAEvB,WAAW,CAAC8B;UAArB,CAAP;;;GAnC0C;AAoC3C,CAtCD;AAuCA;;;;;;;AAKA,OAAO,IAAMC,4BAA4B,GAAG,UAC1CC,MAD0C,EAE1C5B,KAF0C,EAEA;EAAA;;;MAEpC6B,eAAe,GAAG;QAAEC,QAAQ,EAAE,EAAZ;QAAgBC,QAAQ,EAAE;MAA1B,CAAlB;MACN;MAAA;MAAA,EAAOlC,YAAY,uBAAMgC,eAAN,GAA0BD,MAA1B,GAAoC5B,KAApC,EAA2CF,UAA3C,CAAnB;;GAH0C;AAI3C,CANM","names":["DescribeProjectVersionsCommand","WaiterState","createWaiter","checkState","client","input","send","result_1","_g","returnComparator","flat_1","concat","apply","__spread","ProjectVersionDescriptions","projection_3","map","element_2","Status","allStringEq_5","length","_a","_b","element_4","state","SUCCESS","e","_c","_d","anyStringEq_4","FAILURE","RETRY","waitForProjectVersionRunning","params","serviceDefaults","minDelay","maxDelay"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-rekognition\\waiters\\waitForProjectVersionRunning.ts"],"sourcesContent":["import { RekognitionClient } from \"../RekognitionClient\";\nimport {\n  DescribeProjectVersionsCommand,\n  DescribeProjectVersionsCommandInput,\n} from \"../commands/DescribeProjectVersionsCommand\";\nimport { WaiterConfiguration, WaiterResult, WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nconst checkState = async (\n  client: RekognitionClient,\n  input: DescribeProjectVersionsCommandInput\n): Promise<WaiterResult> => {\n  try {\n    let result: any = await client.send(new DescribeProjectVersionsCommand(input));\n    try {\n      let returnComparator = () => {\n        let flat_1: any[] = [].concat(...result.ProjectVersionDescriptions);\n        let projection_3 = flat_1.map((element_2: any) => {\n          return element_2.Status;\n        });\n        return projection_3;\n      };\n      let allStringEq_5 = returnComparator().length > 0;\n      for (let element_4 of returnComparator()) {\n        allStringEq_5 = allStringEq_5 && element_4 == \"RUNNING\";\n      }\n      if (allStringEq_5) {\n        return { state: WaiterState.SUCCESS };\n      }\n    } catch (e) {}\n    try {\n      let returnComparator = () => {\n        let flat_1: any[] = [].concat(...result.ProjectVersionDescriptions);\n        let projection_3 = flat_1.map((element_2: any) => {\n          return element_2.Status;\n        });\n        return projection_3;\n      };\n      for (let anyStringEq_4 of returnComparator()) {\n        if (anyStringEq_4 == \"FAILED\") {\n          return { state: WaiterState.FAILURE };\n        }\n      }\n    } catch (e) {}\n  } catch (exception) {}\n  return { state: WaiterState.RETRY };\n};\n/**\n * Wait until the ProjectVersion is running.\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeProjectVersionsCommand for polling.\n */\nexport const waitForProjectVersionRunning = async (\n  params: WaiterConfiguration<RekognitionClient>,\n  input: DescribeProjectVersionsCommandInput\n): Promise<WaiterResult> => {\n  const serviceDefaults = { minDelay: 30, maxDelay: 120 };\n  return createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n};\n"]},"metadata":{},"sourceType":"module"}