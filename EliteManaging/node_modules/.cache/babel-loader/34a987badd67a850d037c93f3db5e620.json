{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutSubscriptionFilterRequest } from \"../models/models_0\";\nimport { deserializeAws_json1_1PutSubscriptionFilterCommand, serializeAws_json1_1PutSubscriptionFilterCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Creates or updates a subscription filter and associates it with the specified log\n *       group. Subscription filters allow you to subscribe to a real-time stream of log events\n *       ingested through <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\">PutLogEvents</a> and have them delivered to a specific\n *       destination. When log events are sent to the\n *       receiving service, they are Base64 encoded\n *       and compressed with the gzip format.</p>\n *          <p>The following destinations are supported for subscription filters:</p>\n *          <ul>\n *             <li>\n *                <p>An Amazon Kinesis stream belonging to the same account as the subscription filter,\n *           for same-account delivery.</p>\n *             </li>\n *             <li>\n *                <p>A logical destination that belongs to a different account, for cross-account delivery.</p>\n *             </li>\n *             <li>\n *                <p>An Amazon Kinesis Firehose delivery stream that belongs to the same account as the\n *           subscription filter, for same-account delivery.</p>\n *             </li>\n *             <li>\n *                <p>An AWS Lambda function that belongs to the same account as the subscription filter,\n *           for same-account delivery.</p>\n *             </li>\n *          </ul>\n *          <p>There can only be one subscription filter associated with a log group. If you are\n *       updating an existing filter, you must specify the correct name in <code>filterName</code>.\n *       Otherwise, the call fails because you cannot associate a second filter with a log\n *       group.</p>\n *          <p>To perform a <code>PutSubscriptionFilter</code> operation, you must also have the\n *       <code>iam:PassRole</code> permission.</p>\n */\n\nvar PutSubscriptionFilterCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutSubscriptionFilterCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutSubscriptionFilterCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutSubscriptionFilterCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"CloudWatchLogsClient\";\n    var commandName = \"PutSubscriptionFilterCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutSubscriptionFilterRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutSubscriptionFilterCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1PutSubscriptionFilterCommand(input, context);\n  };\n\n  PutSubscriptionFilterCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1PutSubscriptionFilterCommand(output, context);\n  };\n\n  return PutSubscriptionFilterCommand;\n}($Command);\n\nexport { PutSubscriptionFilterCommand };","map":{"version":3,"mappings":";AACA,SAASA,4BAAT,QAA6C,oBAA7C;AACA,SACEC,kDADF,EAEEC,gDAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AAAA;AAAA;EAAkDC,gDAAlD,CAKE;EACA;;;EAEA,sCAAqBC,KAArB,EAA6D;IAA7D,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAwC,CAG3D;EACD;EAED;;;;;EAGAC,qEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,sBAAnB;IACA,IAAMC,WAAW,GAAG,8BAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAExB,4BAA4B,CAACyB,kBAJC;MAKvDC,wBAAwB,EAAE,UAACC,MAAD,EAAY;QAAK;MAAM;IALM,CAAzD;IAOQ,kBAAc,GAAKf,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACU,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDhB,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,mDAAR,UAAkBH,KAAlB,EAA4DwB,OAA5D,EAAmF;IACjF,OAAO7B,gDAAgD,CAACK,KAAD,EAAQwB,OAAR,CAAvD;EACD,CAFO;;EAIArB,qDAAR,UAAoBiB,MAApB,EAA4CI,OAA5C,EAAmE;IACjE,OAAO9B,kDAAkD,CAAC0B,MAAD,EAASI,OAAT,CAAzD;EACD,CAFO;;EAMV;AAAC,CAtDD,CAAkD1B,QAAlD","names":["PutSubscriptionFilterRequest","deserializeAws_json1_1PutSubscriptionFilterCommand","serializeAws_json1_1PutSubscriptionFilterCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","PutSubscriptionFilterCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","resolve","request","handle","context"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-cloudwatch-logs\\commands\\PutSubscriptionFilterCommand.ts"],"sourcesContent":["import { CloudWatchLogsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../CloudWatchLogsClient\";\nimport { PutSubscriptionFilterRequest } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1PutSubscriptionFilterCommand,\n  serializeAws_json1_1PutSubscriptionFilterCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type PutSubscriptionFilterCommandInput = PutSubscriptionFilterRequest;\nexport type PutSubscriptionFilterCommandOutput = __MetadataBearer;\n\n/**\n * <p>Creates or updates a subscription filter and associates it with the specified log\n *       group. Subscription filters allow you to subscribe to a real-time stream of log events\n *       ingested through <a href=\"https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\">PutLogEvents</a> and have them delivered to a specific\n *       destination. When log events are sent to the\n *       receiving service, they are Base64 encoded\n *       and compressed with the gzip format.</p>\n *          <p>The following destinations are supported for subscription filters:</p>\n *          <ul>\n *             <li>\n *                <p>An Amazon Kinesis stream belonging to the same account as the subscription filter,\n *           for same-account delivery.</p>\n *             </li>\n *             <li>\n *                <p>A logical destination that belongs to a different account, for cross-account delivery.</p>\n *             </li>\n *             <li>\n *                <p>An Amazon Kinesis Firehose delivery stream that belongs to the same account as the\n *           subscription filter, for same-account delivery.</p>\n *             </li>\n *             <li>\n *                <p>An AWS Lambda function that belongs to the same account as the subscription filter,\n *           for same-account delivery.</p>\n *             </li>\n *          </ul>\n *          <p>There can only be one subscription filter associated with a log group. If you are\n *       updating an existing filter, you must specify the correct name in <code>filterName</code>.\n *       Otherwise, the call fails because you cannot associate a second filter with a log\n *       group.</p>\n *          <p>To perform a <code>PutSubscriptionFilter</code> operation, you must also have the\n *       <code>iam:PassRole</code> permission.</p>\n */\nexport class PutSubscriptionFilterCommand extends $Command<\n  PutSubscriptionFilterCommandInput,\n  PutSubscriptionFilterCommandOutput,\n  CloudWatchLogsClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: PutSubscriptionFilterCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: CloudWatchLogsClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<PutSubscriptionFilterCommandInput, PutSubscriptionFilterCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"CloudWatchLogsClient\";\n    const commandName = \"PutSubscriptionFilterCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: PutSubscriptionFilterRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: PutSubscriptionFilterCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1PutSubscriptionFilterCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<PutSubscriptionFilterCommandOutput> {\n    return deserializeAws_json1_1PutSubscriptionFilterCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}