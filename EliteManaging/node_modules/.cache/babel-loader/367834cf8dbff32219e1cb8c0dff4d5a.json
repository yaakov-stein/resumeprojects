{"ast":null,"code":"import { __asyncGenerator, __await, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { CloudWatchLogs } from \"../CloudWatchLogs\";\nimport { CloudWatchLogsClient } from \"../CloudWatchLogsClient\";\nimport { GetLogEventsCommand } from \"../commands/GetLogEventsCommand\";\n/**\n * @private\n */\n\nvar makePagedClientRequest = function (client, input) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , client.send.apply(client, __spread([new GetLogEventsCommand(input)], args))];\n\n        case 1:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n};\n/**\n * @private\n */\n\n\nvar makePagedRequest = function (client, input) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , client.getLogEvents.apply(client, __spread([input], args))];\n\n        case 1:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n};\n\nexport function paginateGetLogEvents(config, input) {\n  var additionalArguments = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    additionalArguments[_i - 2] = arguments[_i];\n  }\n\n  return __asyncGenerator(this, arguments, function paginateGetLogEvents_1() {\n    var token, hasNext, page;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          token = config.startingToken || undefined;\n          hasNext = true;\n          _a.label = 1;\n\n        case 1:\n          if (!hasNext) return [3\n          /*break*/\n          , 9];\n          input.nextToken = token;\n          input[\"limit\"] = config.pageSize;\n          if (!(config.client instanceof CloudWatchLogs)) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , __await(makePagedRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n\n        case 2:\n          page = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 3:\n          if (!(config.client instanceof CloudWatchLogsClient)) return [3\n          /*break*/\n          , 5];\n          return [4\n          /*yield*/\n          , __await(makePagedClientRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n\n        case 4:\n          page = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          throw new Error(\"Invalid client, expected CloudWatchLogs | CloudWatchLogsClient\");\n\n        case 6:\n          return [4\n          /*yield*/\n          , __await(page)];\n\n        case 7:\n          return [4\n          /*yield*/\n          , _a.sent()];\n\n        case 8:\n          _a.sent();\n\n          token = page.nextForwardToken;\n          hasNext = !!token;\n          return [3\n          /*break*/\n          , 1];\n\n        case 9:\n          return [4\n          /*yield*/\n          , __await(undefined)];\n\n        case 10:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,cAAT,QAA+B,mBAA/B;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SACEC,mBADF,QAIO,iCAJP;AAQA;;;;AAGA,IAAMC,sBAAsB,GAAG,UAC7BC,MAD6B,EAE7BC,KAF6B,EAEE;EAC/B;;OAAA,yCAAY;IAAZC;;;;;;;UAGO;UAAA;UAAA,EAAMF,MAAM,CAACG,IAAP,CAAWC,KAAX,SAAMC,UAAM,IAAIP,mBAAJ,CAAwBG,KAAxB,CAAN,GAAyCC,IAAzC,CAAN,CAAN;;;UADP;UACA;UAAA;UAAA,EAAOI,SAAP;;;;AACD,CAPD;AAQA;;;;;AAGA,IAAMC,gBAAgB,GAAG,UACvBP,MADuB,EAEvBC,KAFuB,EAEQ;EAC/B;;OAAA,yCAAY;IAAZC;;;;;;;UAGO;UAAA;UAAA,EAAMF,MAAM,CAACQ,YAAP,CAAmBJ,KAAnB,SAAMC,UAAcJ,KAAd,GAAwBC,IAAxB,CAAN,CAAN;;;UADP;UACA;UAAA;UAAA,EAAOI,SAAP;;;;AACD,CAPD;;AAQA,OAAM,SAAiBG,oBAAjB,CACJC,MADI,EAEJT,KAFI,EAE2B;EAC/B;;OAAA,yCAA2B;IAA3BU;;;;;;;;UAGIC,KAAK,GAAuCF,MAAM,CAACG,aAAP,IAAwBC,SAApE;UACAC,OAAO,GAAG,IAAV;;;;eAEGA,SAAO;UAAA;UAAA;UACZd,KAAK,CAACe,SAAN,GAAkBJ,KAAlB;UACAX,KAAK,CAAC,OAAD,CAAL,GAAiBS,MAAM,CAACO,QAAxB;gBACIP,MAAM,CAACV,MAAP,YAAyBJ,iBAAzB;UAAA;UAAA;UACK;UAAA;UAAA,UAAMW,gBAAgB,MAAhB,CAAgB,MAAhB,EAAgBF,UAACK,MAAM,CAACV,MAAR,EAAgBC,KAAhB,GAA0BU,mBAA1B,CAAhB,CAAN;;;UAAPO,IAAI,GAAGZ,SAAP;;;;;;gBACSI,MAAM,CAACV,MAAP,YAAyBH,uBAAzB;UAAA;UAAA;UACF;UAAA;UAAA,UAAME,sBAAsB,MAAtB,CAAsB,MAAtB,EAAsBM,UAACK,MAAM,CAACV,MAAR,EAAgBC,KAAhB,GAA0BU,mBAA1B,CAAtB,CAAN;;;UAAPO,IAAI,GAAGZ,SAAP;;;;;;UAEA,MAAM,IAAIa,KAAJ,CAAU,gEAAV,CAAN;;;;;oBAEID;;;UAAN;UAAA;UAAA;;;UAAAZ;;UACAM,KAAK,GAAGM,IAAI,CAACE,gBAAb;UACAL,OAAO,GAAG,CAAC,CAACH,KAAZ;;;;;;;;oBAGKE;;;UADP;UACA;UAAA;UAAA;;;;AACD","names":["CloudWatchLogs","CloudWatchLogsClient","GetLogEventsCommand","makePagedClientRequest","client","input","args","send","apply","__spread","_a","makePagedRequest","getLogEvents","paginateGetLogEvents","config","additionalArguments","token","startingToken","undefined","hasNext","nextToken","pageSize","page","Error","nextForwardToken"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\client-cloudwatch-logs\\pagination\\GetLogEventsPaginator.ts"],"sourcesContent":["import { CloudWatchLogs } from \"../CloudWatchLogs\";\nimport { CloudWatchLogsClient } from \"../CloudWatchLogsClient\";\nimport {\n  GetLogEventsCommand,\n  GetLogEventsCommandInput,\n  GetLogEventsCommandOutput,\n} from \"../commands/GetLogEventsCommand\";\nimport { CloudWatchLogsPaginationConfiguration } from \"./Interfaces\";\nimport { Paginator } from \"@aws-sdk/types\";\n\n/**\n * @private\n */\nconst makePagedClientRequest = async (\n  client: CloudWatchLogsClient,\n  input: GetLogEventsCommandInput,\n  ...args: any\n): Promise<GetLogEventsCommandOutput> => {\n  // @ts-ignore\n  return await client.send(new GetLogEventsCommand(input), ...args);\n};\n/**\n * @private\n */\nconst makePagedRequest = async (\n  client: CloudWatchLogs,\n  input: GetLogEventsCommandInput,\n  ...args: any\n): Promise<GetLogEventsCommandOutput> => {\n  // @ts-ignore\n  return await client.getLogEvents(input, ...args);\n};\nexport async function* paginateGetLogEvents(\n  config: CloudWatchLogsPaginationConfiguration,\n  input: GetLogEventsCommandInput,\n  ...additionalArguments: any\n): Paginator<GetLogEventsCommandOutput> {\n  // ToDo: replace with actual type instead of typeof input.nextToken\n  let token: typeof input.nextToken | undefined = config.startingToken || undefined;\n  let hasNext = true;\n  let page: GetLogEventsCommandOutput;\n  while (hasNext) {\n    input.nextToken = token;\n    input[\"limit\"] = config.pageSize;\n    if (config.client instanceof CloudWatchLogs) {\n      page = await makePagedRequest(config.client, input, ...additionalArguments);\n    } else if (config.client instanceof CloudWatchLogsClient) {\n      page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n    } else {\n      throw new Error(\"Invalid client, expected CloudWatchLogs | CloudWatchLogsClient\");\n    }\n    yield page;\n    token = page.nextForwardToken;\n    hasNext = !!token;\n  }\n  // @ts-ignore\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}