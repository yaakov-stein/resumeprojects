{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IncreaseStreamRetentionPeriodInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand, serializeAws_json1_1IncreaseStreamRetentionPeriodCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Increases the Kinesis data stream's retention period, which is the length of time\n *             data records are accessible after they are added to the stream. The maximum value of a\n *             stream's retention period is 168 hours (7 days).</p>\n *         <p>If you choose a longer stream retention period, this operation increases the time\n *             period during which records that have not yet expired are accessible. However, it does\n *             not make previous, expired data (older than the stream's previous retention period)\n *             accessible after the operation has been called. For example, if a stream's retention\n *             period is set to 24 hours and is increased to 168 hours, any data that is older than 24\n *             hours remains inaccessible to consumer applications.</p>\n */\n\nvar IncreaseStreamRetentionPeriodCommand =\n/** @class */\nfunction (_super) {\n  __extends(IncreaseStreamRetentionPeriodCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function IncreaseStreamRetentionPeriodCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  IncreaseStreamRetentionPeriodCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"IncreaseStreamRetentionPeriodCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: IncreaseStreamRetentionPeriodInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  IncreaseStreamRetentionPeriodCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1IncreaseStreamRetentionPeriodCommand(input, context);\n  };\n\n  IncreaseStreamRetentionPeriodCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand(output, context);\n  };\n\n  return IncreaseStreamRetentionPeriodCommand;\n}($Command);\n\nexport { IncreaseStreamRetentionPeriodCommand };","map":{"version":3,"mappings":";AACA,SAASA,kCAAT,QAAmD,oBAAnD;AACA,SACEC,0DADF,EAEEC,wDAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;AAWA;AAAA;AAAA;EAA0DC,wDAA1D,CAKE;EACA;;;EAEA,8CAAqBC,KAArB,EAAqE;IAArE,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAgD,CAGnE;EACD;EAED;;;;;EAGAC,6EACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,eAAnB;IACA,IAAMC,WAAW,GAAG,sCAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAExB,kCAAkC,CAACyB,kBAJL;MAKvDC,wBAAwB,EAAE,UAACC,MAAD,EAAY;QAAK;MAAM;IALM,CAAzD;IAOQ,kBAAc,GAAKf,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACU,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDhB,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,2DAAR,UAAkBH,KAAlB,EAAoEwB,OAApE,EAA2F;IACzF,OAAO7B,wDAAwD,CAACK,KAAD,EAAQwB,OAAR,CAA/D;EACD,CAFO;;EAIArB,6DAAR,UACEiB,MADF,EAEEI,OAFF,EAEyB;IAEvB,OAAO9B,0DAA0D,CAAC0B,MAAD,EAASI,OAAT,CAAjE;EACD,CALO;;EASV;AAAC,CAzDD,CAA0D1B,QAA1D","names":["IncreaseStreamRetentionPeriodInput","deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand","serializeAws_json1_1IncreaseStreamRetentionPeriodCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","IncreaseStreamRetentionPeriodCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","resolve","request","handle","context"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\client-kinesis\\commands\\IncreaseStreamRetentionPeriodCommand.ts"],"sourcesContent":["import { KinesisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../KinesisClient\";\nimport { IncreaseStreamRetentionPeriodInput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand,\n  serializeAws_json1_1IncreaseStreamRetentionPeriodCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type IncreaseStreamRetentionPeriodCommandInput = IncreaseStreamRetentionPeriodInput;\nexport type IncreaseStreamRetentionPeriodCommandOutput = __MetadataBearer;\n\n/**\n * <p>Increases the Kinesis data stream's retention period, which is the length of time\n *             data records are accessible after they are added to the stream. The maximum value of a\n *             stream's retention period is 168 hours (7 days).</p>\n *         <p>If you choose a longer stream retention period, this operation increases the time\n *             period during which records that have not yet expired are accessible. However, it does\n *             not make previous, expired data (older than the stream's previous retention period)\n *             accessible after the operation has been called. For example, if a stream's retention\n *             period is set to 24 hours and is increased to 168 hours, any data that is older than 24\n *             hours remains inaccessible to consumer applications.</p>\n */\nexport class IncreaseStreamRetentionPeriodCommand extends $Command<\n  IncreaseStreamRetentionPeriodCommandInput,\n  IncreaseStreamRetentionPeriodCommandOutput,\n  KinesisClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: IncreaseStreamRetentionPeriodCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: KinesisClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<IncreaseStreamRetentionPeriodCommandInput, IncreaseStreamRetentionPeriodCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"KinesisClient\";\n    const commandName = \"IncreaseStreamRetentionPeriodCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: IncreaseStreamRetentionPeriodInput.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: IncreaseStreamRetentionPeriodCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1IncreaseStreamRetentionPeriodCommand(input, context);\n  }\n\n  private deserialize(\n    output: __HttpResponse,\n    context: __SerdeContext\n  ): Promise<IncreaseStreamRetentionPeriodCommandOutput> {\n    return deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}