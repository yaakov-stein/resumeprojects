{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport API from '@aws-amplify/api';\nimport { ConsoleLogger as Logger, jitteredBackoff, NonRetryableError, retry } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nimport { DISCARD, isModelFieldType, isTargetNameAssociation, OpType, ProcessName } from '../../types';\nimport { exhaustiveCheck, USER } from '../../util';\nimport { buildGraphQLOperation, createMutationInstanceFromModelOperation, getModelAuthModes, TransformerMutationType, getTokenForCustomAuth } from '../utils';\nimport { getMutationErrorType } from './errorMaps';\nvar MAX_ATTEMPTS = 10;\nvar logger = new Logger('DataStore');\n\nvar MutationProcessor =\n/** @class */\nfunction () {\n  function MutationProcessor(schema, storage, userClasses, outbox, modelInstanceCreator, MutationEvent, amplifyConfig, authModeStrategy, errorHandler, conflictHandler) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n\n    this.schema = schema;\n    this.storage = storage;\n    this.userClasses = userClasses;\n    this.outbox = outbox;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.MutationEvent = MutationEvent;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.conflictHandler = conflictHandler;\n    this.typeQuery = new WeakMap();\n    this.processing = false;\n    this.generateQueries();\n  }\n\n  MutationProcessor.prototype.generateQueries = function () {\n    var _this = this;\n\n    Object.values(this.schema.namespaces).forEach(function (namespace) {\n      Object.values(namespace.models).filter(function (_a) {\n        var syncable = _a.syncable;\n        return syncable;\n      }).forEach(function (model) {\n        var _a = __read(buildGraphQLOperation(namespace, model, 'CREATE'), 1),\n            createMutation = _a[0];\n\n        var _b = __read(buildGraphQLOperation(namespace, model, 'UPDATE'), 1),\n            updateMutation = _b[0];\n\n        var _c = __read(buildGraphQLOperation(namespace, model, 'DELETE'), 1),\n            deleteMutation = _c[0];\n\n        _this.typeQuery.set(model, [createMutation, updateMutation, deleteMutation]);\n      });\n    });\n  };\n\n  MutationProcessor.prototype.isReady = function () {\n    return this.observer !== undefined;\n  };\n\n  MutationProcessor.prototype.start = function () {\n    var _this = this;\n\n    var observable = new Observable(function (observer) {\n      _this.observer = observer;\n\n      _this.resume();\n\n      return function () {\n        _this.pause();\n      };\n    });\n    return observable;\n  };\n\n  MutationProcessor.prototype.resume = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var head, namespaceName, _loop_1, this_1, _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this.processing || !this.isReady()) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            this.processing = true;\n            namespaceName = USER;\n\n            _loop_1 = function () {\n              var model, operation, data, condition, modelConstructor, result, opName, modelDefinition, modelAuthModes, operationAuthModes_1, authModeAttempts_1, authModeRetry_1, error_1, record, hasMore;\n\n              var _a;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    model = head.model, operation = head.operation, data = head.data, condition = head.condition;\n                    modelConstructor = this_1.userClasses[model];\n                    result = void 0;\n                    opName = void 0;\n                    modelDefinition = void 0;\n                    _b.label = 1;\n\n                  case 1:\n                    _b.trys.push([1, 4,, 5]);\n\n                    return [4\n                    /*yield*/\n                    , getModelAuthModes({\n                      authModeStrategy: this_1.authModeStrategy,\n                      defaultAuthMode: this_1.amplifyConfig.aws_appsync_authenticationType,\n                      modelName: model,\n                      schema: this_1.schema\n                    })];\n\n                  case 2:\n                    modelAuthModes = _b.sent();\n                    operationAuthModes_1 = modelAuthModes[operation.toUpperCase()];\n                    authModeAttempts_1 = 0;\n\n                    authModeRetry_1 = function () {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var response, error_2;\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              _a.trys.push([0, 2,, 4]);\n\n                              logger.debug(\"Attempting mutation with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                              return [4\n                              /*yield*/\n                              , this.jitteredRetry(namespaceName, model, operation, data, condition, modelConstructor, this.MutationEvent, head, operationAuthModes_1[authModeAttempts_1])];\n\n                            case 1:\n                              response = _a.sent();\n                              logger.debug(\"Mutation sent successfully with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                              return [2\n                              /*return*/\n                              , response];\n\n                            case 2:\n                              error_2 = _a.sent();\n                              authModeAttempts_1++;\n\n                              if (authModeAttempts_1 >= operationAuthModes_1.length) {\n                                logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1]);\n                                throw error_2;\n                              }\n\n                              logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1] + \". Retrying with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                              return [4\n                              /*yield*/\n                              , authModeRetry_1()];\n\n                            case 3:\n                              return [2\n                              /*return*/\n                              , _a.sent()];\n\n                            case 4:\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      });\n                    };\n\n                    return [4\n                    /*yield*/\n                    , authModeRetry_1()];\n\n                  case 3:\n                    _a = __read.apply(void 0, [_b.sent(), 3]), result = _a[0], opName = _a[1], modelDefinition = _a[2];\n                    return [3\n                    /*break*/\n                    , 5];\n\n                  case 4:\n                    error_1 = _b.sent();\n\n                    if (error_1.message === 'Offline' || error_1.message === 'RetryMutation') {\n                      return [2\n                      /*return*/\n                      , \"continue\"];\n                    }\n\n                    return [3\n                    /*break*/\n                    , 5];\n\n                  case 5:\n                    if (!(result === undefined)) return [3\n                    /*break*/\n                    , 7];\n                    logger.debug('done retrying');\n                    return [4\n                    /*yield*/\n                    , this_1.storage.runExclusive(function (storage) {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              return [4\n                              /*yield*/\n                              , this.outbox.dequeue(storage)];\n\n                            case 1:\n                              _a.sent();\n\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      });\n                    })];\n\n                  case 6:\n                    _b.sent();\n\n                    return [2\n                    /*return*/\n                    , \"continue\"];\n\n                  case 7:\n                    record = result.data[opName];\n                    hasMore = false;\n                    return [4\n                    /*yield*/\n                    , this_1.storage.runExclusive(function (storage) {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              // using runExclusive to prevent possible race condition\n                              // when another record gets enqueued between dequeue and peek\n                              return [4\n                              /*yield*/\n                              , this.outbox.dequeue(storage, record, operation)];\n\n                            case 1:\n                              // using runExclusive to prevent possible race condition\n                              // when another record gets enqueued between dequeue and peek\n                              _a.sent();\n\n                              return [4\n                              /*yield*/\n                              , this.outbox.peek(storage)];\n\n                            case 2:\n                              hasMore = _a.sent() !== undefined;\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      });\n                    })];\n\n                  case 8:\n                    _b.sent();\n\n                    this_1.observer.next({\n                      operation: operation,\n                      modelDefinition: modelDefinition,\n                      model: record,\n                      hasMore: hasMore\n                    });\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_1 = this;\n            _b.label = 1;\n\n          case 1:\n            _a = this.processing;\n            if (!_a) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.outbox.peek(this.storage)];\n\n          case 2:\n            _a = (head = _b.sent()) !== undefined;\n            _b.label = 3;\n\n          case 3:\n            if (!_a) return [3\n            /*break*/\n            , 5];\n            return [5\n            /*yield**/\n            , _loop_1()];\n\n          case 4:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 1];\n\n          case 5:\n            // pauses itself\n            this.pause();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.jitteredRetry = function (namespaceName, model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent, authMode) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , retry(function (model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, query, variables, graphQLCondition, opName, modelDefinition, authToken, tryWith, attempt, opType, result, err_1, _b, error, _c, _d, code, retryWith, err_2, _e, _f, opName_1, query_1, authToken_1, serverData, namespace, updatedMutation, err_3;\n\n                var _g;\n\n                return __generator(this, function (_h) {\n                  switch (_h.label) {\n                    case 0:\n                      _a = __read(this.createQueryVariables(namespaceName, model, operation, data, condition), 5), query = _a[0], variables = _a[1], graphQLCondition = _a[2], opName = _a[3], modelDefinition = _a[4];\n                      return [4\n                      /*yield*/\n                      , getTokenForCustomAuth(authMode, this.amplifyConfig)];\n\n                    case 1:\n                      authToken = _h.sent();\n                      tryWith = {\n                        query: query,\n                        variables: variables,\n                        authMode: authMode,\n                        authToken: authToken\n                      };\n                      attempt = 0;\n                      opType = this.opTypeFromTransformerOperation(operation);\n                      _h.label = 2;\n\n                    case 2:\n                      _h.trys.push([2, 4,, 20]);\n\n                      return [4\n                      /*yield*/\n                      , API.graphql(tryWith)];\n\n                    case 3:\n                      result = _h.sent();\n                      return [2\n                      /*return*/\n                      , [result, opName, modelDefinition]];\n\n                    case 4:\n                      err_1 = _h.sent();\n                      if (!(err_1.errors && err_1.errors.length > 0)) return [3\n                      /*break*/\n                      , 18];\n                      _b = __read(err_1.errors, 1), error = _b[0];\n                      _c = error.originalError, _d = (_c === void 0 ? {} : _c).code, code = _d === void 0 ? null : _d;\n\n                      if (error.errorType === 'Unauthorized') {\n                        throw new NonRetryableError('Unauthorized');\n                      }\n\n                      if (error.message === 'Network Error' || code === 'ECONNABORTED' // refers to axios timeout error caused by device's bad network condition\n                      ) {\n                        if (!this.processing) {\n                          throw new NonRetryableError('Offline');\n                        } // TODO: Check errors on different env (react-native or other browsers)\n\n\n                        throw new Error('Network Error');\n                      }\n\n                      if (!(error.errorType === 'ConflictUnhandled')) return [3\n                      /*break*/\n                      , 13]; // TODO: add on ConflictConditionalCheck error query last from server\n\n                      attempt++;\n                      retryWith = void 0;\n                      if (!(attempt > MAX_ATTEMPTS)) return [3\n                      /*break*/\n                      , 5];\n                      retryWith = DISCARD;\n                      return [3\n                      /*break*/\n                      , 8];\n\n                    case 5:\n                      _h.trys.push([5, 7,, 8]);\n\n                      return [4\n                      /*yield*/\n                      , this.conflictHandler({\n                        modelConstructor: modelConstructor,\n                        localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                        remoteModel: this.modelInstanceCreator(modelConstructor, error.data),\n                        operation: opType,\n                        attempts: attempt\n                      })];\n\n                    case 6:\n                      retryWith = _h.sent();\n                      return [3\n                      /*break*/\n                      , 8];\n\n                    case 7:\n                      err_2 = _h.sent();\n                      logger.warn('conflict trycatch', err_2);\n                      return [3\n                      /*break*/\n                      , 20];\n\n                    case 8:\n                      if (!(retryWith === DISCARD)) return [3\n                      /*break*/\n                      , 11];\n                      _e = __read(buildGraphQLOperation(this.schema.namespaces[namespaceName], modelDefinition, 'GET'), 1), _f = __read(_e[0], 3), opName_1 = _f[1], query_1 = _f[2];\n                      return [4\n                      /*yield*/\n                      , getTokenForCustomAuth(authMode, this.amplifyConfig)];\n\n                    case 9:\n                      authToken_1 = _h.sent();\n                      return [4\n                      /*yield*/\n                      , API.graphql({\n                        query: query_1,\n                        variables: {\n                          id: variables.input.id\n                        },\n                        authMode: authMode,\n                        authToken: authToken_1\n                      })];\n\n                    case 10:\n                      serverData = _h.sent();\n                      return [2\n                      /*return*/\n                      , [serverData, opName_1, modelDefinition]];\n\n                    case 11:\n                      namespace = this.schema.namespaces[namespaceName];\n                      updatedMutation = createMutationInstanceFromModelOperation(namespace.relationships, modelDefinition, opType, modelConstructor, retryWith, graphQLCondition, MutationEvent, this.modelInstanceCreator, mutationEvent.id);\n                      return [4\n                      /*yield*/\n                      , this.storage.save(updatedMutation)];\n\n                    case 12:\n                      _h.sent();\n\n                      throw new NonRetryableError('RetryMutation');\n\n                    case 13:\n                      _h.trys.push([13, 15, 16, 17]);\n\n                      return [4\n                      /*yield*/\n                      , this.errorHandler({\n                        recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                        localModel: variables.input,\n                        message: error.message,\n                        operation: operation,\n                        errorType: getMutationErrorType(error),\n                        errorInfo: error.errorInfo,\n                        process: ProcessName.mutate,\n                        cause: error,\n                        remoteModel: error.data ? this.modelInstanceCreator(modelConstructor, error.data) : null\n                      })];\n\n                    case 14:\n                      _h.sent();\n\n                      return [3\n                      /*break*/\n                      , 17];\n\n                    case 15:\n                      err_3 = _h.sent();\n                      logger.warn('Mutation error handler failed with:', err_3);\n                      return [3\n                      /*break*/\n                      , 17];\n\n                    case 16:\n                      // Return empty tuple, dequeues the mutation\n                      return [2\n                      /*return*/\n                      , error.data ? [{\n                        data: (_g = {}, _g[opName] = error.data, _g)\n                      }, opName, modelDefinition] : []];\n\n                    case 17:\n                      return [3\n                      /*break*/\n                      , 19];\n\n                    case 18:\n                      // Catch-all for client-side errors that don't come back in the `GraphQLError` format.\n                      // These errors should not be retried.\n                      throw new NonRetryableError(err_1);\n\n                    case 19:\n                      return [3\n                      /*break*/\n                      , 20];\n\n                    case 20:\n                      if (tryWith) return [3\n                      /*break*/\n                      , 2];\n                      _h.label = 21;\n\n                    case 21:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }, [model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent], safeJitteredBackoff)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.createQueryVariables = function (namespaceName, model, operation, data, condition) {\n    var e_1, _a;\n\n    var modelDefinition = this.schema.namespaces[namespaceName].models[model];\n    var primaryKey = this.schema.namespaces[namespaceName].keys[model].primaryKey;\n    var queriesTuples = this.typeQuery.get(modelDefinition);\n\n    var _b = __read(queriesTuples.find(function (_a) {\n      var _b = __read(_a, 1),\n          transformerMutationType = _b[0];\n\n      return transformerMutationType === operation;\n    }), 3),\n        opName = _b[1],\n        query = _b[2];\n\n    var _c = JSON.parse(data),\n        _version = _c._version,\n        parsedData = __rest(_c, [\"_version\"]); // include all the fields that comprise a custom PK if one is specified\n\n\n    var deleteInput = {};\n\n    if (primaryKey && primaryKey.length) {\n      try {\n        for (var primaryKey_1 = __values(primaryKey), primaryKey_1_1 = primaryKey_1.next(); !primaryKey_1_1.done; primaryKey_1_1 = primaryKey_1.next()) {\n          var pkField = primaryKey_1_1.value;\n          deleteInput[pkField] = parsedData[pkField];\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (primaryKey_1_1 && !primaryKey_1_1.done && (_a = primaryKey_1.return)) _a.call(primaryKey_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    } else {\n      deleteInput['id'] = parsedData.id;\n    }\n\n    var filteredData = operation === TransformerMutationType.DELETE ? deleteInput // For DELETE mutations, only PK is sent\n    : Object.values(modelDefinition.fields).filter(function (_a) {\n      var name = _a.name,\n          type = _a.type,\n          association = _a.association; // connections\n\n      if (isModelFieldType(type)) {\n        // BELONGS_TO\n        if (isTargetNameAssociation(association) && association.connectionType === 'BELONGS_TO') {\n          return true;\n        } // All other connections\n\n\n        return false;\n      }\n\n      if (operation === TransformerMutationType.UPDATE) {\n        // this limits the update mutation input to changed fields only\n        return parsedData.hasOwnProperty(name);\n      } // scalars and non-model types\n\n\n      return true;\n    }).map(function (_a) {\n      var name = _a.name,\n          type = _a.type,\n          association = _a.association;\n      var fieldName = name;\n      var val = parsedData[name];\n\n      if (isModelFieldType(type) && isTargetNameAssociation(association)) {\n        fieldName = association.targetName;\n        val = parsedData[fieldName];\n      }\n\n      return [fieldName, val];\n    }).reduce(function (acc, _a) {\n      var _b = __read(_a, 2),\n          k = _b[0],\n          v = _b[1];\n\n      acc[k] = v;\n      return acc;\n    }, {}); // Build mutation variables input object\n\n    var input = __assign(__assign({}, filteredData), {\n      _version: _version\n    });\n\n    var graphQLCondition = JSON.parse(condition);\n\n    var variables = __assign({\n      input: input\n    }, operation === TransformerMutationType.CREATE ? {} : {\n      condition: Object.keys(graphQLCondition).length > 0 ? graphQLCondition : null\n    });\n\n    return [query, variables, graphQLCondition, opName, modelDefinition];\n  };\n\n  MutationProcessor.prototype.opTypeFromTransformerOperation = function (operation) {\n    switch (operation) {\n      case TransformerMutationType.CREATE:\n        return OpType.INSERT;\n\n      case TransformerMutationType.DELETE:\n        return OpType.DELETE;\n\n      case TransformerMutationType.UPDATE:\n        return OpType.UPDATE;\n\n      case TransformerMutationType.GET:\n        // Intentionally blank\n        break;\n\n      default:\n        exhaustiveCheck(operation);\n    }\n  };\n\n  MutationProcessor.prototype.pause = function () {\n    this.processing = false;\n  };\n\n  return MutationProcessor;\n}();\n\nvar MAX_RETRY_DELAY_MS = 5 * 60 * 1000;\nvar originalJitteredBackoff = jitteredBackoff(MAX_RETRY_DELAY_MS);\n/**\n * @private\n * Internal use of Amplify only.\n *\n * Wraps the jittered backoff calculation to retry Network Errors indefinitely.\n * Backs off according to original jittered retry logic until the original retry\n * logic hits its max. After this occurs, if the error is a Network Error, we\n * ignore the attempt count and return MAX_RETRY_DELAY_MS to retry forever (until\n * the request succeeds).\n *\n * @param attempt ignored\n * @param _args ignored\n * @param error tested to see if `.message` is 'Network Error'\n * @returns number | false :\n */\n\nexport var safeJitteredBackoff = function (attempt, _args, error) {\n  var attemptResult = originalJitteredBackoff(attempt); // If this is the last attempt and it is a network error, we retry indefinitively every 5 minutes\n\n  if (attemptResult === false && (error === null || error === void 0 ? void 0 : error.message) === 'Network Error') {\n    return MAX_RETRY_DELAY_MS;\n  }\n\n  return attemptResult;\n};\nexport { MutationProcessor };","map":{"version":3,"mappings":"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","names":["API","ConsoleLogger","Logger","jitteredBackoff","NonRetryableError","retry","Observable","DISCARD","isModelFieldType","isTargetNameAssociation","OpType","ProcessName","exhaustiveCheck","USER","buildGraphQLOperation","createMutationInstanceFromModelOperation","getModelAuthModes","TransformerMutationType","getTokenForCustomAuth","getMutationErrorType","MAX_ATTEMPTS","logger","schema","storage","userClasses","outbox","modelInstanceCreator","MutationEvent","amplifyConfig","authModeStrategy","errorHandler","conflictHandler","WeakMap","generateQueries","MutationProcessor","Object","values","namespaces","forEach","namespace","models","filter","_a","syncable","createMutation","updateMutation","deleteMutation","_this","typeQuery","set","model","observer","undefined","observable","resume","pause","processing","isReady","namespaceName","head","operation","data","condition","modelConstructor","this_1","result","opName","modelDefinition","defaultAuthMode","aws_appsync_authenticationType","modelName","modelAuthModes","_b","operationAuthModes_1","toUpperCase","authModeAttempts_1","authModeRetry_1","debug","jitteredRetry","response","length","error_2","error_1","message","runExclusive","dequeue","record","hasMore","peek","next","mutationEvent","authMode","createQueryVariables","query","variables","graphQLCondition","authToken","_h","tryWith","attempt","opType","opTypeFromTransformerOperation","graphql","err_1","errors","error","_c","_d","code","errorType","Error","retryWith","localModel","input","remoteModel","attempts","warn","err_2","_e","_f","opName_1","query_1","authToken_1","id","serverData","updatedMutation","relationships","save","recoverySuggestion","errorInfo","process","mutate","cause","err_3","_g","safeJitteredBackoff","queriesTuples","get","_version","parsedData","deleteInput","primaryKey","primaryKey_1_1","pkField","filteredData","DELETE","fields","name","type","association","connectionType","UPDATE","hasOwnProperty","map","fieldName","val","targetName","reduce","acc","k","v","JSON","parse","CREATE","keys","INSERT","GET","MAX_RETRY_DELAY_MS","originalJitteredBackoff","_args","attemptResult"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-amplify\\datastore\\src\\sync\\processors\\mutation.ts"],"sourcesContent":["import API, { GraphQLResult, GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport {\n\tConsoleLogger as Logger,\n\tjitteredBackoff,\n\tNonRetryableError,\n\tretry,\n} from '@aws-amplify/core';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { MutationEvent } from '../';\nimport { ModelInstanceCreator } from '../../datastore/datastore';\nimport { ExclusiveStorage as Storage } from '../../storage/storage';\nimport {\n\tAuthModeStrategy,\n\tConflictHandler,\n\tDISCARD,\n\tErrorHandler,\n\tGraphQLCondition,\n\tInternalSchema,\n\tisModelFieldType,\n\tisTargetNameAssociation,\n\tModelInstanceMetadata,\n\tOpType,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tSchemaModel,\n\tTypeConstructorMap,\n\tProcessName,\n} from '../../types';\nimport { exhaustiveCheck, USER } from '../../util';\nimport { MutationEventOutbox } from '../outbox';\nimport {\n\tbuildGraphQLOperation,\n\tcreateMutationInstanceFromModelOperation,\n\tgetModelAuthModes,\n\tTransformerMutationType,\n\tgetTokenForCustomAuth,\n} from '../utils';\nimport { getMutationErrorType } from './errorMaps';\n\nconst MAX_ATTEMPTS = 10;\n\nconst logger = new Logger('DataStore');\n\ntype MutationProcessorEvent = {\n\toperation: TransformerMutationType;\n\tmodelDefinition: SchemaModel;\n\tmodel: PersistentModel;\n\thasMore: boolean;\n};\n\nclass MutationProcessor {\n\tprivate observer: ZenObservable.Observer<MutationProcessorEvent>;\n\tprivate readonly typeQuery = new WeakMap<\n\t\tSchemaModel,\n\t\t[TransformerMutationType, string, string][]\n\t>();\n\tprivate processing: boolean = false;\n\n\tconstructor(\n\t\tprivate readonly schema: InternalSchema,\n\t\tprivate readonly storage: Storage,\n\t\tprivate readonly userClasses: TypeConstructorMap,\n\t\tprivate readonly outbox: MutationEventOutbox,\n\t\tprivate readonly modelInstanceCreator: ModelInstanceCreator,\n\t\tprivate readonly MutationEvent: PersistentModelConstructor<MutationEvent>,\n\t\tprivate readonly amplifyConfig: Record<string, any> = {},\n\t\tprivate readonly authModeStrategy: AuthModeStrategy,\n\t\tprivate readonly errorHandler: ErrorHandler,\n\t\tprivate readonly conflictHandler?: ConflictHandler\n\t) {\n\t\tthis.generateQueries();\n\t}\n\n\tprivate generateQueries() {\n\t\tObject.values(this.schema.namespaces).forEach(namespace => {\n\t\t\tObject.values(namespace.models)\n\t\t\t\t.filter(({ syncable }) => syncable)\n\t\t\t\t.forEach(model => {\n\t\t\t\t\tconst [createMutation] = buildGraphQLOperation(\n\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t'CREATE'\n\t\t\t\t\t);\n\t\t\t\t\tconst [updateMutation] = buildGraphQLOperation(\n\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t'UPDATE'\n\t\t\t\t\t);\n\t\t\t\t\tconst [deleteMutation] = buildGraphQLOperation(\n\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t'DELETE'\n\t\t\t\t\t);\n\n\t\t\t\t\tthis.typeQuery.set(model, [\n\t\t\t\t\t\tcreateMutation,\n\t\t\t\t\t\tupdateMutation,\n\t\t\t\t\t\tdeleteMutation,\n\t\t\t\t\t]);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate isReady() {\n\t\treturn this.observer !== undefined;\n\t}\n\n\tpublic start(): Observable<MutationProcessorEvent> {\n\t\tconst observable = new Observable<MutationProcessorEvent>(observer => {\n\t\t\tthis.observer = observer;\n\n\t\t\tthis.resume();\n\n\t\t\treturn () => {\n\t\t\t\tthis.pause();\n\t\t\t};\n\t\t});\n\n\t\treturn observable;\n\t}\n\n\tpublic async resume(): Promise<void> {\n\t\tif (this.processing || !this.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.processing = true;\n\t\tlet head: MutationEvent;\n\t\tconst namespaceName = USER;\n\n\t\t// start to drain outbox\n\t\twhile (\n\t\t\tthis.processing &&\n\t\t\t(head = await this.outbox.peek(this.storage)) !== undefined\n\t\t) {\n\t\t\tconst { model, operation, data, condition } = head;\n\t\t\tconst modelConstructor = this.userClasses[\n\t\t\t\tmodel\n\t\t\t] as PersistentModelConstructor<MutationEvent>;\n\t\t\tlet result: GraphQLResult<Record<string, PersistentModel>>;\n\t\t\tlet opName: string;\n\t\t\tlet modelDefinition: SchemaModel;\n\t\t\ttry {\n\t\t\t\tconst modelAuthModes = await getModelAuthModes({\n\t\t\t\t\tauthModeStrategy: this.authModeStrategy,\n\t\t\t\t\tdefaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n\t\t\t\t\tmodelName: model,\n\t\t\t\t\tschema: this.schema,\n\t\t\t\t});\n\n\t\t\t\tconst operationAuthModes = modelAuthModes[operation.toUpperCase()];\n\n\t\t\t\tlet authModeAttempts = 0;\n\t\t\t\tconst authModeRetry = async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t`Attempting mutation with authMode: ${operationAuthModes[authModeAttempts]}`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst response = await this.jitteredRetry(\n\t\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\tcondition,\n\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\tthis.MutationEvent,\n\t\t\t\t\t\t\thead,\n\t\t\t\t\t\t\toperationAuthModes[authModeAttempts]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t`Mutation sent successfully with authMode: ${operationAuthModes[authModeAttempts]}`\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn response;\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tauthModeAttempts++;\n\t\t\t\t\t\tif (authModeAttempts >= operationAuthModes.length) {\n\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t`Mutation failed with authMode: ${\n\t\t\t\t\t\t\t\t\toperationAuthModes[authModeAttempts - 1]\n\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t`Mutation failed with authMode: ${\n\t\t\t\t\t\t\t\toperationAuthModes[authModeAttempts - 1]\n\t\t\t\t\t\t\t}. Retrying with authMode: ${\n\t\t\t\t\t\t\t\toperationAuthModes[authModeAttempts]\n\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn await authModeRetry();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t[result, opName, modelDefinition] = await authModeRetry();\n\t\t\t} catch (error) {\n\t\t\t\tif (error.message === 'Offline' || error.message === 'RetryMutation') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (result === undefined) {\n\t\t\t\tlogger.debug('done retrying');\n\t\t\t\tawait this.storage.runExclusive(async storage => {\n\t\t\t\t\tawait this.outbox.dequeue(storage);\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst record = result.data[opName];\n\t\t\tlet hasMore = false;\n\n\t\t\tawait this.storage.runExclusive(async storage => {\n\t\t\t\t// using runExclusive to prevent possible race condition\n\t\t\t\t// when another record gets enqueued between dequeue and peek\n\t\t\t\tawait this.outbox.dequeue(storage, record, operation);\n\t\t\t\thasMore = (await this.outbox.peek(storage)) !== undefined;\n\t\t\t});\n\n\t\t\tthis.observer.next({\n\t\t\t\toperation,\n\t\t\t\tmodelDefinition,\n\t\t\t\tmodel: record,\n\t\t\t\thasMore,\n\t\t\t});\n\t\t}\n\n\t\t// pauses itself\n\t\tthis.pause();\n\t}\n\n\tprivate async jitteredRetry(\n\t\tnamespaceName: string,\n\t\tmodel: string,\n\t\toperation: TransformerMutationType,\n\t\tdata: string,\n\t\tcondition: string,\n\t\tmodelConstructor: PersistentModelConstructor<PersistentModel>,\n\t\tMutationEvent: PersistentModelConstructor<MutationEvent>,\n\t\tmutationEvent: MutationEvent,\n\t\tauthMode: GRAPHQL_AUTH_MODE\n\t): Promise<\n\t\t[GraphQLResult<Record<string, PersistentModel>>, string, SchemaModel]\n\t> {\n\t\treturn await retry(\n\t\t\tasync (\n\t\t\t\tmodel: string,\n\t\t\t\toperation: TransformerMutationType,\n\t\t\t\tdata: string,\n\t\t\t\tcondition: string,\n\t\t\t\tmodelConstructor: PersistentModelConstructor<PersistentModel>,\n\t\t\t\tMutationEvent: PersistentModelConstructor<MutationEvent>,\n\t\t\t\tmutationEvent: MutationEvent\n\t\t\t) => {\n\t\t\t\tconst [query, variables, graphQLCondition, opName, modelDefinition] =\n\t\t\t\t\tthis.createQueryVariables(\n\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\toperation,\n\t\t\t\t\t\tdata,\n\t\t\t\t\t\tcondition\n\t\t\t\t\t);\n\n\t\t\t\tconst authToken = await getTokenForCustomAuth(\n\t\t\t\t\tauthMode,\n\t\t\t\t\tthis.amplifyConfig\n\t\t\t\t);\n\n\t\t\t\tconst tryWith = { query, variables, authMode, authToken };\n\t\t\t\tlet attempt = 0;\n\n\t\t\t\tconst opType = this.opTypeFromTransformerOperation(operation);\n\n\t\t\t\tdo {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result = <GraphQLResult<Record<string, PersistentModel>>>(\n\t\t\t\t\t\t\tawait API.graphql(tryWith)\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn [result, opName, modelDefinition];\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tif (err.errors && err.errors.length > 0) {\n\t\t\t\t\t\t\tconst [error] = err.errors;\n\t\t\t\t\t\t\tconst { originalError: { code = null } = {} } = error;\n\n\t\t\t\t\t\t\tif (error.errorType === 'Unauthorized') {\n\t\t\t\t\t\t\t\tthrow new NonRetryableError('Unauthorized');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\terror.message === 'Network Error' ||\n\t\t\t\t\t\t\t\tcode === 'ECONNABORTED' // refers to axios timeout error caused by device's bad network condition\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tif (!this.processing) {\n\t\t\t\t\t\t\t\t\tthrow new NonRetryableError('Offline');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// TODO: Check errors on different env (react-native or other browsers)\n\t\t\t\t\t\t\t\tthrow new Error('Network Error');\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (error.errorType === 'ConflictUnhandled') {\n\t\t\t\t\t\t\t\t// TODO: add on ConflictConditionalCheck error query last from server\n\t\t\t\t\t\t\t\tattempt++;\n\t\t\t\t\t\t\t\tlet retryWith: PersistentModel | typeof DISCARD;\n\n\t\t\t\t\t\t\t\tif (attempt > MAX_ATTEMPTS) {\n\t\t\t\t\t\t\t\t\tretryWith = DISCARD;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tretryWith = await this.conflictHandler({\n\t\t\t\t\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\t\t\t\t\tlocalModel: this.modelInstanceCreator(\n\t\t\t\t\t\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\t\t\t\t\t\tvariables.input\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\tremoteModel: this.modelInstanceCreator(\n\t\t\t\t\t\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\t\t\t\t\t\terror.data\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\toperation: opType,\n\t\t\t\t\t\t\t\t\t\t\tattempts: attempt,\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t\tlogger.warn('conflict trycatch', err);\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (retryWith === DISCARD) {\n\t\t\t\t\t\t\t\t\t// Query latest from server and notify merger\n\n\t\t\t\t\t\t\t\t\tconst [[, opName, query]] = buildGraphQLOperation(\n\t\t\t\t\t\t\t\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\t'GET'\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tconst authToken = await getTokenForCustomAuth(\n\t\t\t\t\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\t\t\t\t\tthis.amplifyConfig\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tconst serverData = <\n\t\t\t\t\t\t\t\t\t\tGraphQLResult<Record<string, PersistentModel>>\n\t\t\t\t\t\t\t\t\t>await API.graphql({\n\t\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\t\tvariables: { id: variables.input.id },\n\t\t\t\t\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\t\t\t\t\tauthToken,\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\treturn [serverData, opName, modelDefinition];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst namespace = this.schema.namespaces[namespaceName];\n\n\t\t\t\t\t\t\t\t// convert retry with to tryWith\n\t\t\t\t\t\t\t\tconst updatedMutation =\n\t\t\t\t\t\t\t\t\tcreateMutationInstanceFromModelOperation(\n\t\t\t\t\t\t\t\t\t\tnamespace.relationships,\n\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\topType,\n\t\t\t\t\t\t\t\t\t\tmodelConstructor,\n\t\t\t\t\t\t\t\t\t\tretryWith,\n\t\t\t\t\t\t\t\t\t\tgraphQLCondition,\n\t\t\t\t\t\t\t\t\t\tMutationEvent,\n\t\t\t\t\t\t\t\t\t\tthis.modelInstanceCreator,\n\t\t\t\t\t\t\t\t\t\tmutationEvent.id\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tawait this.storage.save(updatedMutation);\n\n\t\t\t\t\t\t\t\tthrow new NonRetryableError('RetryMutation');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tawait this.errorHandler({\n\t\t\t\t\t\t\t\t\t\trecoverySuggestion:\n\t\t\t\t\t\t\t\t\t\t\t'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n\t\t\t\t\t\t\t\t\t\tlocalModel: variables.input,\n\t\t\t\t\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\t\terrorType: getMutationErrorType(error),\n\t\t\t\t\t\t\t\t\t\terrorInfo: error.errorInfo,\n\t\t\t\t\t\t\t\t\t\tprocess: ProcessName.mutate,\n\t\t\t\t\t\t\t\t\t\tcause: error,\n\t\t\t\t\t\t\t\t\t\tremoteModel: error.data\n\t\t\t\t\t\t\t\t\t\t\t? this.modelInstanceCreator(modelConstructor, error.data)\n\t\t\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\tlogger.warn('Mutation error handler failed with:', err);\n\t\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\t\t// Return empty tuple, dequeues the mutation\n\t\t\t\t\t\t\t\t\treturn error.data\n\t\t\t\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t\t\t\t{ data: { [opName]: error.data } },\n\t\t\t\t\t\t\t\t\t\t\t\topName,\n\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t\t\t: [];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Catch-all for client-side errors that don't come back in the `GraphQLError` format.\n\t\t\t\t\t\t\t// These errors should not be retried.\n\t\t\t\t\t\t\tthrow new NonRetryableError(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} while (tryWith);\n\t\t\t},\n\t\t\t[\n\t\t\t\tmodel,\n\t\t\t\toperation,\n\t\t\t\tdata,\n\t\t\t\tcondition,\n\t\t\t\tmodelConstructor,\n\t\t\t\tMutationEvent,\n\t\t\t\tmutationEvent,\n\t\t\t],\n\t\t\tsafeJitteredBackoff\n\t\t);\n\t}\n\n\tprivate createQueryVariables(\n\t\tnamespaceName: string,\n\t\tmodel: string,\n\t\toperation: TransformerMutationType,\n\t\tdata: string,\n\t\tcondition: string\n\t): [string, Record<string, any>, GraphQLCondition, string, SchemaModel] {\n\t\tconst modelDefinition = this.schema.namespaces[namespaceName].models[model];\n\t\tconst { primaryKey } = this.schema.namespaces[namespaceName].keys[model];\n\n\t\tconst queriesTuples = this.typeQuery.get(modelDefinition);\n\n\t\tconst [, opName, query] = queriesTuples.find(\n\t\t\t([transformerMutationType]) => transformerMutationType === operation\n\t\t);\n\n\t\tconst { _version, ...parsedData } = <ModelInstanceMetadata>JSON.parse(data);\n\n\t\t// include all the fields that comprise a custom PK if one is specified\n\t\tconst deleteInput = {};\n\t\tif (primaryKey && primaryKey.length) {\n\t\t\tfor (const pkField of primaryKey) {\n\t\t\t\tdeleteInput[pkField] = parsedData[pkField];\n\t\t\t}\n\t\t} else {\n\t\t\tdeleteInput['id'] = parsedData.id;\n\t\t}\n\n\t\tconst filteredData =\n\t\t\toperation === TransformerMutationType.DELETE\n\t\t\t\t? <ModelInstanceMetadata>deleteInput // For DELETE mutations, only PK is sent\n\t\t\t\t: Object.values(modelDefinition.fields)\n\t\t\t\t\t\t.filter(({ name, type, association }) => {\n\t\t\t\t\t\t\t// connections\n\t\t\t\t\t\t\tif (isModelFieldType(type)) {\n\t\t\t\t\t\t\t\t// BELONGS_TO\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tisTargetNameAssociation(association) &&\n\t\t\t\t\t\t\t\t\tassociation.connectionType === 'BELONGS_TO'\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// All other connections\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (operation === TransformerMutationType.UPDATE) {\n\t\t\t\t\t\t\t\t// this limits the update mutation input to changed fields only\n\t\t\t\t\t\t\t\treturn parsedData.hasOwnProperty(name);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// scalars and non-model types\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.map(({ name, type, association }) => {\n\t\t\t\t\t\t\tlet fieldName = name;\n\t\t\t\t\t\t\tlet val = parsedData[name];\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tisModelFieldType(type) &&\n\t\t\t\t\t\t\t\tisTargetNameAssociation(association)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tfieldName = association.targetName;\n\t\t\t\t\t\t\t\tval = parsedData[fieldName];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn [fieldName, val];\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.reduce((acc, [k, v]) => {\n\t\t\t\t\t\t\tacc[k] = v;\n\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t}, <typeof parsedData>{});\n\n\t\t// Build mutation variables input object\n\t\tconst input: ModelInstanceMetadata = {\n\t\t\t...filteredData,\n\t\t\t_version,\n\t\t};\n\n\t\tconst graphQLCondition = <GraphQLCondition>JSON.parse(condition);\n\n\t\tconst variables = {\n\t\t\tinput,\n\t\t\t...(operation === TransformerMutationType.CREATE\n\t\t\t\t? {}\n\t\t\t\t: {\n\t\t\t\t\t\tcondition:\n\t\t\t\t\t\t\tObject.keys(graphQLCondition).length > 0\n\t\t\t\t\t\t\t\t? graphQLCondition\n\t\t\t\t\t\t\t\t: null,\n\t\t\t\t  }),\n\t\t};\n\t\treturn [query, variables, graphQLCondition, opName, modelDefinition];\n\t}\n\n\tprivate opTypeFromTransformerOperation(\n\t\toperation: TransformerMutationType\n\t): OpType {\n\t\tswitch (operation) {\n\t\t\tcase TransformerMutationType.CREATE:\n\t\t\t\treturn OpType.INSERT;\n\t\t\tcase TransformerMutationType.DELETE:\n\t\t\t\treturn OpType.DELETE;\n\t\t\tcase TransformerMutationType.UPDATE:\n\t\t\t\treturn OpType.UPDATE;\n\t\t\tcase TransformerMutationType.GET: // Intentionally blank\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\texhaustiveCheck(operation);\n\t\t}\n\t}\n\n\tpublic pause() {\n\t\tthis.processing = false;\n\t}\n}\n\nconst MAX_RETRY_DELAY_MS = 5 * 60 * 1000;\nconst originalJitteredBackoff = jitteredBackoff(MAX_RETRY_DELAY_MS);\n\n/**\n * @private\n * Internal use of Amplify only.\n *\n * Wraps the jittered backoff calculation to retry Network Errors indefinitely.\n * Backs off according to original jittered retry logic until the original retry\n * logic hits its max. After this occurs, if the error is a Network Error, we\n * ignore the attempt count and return MAX_RETRY_DELAY_MS to retry forever (until\n * the request succeeds).\n *\n * @param attempt ignored\n * @param _args ignored\n * @param error tested to see if `.message` is 'Network Error'\n * @returns number | false :\n */\nexport const safeJitteredBackoff: typeof originalJitteredBackoff = (\n\tattempt,\n\t_args,\n\terror\n) => {\n\tconst attemptResult = originalJitteredBackoff(attempt);\n\n\t// If this is the last attempt and it is a network error, we retry indefinitively every 5 minutes\n\tif (attemptResult === false && error?.message === 'Network Error') {\n\t\treturn MAX_RETRY_DELAY_MS;\n\t}\n\n\treturn attemptResult;\n};\n\nexport { MutationProcessor };\n"]},"metadata":{},"sourceType":"module"}