{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutRecordsInput, PutRecordsOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1PutRecordsCommand, serializeAws_json1_1PutRecordsCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Writes multiple data records into a Kinesis data stream in a single call (also\n *             referred to as a <code>PutRecords</code> request). Use this operation to send data into\n *             the stream for data ingestion and processing. </p>\n *         <p>Each <code>PutRecords</code> request can support up to 500 records. Each record in\n *             the request can be as large as 1 MiB, up to a limit of 5 MiB for the entire request,\n *             including partition keys. Each shard can support writes up to 1,000 records per second,\n *             up to a maximum data write total of 1 MiB per second.</p>\n *         <p>You must specify the name of the stream that captures, stores, and transports the\n *             data; and an array of request <code>Records</code>, with each record in the array\n *             requiring a partition key and data blob. The record size limit applies to the total size\n *             of the partition key and data blob.</p>\n *         <p>The data blob can be any type of data; for example, a segment from a log file,\n *             geographic/location data, website clickstream data, and so on.</p>\n *         <p>The partition key is used by Kinesis Data Streams as input to a hash function that\n *             maps the partition key and associated data to a specific shard. An MD5 hash function is\n *             used to map partition keys to 128-bit integer values and to map associated data records\n *             to shards. As a result of this hashing mechanism, all data records with the same\n *             partition key map to the same shard within the stream. For more information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream\">Adding Data to a Stream</a> in the <i>Amazon Kinesis Data Streams\n *                 Developer Guide</i>.</p>\n *         <p>Each record in the <code>Records</code> array may include an optional parameter,\n *                 <code>ExplicitHashKey</code>, which overrides the partition key to shard mapping.\n *             This parameter allows a data producer to determine explicitly the shard where the record\n *             is stored. For more information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-putrecords\">Adding Multiple Records with PutRecords</a> in the <i>Amazon Kinesis\n *                 Data Streams Developer Guide</i>.</p>\n *         <p>The <code>PutRecords</code> response includes an array of response\n *                 <code>Records</code>. Each record in the response array directly correlates with a\n *             record in the request array using natural ordering, from the top to the bottom of the\n *             request and response. The response <code>Records</code> array always includes the same\n *             number of records as the request array.</p>\n *         <p>The response <code>Records</code> array includes both successfully and\n *             unsuccessfully processed records. Kinesis Data Streams attempts to process all records\n *             in each <code>PutRecords</code> request. A single record failure does not stop the\n *             processing of subsequent records. As a result, PutRecords doesn't guarantee the ordering\n *             of records. If you need to read records in the same order they are written to the\n *             stream, use <a>PutRecord</a> instead of <code>PutRecords</code>, and write to\n *             the same shard.</p>\n *         <p>A successfully processed record includes <code>ShardId</code> and\n *                 <code>SequenceNumber</code> values. The <code>ShardId</code> parameter identifies\n *             the shard in the stream where the record is stored. The <code>SequenceNumber</code>\n *             parameter is an identifier assigned to the put record, unique to all records in the\n *             stream.</p>\n *         <p>An unsuccessfully processed record includes <code>ErrorCode</code> and\n *                 <code>ErrorMessage</code> values. <code>ErrorCode</code> reflects the type of error\n *             and can be one of the following values:\n *                 <code>ProvisionedThroughputExceededException</code> or <code>InternalFailure</code>.\n *                 <code>ErrorMessage</code> provides more detailed information about the\n *                 <code>ProvisionedThroughputExceededException</code> exception including the account\n *             ID, stream name, and shard ID of the record that was throttled. For more information\n *             about partially successful responses, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-add-data-to-stream.html#kinesis-using-sdk-java-putrecords\">Adding Multiple Records with PutRecords</a> in the <i>Amazon Kinesis\n *                 Data Streams Developer Guide</i>.</p>\n *         <important>\n *             <p>After you write a record to a stream, you cannot modify that record or its order\n *                 within the stream.</p>\n *         </important>\n *         <p>By default, data records are accessible for 24 hours from the time that they are\n *             added to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or <a>DecreaseStreamRetentionPeriod</a> to modify this retention period.</p>\n */\n\nvar PutRecordsCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutRecordsCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutRecordsCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutRecordsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"PutRecordsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutRecordsInput.filterSensitiveLog,\n      outputFilterSensitiveLog: PutRecordsOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutRecordsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1PutRecordsCommand(input, context);\n  };\n\n  PutRecordsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1PutRecordsCommand(output, context);\n  };\n\n  return PutRecordsCommand;\n}($Command);\n\nexport { PutRecordsCommand };","map":{"version":3,"mappings":";AACA,SAASA,eAAT,EAA0BC,gBAA1B,QAAkD,oBAAlD;AACA,SACEC,uCADF,EAEEC,qCAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;AAAA;AAAA;EAAuCC,qCAAvC,CAKE;EACA;;;EAEA,2BAAqBC,KAArB,EAAkD;IAAlD,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAA6B,CAGhD;EACD;EAED;;;;;EAGAC,0DACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,eAAnB;IACA,IAAMC,WAAW,GAAG,mBAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,eAAe,CAAC0B,kBAJc;MAKvDC,wBAAwB,EAAE1B,gBAAgB,CAACyB;IALY,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,wCAAR,UAAkBH,KAAlB,EAAiDuB,OAAjD,EAAwE;IACtE,OAAO5B,qCAAqC,CAACK,KAAD,EAAQuB,OAAR,CAA5C;EACD,CAFO;;EAIApB,0CAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO7B,uCAAuC,CAAC8B,MAAD,EAASD,OAAT,CAA9C;EACD,CAFO;;EAMV;AAAC,CAtDD,CAAuCzB,QAAvC","names":["PutRecordsInput","PutRecordsOutput","deserializeAws_json1_1PutRecordsCommand","serializeAws_json1_1PutRecordsCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","PutRecordsCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\client-kinesis\\commands\\PutRecordsCommand.ts"],"sourcesContent":["import { KinesisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../KinesisClient\";\nimport { PutRecordsInput, PutRecordsOutput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1PutRecordsCommand,\n  serializeAws_json1_1PutRecordsCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type PutRecordsCommandInput = PutRecordsInput;\nexport type PutRecordsCommandOutput = PutRecordsOutput & __MetadataBearer;\n\n/**\n * <p>Writes multiple data records into a Kinesis data stream in a single call (also\n *             referred to as a <code>PutRecords</code> request). Use this operation to send data into\n *             the stream for data ingestion and processing. </p>\n *         <p>Each <code>PutRecords</code> request can support up to 500 records. Each record in\n *             the request can be as large as 1 MiB, up to a limit of 5 MiB for the entire request,\n *             including partition keys. Each shard can support writes up to 1,000 records per second,\n *             up to a maximum data write total of 1 MiB per second.</p>\n *         <p>You must specify the name of the stream that captures, stores, and transports the\n *             data; and an array of request <code>Records</code>, with each record in the array\n *             requiring a partition key and data blob. The record size limit applies to the total size\n *             of the partition key and data blob.</p>\n *         <p>The data blob can be any type of data; for example, a segment from a log file,\n *             geographic/location data, website clickstream data, and so on.</p>\n *         <p>The partition key is used by Kinesis Data Streams as input to a hash function that\n *             maps the partition key and associated data to a specific shard. An MD5 hash function is\n *             used to map partition keys to 128-bit integer values and to map associated data records\n *             to shards. As a result of this hashing mechanism, all data records with the same\n *             partition key map to the same shard within the stream. For more information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream\">Adding Data to a Stream</a> in the <i>Amazon Kinesis Data Streams\n *                 Developer Guide</i>.</p>\n *         <p>Each record in the <code>Records</code> array may include an optional parameter,\n *                 <code>ExplicitHashKey</code>, which overrides the partition key to shard mapping.\n *             This parameter allows a data producer to determine explicitly the shard where the record\n *             is stored. For more information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-putrecords\">Adding Multiple Records with PutRecords</a> in the <i>Amazon Kinesis\n *                 Data Streams Developer Guide</i>.</p>\n *         <p>The <code>PutRecords</code> response includes an array of response\n *                 <code>Records</code>. Each record in the response array directly correlates with a\n *             record in the request array using natural ordering, from the top to the bottom of the\n *             request and response. The response <code>Records</code> array always includes the same\n *             number of records as the request array.</p>\n *         <p>The response <code>Records</code> array includes both successfully and\n *             unsuccessfully processed records. Kinesis Data Streams attempts to process all records\n *             in each <code>PutRecords</code> request. A single record failure does not stop the\n *             processing of subsequent records. As a result, PutRecords doesn't guarantee the ordering\n *             of records. If you need to read records in the same order they are written to the\n *             stream, use <a>PutRecord</a> instead of <code>PutRecords</code>, and write to\n *             the same shard.</p>\n *         <p>A successfully processed record includes <code>ShardId</code> and\n *                 <code>SequenceNumber</code> values. The <code>ShardId</code> parameter identifies\n *             the shard in the stream where the record is stored. The <code>SequenceNumber</code>\n *             parameter is an identifier assigned to the put record, unique to all records in the\n *             stream.</p>\n *         <p>An unsuccessfully processed record includes <code>ErrorCode</code> and\n *                 <code>ErrorMessage</code> values. <code>ErrorCode</code> reflects the type of error\n *             and can be one of the following values:\n *                 <code>ProvisionedThroughputExceededException</code> or <code>InternalFailure</code>.\n *                 <code>ErrorMessage</code> provides more detailed information about the\n *                 <code>ProvisionedThroughputExceededException</code> exception including the account\n *             ID, stream name, and shard ID of the record that was throttled. For more information\n *             about partially successful responses, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-add-data-to-stream.html#kinesis-using-sdk-java-putrecords\">Adding Multiple Records with PutRecords</a> in the <i>Amazon Kinesis\n *                 Data Streams Developer Guide</i>.</p>\n *         <important>\n *             <p>After you write a record to a stream, you cannot modify that record or its order\n *                 within the stream.</p>\n *         </important>\n *         <p>By default, data records are accessible for 24 hours from the time that they are\n *             added to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or <a>DecreaseStreamRetentionPeriod</a> to modify this retention period.</p>\n */\nexport class PutRecordsCommand extends $Command<\n  PutRecordsCommandInput,\n  PutRecordsCommandOutput,\n  KinesisClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: PutRecordsCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: KinesisClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<PutRecordsCommandInput, PutRecordsCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"KinesisClient\";\n    const commandName = \"PutRecordsCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: PutRecordsInput.filterSensitiveLog,\n      outputFilterSensitiveLog: PutRecordsOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: PutRecordsCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1PutRecordsCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<PutRecordsCommandOutput> {\n    return deserializeAws_json1_1PutRecordsCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}