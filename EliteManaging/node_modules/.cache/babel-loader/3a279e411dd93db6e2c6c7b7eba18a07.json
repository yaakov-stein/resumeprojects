{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { SENSITIVE_STRING } from \"@aws-sdk/smithy-client\";\nexport var Term;\n\n(function (Term) {\n  Term.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Term || (Term = {}));\n\nexport var AppliedTerminology;\n\n(function (AppliedTerminology) {\n  AppliedTerminology.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(AppliedTerminology || (AppliedTerminology = {}));\n\nexport var ConflictException;\n\n(function (ConflictException) {\n  ConflictException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ConflictException || (ConflictException = {}));\n\nexport var EncryptionKeyType;\n\n(function (EncryptionKeyType) {\n  EncryptionKeyType[\"KMS\"] = \"KMS\";\n})(EncryptionKeyType || (EncryptionKeyType = {}));\n\nexport var EncryptionKey;\n\n(function (EncryptionKey) {\n  EncryptionKey.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EncryptionKey || (EncryptionKey = {}));\n\nexport var ParallelDataFormat;\n\n(function (ParallelDataFormat) {\n  ParallelDataFormat[\"CSV\"] = \"CSV\";\n  ParallelDataFormat[\"TMX\"] = \"TMX\";\n  ParallelDataFormat[\"TSV\"] = \"TSV\";\n})(ParallelDataFormat || (ParallelDataFormat = {}));\n\nexport var ParallelDataConfig;\n\n(function (ParallelDataConfig) {\n  ParallelDataConfig.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ParallelDataConfig || (ParallelDataConfig = {}));\n\nexport var CreateParallelDataRequest;\n\n(function (CreateParallelDataRequest) {\n  CreateParallelDataRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(CreateParallelDataRequest || (CreateParallelDataRequest = {}));\n\nexport var ParallelDataStatus;\n\n(function (ParallelDataStatus) {\n  ParallelDataStatus[\"ACTIVE\"] = \"ACTIVE\";\n  ParallelDataStatus[\"CREATING\"] = \"CREATING\";\n  ParallelDataStatus[\"DELETING\"] = \"DELETING\";\n  ParallelDataStatus[\"FAILED\"] = \"FAILED\";\n  ParallelDataStatus[\"UPDATING\"] = \"UPDATING\";\n})(ParallelDataStatus || (ParallelDataStatus = {}));\n\nexport var CreateParallelDataResponse;\n\n(function (CreateParallelDataResponse) {\n  CreateParallelDataResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(CreateParallelDataResponse || (CreateParallelDataResponse = {}));\n\nexport var InternalServerException;\n\n(function (InternalServerException) {\n  InternalServerException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InternalServerException || (InternalServerException = {}));\n\nexport var InvalidParameterValueException;\n\n(function (InvalidParameterValueException) {\n  InvalidParameterValueException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidParameterValueException || (InvalidParameterValueException = {}));\n\nexport var InvalidRequestException;\n\n(function (InvalidRequestException) {\n  InvalidRequestException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidRequestException || (InvalidRequestException = {}));\n\nexport var LimitExceededException;\n\n(function (LimitExceededException) {\n  LimitExceededException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(LimitExceededException || (LimitExceededException = {}));\n\nexport var TooManyRequestsException;\n\n(function (TooManyRequestsException) {\n  TooManyRequestsException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TooManyRequestsException || (TooManyRequestsException = {}));\n\nexport var ConcurrentModificationException;\n\n(function (ConcurrentModificationException) {\n  ConcurrentModificationException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ConcurrentModificationException || (ConcurrentModificationException = {}));\n\nexport var DeleteParallelDataRequest;\n\n(function (DeleteParallelDataRequest) {\n  DeleteParallelDataRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteParallelDataRequest || (DeleteParallelDataRequest = {}));\n\nexport var DeleteParallelDataResponse;\n\n(function (DeleteParallelDataResponse) {\n  DeleteParallelDataResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteParallelDataResponse || (DeleteParallelDataResponse = {}));\n\nexport var ResourceNotFoundException;\n\n(function (ResourceNotFoundException) {\n  ResourceNotFoundException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ResourceNotFoundException || (ResourceNotFoundException = {}));\n\nexport var DeleteTerminologyRequest;\n\n(function (DeleteTerminologyRequest) {\n  DeleteTerminologyRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteTerminologyRequest || (DeleteTerminologyRequest = {}));\n\nexport var DescribeTextTranslationJobRequest;\n\n(function (DescribeTextTranslationJobRequest) {\n  DescribeTextTranslationJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeTextTranslationJobRequest || (DescribeTextTranslationJobRequest = {}));\n\nexport var InputDataConfig;\n\n(function (InputDataConfig) {\n  InputDataConfig.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InputDataConfig || (InputDataConfig = {}));\n\nexport var JobDetails;\n\n(function (JobDetails) {\n  JobDetails.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(JobDetails || (JobDetails = {}));\n\nexport var JobStatus;\n\n(function (JobStatus) {\n  JobStatus[\"COMPLETED\"] = \"COMPLETED\";\n  JobStatus[\"COMPLETED_WITH_ERROR\"] = \"COMPLETED_WITH_ERROR\";\n  JobStatus[\"FAILED\"] = \"FAILED\";\n  JobStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n  JobStatus[\"STOPPED\"] = \"STOPPED\";\n  JobStatus[\"STOP_REQUESTED\"] = \"STOP_REQUESTED\";\n  JobStatus[\"SUBMITTED\"] = \"SUBMITTED\";\n})(JobStatus || (JobStatus = {}));\n\nexport var OutputDataConfig;\n\n(function (OutputDataConfig) {\n  OutputDataConfig.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(OutputDataConfig || (OutputDataConfig = {}));\n\nexport var TextTranslationJobProperties;\n\n(function (TextTranslationJobProperties) {\n  TextTranslationJobProperties.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TextTranslationJobProperties || (TextTranslationJobProperties = {}));\n\nexport var DescribeTextTranslationJobResponse;\n\n(function (DescribeTextTranslationJobResponse) {\n  DescribeTextTranslationJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeTextTranslationJobResponse || (DescribeTextTranslationJobResponse = {}));\n\nexport var GetParallelDataRequest;\n\n(function (GetParallelDataRequest) {\n  GetParallelDataRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetParallelDataRequest || (GetParallelDataRequest = {}));\n\nexport var ParallelDataDataLocation;\n\n(function (ParallelDataDataLocation) {\n  ParallelDataDataLocation.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ParallelDataDataLocation || (ParallelDataDataLocation = {}));\n\nexport var ParallelDataProperties;\n\n(function (ParallelDataProperties) {\n  ParallelDataProperties.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ParallelDataProperties || (ParallelDataProperties = {}));\n\nexport var GetParallelDataResponse;\n\n(function (GetParallelDataResponse) {\n  GetParallelDataResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetParallelDataResponse || (GetParallelDataResponse = {}));\n\nexport var TerminologyDataFormat;\n\n(function (TerminologyDataFormat) {\n  TerminologyDataFormat[\"CSV\"] = \"CSV\";\n  TerminologyDataFormat[\"TMX\"] = \"TMX\";\n})(TerminologyDataFormat || (TerminologyDataFormat = {}));\n\nexport var GetTerminologyRequest;\n\n(function (GetTerminologyRequest) {\n  GetTerminologyRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetTerminologyRequest || (GetTerminologyRequest = {}));\n\nexport var TerminologyDataLocation;\n\n(function (TerminologyDataLocation) {\n  TerminologyDataLocation.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TerminologyDataLocation || (TerminologyDataLocation = {}));\n\nexport var TerminologyProperties;\n\n(function (TerminologyProperties) {\n  TerminologyProperties.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TerminologyProperties || (TerminologyProperties = {}));\n\nexport var GetTerminologyResponse;\n\n(function (GetTerminologyResponse) {\n  GetTerminologyResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetTerminologyResponse || (GetTerminologyResponse = {}));\n\nexport var MergeStrategy;\n\n(function (MergeStrategy) {\n  MergeStrategy[\"OVERWRITE\"] = \"OVERWRITE\";\n})(MergeStrategy || (MergeStrategy = {}));\n\nexport var TerminologyData;\n\n(function (TerminologyData) {\n  TerminologyData.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.File && {\n      File: SENSITIVE_STRING\n    });\n  };\n})(TerminologyData || (TerminologyData = {}));\n\nexport var ImportTerminologyRequest;\n\n(function (ImportTerminologyRequest) {\n  ImportTerminologyRequest.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.TerminologyData && {\n      TerminologyData: TerminologyData.filterSensitiveLog(obj.TerminologyData)\n    });\n  };\n})(ImportTerminologyRequest || (ImportTerminologyRequest = {}));\n\nexport var ImportTerminologyResponse;\n\n(function (ImportTerminologyResponse) {\n  ImportTerminologyResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ImportTerminologyResponse || (ImportTerminologyResponse = {}));\n\nexport var ListParallelDataRequest;\n\n(function (ListParallelDataRequest) {\n  ListParallelDataRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListParallelDataRequest || (ListParallelDataRequest = {}));\n\nexport var ListParallelDataResponse;\n\n(function (ListParallelDataResponse) {\n  ListParallelDataResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListParallelDataResponse || (ListParallelDataResponse = {}));\n\nexport var ListTerminologiesRequest;\n\n(function (ListTerminologiesRequest) {\n  ListTerminologiesRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListTerminologiesRequest || (ListTerminologiesRequest = {}));\n\nexport var ListTerminologiesResponse;\n\n(function (ListTerminologiesResponse) {\n  ListTerminologiesResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListTerminologiesResponse || (ListTerminologiesResponse = {}));\n\nexport var InvalidFilterException;\n\n(function (InvalidFilterException) {\n  InvalidFilterException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidFilterException || (InvalidFilterException = {}));\n\nexport var TextTranslationJobFilter;\n\n(function (TextTranslationJobFilter) {\n  TextTranslationJobFilter.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TextTranslationJobFilter || (TextTranslationJobFilter = {}));\n\nexport var ListTextTranslationJobsRequest;\n\n(function (ListTextTranslationJobsRequest) {\n  ListTextTranslationJobsRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListTextTranslationJobsRequest || (ListTextTranslationJobsRequest = {}));\n\nexport var ListTextTranslationJobsResponse;\n\n(function (ListTextTranslationJobsResponse) {\n  ListTextTranslationJobsResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListTextTranslationJobsResponse || (ListTextTranslationJobsResponse = {}));\n\nexport var StartTextTranslationJobRequest;\n\n(function (StartTextTranslationJobRequest) {\n  StartTextTranslationJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartTextTranslationJobRequest || (StartTextTranslationJobRequest = {}));\n\nexport var StartTextTranslationJobResponse;\n\n(function (StartTextTranslationJobResponse) {\n  StartTextTranslationJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartTextTranslationJobResponse || (StartTextTranslationJobResponse = {}));\n\nexport var UnsupportedLanguagePairException;\n\n(function (UnsupportedLanguagePairException) {\n  UnsupportedLanguagePairException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(UnsupportedLanguagePairException || (UnsupportedLanguagePairException = {}));\n\nexport var StopTextTranslationJobRequest;\n\n(function (StopTextTranslationJobRequest) {\n  StopTextTranslationJobRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopTextTranslationJobRequest || (StopTextTranslationJobRequest = {}));\n\nexport var StopTextTranslationJobResponse;\n\n(function (StopTextTranslationJobResponse) {\n  StopTextTranslationJobResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopTextTranslationJobResponse || (StopTextTranslationJobResponse = {}));\n\nexport var DetectedLanguageLowConfidenceException;\n\n(function (DetectedLanguageLowConfidenceException) {\n  DetectedLanguageLowConfidenceException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DetectedLanguageLowConfidenceException || (DetectedLanguageLowConfidenceException = {}));\n\nexport var ServiceUnavailableException;\n\n(function (ServiceUnavailableException) {\n  ServiceUnavailableException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ServiceUnavailableException || (ServiceUnavailableException = {}));\n\nexport var TextSizeLimitExceededException;\n\n(function (TextSizeLimitExceededException) {\n  TextSizeLimitExceededException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TextSizeLimitExceededException || (TextSizeLimitExceededException = {}));\n\nexport var TranslateTextRequest;\n\n(function (TranslateTextRequest) {\n  TranslateTextRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TranslateTextRequest || (TranslateTextRequest = {}));\n\nexport var TranslateTextResponse;\n\n(function (TranslateTextResponse) {\n  TranslateTextResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(TranslateTextResponse || (TranslateTextResponse = {}));\n\nexport var UpdateParallelDataRequest;\n\n(function (UpdateParallelDataRequest) {\n  UpdateParallelDataRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(UpdateParallelDataRequest || (UpdateParallelDataRequest = {}));\n\nexport var UpdateParallelDataResponse;\n\n(function (UpdateParallelDataResponse) {\n  UpdateParallelDataResponse.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(UpdateParallelDataResponse || (UpdateParallelDataResponse = {}));","map":{"version":3,"mappings":"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","names":["SENSITIVE_STRING","Term","obj","AppliedTerminology","ConflictException","EncryptionKeyType","EncryptionKey","ParallelDataFormat","ParallelDataConfig","CreateParallelDataRequest","ParallelDataStatus","CreateParallelDataResponse","InternalServerException","InvalidParameterValueException","InvalidRequestException","LimitExceededException","TooManyRequestsException","ConcurrentModificationException","DeleteParallelDataRequest","DeleteParallelDataResponse","ResourceNotFoundException","DeleteTerminologyRequest","DescribeTextTranslationJobRequest","InputDataConfig","JobDetails","JobStatus","OutputDataConfig","TextTranslationJobProperties","DescribeTextTranslationJobResponse","GetParallelDataRequest","ParallelDataDataLocation","ParallelDataProperties","GetParallelDataResponse","TerminologyDataFormat","GetTerminologyRequest","TerminologyDataLocation","TerminologyProperties","GetTerminologyResponse","MergeStrategy","TerminologyData","File","ImportTerminologyRequest","filterSensitiveLog","ImportTerminologyResponse","ListParallelDataRequest","ListParallelDataResponse","ListTerminologiesRequest","ListTerminologiesResponse","InvalidFilterException","TextTranslationJobFilter","ListTextTranslationJobsRequest","ListTextTranslationJobsResponse","StartTextTranslationJobRequest","StartTextTranslationJobResponse","UnsupportedLanguagePairException","StopTextTranslationJobRequest","StopTextTranslationJobResponse","DetectedLanguageLowConfidenceException","ServiceUnavailableException","TextSizeLimitExceededException","TranslateTextRequest","TranslateTextResponse","UpdateParallelDataRequest","UpdateParallelDataResponse"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-translate\\models\\models_0.ts"],"sourcesContent":["import { SENSITIVE_STRING, SmithyException as __SmithyException } from \"@aws-sdk/smithy-client\";\nimport { MetadataBearer as $MetadataBearer } from \"@aws-sdk/types\";\n\n/**\n * <p>The term being translated by the custom terminology.</p>\n */\nexport interface Term {\n  /**\n   * <p>The source text of the term being translated by the custom terminology.</p>\n   */\n  SourceText?: string;\n\n  /**\n   * <p>The target text of the term being translated by the custom terminology.</p>\n   */\n  TargetText?: string;\n}\n\nexport namespace Term {\n  export const filterSensitiveLog = (obj: Term): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The custom terminology applied to the input text by Amazon Translate for the translated text\n *       response. This is optional in the response and will only be present if you specified\n *       terminology input in the request. Currently, only one terminology can be applied per\n *       TranslateText request.</p>\n */\nexport interface AppliedTerminology {\n  /**\n   * <p>The name of the custom terminology applied to the input text by Amazon Translate for the translated\n   *       text response.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>The specific terms of the custom terminology applied to the input text by Amazon Translate for the\n   *       translated text response. A maximum of 250 terms will be returned, and the specific terms\n   *       applied will be the first 250 terms in the source text. </p>\n   */\n  Terms?: Term[];\n}\n\nexport namespace AppliedTerminology {\n  export const filterSensitiveLog = (obj: AppliedTerminology): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>There was a conflict processing the request. Try your request again.</p>\n */\nexport interface ConflictException extends __SmithyException, $MetadataBearer {\n  name: \"ConflictException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace ConflictException {\n  export const filterSensitiveLog = (obj: ConflictException): any => ({\n    ...obj,\n  });\n}\n\nexport enum EncryptionKeyType {\n  KMS = \"KMS\",\n}\n\n/**\n * <p>The encryption key used to encrypt this object.</p>\n */\nexport interface EncryptionKey {\n  /**\n   * <p>The type of encryption key used by Amazon Translate to encrypt custom terminologies.</p>\n   */\n  Type: EncryptionKeyType | string | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the encryption key being used to encrypt the custom\n   *       terminology.</p>\n   */\n  Id: string | undefined;\n}\n\nexport namespace EncryptionKey {\n  export const filterSensitiveLog = (obj: EncryptionKey): any => ({\n    ...obj,\n  });\n}\n\nexport enum ParallelDataFormat {\n  CSV = \"CSV\",\n  TMX = \"TMX\",\n  TSV = \"TSV\",\n}\n\n/**\n * <p>Specifies the format and S3 location of the parallel data input file.</p>\n */\nexport interface ParallelDataConfig {\n  /**\n   * <p>The URI of the Amazon S3 folder that contains the parallel data input file. The folder\n   *       must be in the same Region as the API endpoint you are calling.</p>\n   */\n  S3Uri: string | undefined;\n\n  /**\n   * <p>The format of the parallel data input file.</p>\n   */\n  Format: ParallelDataFormat | string | undefined;\n}\n\nexport namespace ParallelDataConfig {\n  export const filterSensitiveLog = (obj: ParallelDataConfig): any => ({\n    ...obj,\n  });\n}\n\nexport interface CreateParallelDataRequest {\n  /**\n   * <p>A custom name for the parallel data resource in Amazon Translate. You must assign a name\n   *       that is unique in the account and region.</p>\n   */\n  Name: string | undefined;\n\n  /**\n   * <p>A custom description for the parallel data resource in Amazon Translate.</p>\n   */\n  Description?: string;\n\n  /**\n   * <p>Specifies the format and S3 location of the parallel data input file.</p>\n   */\n  ParallelDataConfig: ParallelDataConfig | undefined;\n\n  /**\n   * <p>The encryption key used to encrypt this object.</p>\n   */\n  EncryptionKey?: EncryptionKey;\n\n  /**\n   * <p>A unique identifier for the request. This token is automatically generated when you use\n   *       Amazon Translate through an AWS SDK.</p>\n   */\n  ClientToken?: string;\n}\n\nexport namespace CreateParallelDataRequest {\n  export const filterSensitiveLog = (obj: CreateParallelDataRequest): any => ({\n    ...obj,\n  });\n}\n\nexport enum ParallelDataStatus {\n  ACTIVE = \"ACTIVE\",\n  CREATING = \"CREATING\",\n  DELETING = \"DELETING\",\n  FAILED = \"FAILED\",\n  UPDATING = \"UPDATING\",\n}\n\nexport interface CreateParallelDataResponse {\n  /**\n   * <p>The custom name that you assigned to the parallel data resource.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>The status of the parallel data resource. When the resource is ready for you to use, the\n   *       status is <code>ACTIVE</code>.</p>\n   */\n  Status?: ParallelDataStatus | string;\n}\n\nexport namespace CreateParallelDataResponse {\n  export const filterSensitiveLog = (obj: CreateParallelDataResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>An internal server error occurred. Retry your request.</p>\n */\nexport interface InternalServerException extends __SmithyException, $MetadataBearer {\n  name: \"InternalServerException\";\n  $fault: \"server\";\n  Message?: string;\n}\n\nexport namespace InternalServerException {\n  export const filterSensitiveLog = (obj: InternalServerException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The value of the parameter is invalid. Review the value of the parameter you are using to\n *       correct it, and then retry your operation.</p>\n */\nexport interface InvalidParameterValueException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidParameterValueException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace InvalidParameterValueException {\n  export const filterSensitiveLog = (obj: InvalidParameterValueException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p> The request that you made is invalid. Check your request to determine why it's invalid\n *       and then retry the request. </p>\n */\nexport interface InvalidRequestException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidRequestException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace InvalidRequestException {\n  export const filterSensitiveLog = (obj: InvalidRequestException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The specified limit has been exceeded. Review your request and retry it with a quantity\n *       below the stated limit.</p>\n */\nexport interface LimitExceededException extends __SmithyException, $MetadataBearer {\n  name: \"LimitExceededException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace LimitExceededException {\n  export const filterSensitiveLog = (obj: LimitExceededException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p> You have made too many requests within a short period of time. Wait for a short time and\n *       then try your request again.</p>\n */\nexport interface TooManyRequestsException extends __SmithyException, $MetadataBearer {\n  name: \"TooManyRequestsException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace TooManyRequestsException {\n  export const filterSensitiveLog = (obj: TooManyRequestsException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Another modification is being made. That modification must complete before you can make\n *       your change.</p>\n */\nexport interface ConcurrentModificationException extends __SmithyException, $MetadataBearer {\n  name: \"ConcurrentModificationException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace ConcurrentModificationException {\n  export const filterSensitiveLog = (obj: ConcurrentModificationException): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteParallelDataRequest {\n  /**\n   * <p>The name of the parallel data resource that is being deleted.</p>\n   */\n  Name: string | undefined;\n}\n\nexport namespace DeleteParallelDataRequest {\n  export const filterSensitiveLog = (obj: DeleteParallelDataRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteParallelDataResponse {\n  /**\n   * <p>The name of the parallel data resource that is being deleted.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>The status of the parallel data deletion.</p>\n   */\n  Status?: ParallelDataStatus | string;\n}\n\nexport namespace DeleteParallelDataResponse {\n  export const filterSensitiveLog = (obj: DeleteParallelDataResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The resource you are looking for has not been found. Review the resource you're looking\n *       for and see if a different resource will accomplish your needs before retrying the revised\n *       request.</p>\n */\nexport interface ResourceNotFoundException extends __SmithyException, $MetadataBearer {\n  name: \"ResourceNotFoundException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace ResourceNotFoundException {\n  export const filterSensitiveLog = (obj: ResourceNotFoundException): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeleteTerminologyRequest {\n  /**\n   * <p>The name of the custom terminology being deleted. </p>\n   */\n  Name: string | undefined;\n}\n\nexport namespace DeleteTerminologyRequest {\n  export const filterSensitiveLog = (obj: DeleteTerminologyRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeTextTranslationJobRequest {\n  /**\n   * <p>The identifier that Amazon Translate generated for the job. The <a>StartTextTranslationJob</a> operation returns this identifier in its\n   *       response.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace DescribeTextTranslationJobRequest {\n  export const filterSensitiveLog = (obj: DescribeTextTranslationJobRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The input configuration properties for requesting a batch translation job.</p>\n */\nexport interface InputDataConfig {\n  /**\n   * <p>The URI of the AWS S3 folder that contains the input file. The folder must be in the\n   *       same Region as the API endpoint you are calling.</p>\n   */\n  S3Uri: string | undefined;\n\n  /**\n   * <p>Describes the format of the data that you submit to Amazon Translate as input. You can\n   *       specify one of the following multipurpose internet mail extension (MIME) types:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>text/html</code>: The input data consists of one or more HTML files. Amazon\n   *           Translate translates only the text that resides in the <code>html</code> element in each\n   *           file.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>text/plain</code>: The input data consists of one or more unformatted text\n   *           files. Amazon Translate translates every character in this type of input.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>application/vnd.openxmlformats-officedocument.wordprocessingml.document</code>:\n   *           The input data consists of one or more Word documents (.docx).</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>application/vnd.openxmlformats-officedocument.presentationml.presentation</code>:\n   *           The input data consists of one or more PowerPoint Presentation files (.pptx).</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code>: The\n   *           input data consists of one or more Excel Workbook files (.xlsx).</p>\n   *             </li>\n   *          </ul>\n   *          <important>\n   *             <p>If you structure your input data as HTML, ensure that you set this parameter to\n   *           <code>text/html</code>. By doing so, you cut costs by limiting the translation to the\n   *         contents of the <code>html</code> element in each file. Otherwise, if you set this parameter\n   *         to <code>text/plain</code>, your costs will cover the translation of every character.</p>\n   *          </important>\n   */\n  ContentType: string | undefined;\n}\n\nexport namespace InputDataConfig {\n  export const filterSensitiveLog = (obj: InputDataConfig): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The number of documents successfully and unsuccessfully processed during a translation\n *       job.</p>\n */\nexport interface JobDetails {\n  /**\n   * <p>The number of documents successfully processed during a translation job.</p>\n   */\n  TranslatedDocumentsCount?: number;\n\n  /**\n   * <p>The number of documents that could not be processed during a translation job.</p>\n   */\n  DocumentsWithErrorsCount?: number;\n\n  /**\n   * <p>The number of documents used as input in a translation job.</p>\n   */\n  InputDocumentsCount?: number;\n}\n\nexport namespace JobDetails {\n  export const filterSensitiveLog = (obj: JobDetails): any => ({\n    ...obj,\n  });\n}\n\nexport enum JobStatus {\n  COMPLETED = \"COMPLETED\",\n  COMPLETED_WITH_ERROR = \"COMPLETED_WITH_ERROR\",\n  FAILED = \"FAILED\",\n  IN_PROGRESS = \"IN_PROGRESS\",\n  STOPPED = \"STOPPED\",\n  STOP_REQUESTED = \"STOP_REQUESTED\",\n  SUBMITTED = \"SUBMITTED\",\n}\n\n/**\n * <p>The output configuration properties for a batch translation job.</p>\n */\nexport interface OutputDataConfig {\n  /**\n   * <p>The URI of the S3 folder that contains a translation job's output file. The folder must\n   *       be in the same Region as the API endpoint that you are calling.</p>\n   */\n  S3Uri: string | undefined;\n}\n\nexport namespace OutputDataConfig {\n  export const filterSensitiveLog = (obj: OutputDataConfig): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information about a translation job.</p>\n */\nexport interface TextTranslationJobProperties {\n  /**\n   * <p>The ID of the translation job.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The user-defined name of the translation job.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>The status of the translation job.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>The number of documents successfully and unsuccessfully processed during the translation\n   *       job.</p>\n   */\n  JobDetails?: JobDetails;\n\n  /**\n   * <p>The language code of the language of the source text. The language must be a language\n   *       supported by Amazon Translate.</p>\n   */\n  SourceLanguageCode?: string;\n\n  /**\n   * <p>The language code of the language of the target text. The language must be a language\n   *       supported by Amazon Translate.</p>\n   */\n  TargetLanguageCodes?: string[];\n\n  /**\n   * <p>A list containing the names of the terminologies applied to a translation job. Only one\n   *       terminology can be applied per <a>StartTextTranslationJob</a> request at this\n   *       time.</p>\n   */\n  TerminologyNames?: string[];\n\n  /**\n   * <p>A list containing the names of the parallel data resources applied to the translation\n   *       job.</p>\n   */\n  ParallelDataNames?: string[];\n\n  /**\n   * <p>An explanation of any errors that may have occured during the translation job.</p>\n   */\n  Message?: string;\n\n  /**\n   * <p>The time at which the translation job was submitted.</p>\n   */\n  SubmittedTime?: Date;\n\n  /**\n   * <p>The time at which the translation job ended.</p>\n   */\n  EndTime?: Date;\n\n  /**\n   * <p>The input configuration properties that were specified when the job was requested.</p>\n   */\n  InputDataConfig?: InputDataConfig;\n\n  /**\n   * <p>The output configuration properties that were specified when the job was requested.</p>\n   */\n  OutputDataConfig?: OutputDataConfig;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of an AWS Identity Access and Management (IAM) role\n   *       that granted Amazon Translate read access to the job's input data.</p>\n   */\n  DataAccessRoleArn?: string;\n}\n\nexport namespace TextTranslationJobProperties {\n  export const filterSensitiveLog = (obj: TextTranslationJobProperties): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeTextTranslationJobResponse {\n  /**\n   * <p>An object that contains the properties associated with an asynchronous batch translation\n   *       job.</p>\n   */\n  TextTranslationJobProperties?: TextTranslationJobProperties;\n}\n\nexport namespace DescribeTextTranslationJobResponse {\n  export const filterSensitiveLog = (obj: DescribeTextTranslationJobResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetParallelDataRequest {\n  /**\n   * <p>The name of the parallel data resource that is being retrieved.</p>\n   */\n  Name: string | undefined;\n}\n\nexport namespace GetParallelDataRequest {\n  export const filterSensitiveLog = (obj: GetParallelDataRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The location of the most recent parallel data input file that was successfully imported\n *       into Amazon Translate.</p>\n */\nexport interface ParallelDataDataLocation {\n  /**\n   * <p>Describes the repository that contains the parallel data input file.</p>\n   */\n  RepositoryType: string | undefined;\n\n  /**\n   * <p>The Amazon S3 location of the parallel data input file. The location is returned as a\n   *       presigned URL to that has a 30 minute expiration.</p>\n   */\n  Location: string | undefined;\n}\n\nexport namespace ParallelDataDataLocation {\n  export const filterSensitiveLog = (obj: ParallelDataDataLocation): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The properties of a parallel data resource.</p>\n */\nexport interface ParallelDataProperties {\n  /**\n   * <p>The custom name assigned to the parallel data resource.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of the parallel data resource.</p>\n   */\n  Arn?: string;\n\n  /**\n   * <p>The description assigned to the parallel data resource.</p>\n   */\n  Description?: string;\n\n  /**\n   * <p>The status of the parallel data resource. When the parallel data is ready for you to use,\n   *       the status is <code>ACTIVE</code>.</p>\n   */\n  Status?: ParallelDataStatus | string;\n\n  /**\n   * <p>The source language of the translations in the parallel data file.</p>\n   */\n  SourceLanguageCode?: string;\n\n  /**\n   * <p>The language codes for the target languages available in the parallel data file. All\n   *       possible target languages are returned as an array.</p>\n   */\n  TargetLanguageCodes?: string[];\n\n  /**\n   * <p>Specifies the format and S3 location of the parallel data input file.</p>\n   */\n  ParallelDataConfig?: ParallelDataConfig;\n\n  /**\n   * <p>Additional information from Amazon Translate about the parallel data resource. </p>\n   */\n  Message?: string;\n\n  /**\n   * <p>The number of UTF-8 characters that Amazon Translate imported from the parallel data input\n   *       file. This number includes only the characters in your translation examples. It does not\n   *       include characters that are used to format your file. For example, if you provided a\n   *       Translation Memory Exchange (.tmx) file, this number does not include the tags.</p>\n   */\n  ImportedDataSize?: number;\n\n  /**\n   * <p>The number of records successfully imported from the parallel data input file.</p>\n   */\n  ImportedRecordCount?: number;\n\n  /**\n   * <p>The number of records unsuccessfully imported from the parallel data input file.</p>\n   */\n  FailedRecordCount?: number;\n\n  /**\n   * <p>The number of items in the input file that Amazon Translate skipped when you created or\n   *       updated the parallel data resource. For example, Amazon Translate skips empty records, empty\n   *       target texts, and empty lines.</p>\n   */\n  SkippedRecordCount?: number;\n\n  /**\n   * <p>The encryption key used to encrypt this object.</p>\n   */\n  EncryptionKey?: EncryptionKey;\n\n  /**\n   * <p>The time at which the parallel data resource was created.</p>\n   */\n  CreatedAt?: Date;\n\n  /**\n   * <p>The time at which the parallel data resource was last updated.</p>\n   */\n  LastUpdatedAt?: Date;\n\n  /**\n   * <p>The status of the most recent update attempt for the parallel data resource.</p>\n   */\n  LatestUpdateAttemptStatus?: ParallelDataStatus | string;\n\n  /**\n   * <p>The time that the most recent update was attempted.</p>\n   */\n  LatestUpdateAttemptAt?: Date;\n}\n\nexport namespace ParallelDataProperties {\n  export const filterSensitiveLog = (obj: ParallelDataProperties): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetParallelDataResponse {\n  /**\n   * <p>The properties of the parallel data resource that is being retrieved.</p>\n   */\n  ParallelDataProperties?: ParallelDataProperties;\n\n  /**\n   * <p>The location of the most recent parallel data input file that was successfully imported\n   *       into Amazon Translate. The location is returned as a presigned URL that has a 30 minute\n   *       expiration.</p>\n   */\n  DataLocation?: ParallelDataDataLocation;\n\n  /**\n   * <p>The Amazon S3 location of a file that provides any errors or warnings that were produced\n   *       by your input file. This file was created when Amazon Translate attempted to create a parallel\n   *       data resource. The location is returned as a presigned URL to that has a 30 minute\n   *       expiration.</p>\n   */\n  AuxiliaryDataLocation?: ParallelDataDataLocation;\n\n  /**\n   * <p>The Amazon S3 location of a file that provides any errors or warnings that were produced\n   *       by your input file. This file was created when Amazon Translate attempted to update a parallel\n   *       data resource. The location is returned as a presigned URL to that has a 30 minute\n   *       expiration.</p>\n   */\n  LatestUpdateAttemptAuxiliaryDataLocation?: ParallelDataDataLocation;\n}\n\nexport namespace GetParallelDataResponse {\n  export const filterSensitiveLog = (obj: GetParallelDataResponse): any => ({\n    ...obj,\n  });\n}\n\nexport enum TerminologyDataFormat {\n  CSV = \"CSV\",\n  TMX = \"TMX\",\n}\n\nexport interface GetTerminologyRequest {\n  /**\n   * <p>The name of the custom terminology being retrieved.</p>\n   */\n  Name: string | undefined;\n\n  /**\n   * <p>The data format of the custom terminology being retrieved, either CSV or TMX.</p>\n   */\n  TerminologyDataFormat: TerminologyDataFormat | string | undefined;\n}\n\nexport namespace GetTerminologyRequest {\n  export const filterSensitiveLog = (obj: GetTerminologyRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The location of the custom terminology data.</p>\n */\nexport interface TerminologyDataLocation {\n  /**\n   * <p>The repository type for the custom terminology data.</p>\n   */\n  RepositoryType: string | undefined;\n\n  /**\n   * <p>The location of the custom terminology data.</p>\n   */\n  Location: string | undefined;\n}\n\nexport namespace TerminologyDataLocation {\n  export const filterSensitiveLog = (obj: TerminologyDataLocation): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The properties of the custom terminology.</p>\n */\nexport interface TerminologyProperties {\n  /**\n   * <p>The name of the custom terminology.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>The description of the custom terminology properties.</p>\n   */\n  Description?: string;\n\n  /**\n   * <p> The Amazon Resource Name (ARN) of the custom terminology. </p>\n   */\n  Arn?: string;\n\n  /**\n   * <p>The language code for the source text of the translation request for which the custom\n   *       terminology is being used.</p>\n   */\n  SourceLanguageCode?: string;\n\n  /**\n   * <p>The language codes for the target languages available with the custom terminology file.\n   *       All possible target languages are returned in array.</p>\n   */\n  TargetLanguageCodes?: string[];\n\n  /**\n   * <p>The encryption key for the custom terminology.</p>\n   */\n  EncryptionKey?: EncryptionKey;\n\n  /**\n   * <p>The size of the file used when importing a custom terminology.</p>\n   */\n  SizeBytes?: number;\n\n  /**\n   * <p>The number of terms included in the custom terminology.</p>\n   */\n  TermCount?: number;\n\n  /**\n   * <p>The time at which the custom terminology was created, based on the timestamp.</p>\n   */\n  CreatedAt?: Date;\n\n  /**\n   * <p>The time at which the custom terminology was last update, based on the timestamp.</p>\n   */\n  LastUpdatedAt?: Date;\n}\n\nexport namespace TerminologyProperties {\n  export const filterSensitiveLog = (obj: TerminologyProperties): any => ({\n    ...obj,\n  });\n}\n\nexport interface GetTerminologyResponse {\n  /**\n   * <p>The properties of the custom terminology being retrieved.</p>\n   */\n  TerminologyProperties?: TerminologyProperties;\n\n  /**\n   * <p>The data location of the custom terminology being retrieved. The custom terminology file\n   *       is returned in a presigned url that has a 30 minute expiration.</p>\n   */\n  TerminologyDataLocation?: TerminologyDataLocation;\n}\n\nexport namespace GetTerminologyResponse {\n  export const filterSensitiveLog = (obj: GetTerminologyResponse): any => ({\n    ...obj,\n  });\n}\n\nexport enum MergeStrategy {\n  OVERWRITE = \"OVERWRITE\",\n}\n\n/**\n * <p>The data associated with the custom terminology.</p>\n */\nexport interface TerminologyData {\n  /**\n   * <p>The file containing the custom terminology data. Your version of the AWS SDK performs a\n   *       Base64-encoding on this field before sending a request to the AWS service. Users of the SDK\n   *       should not perform Base64-encoding themselves.</p>\n   */\n  File: Uint8Array | undefined;\n\n  /**\n   * <p>The data format of the custom terminology. Either CSV or TMX.</p>\n   */\n  Format: TerminologyDataFormat | string | undefined;\n}\n\nexport namespace TerminologyData {\n  export const filterSensitiveLog = (obj: TerminologyData): any => ({\n    ...obj,\n    ...(obj.File && { File: SENSITIVE_STRING }),\n  });\n}\n\nexport interface ImportTerminologyRequest {\n  /**\n   * <p>The name of the custom terminology being imported.</p>\n   */\n  Name: string | undefined;\n\n  /**\n   * <p>The merge strategy of the custom terminology being imported. Currently, only the OVERWRITE\n   *       merge strategy is supported. In this case, the imported terminology will overwrite an existing\n   *       terminology of the same name.</p>\n   */\n  MergeStrategy: MergeStrategy | string | undefined;\n\n  /**\n   * <p>The description of the custom terminology being imported.</p>\n   */\n  Description?: string;\n\n  /**\n   * <p>The terminology data for the custom terminology being imported.</p>\n   */\n  TerminologyData: TerminologyData | undefined;\n\n  /**\n   * <p>The encryption key for the custom terminology being imported.</p>\n   */\n  EncryptionKey?: EncryptionKey;\n}\n\nexport namespace ImportTerminologyRequest {\n  export const filterSensitiveLog = (obj: ImportTerminologyRequest): any => ({\n    ...obj,\n    ...(obj.TerminologyData && { TerminologyData: TerminologyData.filterSensitiveLog(obj.TerminologyData) }),\n  });\n}\n\nexport interface ImportTerminologyResponse {\n  /**\n   * <p>The properties of the custom terminology being imported.</p>\n   */\n  TerminologyProperties?: TerminologyProperties;\n}\n\nexport namespace ImportTerminologyResponse {\n  export const filterSensitiveLog = (obj: ImportTerminologyResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListParallelDataRequest {\n  /**\n   * <p>A string that specifies the next page of results to return in a paginated response.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of parallel data resources returned for each request.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListParallelDataRequest {\n  export const filterSensitiveLog = (obj: ListParallelDataRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListParallelDataResponse {\n  /**\n   * <p>The properties of the parallel data resources returned by this request.</p>\n   */\n  ParallelDataPropertiesList?: ParallelDataProperties[];\n\n  /**\n   * <p>The string to use in a subsequent request to get the next page of results in a paginated\n   *       response. This value is null if there are no additional pages.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListParallelDataResponse {\n  export const filterSensitiveLog = (obj: ListParallelDataResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListTerminologiesRequest {\n  /**\n   * <p>If the result of the request to ListTerminologies was truncated, include the NextToken to\n   *       fetch the next group of custom terminologies. </p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of custom terminologies returned per list request.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListTerminologiesRequest {\n  export const filterSensitiveLog = (obj: ListTerminologiesRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListTerminologiesResponse {\n  /**\n   * <p>The properties list of the custom terminologies returned on the list request.</p>\n   */\n  TerminologyPropertiesList?: TerminologyProperties[];\n\n  /**\n   * <p> If the response to the ListTerminologies was truncated, the NextToken fetches the next\n   *       group of custom terminologies.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListTerminologiesResponse {\n  export const filterSensitiveLog = (obj: ListTerminologiesResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The filter specified for the operation is invalid. Specify a different filter.</p>\n */\nexport interface InvalidFilterException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidFilterException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace InvalidFilterException {\n  export const filterSensitiveLog = (obj: InvalidFilterException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Provides information for filtering a list of translation jobs. For more information, see\n *         <a>ListTextTranslationJobs</a>.</p>\n */\nexport interface TextTranslationJobFilter {\n  /**\n   * <p>Filters the list of jobs by name.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>Filters the list of jobs based by job status.</p>\n   */\n  JobStatus?: JobStatus | string;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing and\n   *       returns only the jobs submitted before the specified time. Jobs are returned in ascending\n   *       order, oldest to newest.</p>\n   */\n  SubmittedBeforeTime?: Date;\n\n  /**\n   * <p>Filters the list of jobs based on the time that the job was submitted for processing and\n   *       returns only the jobs submitted after the specified time. Jobs are returned in descending\n   *       order, newest to oldest.</p>\n   */\n  SubmittedAfterTime?: Date;\n}\n\nexport namespace TextTranslationJobFilter {\n  export const filterSensitiveLog = (obj: TextTranslationJobFilter): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListTextTranslationJobsRequest {\n  /**\n   * <p>The parameters that specify which batch translation jobs to retrieve. Filters include job\n   *       name, job status, and submission time. You can only set one filter at a time.</p>\n   */\n  Filter?: TextTranslationJobFilter;\n\n  /**\n   * <p>The token to request the next page of results.</p>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of results to return in each page. The default value is 100.</p>\n   */\n  MaxResults?: number;\n}\n\nexport namespace ListTextTranslationJobsRequest {\n  export const filterSensitiveLog = (obj: ListTextTranslationJobsRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListTextTranslationJobsResponse {\n  /**\n   * <p>A list containing the properties of each job that is returned.</p>\n   */\n  TextTranslationJobPropertiesList?: TextTranslationJobProperties[];\n\n  /**\n   * <p>The token to use to retreive the next page of results. This value is <code>null</code>\n   *       when there are no more results to return.</p>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListTextTranslationJobsResponse {\n  export const filterSensitiveLog = (obj: ListTextTranslationJobsResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartTextTranslationJobRequest {\n  /**\n   * <p>The name of the batch translation job to be performed.</p>\n   */\n  JobName?: string;\n\n  /**\n   * <p>Specifies the format and S3 location of the input documents for the translation\n   *       job.</p>\n   */\n  InputDataConfig: InputDataConfig | undefined;\n\n  /**\n   * <p>Specifies the S3 folder to which your job output will be saved.\n   *       </p>\n   */\n  OutputDataConfig: OutputDataConfig | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) of an AWS Identity Access and Management (IAM) role\n   *       that grants Amazon Translate read access to your input data. For more nformation, see <a>identity-and-access-management</a>.</p>\n   */\n  DataAccessRoleArn: string | undefined;\n\n  /**\n   * <p>The language code of the input language. For a list of language codes, see <a>what-is-languages</a>.</p>\n   *          <p>Amazon Translate does not automatically detect a source language during batch translation\n   *       jobs.</p>\n   */\n  SourceLanguageCode: string | undefined;\n\n  /**\n   * <p>The language code of the output language.</p>\n   */\n  TargetLanguageCodes: string[] | undefined;\n\n  /**\n   * <p>The name of the terminology to use in the batch translation job. For a list of available\n   *       terminologies, use the <a>ListTerminologies</a> operation.</p>\n   */\n  TerminologyNames?: string[];\n\n  /**\n   * <p>The names of the parallel data resources to use in the batch translation job. For a list\n   *       of available parallel data resources, use the <a>ListParallelData</a>\n   *       operation.</p>\n   */\n  ParallelDataNames?: string[];\n\n  /**\n   * <p>A unique identifier for the request. This token is auto-generated when using the Amazon Translate\n   *       SDK.</p>\n   */\n  ClientToken?: string;\n}\n\nexport namespace StartTextTranslationJobRequest {\n  export const filterSensitiveLog = (obj: StartTextTranslationJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartTextTranslationJobResponse {\n  /**\n   * <p>The identifier generated for the job. To get the status of a job, use this ID with the\n   *         <a>DescribeTextTranslationJob</a> operation.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The status of the job. Possible values include:</p>\n   *          <ul>\n   *             <li>\n   *                <p>\n   *                   <code>SUBMITTED</code> - The job has been received and is queued for\n   *           processing.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>IN_PROGRESS</code> - Amazon Translate is processing the job.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>COMPLETED</code> - The job was successfully completed and the output is\n   *           available.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>COMPLETED_WITH_ERROR</code> - The job was completed with errors. The errors can\n   *           be analyzed in the job's output.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>FAILED</code> - The job did not complete. To get details, use the <a>DescribeTextTranslationJob</a> operation.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>STOP_REQUESTED</code> - The user who started the job has requested that it be\n   *           stopped.</p>\n   *             </li>\n   *             <li>\n   *                <p>\n   *                   <code>STOPPED</code> - The job has been stopped.</p>\n   *             </li>\n   *          </ul>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StartTextTranslationJobResponse {\n  export const filterSensitiveLog = (obj: StartTextTranslationJobResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Amazon Translate does not support translation from the language of the source text into the requested\n *       target language. For more information, see <a>how-to-error-msg</a>. </p>\n */\nexport interface UnsupportedLanguagePairException extends __SmithyException, $MetadataBearer {\n  name: \"UnsupportedLanguagePairException\";\n  $fault: \"client\";\n  Message?: string;\n  /**\n   * <p>The language code for the language of the input text. </p>\n   */\n  SourceLanguageCode?: string;\n\n  /**\n   * <p>The language code for the language of the translated text. </p>\n   */\n  TargetLanguageCode?: string;\n}\n\nexport namespace UnsupportedLanguagePairException {\n  export const filterSensitiveLog = (obj: UnsupportedLanguagePairException): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopTextTranslationJobRequest {\n  /**\n   * <p>The job ID of the job to be stopped.</p>\n   */\n  JobId: string | undefined;\n}\n\nexport namespace StopTextTranslationJobRequest {\n  export const filterSensitiveLog = (obj: StopTextTranslationJobRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopTextTranslationJobResponse {\n  /**\n   * <p>The job ID of the stopped batch translation job.</p>\n   */\n  JobId?: string;\n\n  /**\n   * <p>The status of the designated job. Upon successful completion, the job's status will be\n   *         <code>STOPPED</code>.</p>\n   */\n  JobStatus?: JobStatus | string;\n}\n\nexport namespace StopTextTranslationJobResponse {\n  export const filterSensitiveLog = (obj: StopTextTranslationJobResponse): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The confidence that Amazon Comprehend accurately detected the source language is low. If a\n *       low confidence level is acceptable for your application, you can use the language in the\n *       exception to call Amazon Translate again. For more information, see the <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectDominantLanguage.html\">DetectDominantLanguage</a> operation in the <i>Amazon Comprehend Developer\n *         Guide</i>. </p>\n */\nexport interface DetectedLanguageLowConfidenceException extends __SmithyException, $MetadataBearer {\n  name: \"DetectedLanguageLowConfidenceException\";\n  $fault: \"client\";\n  Message?: string;\n  /**\n   * <p>The language code of the auto-detected language from Amazon Comprehend.</p>\n   */\n  DetectedLanguageCode?: string;\n}\n\nexport namespace DetectedLanguageLowConfidenceException {\n  export const filterSensitiveLog = (obj: DetectedLanguageLowConfidenceException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The Amazon Translate service is temporarily unavailable. Please wait a bit and then retry your\n *       request.</p>\n */\nexport interface ServiceUnavailableException extends __SmithyException, $MetadataBearer {\n  name: \"ServiceUnavailableException\";\n  $fault: \"server\";\n  Message?: string;\n}\n\nexport namespace ServiceUnavailableException {\n  export const filterSensitiveLog = (obj: ServiceUnavailableException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p> The size of the text you submitted exceeds the size limit. Reduce the size of the text or\n *       use a smaller document and then retry your request. </p>\n */\nexport interface TextSizeLimitExceededException extends __SmithyException, $MetadataBearer {\n  name: \"TextSizeLimitExceededException\";\n  $fault: \"client\";\n  Message?: string;\n}\n\nexport namespace TextSizeLimitExceededException {\n  export const filterSensitiveLog = (obj: TextSizeLimitExceededException): any => ({\n    ...obj,\n  });\n}\n\nexport interface TranslateTextRequest {\n  /**\n   * <p>The text to translate. The text string can be a maximum of 5,000 bytes long. Depending on\n   *       your character set, this may be fewer than 5,000 characters.</p>\n   */\n  Text: string | undefined;\n\n  /**\n   * <p>The name of the terminology list file to be used in the TranslateText request. You can use\n   *       1 terminology list at most in a <code>TranslateText</code> request. Terminology lists can\n   *       contain a maximum of 256 terms.</p>\n   */\n  TerminologyNames?: string[];\n\n  /**\n   * <p>The language code for the language of the source text. The language must be a language\n   *       supported by Amazon Translate. For a list of language codes, see <a>what-is-languages</a>.</p>\n   *          <p>To have Amazon Translate determine the source language of your text, you can specify\n   *         <code>auto</code> in the <code>SourceLanguageCode</code> field. If you specify\n   *         <code>auto</code>, Amazon Translate will call <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/comprehend-general.html\">Amazon\n   *         Comprehend</a> to determine the source language.</p>\n   */\n  SourceLanguageCode: string | undefined;\n\n  /**\n   * <p>The language code requested for the language of the target text. The language must be a\n   *       language supported by Amazon Translate.</p>\n   */\n  TargetLanguageCode: string | undefined;\n}\n\nexport namespace TranslateTextRequest {\n  export const filterSensitiveLog = (obj: TranslateTextRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface TranslateTextResponse {\n  /**\n   * <p>The translated text.</p>\n   */\n  TranslatedText: string | undefined;\n\n  /**\n   * <p>The language code for the language of the source text.</p>\n   */\n  SourceLanguageCode: string | undefined;\n\n  /**\n   * <p>The language code for the language of the target text. </p>\n   */\n  TargetLanguageCode: string | undefined;\n\n  /**\n   * <p>The names of the custom terminologies applied to the input text by Amazon Translate for the\n   *       translated text response.</p>\n   */\n  AppliedTerminologies?: AppliedTerminology[];\n}\n\nexport namespace TranslateTextResponse {\n  export const filterSensitiveLog = (obj: TranslateTextResponse): any => ({\n    ...obj,\n  });\n}\n\nexport interface UpdateParallelDataRequest {\n  /**\n   * <p>The name of the parallel data resource being updated.</p>\n   */\n  Name: string | undefined;\n\n  /**\n   * <p>A custom description for the parallel data resource in Amazon Translate.</p>\n   */\n  Description?: string;\n\n  /**\n   * <p>Specifies the format and S3 location of the parallel data input file.</p>\n   */\n  ParallelDataConfig: ParallelDataConfig | undefined;\n\n  /**\n   * <p>A unique identifier for the request. This token is automatically generated when you use\n   *       Amazon Translate through an AWS SDK.</p>\n   */\n  ClientToken?: string;\n}\n\nexport namespace UpdateParallelDataRequest {\n  export const filterSensitiveLog = (obj: UpdateParallelDataRequest): any => ({\n    ...obj,\n  });\n}\n\nexport interface UpdateParallelDataResponse {\n  /**\n   * <p>The name of the parallel data resource being updated.</p>\n   */\n  Name?: string;\n\n  /**\n   * <p>The status of the parallel data resource that you are attempting to update. Your update\n   *       request is accepted only if this status is either <code>ACTIVE</code> or\n   *       <code>FAILED</code>.</p>\n   */\n  Status?: ParallelDataStatus | string;\n\n  /**\n   * <p>The status of the parallel data update attempt. When the updated parallel data resource is\n   *       ready for you to use, the status is <code>ACTIVE</code>.</p>\n   */\n  LatestUpdateAttemptStatus?: ParallelDataStatus | string;\n\n  /**\n   * <p>The time that the most recent update was attempted.</p>\n   */\n  LatestUpdateAttemptAt?: Date;\n}\n\nexport namespace UpdateParallelDataResponse {\n  export const filterSensitiveLog = (obj: UpdateParallelDataResponse): any => ({\n    ...obj,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}