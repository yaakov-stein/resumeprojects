{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\n\nvar HttpRequest =\n/** @class */\nfunction () {\n  function HttpRequest(options) {\n    this.method = options.method || \"GET\";\n    this.hostname = options.hostname || \"localhost\";\n    this.port = options.port;\n    this.query = options.query || {};\n    this.headers = options.headers || {};\n    this.body = options.body;\n    this.protocol = options.protocol ? options.protocol.substr(-1) !== \":\" ? options.protocol + \":\" : options.protocol : \"https:\";\n    this.path = options.path ? options.path.charAt(0) !== \"/\" ? \"/\" + options.path : options.path : \"/\";\n  }\n\n  HttpRequest.isInstance = function (request) {\n    //determine if request is a valid httpRequest\n    if (!request) return false;\n    var req = request;\n    return \"method\" in req && \"protocol\" in req && \"hostname\" in req && \"path\" in req && typeof req[\"query\"] === \"object\" && typeof req[\"headers\"] === \"object\";\n  };\n\n  HttpRequest.prototype.clone = function () {\n    var cloned = new HttpRequest(__assign(__assign({}, this), {\n      headers: __assign({}, this.headers)\n    }));\n    if (cloned.query) cloned.query = cloneQuery(cloned.query);\n    return cloned;\n  };\n\n  return HttpRequest;\n}();\n\nexport { HttpRequest };\n\nfunction cloneQuery(query) {\n  return Object.keys(query).reduce(function (carry, paramName) {\n    var _a;\n\n    var param = query[paramName];\n    return __assign(__assign({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? __spread(param) : param, _a));\n  }, {});\n}","map":{"version":3,"mappings":";;AAMA;AAAA;AAAA;EAUE,qBAAYA,OAAZ,EAAuC;IACrC,KAAKC,MAAL,GAAcD,OAAO,CAACC,MAAR,IAAkB,KAAhC;IACA,KAAKC,QAAL,GAAgBF,OAAO,CAACE,QAAR,IAAoB,WAApC;IACA,KAAKC,IAAL,GAAYH,OAAO,CAACG,IAApB;IACA,KAAKC,KAAL,GAAaJ,OAAO,CAACI,KAAR,IAAiB,EAA9B;IACA,KAAKC,OAAL,GAAeL,OAAO,CAACK,OAAR,IAAmB,EAAlC;IACA,KAAKC,IAAL,GAAYN,OAAO,CAACM,IAApB;IACA,KAAKC,QAAL,GAAgBP,OAAO,CAACO,QAAR,GACZP,OAAO,CAACO,QAAR,CAAiBC,MAAjB,CAAwB,CAAC,CAAzB,MAAgC,GAAhC,GACKR,OAAO,CAACO,QAAR,GAAgB,GADrB,GAEEP,OAAO,CAACO,QAHE,GAIZ,QAJJ;IAKA,KAAKE,IAAL,GAAYT,OAAO,CAACS,IAAR,GAAgBT,OAAO,CAACS,IAAR,CAAaC,MAAb,CAAoB,CAApB,MAA2B,GAA3B,GAAiC,MAAIV,OAAO,CAACS,IAA7C,GAAsDT,OAAO,CAACS,IAA9E,GAAsF,GAAlG;EACD;;EAEME,yBAAP,UAAkBC,OAAlB,EAAkC;IAChC;IACA,IAAI,CAACA,OAAL,EAAc,OAAO,KAAP;IACd,IAAMC,GAAG,GAAQD,OAAjB;IACA,OACE,YAAYC,GAAZ,IACA,cAAcA,GADd,IAEA,cAAcA,GAFd,IAGA,UAAUA,GAHV,IAIA,OAAOA,GAAG,CAAC,OAAD,CAAV,KAAwB,QAJxB,IAKA,OAAOA,GAAG,CAAC,SAAD,CAAV,KAA0B,QAN5B;EAQD,CAZM;;EAcPF;IACE,IAAMG,MAAM,GAAG,IAAIH,WAAJ,CAAeI,sBACzB,IADyB,GACrB;MACPV,OAAO,eAAO,KAAKA,OAAZ;IADA,CADqB,CAAf,CAAf;IAIA,IAAIS,MAAM,CAACV,KAAX,EAAkBU,MAAM,CAACV,KAAP,GAAeY,UAAU,CAACF,MAAM,CAACV,KAAR,CAAzB;IAClB,OAAOU,MAAP;EACD,CAPD;;EAQF;AAAC,CA/CD;;;;AAiDA,SAASE,UAAT,CAAoBZ,KAApB,EAA4C;EAC1C,OAAOa,MAAM,CAACC,IAAP,CAAYd,KAAZ,EAAmBe,MAAnB,CAA0B,UAACC,KAAD,EAA2BC,SAA3B,EAA4C;;;IAC3E,IAAMC,KAAK,GAAGlB,KAAK,CAACiB,SAAD,CAAnB;IACA,6BACKD,KADL,IACUG,YACPF,SADO,IACKG,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAsBI,SAAKJ,KAAL,CAAtB,GAAoCA,KADzC,EAC8CC,EAFxD;EAID,CANM,EAMJ,EANI,CAAP;AAOD","names":["options","method","hostname","port","query","headers","body","protocol","substr","path","charAt","HttpRequest","request","req","cloned","__assign","cloneQuery","Object","keys","reduce","carry","paramName","param","_a","Array","isArray","__spread"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\protocol-http\\src\\httpRequest.ts"],"sourcesContent":["import { Endpoint, HeaderBag, HttpMessage, HttpRequest as IHttpRequest, QueryParameterBag } from \"@aws-sdk/types\";\n\ntype HttpRequestOptions = Partial<HttpMessage> & Partial<Endpoint> & { method?: string };\n\nexport interface HttpRequest extends IHttpRequest {}\n\nexport class HttpRequest implements HttpMessage, Endpoint {\n  public method: string;\n  public protocol: string;\n  public hostname: string;\n  public port?: number;\n  public path: string;\n  public query: QueryParameterBag;\n  public headers: HeaderBag;\n  public body?: any;\n\n  constructor(options: HttpRequestOptions) {\n    this.method = options.method || \"GET\";\n    this.hostname = options.hostname || \"localhost\";\n    this.port = options.port;\n    this.query = options.query || {};\n    this.headers = options.headers || {};\n    this.body = options.body;\n    this.protocol = options.protocol\n      ? options.protocol.substr(-1) !== \":\"\n        ? `${options.protocol}:`\n        : options.protocol\n      : \"https:\";\n    this.path = options.path ? (options.path.charAt(0) !== \"/\" ? `/${options.path}` : options.path) : \"/\";\n  }\n\n  static isInstance(request: unknown): request is HttpRequest {\n    //determine if request is a valid httpRequest\n    if (!request) return false;\n    const req: any = request;\n    return (\n      \"method\" in req &&\n      \"protocol\" in req &&\n      \"hostname\" in req &&\n      \"path\" in req &&\n      typeof req[\"query\"] === \"object\" &&\n      typeof req[\"headers\"] === \"object\"\n    );\n  }\n\n  clone(): HttpRequest {\n    const cloned = new HttpRequest({\n      ...this,\n      headers: { ...this.headers },\n    });\n    if (cloned.query) cloned.query = cloneQuery(cloned.query);\n    return cloned;\n  }\n}\n\nfunction cloneQuery(query: QueryParameterBag): QueryParameterBag {\n  return Object.keys(query).reduce((carry: QueryParameterBag, paramName: string) => {\n    const param = query[paramName];\n    return {\n      ...carry,\n      [paramName]: Array.isArray(param) ? [...param] : param,\n    };\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}