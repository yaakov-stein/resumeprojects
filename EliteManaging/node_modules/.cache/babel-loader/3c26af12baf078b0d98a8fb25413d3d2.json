{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { GetIdCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\n/**\n * Retrieves or generates a unique identifier using Amazon Cognito's `GetId`\n * operation, then generates temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from `GetId` are cached internally, but results from\n * `GetCredentialsForIdentity` are not.\n */\n\nexport function fromCognitoIdentityPool(_a) {\n  var _this = this;\n\n  var accountId = _a.accountId,\n      _b = _a.cache,\n      cache = _b === void 0 ? localStorage() : _b,\n      client = _a.client,\n      customRoleArn = _a.customRoleArn,\n      identityPoolId = _a.identityPoolId,\n      logins = _a.logins,\n      _c = _a.userIdentifier,\n      userIdentifier = _c === void 0 ? !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined : _c;\n  var cacheKey = userIdentifier ? \"aws:cognito-identity-credentials:\" + identityPoolId + \":\" + userIdentifier : undefined;\n\n  var provider = function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var identityId, _a, _b, IdentityId, _c, _d, _e, _f;\n\n      var _g;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _a = cacheKey;\n            if (!_a) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , cache.getItem(cacheKey)];\n\n          case 1:\n            _a = _h.sent();\n            _h.label = 2;\n\n          case 2:\n            identityId = _a;\n            if (!!identityId) return [3\n            /*break*/\n            , 7];\n            _d = (_c = client).send;\n            _e = GetIdCommand.bind;\n            _g = {\n              AccountId: accountId,\n              IdentityPoolId: identityPoolId\n            };\n            if (!logins) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , resolveLogins(logins)];\n\n          case 3:\n            _f = _h.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            _f = undefined;\n            _h.label = 5;\n\n          case 5:\n            return [4\n            /*yield*/\n            , _d.apply(_c, [new (_e.apply(GetIdCommand, [void 0, (_g.Logins = _f, _g)]))()])];\n\n          case 6:\n            _b = _h.sent().IdentityId, IdentityId = _b === void 0 ? throwOnMissingId() : _b;\n            identityId = IdentityId;\n\n            if (cacheKey) {\n              Promise.resolve(cache.setItem(cacheKey, identityId)).catch(function () {});\n            }\n\n            _h.label = 7;\n\n          case 7:\n            provider = fromCognitoIdentity({\n              client: client,\n              customRoleArn: customRoleArn,\n              logins: logins,\n              identityId: identityId\n            });\n            return [2\n            /*return*/\n            , provider()];\n        }\n      });\n    });\n  };\n\n  return function () {\n    return provider().catch(function (err) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          if (cacheKey) {\n            Promise.resolve(cache.removeItem(cacheKey)).catch(function () {});\n          }\n\n          throw err;\n        });\n      });\n    });\n  };\n}\n\nfunction throwOnMissingId() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}","map":{"version":3,"mappings":";AAAA,SAASA,YAAT,QAA6B,kCAA7B;AACA,SAASC,aAAT,QAA8B,4BAA9B;AAIA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAGA;;;;;;;;;AAQA,OAAM,SAAUC,uBAAV,CAAkCC,EAAlC,EAQ8B;EARpC;;MACEC,SAAS;MACTC;MAAAC,KAAK,mBAAGN,YAAY,EAAf,GAAiBK;MACtBE,MAAM;MACNC,aAAa;MACbC,cAAc;MACdC,MAAM;MACNC;MAAAC,cAAc,mBAAG,CAACF,MAAD,IAAWG,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,MAApB,KAA+B,CAA1C,GAA8C,WAA9C,GAA4DC,SAA/D,GAAwEL;EAEtF,IAAMM,QAAQ,GAAGL,cAAc,GAAG,sCAAoCH,cAApC,GAAkD,GAAlD,GAAsDG,cAAzD,GAA4EI,SAA3G;;EAEA,IAAIE,QAAQ,GAAuB;IAAA;;;;;;;;YAChBf;qBAAA;YAAA;YAAA;YAAa;YAAA;YAAA,EAAMG,KAAK,CAACa,OAAN,CAAcF,QAAd,CAAN;;;YAADd,KAACiB,SAAD;;;;YAAzBC,UAAU,KAAV;iBACA,CAACA,YAAD;YAAA;YAAA;YACgDC,mBAAOC,IAAP;iBAC5C1B,YAAY;;cACd2B,SAAS,EAAEpB;cACXqB,cAAc,EAAEhB;;iBACRC;YAAA;YAAA;YAAS;YAAA;YAAA,EAAMT,aAAa,CAACS,MAAD,CAAnB;;;YAAAgB;;;;;;YAA8BA;;;;YAJP;YAAA;YAAA,EAAMJ,cAChD,cAAIzB,YAAJ,EAAgB,UAGd8B,YAAMD,EAAN,IAHc,EAAhB,IADgD,EAAN;;;YAApCrB,KAAoCe,UAM3CQ,UANO,YAAU,mBAAGC,gBAAgB,EAAnB,GAAqBxB,EAA/B;YAORgB,UAAU,GAAGO,UAAb;;YACA,IAAIX,QAAJ,EAAc;cACZa,OAAO,CAACC,OAAR,CAAgBzB,KAAK,CAAC0B,OAAN,CAAcf,QAAd,EAAwBI,UAAxB,CAAhB,EAAqDY,KAArD,CAA2D,aAAQ,CAAnE;YACD;;;;;YAGHf,QAAQ,GAAGnB,mBAAmB,CAAC;cAC7BQ,MAAM,QADuB;cAE7BC,aAAa,eAFgB;cAG7BE,MAAM,QAHuB;cAI7BW,UAAU;YAJmB,CAAD,CAA9B;YAOA;YAAA;YAAA,EAAOH,QAAQ,EAAf;;;KAvBiC;EAwBlC,CAxBD;;EA0BA,OAAO;IACL,eAAQ,GAAGe,KAAX,CAAiB,UAAOC,GAAP,EAAU;MAAA;;UACzB,IAAIjB,QAAJ,EAAc;YACZa,OAAO,CAACC,OAAR,CAAgBzB,KAAK,CAAC6B,UAAN,CAAiBlB,QAAjB,CAAhB,EAA4CgB,KAA5C,CAAkD,aAAQ,CAA1D;UACD;;UAED,MAAMC,GAAN;;OALyB;IAM1B,CAND;EAME,CAPJ;AAQD;;AAsCD,SAASL,gBAAT,GAAyB;EACvB,MAAM,IAAI/B,aAAJ,CAAkB,uDAAlB,CAAN;AACD","names":["GetIdCommand","ProviderError","fromCognitoIdentity","localStorage","resolveLogins","fromCognitoIdentityPool","_a","accountId","_b","cache","client","customRoleArn","identityPoolId","logins","_c","userIdentifier","Object","keys","length","undefined","cacheKey","provider","getItem","_h","identityId","_d","send","AccountId","IdentityPoolId","_f","_g","IdentityId","throwOnMissingId","Promise","resolve","setItem","catch","err","removeItem"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\credential-provider-cognito-identity\\src\\fromCognitoIdentityPool.ts"],"sourcesContent":["import { GetIdCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { CredentialProvider } from \"@aws-sdk/types\";\n\nimport { CognitoProviderParameters } from \"./CognitoProviderParameters\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\nimport { Storage } from \"./Storage\";\n\n/**\n * Retrieves or generates a unique identifier using Amazon Cognito's `GetId`\n * operation, then generates temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from `GetId` are cached internally, but results from\n * `GetCredentialsForIdentity` are not.\n */\nexport function fromCognitoIdentityPool({\n  accountId,\n  cache = localStorage(),\n  client,\n  customRoleArn,\n  identityPoolId,\n  logins,\n  userIdentifier = !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined,\n}: FromCognitoIdentityPoolParameters): CredentialProvider {\n  const cacheKey = userIdentifier ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}` : undefined;\n\n  let provider: CredentialProvider = async () => {\n    let identityId = cacheKey && (await cache.getItem(cacheKey));\n    if (!identityId) {\n      const { IdentityId = throwOnMissingId() } = await client.send(\n        new GetIdCommand({\n          AccountId: accountId,\n          IdentityPoolId: identityPoolId,\n          Logins: logins ? await resolveLogins(logins) : undefined,\n        })\n      );\n      identityId = IdentityId;\n      if (cacheKey) {\n        Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => {});\n      }\n    }\n\n    provider = fromCognitoIdentity({\n      client,\n      customRoleArn,\n      logins,\n      identityId,\n    });\n\n    return provider();\n  };\n\n  return () =>\n    provider().catch(async (err) => {\n      if (cacheKey) {\n        Promise.resolve(cache.removeItem(cacheKey)).catch(() => {});\n      }\n\n      throw err;\n    });\n}\n\nexport interface FromCognitoIdentityPoolParameters extends CognitoProviderParameters {\n  /**\n   * A standard AWS account ID (9+ digits).\n   */\n  accountId?: string;\n\n  /**\n   * A cache in which to store resolved Cognito IdentityIds. If not supplied,\n   * the credential provider will attempt to store IdentityIds in one of the\n   * following (in order of preference):\n   *   1. IndexedDB\n   *   2. LocalStorage\n   *   3. An in-memory cache object that will not persist between pages.\n   *\n   * IndexedDB is preferred to maximize data sharing between top-level\n   * browsing contexts and web workers.\n   *\n   * The provider will not cache IdentityIds of authenticated users unless a\n   * separate `userIdentitifer` parameter is supplied.\n   */\n  cache?: Storage;\n\n  /**\n   * The unique identifier for the identity pool from which an identity should\n   * be retrieved or generated.\n   */\n  identityPoolId: string;\n\n  /**\n   * A unique identifier for the user. This is distinct from a Cognito\n   * IdentityId and should instead be an identifier meaningful to your\n   * application. Used to cache Cognito IdentityIds on a per-user basis.\n   */\n  userIdentifier?: string;\n}\n\nfunction throwOnMissingId(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}\n"]},"metadata":{},"sourceType":"module"}