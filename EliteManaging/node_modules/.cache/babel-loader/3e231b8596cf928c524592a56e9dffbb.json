{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nvar CONTENT_LENGTH_HEADER = \"content-length\";\nexport function contentLengthMiddleware(bodyLengthChecker) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var request, body, headers, length;\n\n        var _a;\n\n        return __generator(this, function (_b) {\n          request = args.request;\n\n          if (HttpRequest.isInstance(request)) {\n            body = request.body, headers = request.headers;\n\n            if (body && Object.keys(headers).map(function (str) {\n              return str.toLowerCase();\n            }).indexOf(CONTENT_LENGTH_HEADER) === -1) {\n              length = bodyLengthChecker(body);\n\n              if (length !== undefined) {\n                request.headers = __assign(__assign({}, request.headers), (_a = {}, _a[CONTENT_LENGTH_HEADER] = String(length), _a));\n              }\n            }\n          }\n\n          return [2\n          /*return*/\n          , next(__assign(__assign({}, args), {\n            request: request\n          }))];\n        });\n      });\n    };\n  };\n}\nexport var contentLengthMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"SET_CONTENT_LENGTH\", \"CONTENT_LENGTH\"],\n  name: \"contentLengthMiddleware\",\n  override: true\n};\nexport var getContentLengthPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,WAAT,QAA4B,wBAA5B;AAYA,IAAMC,qBAAqB,GAAG,gBAA9B;AAEA,OAAM,SAAUC,uBAAV,CAAkCC,iBAAlC,EAAyE;EAA/E;;EACE,OAAO,UAAgCC,IAAhC,EAA+D;IAAgC,iBACpGC,IADoG,EACpE;MAAA;;;;;;UAE1BC,OAAO,GAAGD,IAAI,CAACC,OAAf;;UACN,IAAIN,WAAW,CAACO,UAAZ,CAAuBD,OAAvB,CAAJ,EAAqC;YAC3BE,IAAI,GAAcF,OAAO,KAAzB,EAAMG,OAAO,GAAKH,OAAO,QAAzB;;YACR,IACEE,IAAI,IACJE,MAAM,CAACC,IAAP,CAAYF,OAAZ,EACGG,GADH,CACO,UAACC,GAAD,EAAI;cAAK,UAAG,CAACC,WAAJ;YAAiB,CADjC,EAEGC,OAFH,CAEWd,qBAFX,MAEsC,CAAC,CAJzC,EAKE;cACMe,MAAM,GAAGb,iBAAiB,CAACK,IAAD,CAA1B;;cACN,IAAIQ,MAAM,KAAKC,SAAf,EAA0B;gBACxBX,OAAO,CAACG,OAAR,GAAeS,sBACVZ,OAAO,CAACG,OADE,IACKU,YACjBlB,qBADiB,IACOmB,MAAM,CAACJ,MAAD,CADb,EACqBG,EAF1B,EAAf;cAID;YACF;UACF;;UAED;UAAA;UAAA,EAAOf,IAAI,uBACNC,IADM,GACF;YACPC,OAAO;UADA,CADE,EAAX;;OArBgC;IAyBjC,CA1BqG;EA0BrG,CA1BD;AA2BD;AAED,OAAO,IAAMe,8BAA8B,GAAwB;EACjEC,IAAI,EAAE,OAD2D;EAEjEC,IAAI,EAAE,CAAC,oBAAD,EAAuB,gBAAvB,CAF2D;EAGjEC,IAAI,EAAE,yBAH2D;EAIjEC,QAAQ,EAAE;AAJuD,CAA5D;AAOP,OAAO,IAAMC,sBAAsB,GAAG,UAACC,OAAD,EAAqD;EAA0B,OAAC;IACpHC,YAAY,EAAE,UAACC,WAAD,EAAY;MACxBA,WAAW,CAACC,GAAZ,CAAgB5B,uBAAuB,CAACyB,OAAO,CAACxB,iBAAT,CAAvC,EAAoEkB,8BAApE;IACD;EAHmH,CAAD;AAInH,CAJK","names":["HttpRequest","CONTENT_LENGTH_HEADER","contentLengthMiddleware","bodyLengthChecker","next","args","request","isInstance","body","headers","Object","keys","map","str","toLowerCase","indexOf","length","undefined","__assign","_a","String","contentLengthMiddlewareOptions","step","tags","name","override","getContentLengthPlugin","options","applyToStack","clientStack","add"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\middleware-content-length\\src\\index.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BodyLengthCalculator,\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nconst CONTENT_LENGTH_HEADER = \"content-length\";\n\nexport function contentLengthMiddleware(bodyLengthChecker: BodyLengthCalculator): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(next: BuildHandler<any, Output>): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    const request = args.request;\n    if (HttpRequest.isInstance(request)) {\n      const { body, headers } = request;\n      if (\n        body &&\n        Object.keys(headers)\n          .map((str) => str.toLowerCase())\n          .indexOf(CONTENT_LENGTH_HEADER) === -1\n      ) {\n        const length = bodyLengthChecker(body);\n        if (length !== undefined) {\n          request.headers = {\n            ...request.headers,\n            [CONTENT_LENGTH_HEADER]: String(length),\n          };\n        }\n      }\n    }\n\n    return next({\n      ...args,\n      request,\n    });\n  };\n}\n\nexport const contentLengthMiddlewareOptions: BuildHandlerOptions = {\n  step: \"build\",\n  tags: [\"SET_CONTENT_LENGTH\", \"CONTENT_LENGTH\"],\n  name: \"contentLengthMiddleware\",\n  override: true,\n};\n\nexport const getContentLengthPlugin = (options: { bodyLengthChecker: BodyLengthCalculator }): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}