{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { OpType, QueryOne } from '../../types';\nimport { monotonicUlidFactory } from '../../util';\nimport { createInMemoryStore } from './InMemoryStore';\nvar DB_NAME = '@AmplifyDatastore';\nvar COLLECTION = 'Collection';\nvar DATA = 'Data';\nvar monotonicFactoriesMap = new Map();\n\nvar AsyncStorageDatabase =\n/** @class */\nfunction () {\n  function AsyncStorageDatabase() {\n    /**\n     * Maps storeNames to a map of ulid->id\n     */\n    this._collectionInMemoryIndex = new Map();\n    this.storage = createInMemoryStore();\n  }\n\n  AsyncStorageDatabase.prototype.getCollectionIndex = function (storeName) {\n    if (!this._collectionInMemoryIndex.has(storeName)) {\n      this._collectionInMemoryIndex.set(storeName, new Map());\n    }\n\n    return this._collectionInMemoryIndex.get(storeName);\n  };\n\n  AsyncStorageDatabase.prototype.getMonotonicFactory = function (storeName) {\n    if (!monotonicFactoriesMap.has(storeName)) {\n      monotonicFactoriesMap.set(storeName, monotonicUlidFactory());\n    }\n\n    return monotonicFactoriesMap.get(storeName);\n  };\n\n  AsyncStorageDatabase.prototype.init = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allKeys, keysForCollectionEntries, allKeys_1, allKeys_1_1, key, _a, dbName, storeName, recordType, ulidOrId, id, ulid, id_1, newUlid, oldKey, newKey, item, e_1_1;\n\n      var e_1, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            this._collectionInMemoryIndex.clear();\n\n            return [4\n            /*yield*/\n            , this.storage.getAllKeys()];\n\n          case 1:\n            allKeys = _c.sent();\n            keysForCollectionEntries = [];\n            _c.label = 2;\n\n          case 2:\n            _c.trys.push([2, 12, 13, 14]);\n\n            allKeys_1 = __values(allKeys), allKeys_1_1 = allKeys_1.next();\n            _c.label = 3;\n\n          case 3:\n            if (!!allKeys_1_1.done) return [3\n            /*break*/\n            , 11];\n            key = allKeys_1_1.value;\n            _a = __read(key.split('::'), 5), dbName = _a[0], storeName = _a[1], recordType = _a[2], ulidOrId = _a[3], id = _a[4];\n            if (!(dbName === DB_NAME)) return [3\n            /*break*/\n            , 10];\n            if (!(recordType === DATA)) return [3\n            /*break*/\n            , 9];\n            ulid = void 0;\n            if (!(id === undefined)) return [3\n            /*break*/\n            , 7];\n            id_1 = ulidOrId;\n            newUlid = this.getMonotonicFactory(storeName)();\n            oldKey = this.getLegacyKeyForItem(storeName, id_1);\n            newKey = this.getKeyForItem(storeName, id_1, newUlid);\n            return [4\n            /*yield*/\n            , this.storage.getItem(oldKey)];\n\n          case 4:\n            item = _c.sent();\n            return [4\n            /*yield*/\n            , this.storage.setItem(newKey, item)];\n\n          case 5:\n            _c.sent();\n\n            return [4\n            /*yield*/\n            , this.storage.removeItem(oldKey)];\n\n          case 6:\n            _c.sent();\n\n            ulid = newUlid;\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            ulid = ulidOrId;\n            _c.label = 8;\n\n          case 8:\n            this.getCollectionIndex(storeName).set(id, ulid);\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            if (recordType === COLLECTION) {\n              keysForCollectionEntries.push(key);\n            }\n\n            _c.label = 10;\n\n          case 10:\n            allKeys_1_1 = allKeys_1.next();\n            return [3\n            /*break*/\n            , 3];\n\n          case 11:\n            return [3\n            /*break*/\n            , 14];\n\n          case 12:\n            e_1_1 = _c.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            try {\n              if (allKeys_1_1 && !allKeys_1_1.done && (_b = allKeys_1.return)) _b.call(allKeys_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 14:\n            if (!(keysForCollectionEntries.length > 0)) return [3\n            /*break*/\n            , 16];\n            return [4\n            /*yield*/\n            , this.storage.multiRemove(keysForCollectionEntries)];\n\n          case 15:\n            _c.sent();\n\n            _c.label = 16;\n\n          case 16:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.save = function (item, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ulid, itemKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ulid = this.getCollectionIndex(storeName).get(item.id) || this.getMonotonicFactory(storeName)();\n            itemKey = this.getKeyForItem(storeName, item.id, ulid);\n            this.getCollectionIndex(storeName).set(item.id, ulid);\n            return [4\n            /*yield*/\n            , this.storage.setItem(itemKey, JSON.stringify(item))];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.batchSave = function (storeName, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, collection, keysToDelete, keysToSave, allItemsKeys, itemsMap, items_1, items_1_1, item, id, _deleted, ulid, key, existingRecordsMap, existingRecordsKeys, allItemsKeys_1, allItemsKeys_1_1, key;\n\n      var e_2, _a, e_3, _b;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (items.length === 0) {\n              return [2\n              /*return*/\n              , []];\n            }\n\n            result = [];\n            collection = this.getCollectionIndex(storeName);\n            keysToDelete = new Set();\n            keysToSave = new Set();\n            allItemsKeys = [];\n            itemsMap = {};\n\n            try {\n              for (items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n                item = items_1_1.value;\n                id = item.id, _deleted = item._deleted;\n                ulid = collection.get(id) || this.getMonotonicFactory(storeName)();\n                key = this.getKeyForItem(storeName, id, ulid);\n                allItemsKeys.push(key);\n                itemsMap[key] = {\n                  ulid: ulid,\n                  model: item\n                };\n\n                if (_deleted) {\n                  keysToDelete.add(key);\n                } else {\n                  keysToSave.add(key);\n                }\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.storage.multiGet(allItemsKeys)];\n\n          case 1:\n            existingRecordsMap = _c.sent();\n            existingRecordsKeys = existingRecordsMap.filter(function (_a) {\n              var _b = __read(_a, 2),\n                  v = _b[1];\n\n              return !!v;\n            }).reduce(function (set, _a) {\n              var _b = __read(_a, 1),\n                  k = _b[0];\n\n              return set.add(k);\n            }, new Set());\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              if (keysToDelete.size === 0) {\n                resolve();\n                return;\n              }\n\n              var keysToDeleteArray = Array.from(keysToDelete);\n              keysToDeleteArray.forEach(function (key) {\n                return collection.delete(itemsMap[key].model.id);\n              });\n\n              _this.storage.multiRemove(keysToDeleteArray, function (errors) {\n                if (errors && errors.length > 0) {\n                  reject(errors);\n                } else {\n                  resolve();\n                }\n              });\n            })];\n\n          case 2:\n            _c.sent();\n\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              if (keysToSave.size === 0) {\n                resolve();\n                return;\n              }\n\n              var entriesToSet = Array.from(keysToSave).map(function (key) {\n                return [key, JSON.stringify(itemsMap[key].model)];\n              });\n              keysToSave.forEach(function (key) {\n                var _a = itemsMap[key],\n                    id = _a.model.id,\n                    ulid = _a.ulid;\n                collection.set(id, ulid);\n              });\n\n              _this.storage.multiSet(entriesToSet, function (errors) {\n                if (errors && errors.length > 0) {\n                  reject(errors);\n                } else {\n                  resolve();\n                }\n              });\n            })];\n\n          case 3:\n            _c.sent();\n\n            try {\n              for (allItemsKeys_1 = __values(allItemsKeys), allItemsKeys_1_1 = allItemsKeys_1.next(); !allItemsKeys_1_1.done; allItemsKeys_1_1 = allItemsKeys_1.next()) {\n                key = allItemsKeys_1_1.value;\n\n                if (keysToDelete.has(key) && existingRecordsKeys.has(key)) {\n                  result.push([itemsMap[key].model, OpType.DELETE]);\n                } else if (keysToSave.has(key)) {\n                  result.push([itemsMap[key].model, existingRecordsKeys.has(key) ? OpType.UPDATE : OpType.INSERT]);\n                }\n              }\n            } catch (e_3_1) {\n              e_3 = {\n                error: e_3_1\n              };\n            } finally {\n              try {\n                if (allItemsKeys_1_1 && !allItemsKeys_1_1.done && (_b = allItemsKeys_1.return)) _b.call(allItemsKeys_1);\n              } finally {\n                if (e_3) throw e_3.error;\n              }\n            }\n\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.get = function (id, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ulid, itemKey, recordAsString, record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ulid = this.getCollectionIndex(storeName).get(id);\n            itemKey = this.getKeyForItem(storeName, id, ulid);\n            return [4\n            /*yield*/\n            , this.storage.getItem(itemKey)];\n\n          case 1:\n            recordAsString = _a.sent();\n            record = recordAsString && JSON.parse(recordAsString);\n            return [2\n            /*return*/\n            , record];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.getOne = function (firstOrLast, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collection, _a, itemId, ulid, itemKey, itemString, _b, result;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            collection = this.getCollectionIndex(storeName);\n            _a = __read(firstOrLast === QueryOne.FIRST ? function () {\n              var e_4, _a, _b;\n\n              var id, ulid;\n\n              try {\n                for (var collection_1 = __values(collection), collection_1_1 = collection_1.next(); !collection_1_1.done; collection_1_1 = collection_1.next()) {\n                  _b = __read(collection_1_1.value, 2), id = _b[0], ulid = _b[1];\n                  break;\n                } // Get first element of the set\n\n              } catch (e_4_1) {\n                e_4 = {\n                  error: e_4_1\n                };\n              } finally {\n                try {\n                  if (collection_1_1 && !collection_1_1.done && (_a = collection_1.return)) _a.call(collection_1);\n                } finally {\n                  if (e_4) throw e_4.error;\n                }\n              }\n\n              return [id, ulid];\n            }() : function () {\n              var e_5, _a, _b;\n\n              var id, ulid;\n\n              try {\n                for (var collection_2 = __values(collection), collection_2_1 = collection_2.next(); !collection_2_1.done; collection_2_1 = collection_2.next()) {\n                  _b = __read(collection_2_1.value, 2), id = _b[0], ulid = _b[1];\n                  ;\n                } // Get last element of the set\n\n              } catch (e_5_1) {\n                e_5 = {\n                  error: e_5_1\n                };\n              } finally {\n                try {\n                  if (collection_2_1 && !collection_2_1.done && (_a = collection_2.return)) _a.call(collection_2);\n                } finally {\n                  if (e_5) throw e_5.error;\n                }\n              }\n\n              return [id, ulid];\n            }(), 2), itemId = _a[0], ulid = _a[1];\n            itemKey = this.getKeyForItem(storeName, itemId, ulid);\n            _b = itemKey;\n            if (!_b) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.storage.getItem(itemKey)];\n\n          case 1:\n            _b = _c.sent();\n            _c.label = 2;\n\n          case 2:\n            itemString = _b;\n            result = itemString ? JSON.parse(itemString) || undefined : undefined;\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /**\n   * This function gets all the records stored in async storage for a particular storeName\n   * It then loads all the records for that filtered set of keys using multiGet()\n   */\n\n\n  AsyncStorageDatabase.prototype.getAll = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collection, _a, _b, page, _c, limit, start, end, keysForStore, count, collection_3, collection_3_1, _d, id, ulid, storeRecordStrings, records;\n\n      var e_6, _e;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            collection = this.getCollectionIndex(storeName);\n            _a = pagination || {}, _b = _a.page, page = _b === void 0 ? 0 : _b, _c = _a.limit, limit = _c === void 0 ? 0 : _c;\n            start = Math.max(0, page * limit) || 0;\n            end = limit > 0 ? start + limit : undefined;\n            keysForStore = [];\n            count = 0;\n\n            try {\n              for (collection_3 = __values(collection), collection_3_1 = collection_3.next(); !collection_3_1.done; collection_3_1 = collection_3.next()) {\n                _d = __read(collection_3_1.value, 2), id = _d[0], ulid = _d[1];\n                count++;\n\n                if (count <= start) {\n                  continue;\n                }\n\n                keysForStore.push(this.getKeyForItem(storeName, id, ulid));\n\n                if (count === end) {\n                  break;\n                }\n              }\n            } catch (e_6_1) {\n              e_6 = {\n                error: e_6_1\n              };\n            } finally {\n              try {\n                if (collection_3_1 && !collection_3_1.done && (_e = collection_3.return)) _e.call(collection_3);\n              } finally {\n                if (e_6) throw e_6.error;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.storage.multiGet(keysForStore)];\n\n          case 1:\n            storeRecordStrings = _f.sent();\n            records = storeRecordStrings.filter(function (_a) {\n              var _b = __read(_a, 2),\n                  value = _b[1];\n\n              return value;\n            }).map(function (_a) {\n              var _b = __read(_a, 2),\n                  value = _b[1];\n\n              return JSON.parse(value);\n            });\n            return [2\n            /*return*/\n            , records];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.delete = function (id, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ulid, itemKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ulid = this.getCollectionIndex(storeName).get(id);\n            itemKey = this.getKeyForItem(storeName, id, ulid);\n            this.getCollectionIndex(storeName).delete(id);\n            return [4\n            /*yield*/\n            , this.storage.removeItem(itemKey)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Clear the AsyncStorage of all DataStore entries\n   */\n\n\n  AsyncStorageDatabase.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allKeys, allDataStoreKeys;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.storage.getAllKeys()];\n\n          case 1:\n            allKeys = _a.sent();\n            allDataStoreKeys = allKeys.filter(function (key) {\n              return key.startsWith(DB_NAME);\n            });\n            return [4\n            /*yield*/\n            , this.storage.multiRemove(allDataStoreKeys)];\n\n          case 2:\n            _a.sent();\n\n            this._collectionInMemoryIndex.clear();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.getKeyForItem = function (storeName, id, ulid) {\n    return this.getKeyPrefixForStoreItems(storeName) + \"::\" + ulid + \"::\" + id;\n  };\n\n  AsyncStorageDatabase.prototype.getLegacyKeyForItem = function (storeName, id) {\n    return this.getKeyPrefixForStoreItems(storeName) + \"::\" + id;\n  };\n\n  AsyncStorageDatabase.prototype.getKeyPrefixForStoreItems = function (storeName) {\n    return DB_NAME + \"::\" + storeName + \"::\" + DATA;\n  };\n\n  return AsyncStorageDatabase;\n}();\n\nexport default AsyncStorageDatabase;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAECA,MAFD,EAKCC,QALD,QAMO,aANP;AAOA,SAASC,oBAAT,QAAqC,YAArC;AACA,SAASC,mBAAT,QAAoC,iBAApC;AAEA,IAAMC,OAAO,GAAG,mBAAhB;AACA,IAAMC,UAAU,GAAG,YAAnB;AACA,IAAMC,IAAI,GAAG,MAAb;AAEA,IAAMC,qBAAqB,GAAG,IAAIC,GAAJ,EAA9B;;AAEA;AAAA;AAAA;EAAA;IACC;;;IAGQ,gCAA2B,IAAIA,GAAJ,EAA3B;IAEA,eAAUL,mBAAmB,EAA7B;EAwRR;;EAtRQM,oDAAR,UAA2BC,SAA3B,EAA4C;IAC3C,IAAI,CAAC,KAAKC,wBAAL,CAA8BC,GAA9B,CAAkCF,SAAlC,CAAL,EAAmD;MAClD,KAAKC,wBAAL,CAA8BE,GAA9B,CAAkCH,SAAlC,EAA6C,IAAIF,GAAJ,EAA7C;IACA;;IAED,OAAO,KAAKG,wBAAL,CAA8BG,GAA9B,CAAkCJ,SAAlC,CAAP;EACA,CANO;;EAQAD,qDAAR,UAA4BC,SAA5B,EAA6C;IAC5C,IAAI,CAACH,qBAAqB,CAACK,GAAtB,CAA0BF,SAA1B,CAAL,EAA2C;MAC1CH,qBAAqB,CAACM,GAAtB,CAA0BH,SAA1B,EAAqCR,oBAAoB,EAAzD;IACA;;IAED,OAAOK,qBAAqB,CAACO,GAAtB,CAA0BJ,SAA1B,CAAP;EACA,CANO;;EAQFD,sCAAN;;;;;;;;;YACC,KAAKE,wBAAL,CAA8BI,KAA9B;;YAE0B;YAAA;YAAA,EAAM,KAAKC,OAAL,CAAaC,UAAb,EAAN;;;YAApBC,OAAO,GAAaC,SAApB;YAEAC,wBAAwB,GAAG,EAA3B;;;;;;YAEYC,+BAAOC,8BAAP;;;;;;;YAAPC,GAAG,oBAAH;YACJC,YAAgDD,GAAG,CAACE,KAAJ,CAAU,IAAV,CAAhD,EAA+D,CAA/D,GAACC,MAAM,QAAP,EAAShB,SAAS,QAAlB,EAAoBiB,UAAU,QAA9B,EAAgCC,QAAQ,QAAxC,EAA0CC,EAAE,QAA5C;kBAEFH,MAAM,KAAKtB,UAAX;YAAA;YAAA;kBACCuB,UAAU,KAAKrB,OAAf;YAAA;YAAA;YACCwB,IAAI,SAAJ;kBAEAD,EAAE,KAAKE,YAAP;YAAA;YAAA;YAGGC,OAAKJ,QAAL;YAEAK,OAAO,GAAG,KAAKC,mBAAL,CAAyBxB,SAAzB,GAAV;YAEAyB,MAAM,GAAG,KAAKC,mBAAL,CAAyB1B,SAAzB,EAAoCsB,IAApC,CAAT;YACAK,MAAM,GAAG,KAAKC,aAAL,CAAmB5B,SAAnB,EAA8BsB,IAA9B,EAAkCC,OAAlC,CAAT;YAEO;YAAA;YAAA,EAAM,KAAKjB,OAAL,CAAauB,OAAb,CAAqBJ,MAArB,CAAN;;;YAAPK,IAAI,GAAGrB,SAAP;YAEN;YAAA;YAAA,EAAM,KAAKH,OAAL,CAAayB,OAAb,CAAqBJ,MAArB,EAA6BG,IAA7B,CAAN;;;YAAArB;;YACA;YAAA;YAAA,EAAM,KAAKH,OAAL,CAAa0B,UAAb,CAAwBP,MAAxB,CAAN;;;YAAAhB;;YAEAW,IAAI,GAAGG,OAAP;;;;;;YAEAH,IAAI,GAAGF,QAAP;;;;YAGD,KAAKe,kBAAL,CAAwBjC,SAAxB,EAAmCG,GAAnC,CAAuCgB,EAAvC,EAA2CC,IAA3C;;;;;;YACM,IAAIH,UAAU,KAAKtB,UAAnB,EAA+B;cACrCe,wBAAwB,CAACwB,IAAzB,CAA8BrB,GAA9B;YACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBAICH,wBAAwB,CAACyB,MAAzB,GAAkC,IAAlC;YAAA;YAAA;YACH;YAAA;YAAA,EAAM,KAAK7B,OAAL,CAAa8B,WAAb,CAAyB1B,wBAAzB,CAAN;;;YAAAD;;;;;;;;;;;EAED,CA5CK;;EA8CAV,sCAAN,UAAsC+B,IAAtC,EAA+C9B,SAA/C,EAAgE;;;;;;YACzDoB,IAAI,GACT,KAAKa,kBAAL,CAAwBjC,SAAxB,EAAmCI,GAAnC,CAAuC0B,IAAI,CAACX,EAA5C,KACA,KAAKK,mBAAL,CAAyBxB,SAAzB,GAFK;YAIAqC,OAAO,GAAG,KAAKT,aAAL,CAAmB5B,SAAnB,EAA8B8B,IAAI,CAACX,EAAnC,EAAuCC,IAAvC,CAAV;YAEN,KAAKa,kBAAL,CAAwBjC,SAAxB,EAAmCG,GAAnC,CAAuC2B,IAAI,CAACX,EAA5C,EAAgDC,IAAhD;YAEA;YAAA;YAAA,EAAM,KAAKd,OAAL,CAAayB,OAAb,CAAqBM,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeT,IAAf,CAA9B,CAAN;;;YAAAhB;;;;;;;;EACA,CAVK;;EAYAf,2CAAN,UACCC,SADD,EAECwC,KAFD,EAE+B;;;;;;;;;;;YAE9B,IAAIA,KAAK,CAACL,MAAN,KAAiB,CAArB,EAAwB;cACvB;cAAA;cAAA,EAAO,EAAP;YACA;;YAEKM,MAAM,GAAkB,EAAxB;YAEAC,UAAU,GAAG,KAAKT,kBAAL,CAAwBjC,SAAxB,CAAb;YAEA2C,YAAY,GAAG,IAAIC,GAAJ,EAAf;YACAC,UAAU,GAAG,IAAID,GAAJ,EAAb;YACAE,YAAY,GAAG,EAAf;YACAC,QAAQ,GAA+C,EAAvD;;;cACN,KAAmBC,2BAAKC,0BAAxB,EAAwB,eAAxB,EAAwBA,0BAAxB,EAA0B;gBAAfnB,IAAI,kBAAJ;gBACFX,EAAE,GAAeW,IAAI,GAArB,EAAIoB,QAAQ,GAAKpB,IAAI,SAArB;gBACFV,IAAI,GAAGsB,UAAU,CAACtC,GAAX,CAAee,EAAf,KAAsB,KAAKK,mBAAL,CAAyBxB,SAAzB,GAA7B;gBAEAa,GAAG,GAAG,KAAKe,aAAL,CAAmB5B,SAAnB,EAA8BmB,EAA9B,EAAkCC,IAAlC,CAAN;gBAEN0B,YAAY,CAACZ,IAAb,CAAkBrB,GAAlB;gBACAkC,QAAQ,CAAClC,GAAD,CAAR,GAAgB;kBAAEO,IAAI,MAAN;kBAAQ+B,KAAK,EAAerB;gBAA5B,CAAhB;;gBAEA,IAAIoB,QAAJ,EAAc;kBACbP,YAAY,CAACS,GAAb,CAAiBvC,GAAjB;gBACA,CAFD,MAEO;kBACNgC,UAAU,CAACO,GAAX,CAAevC,GAAf;gBACA;cACD;;;;;;;;;;;;;YAE8C;YAAA;YAAA,EAAM,KAAKP,OAAL,CAAa+C,QAAb,CACpDP,YADoD,CAAN;;;YAAzCQ,kBAAkB,GAAuB7C,SAAzC;YAGA8C,mBAAmB,GAAGD,kBAAkB,CAC5CE,MAD0B,CACnB,UAAC1C,EAAD,EAAM;kBAAL2C;kBAAGC;;cAAO,QAAC,CAACA,CAAF;YAAG,CADK,EAE1BC,MAF0B,CAEnB,UAACxD,GAAD,EAAMW,EAAN,EAAS;kBAAH2C;kBAACG;;cAAO,UAAG,CAACR,GAAJ,CAAQQ,CAAR;YAAU,CAFL,EAEO,IAAIhB,GAAJ,EAFP,CAAtB;YAIN;YAAA;YAAA,EAAM,IAAIiB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;cACjC,IAAIpB,YAAY,CAACqB,IAAb,KAAsB,CAA1B,EAA6B;gBAC5BF,OAAO;gBACP;cACA;;cAED,IAAMG,iBAAiB,GAAGC,KAAK,CAACC,IAAN,CAAWxB,YAAX,CAA1B;cAEAsB,iBAAiB,CAACG,OAAlB,CAA0B,eAAG;gBAC5B,iBAAU,CAACC,MAAX,CAAkBtB,QAAQ,CAAClC,GAAD,CAAR,CAAcsC,KAAd,CAAoBhC,EAAtC;cAAyC,CAD1C;;cAIAmD,KAAI,CAAChE,OAAL,CAAa8B,WAAb,CAAyB6B,iBAAzB,EAA4C,UAACM,MAAD,EAAiB;gBAC5D,IAAIA,MAAM,IAAIA,MAAM,CAACpC,MAAP,GAAgB,CAA9B,EAAiC;kBAChC4B,MAAM,CAACQ,MAAD,CAAN;gBACA,CAFD,MAEO;kBACNT,OAAO;gBACP;cACD,CAND;YAOA,CAnBK,CAAN;;;YAAArD;;YAqBA;YAAA;YAAA,EAAM,IAAIoD,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;cACjC,IAAIlB,UAAU,CAACmB,IAAX,KAAoB,CAAxB,EAA2B;gBAC1BF,OAAO;gBACP;cACA;;cAED,IAAMU,YAAY,GAAGN,KAAK,CAACC,IAAN,CAAWtB,UAAX,EAAuB4B,GAAvB,CAA2B,eAAG;gBAAI,QACtD5D,GADsD,EAEtDyB,IAAI,CAACC,SAAL,CAAeQ,QAAQ,CAAClC,GAAD,CAAR,CAAcsC,KAA7B,CAFsD;cAGtD,CAHoB,CAArB;cAKAN,UAAU,CAACuB,OAAX,CAAmB,eAAG;gBACf;gBAAA,IACIjD,gBADJ;gBAAA,IAELC,cAFK;gBAKNsB,UAAU,CAACvC,GAAX,CAAegB,EAAf,EAAmBC,IAAnB;cACA,CAPD;;cASAkD,KAAI,CAAChE,OAAL,CAAaoE,QAAb,CAAsBF,YAAtB,EAAoC,UAACD,MAAD,EAAiB;gBACpD,IAAIA,MAAM,IAAIA,MAAM,CAACpC,MAAP,GAAgB,CAA9B,EAAiC;kBAChC4B,MAAM,CAACQ,MAAD,CAAN;gBACA,CAFD,MAEO;kBACNT,OAAO;gBACP;cACD,CAND;YAOA,CA3BK,CAAN;;;YAAArD;;;cA6BA,KAAkBkE,yCAAYC,wCAA9B,EAA8B,sBAA9B,EAA8BA,wCAA9B,EAAgC;gBAArB/D,GAAG,yBAAH;;gBACV,IAAI8B,YAAY,CAACzC,GAAb,CAAiBW,GAAjB,KAAyB0C,mBAAmB,CAACrD,GAApB,CAAwBW,GAAxB,CAA7B,EAA2D;kBAC1D4B,MAAM,CAACP,IAAP,CAAY,CAACa,QAAQ,CAAClC,GAAD,CAAR,CAAcsC,KAAf,EAAsB7D,MAAM,CAACuF,MAA7B,CAAZ;gBACA,CAFD,MAEO,IAAIhC,UAAU,CAAC3C,GAAX,CAAeW,GAAf,CAAJ,EAAyB;kBAC/B4B,MAAM,CAACP,IAAP,CAAY,CACXa,QAAQ,CAAClC,GAAD,CAAR,CAAcsC,KADH,EAEXI,mBAAmB,CAACrD,GAApB,CAAwBW,GAAxB,IAA+BvB,MAAM,CAACwF,MAAtC,GAA+CxF,MAAM,CAACyF,MAF3C,CAAZ;gBAIA;cACD;;;;;;;;;;;;;YAED;YAAA;YAAA,EAAOtC,MAAP;;;;EACA,CArGK;;EAuGA1C,qCAAN,UACCoB,EADD,EAECnB,SAFD,EAEkB;;;;;;YAEXoB,IAAI,GAAG,KAAKa,kBAAL,CAAwBjC,SAAxB,EAAmCI,GAAnC,CAAuCe,EAAvC,CAAP;YACAkB,OAAO,GAAG,KAAKT,aAAL,CAAmB5B,SAAnB,EAA8BmB,EAA9B,EAAkCC,IAAlC,CAAV;YACiB;YAAA;YAAA,EAAM,KAAKd,OAAL,CAAauB,OAAb,CAAqBQ,OAArB,CAAN;;;YAAjB2C,cAAc,GAAGlE,SAAjB;YACAmE,MAAM,GAAGD,cAAc,IAAI1C,IAAI,CAAC4C,KAAL,CAAWF,cAAX,CAA3B;YACN;YAAA;YAAA,EAAOC,MAAP;;;;EACA,CATK;;EAWAlF,wCAAN,UAAaoF,WAAb,EAAoCnF,SAApC,EAAqD;;;;;;;YAC9C0C,UAAU,GAAG,KAAKT,kBAAL,CAAwBjC,SAAxB,CAAb;YAEAc,YACLqE,WAAW,KAAK5F,QAAQ,CAAC6F,KAAzB,GACI;;;cACD,IAAIjE,EAAJ,EAAgBC,IAAhB;;;gBACA,KAAmB,yCAAUiE,oCAA7B,EAA6B,oBAA7B,EAA6BA,oCAA7B,EAA6B;wDAAvBlE,YAAIC;kBAAqB;gBAAM,EAAC;;;;;;;;;;;;;;cACtC,OAAO,CAACD,EAAD,EAAKC,IAAL,CAAP;YACC,CAJD,EADH,GAMI;;;cACD,IAAID,EAAJ,EAAgBC,IAAhB;;;gBACA,KAAmB,yCAAUkE,oCAA7B,EAA6B,oBAA7B,EAA6BA,oCAA7B,EAA6B;wDAAvBnE,YAAIC;kBAAoB;gBAAC,EAAC;;;;;;;;;;;;;;cAChC,OAAO,CAACD,EAAD,EAAKC,IAAL,CAAP;YACC,CAJD,EAPE,EAWE,CAXF,GAACmE,MAAM,QAAP,EAASnE,IAAI,QAAb;YAYAiB,OAAO,GAAG,KAAKT,aAAL,CAAmB5B,SAAnB,EAA8BuF,MAA9B,EAAsCnE,IAAtC,CAAV;YACaqC;qBAAA;YAAA;YAAA;YAAY;YAAA;YAAA,EAAM,KAAKnD,OAAL,CAAauB,OAAb,CAAqBQ,OAArB,CAAN;;;YAADoB,KAAChD,SAAD;;;;YAAxB+E,UAAU,KAAV;YAEA/C,MAAM,GAAG+C,UAAU,GAAGlD,IAAI,CAAC4C,KAAL,CAAWM,UAAX,KAA0BnE,SAA7B,GAAyCA,SAA5D;YAEN;YAAA;YAAA,EAAOoB,MAAP;;;;EACA,CArBK;EAuBN;;;;;;EAIM1C,wCAAN,UACCC,SADD,EAECyF,UAFD,EAEgC;;;;;;;;;YAEzB/C,UAAU,GAAG,KAAKT,kBAAL,CAAwBjC,SAAxB,CAAb;YAEAc,KAA0B2E,UAAU,IAAI,EAAxC,EAAEhC,YAAF,EAAEiC,IAAI,mBAAG,CAAH,GAAIjC,EAAV,EAAYhD,aAAZ,EAAYkF,KAAK,mBAAG,CAAH,GAAIlF,EAArB;YACAmF,KAAK,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYJ,IAAI,GAAGC,KAAnB,KAA6B,CAArC;YACAI,GAAG,GAAGJ,KAAK,GAAG,CAAR,GAAYC,KAAK,GAAGD,KAApB,GAA4BtE,SAAlC;YAEA2E,YAAY,GAAa,EAAzB;YACFC,KAAK,GAAG,CAAR;;;cACJ,KAAyBC,qCAAUC,oCAAnC,EAAmC,oBAAnC,EAAmCA,oCAAnC,EAAqC;gBAA1BC,sCAACjF,EAAE,QAAH,EAAKC,IAAI,QAAT;gBACV6E,KAAK;;gBAEL,IAAIA,KAAK,IAAIL,KAAb,EAAoB;kBACnB;gBACA;;gBAEDI,YAAY,CAAC9D,IAAb,CAAkB,KAAKN,aAAL,CAAmB5B,SAAnB,EAA8BmB,EAA9B,EAAkCC,IAAlC,CAAlB;;gBAEA,IAAI6E,KAAK,KAAKF,GAAd,EAAmB;kBAClB;gBACA;cACD;;;;;;;;;;;;;YAE0B;YAAA;YAAA,EAAM,KAAKzF,OAAL,CAAa+C,QAAb,CAAsB2C,YAAtB,CAAN;;;YAArBK,kBAAkB,GAAGC,SAArB;YACAC,OAAO,GAAGF,kBAAkB,CAChC7C,MADc,CACP,UAAC1C,EAAD,EAAU;kBAAT2C;kBAAG+C;;cAAW;YAAK,CADb,EAEd/B,GAFc,CAEV,UAAC3D,EAAD,EAAU;kBAAT2C;kBAAG+C;;cAAW,WAAI,CAACtB,KAAL,CAAWsB,KAAX;YAAiB,CAFtB,CAAV;YAIN;YAAA;YAAA,EAAOD,OAAP;;;;EACA,CAhCK;;EAkCAxG,wCAAN,UAAaoB,EAAb,EAAyBnB,SAAzB,EAA0C;;;;;;YACnCoB,IAAI,GAAG,KAAKa,kBAAL,CAAwBjC,SAAxB,EAAmCI,GAAnC,CAAuCe,EAAvC,CAAP;YACAkB,OAAO,GAAG,KAAKT,aAAL,CAAmB5B,SAAnB,EAA8BmB,EAA9B,EAAkCC,IAAlC,CAAV;YAEN,KAAKa,kBAAL,CAAwBjC,SAAxB,EAAmCqE,MAAnC,CAA0ClD,EAA1C;YACA;YAAA;YAAA,EAAM,KAAKb,OAAL,CAAa0B,UAAb,CAAwBK,OAAxB,CAAN;;;YAAAvB;;;;;;;;EACA,CANK;EAQN;;;;;EAGMf,uCAAN;;;;;;YACiB;YAAA;YAAA,EAAM,KAAKO,OAAL,CAAaC,UAAb,EAAN;;;YAAVC,OAAO,GAAGM,SAAV;YACA2F,gBAAgB,GAAGjG,OAAO,CAACgD,MAAR,CAAe,eAAG;cAAI,UAAG,CAACkD,UAAJ,CAAehH,OAAf;YAAuB,CAA7C,CAAnB;YACN;YAAA;YAAA,EAAM,KAAKY,OAAL,CAAa8B,WAAb,CAAyBqE,gBAAzB,CAAN;;;YAAA3F;;YACA,KAAKb,wBAAL,CAA8BI,KAA9B;;;;;;;;EACA,CALK;;EAOEN,+CAAR,UAAsBC,SAAtB,EAAyCmB,EAAzC,EAAqDC,IAArD,EAAiE;IAChE,OAAU,KAAKuF,yBAAL,CAA+B3G,SAA/B,IAAyC,IAAzC,GAA8CoB,IAA9C,GAAkD,IAAlD,GAAuDD,EAAjE;EACA,CAFO;;EAIApB,qDAAR,UAA4BC,SAA5B,EAA+CmB,EAA/C,EAAyD;IACxD,OAAU,KAAKwF,yBAAL,CAA+B3G,SAA/B,IAAyC,IAAzC,GAA8CmB,EAAxD;EACA,CAFO;;EAIApB,2DAAR,UAAkCC,SAAlC,EAAmD;IAClD,OAAUN,OAAO,OAAP,GAAYM,SAAZ,GAAqB,IAArB,GAA0BJ,IAApC;EACA,CAFO;;EAGT;AAAC,CA9RD;;AAgSA,eAAeG,oBAAf","names":["OpType","QueryOne","monotonicUlidFactory","createInMemoryStore","DB_NAME","COLLECTION","DATA","monotonicFactoriesMap","Map","AsyncStorageDatabase","storeName","_collectionInMemoryIndex","has","set","get","clear","storage","getAllKeys","allKeys","_c","keysForCollectionEntries","allKeys_1","allKeys_1_1","key","_a","split","dbName","recordType","ulidOrId","id","ulid","undefined","id_1","newUlid","getMonotonicFactory","oldKey","getLegacyKeyForItem","newKey","getKeyForItem","getItem","item","setItem","removeItem","getCollectionIndex","push","length","multiRemove","itemKey","JSON","stringify","items","result","collection","keysToDelete","Set","keysToSave","allItemsKeys","itemsMap","items_1","items_1_1","_deleted","model","add","multiGet","existingRecordsMap","existingRecordsKeys","filter","_b","v","reduce","k","Promise","resolve","reject","size","keysToDeleteArray","Array","from","forEach","delete","_this","errors","entriesToSet","map","multiSet","allItemsKeys_1","allItemsKeys_1_1","DELETE","UPDATE","INSERT","recordAsString","record","parse","firstOrLast","FIRST","collection_1_1","collection_2_1","itemId","itemString","pagination","page","limit","start","Math","max","end","keysForStore","count","collection_3","collection_3_1","_d","storeRecordStrings","_f","records","value","allDataStoreKeys","startsWith","getKeyPrefixForStoreItems"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-amplify\\datastore\\src\\storage\\adapter\\AsyncStorageDatabase.ts"],"sourcesContent":["import { ULID } from 'ulid';\nimport {\n\tModelInstanceMetadata,\n\tOpType,\n\tPaginationInput,\n\tPersistentModel,\n\tQueryOne,\n} from '../../types';\nimport { monotonicUlidFactory } from '../../util';\nimport { createInMemoryStore } from './InMemoryStore';\n\nconst DB_NAME = '@AmplifyDatastore';\nconst COLLECTION = 'Collection';\nconst DATA = 'Data';\n\nconst monotonicFactoriesMap = new Map<string, ULID>();\n\nclass AsyncStorageDatabase {\n\t/**\n\t * Maps storeNames to a map of ulid->id\n\t */\n\tprivate _collectionInMemoryIndex = new Map<string, Map<string, string>>();\n\n\tprivate storage = createInMemoryStore();\n\n\tprivate getCollectionIndex(storeName: string) {\n\t\tif (!this._collectionInMemoryIndex.has(storeName)) {\n\t\t\tthis._collectionInMemoryIndex.set(storeName, new Map());\n\t\t}\n\n\t\treturn this._collectionInMemoryIndex.get(storeName);\n\t}\n\n\tprivate getMonotonicFactory(storeName: string): ULID {\n\t\tif (!monotonicFactoriesMap.has(storeName)) {\n\t\t\tmonotonicFactoriesMap.set(storeName, monotonicUlidFactory());\n\t\t}\n\n\t\treturn monotonicFactoriesMap.get(storeName);\n\t}\n\n\tasync init(): Promise<void> {\n\t\tthis._collectionInMemoryIndex.clear();\n\n\t\tconst allKeys: string[] = await this.storage.getAllKeys();\n\n\t\tconst keysForCollectionEntries = [];\n\n\t\tfor (const key of allKeys) {\n\t\t\tconst [dbName, storeName, recordType, ulidOrId, id] = key.split('::');\n\n\t\t\tif (dbName === DB_NAME) {\n\t\t\t\tif (recordType === DATA) {\n\t\t\t\t\tlet ulid: string;\n\n\t\t\t\t\tif (id === undefined) {\n\t\t\t\t\t\t// It is an old entry (without ulid). Need to migrate to new key format\n\n\t\t\t\t\t\tconst id = ulidOrId;\n\n\t\t\t\t\t\tconst newUlid = this.getMonotonicFactory(storeName)();\n\n\t\t\t\t\t\tconst oldKey = this.getLegacyKeyForItem(storeName, id);\n\t\t\t\t\t\tconst newKey = this.getKeyForItem(storeName, id, newUlid);\n\n\t\t\t\t\t\tconst item = await this.storage.getItem(oldKey);\n\n\t\t\t\t\t\tawait this.storage.setItem(newKey, item);\n\t\t\t\t\t\tawait this.storage.removeItem(oldKey);\n\n\t\t\t\t\t\tulid = newUlid;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tulid = ulidOrId;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.getCollectionIndex(storeName).set(id, ulid);\n\t\t\t\t} else if (recordType === COLLECTION) {\n\t\t\t\t\tkeysForCollectionEntries.push(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (keysForCollectionEntries.length > 0) {\n\t\t\tawait this.storage.multiRemove(keysForCollectionEntries);\n\t\t}\n\t}\n\n\tasync save<T extends PersistentModel>(item: T, storeName: string) {\n\t\tconst ulid =\n\t\t\tthis.getCollectionIndex(storeName).get(item.id) ||\n\t\t\tthis.getMonotonicFactory(storeName)();\n\n\t\tconst itemKey = this.getKeyForItem(storeName, item.id, ulid);\n\n\t\tthis.getCollectionIndex(storeName).set(item.id, ulid);\n\n\t\tawait this.storage.setItem(itemKey, JSON.stringify(item));\n\t}\n\n\tasync batchSave<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\titems: ModelInstanceMetadata[]\n\t): Promise<[T, OpType][]> {\n\t\tif (items.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst result: [T, OpType][] = [];\n\n\t\tconst collection = this.getCollectionIndex(storeName);\n\n\t\tconst keysToDelete = new Set<string>();\n\t\tconst keysToSave = new Set<string>();\n\t\tconst allItemsKeys = [];\n\t\tconst itemsMap: Record<string, { ulid: string; model: T }> = {};\n\t\tfor (const item of items) {\n\t\t\tconst { id, _deleted } = item;\n\t\t\tconst ulid = collection.get(id) || this.getMonotonicFactory(storeName)();\n\n\t\t\tconst key = this.getKeyForItem(storeName, id, ulid);\n\n\t\t\tallItemsKeys.push(key);\n\t\t\titemsMap[key] = { ulid, model: <T>(<unknown>item) };\n\n\t\t\tif (_deleted) {\n\t\t\t\tkeysToDelete.add(key);\n\t\t\t} else {\n\t\t\t\tkeysToSave.add(key);\n\t\t\t}\n\t\t}\n\n\t\tconst existingRecordsMap: [string, string][] = await this.storage.multiGet(\n\t\t\tallItemsKeys\n\t\t);\n\t\tconst existingRecordsKeys = existingRecordsMap\n\t\t\t.filter(([, v]) => !!v)\n\t\t\t.reduce((set, [k]) => set.add(k), new Set<string>());\n\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tif (keysToDelete.size === 0) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst keysToDeleteArray = Array.from(keysToDelete);\n\n\t\t\tkeysToDeleteArray.forEach(key =>\n\t\t\t\tcollection.delete(itemsMap[key].model.id)\n\t\t\t);\n\n\t\t\tthis.storage.multiRemove(keysToDeleteArray, (errors?: Error[]) => {\n\t\t\t\tif (errors && errors.length > 0) {\n\t\t\t\t\treject(errors);\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tif (keysToSave.size === 0) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst entriesToSet = Array.from(keysToSave).map(key => [\n\t\t\t\tkey,\n\t\t\t\tJSON.stringify(itemsMap[key].model),\n\t\t\t]);\n\n\t\t\tkeysToSave.forEach(key => {\n\t\t\t\tconst {\n\t\t\t\t\tmodel: { id },\n\t\t\t\t\tulid,\n\t\t\t\t} = itemsMap[key];\n\n\t\t\t\tcollection.set(id, ulid);\n\t\t\t});\n\n\t\t\tthis.storage.multiSet(entriesToSet, (errors?: Error[]) => {\n\t\t\t\tif (errors && errors.length > 0) {\n\t\t\t\t\treject(errors);\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tfor (const key of allItemsKeys) {\n\t\t\tif (keysToDelete.has(key) && existingRecordsKeys.has(key)) {\n\t\t\t\tresult.push([itemsMap[key].model, OpType.DELETE]);\n\t\t\t} else if (keysToSave.has(key)) {\n\t\t\t\tresult.push([\n\t\t\t\t\titemsMap[key].model,\n\t\t\t\t\texistingRecordsKeys.has(key) ? OpType.UPDATE : OpType.INSERT,\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync get<T extends PersistentModel>(\n\t\tid: string,\n\t\tstoreName: string\n\t): Promise<T> {\n\t\tconst ulid = this.getCollectionIndex(storeName).get(id);\n\t\tconst itemKey = this.getKeyForItem(storeName, id, ulid);\n\t\tconst recordAsString = await this.storage.getItem(itemKey);\n\t\tconst record = recordAsString && JSON.parse(recordAsString);\n\t\treturn record;\n\t}\n\n\tasync getOne(firstOrLast: QueryOne, storeName: string) {\n\t\tconst collection = this.getCollectionIndex(storeName);\n\n\t\tconst [itemId, ulid] =\n\t\t\tfirstOrLast === QueryOne.FIRST\n\t\t\t\t? (() => {\n\t\t\t\t\t\tlet id: string, ulid: string;\n\t\t\t\t\t\tfor ([id, ulid] of collection) break; // Get first element of the set\n\t\t\t\t\t\treturn [id, ulid];\n\t\t\t\t  })()\n\t\t\t\t: (() => {\n\t\t\t\t\t\tlet id: string, ulid: string;\n\t\t\t\t\t\tfor ([id, ulid] of collection); // Get last element of the set\n\t\t\t\t\t\treturn [id, ulid];\n\t\t\t\t  })();\n\t\tconst itemKey = this.getKeyForItem(storeName, itemId, ulid);\n\t\tconst itemString = itemKey && (await this.storage.getItem(itemKey));\n\n\t\tconst result = itemString ? JSON.parse(itemString) || undefined : undefined;\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * This function gets all the records stored in async storage for a particular storeName\n\t * It then loads all the records for that filtered set of keys using multiGet()\n\t */\n\tasync getAll<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tconst collection = this.getCollectionIndex(storeName);\n\n\t\tconst { page = 0, limit = 0 } = pagination || {};\n\t\tconst start = Math.max(0, page * limit) || 0;\n\t\tconst end = limit > 0 ? start + limit : undefined;\n\n\t\tconst keysForStore: string[] = [];\n\t\tlet count = 0;\n\t\tfor (const [id, ulid] of collection) {\n\t\t\tcount++;\n\n\t\t\tif (count <= start) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tkeysForStore.push(this.getKeyForItem(storeName, id, ulid));\n\n\t\t\tif (count === end) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tconst storeRecordStrings = await this.storage.multiGet(keysForStore);\n\t\tconst records = storeRecordStrings\n\t\t\t.filter(([, value]) => value)\n\t\t\t.map(([, value]) => JSON.parse(value));\n\n\t\treturn records;\n\t}\n\n\tasync delete(id: string, storeName: string) {\n\t\tconst ulid = this.getCollectionIndex(storeName).get(id);\n\t\tconst itemKey = this.getKeyForItem(storeName, id, ulid);\n\n\t\tthis.getCollectionIndex(storeName).delete(id);\n\t\tawait this.storage.removeItem(itemKey);\n\t}\n\n\t/**\n\t * Clear the AsyncStorage of all DataStore entries\n\t */\n\tasync clear() {\n\t\tconst allKeys = await this.storage.getAllKeys();\n\t\tconst allDataStoreKeys = allKeys.filter(key => key.startsWith(DB_NAME));\n\t\tawait this.storage.multiRemove(allDataStoreKeys);\n\t\tthis._collectionInMemoryIndex.clear();\n\t}\n\n\tprivate getKeyForItem(storeName: string, id: string, ulid: string): string {\n\t\treturn `${this.getKeyPrefixForStoreItems(storeName)}::${ulid}::${id}`;\n\t}\n\n\tprivate getLegacyKeyForItem(storeName: string, id: string): string {\n\t\treturn `${this.getKeyPrefixForStoreItems(storeName)}::${id}`;\n\t}\n\n\tprivate getKeyPrefixForStoreItems(storeName: string): string {\n\t\treturn `${DB_NAME}::${storeName}::${DATA}`;\n\t}\n}\n\nexport default AsyncStorageDatabase;\n"]},"metadata":{},"sourceType":"module"}