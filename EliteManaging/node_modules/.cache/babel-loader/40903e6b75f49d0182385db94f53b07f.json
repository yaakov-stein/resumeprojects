{"ast":null,"code":"import { __assign, __read, __spread, __values } from \"tslib\";\nexport var constructStack = function () {\n  var absoluteEntries = [];\n  var relativeEntries = [];\n  var entriesNameSet = new Set();\n\n  var sort = function (entries) {\n    return entries.sort(function (a, b) {\n      return stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"];\n    });\n  };\n\n  var removeByName = function (toRemove) {\n    var isRemoved = false;\n\n    var filterCb = function (entry) {\n      if (entry.name && entry.name === toRemove) {\n        isRemoved = true;\n        entriesNameSet.delete(toRemove);\n        return false;\n      }\n\n      return true;\n    };\n\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  var removeByReference = function (toRemove) {\n    var isRemoved = false;\n\n    var filterCb = function (entry) {\n      if (entry.middleware === toRemove) {\n        isRemoved = true;\n        if (entry.name) entriesNameSet.delete(entry.name);\n        return false;\n      }\n\n      return true;\n    };\n\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  var cloneTo = function (toStack) {\n    absoluteEntries.forEach(function (entry) {\n      //@ts-ignore\n      toStack.add(entry.middleware, __assign({}, entry));\n    });\n    relativeEntries.forEach(function (entry) {\n      //@ts-ignore\n      toStack.addRelativeTo(entry.middleware, __assign({}, entry));\n    });\n    return toStack;\n  };\n\n  var expandRelativeMiddlewareList = function (from) {\n    var expandedMiddlewareList = [];\n    from.before.forEach(function (entry) {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread(expandRelativeMiddlewareList(entry)));\n      }\n    });\n    expandedMiddlewareList.push(from);\n    from.after.reverse().forEach(function (entry) {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push.apply(expandedMiddlewareList, __spread(expandRelativeMiddlewareList(entry)));\n      }\n    });\n    return expandedMiddlewareList;\n  };\n  /**\n   * Get a final list of middleware in the order of being executed in the resolved handler.\n   */\n\n\n  var getMiddlewareList = function () {\n    var normalizedAbsoluteEntries = [];\n    var normalizedRelativeEntries = [];\n    var normalizedEntriesNameMap = {};\n    absoluteEntries.forEach(function (entry) {\n      var normalizedEntry = __assign(__assign({}, entry), {\n        before: [],\n        after: []\n      });\n\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedAbsoluteEntries.push(normalizedEntry);\n    });\n    relativeEntries.forEach(function (entry) {\n      var normalizedEntry = __assign(__assign({}, entry), {\n        before: [],\n        after: []\n      });\n\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedRelativeEntries.push(normalizedEntry);\n    });\n    normalizedRelativeEntries.forEach(function (entry) {\n      if (entry.toMiddleware) {\n        var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n\n        if (toMiddleware === undefined) {\n          throw new Error(entry.toMiddleware + \" is not found when adding \" + (entry.name || \"anonymous\") + \" middleware \" + entry.relation + \" \" + entry.toMiddleware);\n        }\n\n        if (entry.relation === \"after\") {\n          toMiddleware.after.push(entry);\n        }\n\n        if (entry.relation === \"before\") {\n          toMiddleware.before.push(entry);\n        }\n      }\n    });\n    var mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(function (wholeList, expendedMiddlewareList) {\n      // TODO: Replace it with Array.flat();\n      wholeList.push.apply(wholeList, __spread(expendedMiddlewareList));\n      return wholeList;\n    }, []);\n    return mainChain.map(function (entry) {\n      return entry.middleware;\n    });\n  };\n\n  var stack = {\n    add: function (middleware, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var name = options.name,\n          override = options.override;\n\n      var entry = __assign({\n        step: \"initialize\",\n        priority: \"normal\",\n        middleware: middleware\n      }, options);\n\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(\"Duplicate middleware name '\" + name + \"'\");\n          var toOverrideIndex = absoluteEntries.findIndex(function (entry) {\n            return entry.name === name;\n          });\n          var toOverride = absoluteEntries[toOverrideIndex];\n\n          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n            throw new Error(\"\\\"\" + name + \"\\\" middleware with \" + toOverride.priority + \" priority in \" + toOverride.step + \" step cannot be \" + (\"overridden by same-name middleware with \" + entry.priority + \" priority in \" + entry.step + \" step.\"));\n          }\n\n          absoluteEntries.splice(toOverrideIndex, 1);\n        }\n\n        entriesNameSet.add(name);\n      }\n\n      absoluteEntries.push(entry);\n    },\n    addRelativeTo: function (middleware, options) {\n      var name = options.name,\n          override = options.override;\n\n      var entry = __assign({\n        middleware: middleware\n      }, options);\n\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(\"Duplicate middleware name '\" + name + \"'\");\n          var toOverrideIndex = relativeEntries.findIndex(function (entry) {\n            return entry.name === name;\n          });\n          var toOverride = relativeEntries[toOverrideIndex];\n\n          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n            throw new Error(\"\\\"\" + name + \"\\\" middleware \" + toOverride.relation + \" \\\"\" + toOverride.toMiddleware + \"\\\" middleware cannot be overridden \" + (\"by same-name middleware \" + entry.relation + \" \\\"\" + entry.toMiddleware + \"\\\" middleware.\"));\n          }\n\n          relativeEntries.splice(toOverrideIndex, 1);\n        }\n\n        entriesNameSet.add(name);\n      }\n\n      relativeEntries.push(entry);\n    },\n    clone: function () {\n      return cloneTo(constructStack());\n    },\n    use: function (plugin) {\n      plugin.applyToStack(stack);\n    },\n    remove: function (toRemove) {\n      if (typeof toRemove === \"string\") return removeByName(toRemove);else return removeByReference(toRemove);\n    },\n    removeByTag: function (toRemove) {\n      var isRemoved = false;\n\n      var filterCb = function (entry) {\n        var tags = entry.tags,\n            name = entry.name;\n\n        if (tags && tags.includes(toRemove)) {\n          if (name) entriesNameSet.delete(name);\n          isRemoved = true;\n          return false;\n        }\n\n        return true;\n      };\n\n      absoluteEntries = absoluteEntries.filter(filterCb);\n      relativeEntries = relativeEntries.filter(filterCb);\n      return isRemoved;\n    },\n    concat: function (from) {\n      var cloned = cloneTo(constructStack());\n      cloned.use(from);\n      return cloned;\n    },\n    applyToStack: cloneTo,\n    resolve: function (handler, context) {\n      var e_1, _a;\n\n      try {\n        for (var _b = __values(getMiddlewareList().reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var middleware = _c.value;\n          handler = middleware(handler, context);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return handler;\n    }\n  };\n  return stack;\n};\nvar stepWeights = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1\n};\nvar priorityWeights = {\n  high: 3,\n  normal: 2,\n  low: 1\n};","map":{"version":3,"mappings":"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","names":["constructStack","absoluteEntries","relativeEntries","entriesNameSet","Set","sort","entries","a","b","step","stepWeights","priorityWeights","priority","removeByName","toRemove","isRemoved","filterCb","entry","name","delete","filter","removeByReference","middleware","cloneTo","toStack","forEach","add","__assign","addRelativeTo","expandRelativeMiddlewareList","from","expandedMiddlewareList","before","length","after","push","apply","__spread","reverse","getMiddlewareList","normalizedAbsoluteEntries","normalizedRelativeEntries","normalizedEntriesNameMap","normalizedEntry","toMiddleware","undefined","Error","relation","mainChain","map","reduce","wholeList","expendedMiddlewareList","stack","options","override","has","toOverrideIndex","findIndex","toOverride","splice","clone","use","plugin","applyToStack","remove","removeByTag","tags","includes","concat","cloned","resolve","handler","context","_c","initialize","serialize","build","finalizeRequest","deserialize","high","normal","low"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\middleware-stack\\src\\MiddlewareStack.ts"],"sourcesContent":["import {\n  AbsoluteLocation,\n  DeserializeHandler,\n  Handler,\n  HandlerExecutionContext,\n  HandlerOptions,\n  MiddlewareStack,\n  MiddlewareType,\n  Pluggable,\n  Priority,\n  RelativeLocation,\n  Step,\n} from \"@aws-sdk/types\";\n\nimport { AbsoluteMiddlewareEntry, MiddlewareEntry, Normalized, RelativeMiddlewareEntry } from \"./types\";\n\nexport const constructStack = <Input extends object, Output extends object>(): MiddlewareStack<Input, Output> => {\n  let absoluteEntries: AbsoluteMiddlewareEntry<Input, Output>[] = [];\n  let relativeEntries: RelativeMiddlewareEntry<Input, Output>[] = [];\n  const entriesNameSet: Set<string> = new Set();\n\n  const sort = <T extends AbsoluteMiddlewareEntry<Input, Output>>(entries: T[]): T[] =>\n    entries.sort(\n      (a, b) =>\n        stepWeights[b.step] - stepWeights[a.step] ||\n        priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]\n    );\n\n  const removeByName = (toRemove: string): boolean => {\n    let isRemoved = false;\n    const filterCb = (entry: MiddlewareEntry<Input, Output>): boolean => {\n      if (entry.name && entry.name === toRemove) {\n        isRemoved = true;\n        entriesNameSet.delete(toRemove);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  const removeByReference = (toRemove: MiddlewareType<Input, Output>): boolean => {\n    let isRemoved = false;\n    const filterCb = (entry: MiddlewareEntry<Input, Output>): boolean => {\n      if (entry.middleware === toRemove) {\n        isRemoved = true;\n        if (entry.name) entriesNameSet.delete(entry.name);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n\n  const cloneTo = <InputType extends Input, OutputType extends Output>(\n    toStack: MiddlewareStack<InputType, OutputType>\n  ): MiddlewareStack<InputType, OutputType> => {\n    absoluteEntries.forEach((entry) => {\n      //@ts-ignore\n      toStack.add(entry.middleware, { ...entry });\n    });\n    relativeEntries.forEach((entry) => {\n      //@ts-ignore\n      toStack.addRelativeTo(entry.middleware, { ...entry });\n    });\n    return toStack;\n  };\n\n  const expandRelativeMiddlewareList = (\n    from: Normalized<MiddlewareEntry<Input, Output>, Input, Output>\n  ): MiddlewareEntry<Input, Output>[] => {\n    const expandedMiddlewareList: MiddlewareEntry<Input, Output>[] = [];\n    from.before.forEach((entry) => {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n      }\n    });\n    expandedMiddlewareList.push(from);\n    from.after.reverse().forEach((entry) => {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n      }\n    });\n    return expandedMiddlewareList;\n  };\n\n  /**\n   * Get a final list of middleware in the order of being executed in the resolved handler.\n   */\n  const getMiddlewareList = (): Array<MiddlewareType<Input, Output>> => {\n    const normalizedAbsoluteEntries: Normalized<AbsoluteMiddlewareEntry<Input, Output>, Input, Output>[] = [];\n    const normalizedRelativeEntries: Normalized<RelativeMiddlewareEntry<Input, Output>, Input, Output>[] = [];\n    const normalizedEntriesNameMap: {\n      [middlewareName: string]: Normalized<MiddlewareEntry<Input, Output>, Input, Output>;\n    } = {};\n\n    absoluteEntries.forEach((entry) => {\n      const normalizedEntry = {\n        ...entry,\n        before: [],\n        after: [],\n      };\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedAbsoluteEntries.push(normalizedEntry);\n    });\n\n    relativeEntries.forEach((entry) => {\n      const normalizedEntry = {\n        ...entry,\n        before: [],\n        after: [],\n      };\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedRelativeEntries.push(normalizedEntry);\n    });\n\n    normalizedRelativeEntries.forEach((entry) => {\n      if (entry.toMiddleware) {\n        const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n        if (toMiddleware === undefined) {\n          throw new Error(\n            `${entry.toMiddleware} is not found when adding ${entry.name || \"anonymous\"} middleware ${entry.relation} ${\n              entry.toMiddleware\n            }`\n          );\n        }\n        if (entry.relation === \"after\") {\n          toMiddleware.after.push(entry);\n        }\n        if (entry.relation === \"before\") {\n          toMiddleware.before.push(entry);\n        }\n      }\n    });\n\n    const mainChain = sort(normalizedAbsoluteEntries)\n      .map(expandRelativeMiddlewareList)\n      .reduce((wholeList, expendedMiddlewareList) => {\n        // TODO: Replace it with Array.flat();\n        wholeList.push(...expendedMiddlewareList);\n        return wholeList;\n      }, [] as MiddlewareEntry<Input, Output>[]);\n    return mainChain.map((entry) => entry.middleware);\n  };\n\n  const stack = {\n    add: (middleware: MiddlewareType<Input, Output>, options: HandlerOptions & AbsoluteLocation = {}) => {\n      const { name, override } = options;\n      const entry: AbsoluteMiddlewareEntry<Input, Output> = {\n        step: \"initialize\",\n        priority: \"normal\",\n        middleware,\n        ...options,\n      };\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(`Duplicate middleware name '${name}'`);\n          const toOverrideIndex = absoluteEntries.findIndex((entry) => entry.name === name);\n          const toOverride = absoluteEntries[toOverrideIndex];\n          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n            throw new Error(\n              `\"${name}\" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` +\n                `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`\n            );\n          }\n          absoluteEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      absoluteEntries.push(entry);\n    },\n\n    addRelativeTo: (middleware: MiddlewareType<Input, Output>, options: HandlerOptions & RelativeLocation) => {\n      const { name, override } = options;\n      const entry: RelativeMiddlewareEntry<Input, Output> = {\n        middleware,\n        ...options,\n      };\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(`Duplicate middleware name '${name}'`);\n          const toOverrideIndex = relativeEntries.findIndex((entry) => entry.name === name);\n          const toOverride = relativeEntries[toOverrideIndex];\n          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n            throw new Error(\n              `\"${name}\" middleware ${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden ` +\n                `by same-name middleware ${entry.relation} \"${entry.toMiddleware}\" middleware.`\n            );\n          }\n          relativeEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      relativeEntries.push(entry);\n    },\n\n    clone: () => cloneTo(constructStack<Input, Output>()),\n\n    use: (plugin: Pluggable<Input, Output>) => {\n      plugin.applyToStack(stack);\n    },\n\n    remove: (toRemove: MiddlewareType<Input, Output> | string): boolean => {\n      if (typeof toRemove === \"string\") return removeByName(toRemove);\n      else return removeByReference(toRemove);\n    },\n\n    removeByTag: (toRemove: string): boolean => {\n      let isRemoved = false;\n      const filterCb = (entry: MiddlewareEntry<Input, Output>): boolean => {\n        const { tags, name } = entry;\n        if (tags && tags.includes(toRemove)) {\n          if (name) entriesNameSet.delete(name);\n          isRemoved = true;\n          return false;\n        }\n        return true;\n      };\n      absoluteEntries = absoluteEntries.filter(filterCb);\n      relativeEntries = relativeEntries.filter(filterCb);\n      return isRemoved;\n    },\n\n    concat: <InputType extends Input, OutputType extends Output>(\n      from: MiddlewareStack<InputType, OutputType>\n    ): MiddlewareStack<InputType, OutputType> => {\n      const cloned = cloneTo(constructStack<InputType, OutputType>());\n      cloned.use(from);\n      return cloned;\n    },\n\n    applyToStack: cloneTo,\n\n    resolve: <InputType extends Input, OutputType extends Output>(\n      handler: DeserializeHandler<InputType, OutputType>,\n      context: HandlerExecutionContext\n    ): Handler<InputType, OutputType> => {\n      for (const middleware of getMiddlewareList().reverse()) {\n        handler = middleware(handler as Handler<Input, OutputType>, context) as any;\n      }\n      return handler as Handler<InputType, OutputType>;\n    },\n  };\n  return stack;\n};\n\nconst stepWeights: { [key in Step]: number } = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1,\n};\n\nconst priorityWeights: { [key in Priority]: number } = {\n  high: 3,\n  normal: 2,\n  low: 1,\n};\n"]},"metadata":{},"sourceType":"module"}