{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SearchFacesByImageRequest, SearchFacesByImageResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1SearchFacesByImageCommand, serializeAws_json1_1SearchFacesByImageCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>For a given input image, first detects the largest face in the image, and then searches\n *       the specified collection for matching faces. The operation compares the features of the input\n *       face with faces in the specified collection. </p>\n *          <note>\n *             <p>To search for all faces in an input image, you might first call the <a>IndexFaces</a> operation, and then use the face IDs returned in subsequent\n *         calls to the <a>SearchFaces</a> operation. </p>\n *             <p> You can also call the <code>DetectFaces</code> operation and use the bounding boxes\n *         in the response to make face crops, which then you can pass in to the\n *           <code>SearchFacesByImage</code> operation. </p>\n *          </note>\n *\n *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n *       image in an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *          <p>\n *       The response returns an array of faces that match, ordered by similarity score with the\n *       highest similarity first. More specifically, it is an\n *       array of metadata for each face match found. Along with the metadata, the response also\n *       includes a <code>similarity</code> indicating how similar the face is\n *       to the input face.\n *\n *       In the response, the operation also returns the bounding\n *       box (and a confidence level that the bounding box contains a face) of the face that Amazon Rekognition\n *       used for the input image.\n *     </p>\n *\n *          <p>For an example, Searching for a Face Using an Image in the Amazon Rekognition Developer Guide.</p>\n *\n *          <p>The <code>QualityFilter</code> input parameter allows you to filter out detected faces\n *       that donâ€™t meet a required quality bar. The quality bar is based on a\n *       variety of common use cases.\n *       Use <code>QualityFilter</code> to set the quality bar for\n *       filtering by specifying <code>LOW</code>, <code>MEDIUM</code>, or <code>HIGH</code>.\n *       If you do not want to filter detected faces, specify <code>NONE</code>. The default\n *       value is <code>NONE</code>.</p>\n *          <note>\n *             <p>To use quality filtering, you need a collection associated with version 3 of the\n *       face model or higher. To get the version of the face model associated with a collection, call\n *       <a>DescribeCollection</a>. </p>\n *          </note>\n *\n *          <p>This operation requires permissions to perform the <code>rekognition:SearchFacesByImage</code>\n *       action.</p>\n */\n\nvar SearchFacesByImageCommand =\n/** @class */\nfunction (_super) {\n  __extends(SearchFacesByImageCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function SearchFacesByImageCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  SearchFacesByImageCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"SearchFacesByImageCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: SearchFacesByImageRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: SearchFacesByImageResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  SearchFacesByImageCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1SearchFacesByImageCommand(input, context);\n  };\n\n  SearchFacesByImageCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1SearchFacesByImageCommand(output, context);\n  };\n\n  return SearchFacesByImageCommand;\n}($Command);\n\nexport { SearchFacesByImageCommand };","map":{"version":3,"mappings":";AACA,SAASA,yBAAT,EAAoCC,0BAApC,QAAsE,oBAAtE;AACA,SACEC,+CADF,EAEEC,6CAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AAAA;AAAA;EAA+CC,6CAA/C,CAKE;EACA;;;EAEA,mCAAqBC,KAArB,EAA0D;IAA1D,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAqC,CAGxD;EACD;EAED;;;;;EAGAC,kEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,mBAAnB;IACA,IAAMC,WAAW,GAAG,2BAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,yBAAyB,CAAC0B,kBAJI;MAKvDC,wBAAwB,EAAE1B,0BAA0B,CAACyB;IALE,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,gDAAR,UAAkBH,KAAlB,EAAyDuB,OAAzD,EAAgF;IAC9E,OAAO5B,6CAA6C,CAACK,KAAD,EAAQuB,OAAR,CAApD;EACD,CAFO;;EAIApB,kDAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO7B,+CAA+C,CAAC8B,MAAD,EAASD,OAAT,CAAtD;EACD,CAFO;;EAMV;AAAC,CAtDD,CAA+CzB,QAA/C","names":["SearchFacesByImageRequest","SearchFacesByImageResponse","deserializeAws_json1_1SearchFacesByImageCommand","serializeAws_json1_1SearchFacesByImageCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","SearchFacesByImageCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-rekognition\\commands\\SearchFacesByImageCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { SearchFacesByImageRequest, SearchFacesByImageResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1SearchFacesByImageCommand,\n  serializeAws_json1_1SearchFacesByImageCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type SearchFacesByImageCommandInput = SearchFacesByImageRequest;\nexport type SearchFacesByImageCommandOutput = SearchFacesByImageResponse & __MetadataBearer;\n\n/**\n * <p>For a given input image, first detects the largest face in the image, and then searches\n *       the specified collection for matching faces. The operation compares the features of the input\n *       face with faces in the specified collection. </p>\n *          <note>\n *             <p>To search for all faces in an input image, you might first call the <a>IndexFaces</a> operation, and then use the face IDs returned in subsequent\n *         calls to the <a>SearchFaces</a> operation. </p>\n *             <p> You can also call the <code>DetectFaces</code> operation and use the bounding boxes\n *         in the response to make face crops, which then you can pass in to the\n *           <code>SearchFacesByImage</code> operation. </p>\n *          </note>\n *\n *          <p>You pass the input image either as base64-encoded image bytes or as a reference to an\n *       image in an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes is not\n *       supported. The image must be either a PNG or JPEG formatted file. </p>\n *          <p>\n *       The response returns an array of faces that match, ordered by similarity score with the\n *       highest similarity first. More specifically, it is an\n *       array of metadata for each face match found. Along with the metadata, the response also\n *       includes a <code>similarity</code> indicating how similar the face is\n *       to the input face.\n *\n *       In the response, the operation also returns the bounding\n *       box (and a confidence level that the bounding box contains a face) of the face that Amazon Rekognition\n *       used for the input image.\n *     </p>\n *\n *          <p>For an example, Searching for a Face Using an Image in the Amazon Rekognition Developer Guide.</p>\n *\n *          <p>The <code>QualityFilter</code> input parameter allows you to filter out detected faces\n *       that donâ€™t meet a required quality bar. The quality bar is based on a\n *       variety of common use cases.\n *       Use <code>QualityFilter</code> to set the quality bar for\n *       filtering by specifying <code>LOW</code>, <code>MEDIUM</code>, or <code>HIGH</code>.\n *       If you do not want to filter detected faces, specify <code>NONE</code>. The default\n *       value is <code>NONE</code>.</p>\n *          <note>\n *             <p>To use quality filtering, you need a collection associated with version 3 of the\n *       face model or higher. To get the version of the face model associated with a collection, call\n *       <a>DescribeCollection</a>. </p>\n *          </note>\n *\n *          <p>This operation requires permissions to perform the <code>rekognition:SearchFacesByImage</code>\n *       action.</p>\n */\nexport class SearchFacesByImageCommand extends $Command<\n  SearchFacesByImageCommandInput,\n  SearchFacesByImageCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: SearchFacesByImageCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<SearchFacesByImageCommandInput, SearchFacesByImageCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"SearchFacesByImageCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: SearchFacesByImageRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: SearchFacesByImageResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: SearchFacesByImageCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1SearchFacesByImageCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<SearchFacesByImageCommandOutput> {\n    return deserializeAws_json1_1SearchFacesByImageCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}