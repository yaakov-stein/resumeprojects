{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nexport var resolveEndpointsConfig = function (input) {\n  var _a;\n\n  return __assign(__assign({}, input), {\n    tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,\n    endpoint: input.endpoint ? normalizeEndpoint(input) : function () {\n      return getEndPointFromRegion(input);\n    },\n    isCustomEndpoint: input.endpoint ? true : false\n  });\n};\n\nvar normalizeEndpoint = function (input) {\n  var endpoint = input.endpoint,\n      urlParser = input.urlParser;\n\n  if (typeof endpoint === \"string\") {\n    var promisified_1 = Promise.resolve(urlParser(endpoint));\n    return function () {\n      return promisified_1;\n    };\n  } else if (typeof endpoint === \"object\") {\n    var promisified_2 = Promise.resolve(endpoint);\n    return function () {\n      return promisified_2;\n    };\n  }\n\n  return endpoint;\n};\n\nvar getEndPointFromRegion = function (input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, tls, region, dnsHostRegex, hostname;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = input.tls, tls = _a === void 0 ? true : _a;\n          return [4\n          /*yield*/\n          , input.region()];\n\n        case 1:\n          region = _c.sent();\n          dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n\n          if (!dnsHostRegex.test(region)) {\n            throw new Error(\"Invalid region in client config\");\n          }\n\n          return [4\n          /*yield*/\n          , input.regionInfoProvider(region)];\n\n        case 2:\n          hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;\n\n          if (!hostname) {\n            throw new Error(\"Cannot resolve hostname from client config\");\n          }\n\n          return [2\n          /*return*/\n          , input.urlParser((tls ? \"https:\" : \"http:\") + \"//\" + hostname)];\n      }\n    });\n  });\n};","map":{"version":3,"mappings":";AAyBA,OAAO,IAAMA,sBAAsB,GAAG,UACpCC,KADoC,EACgB;;;EACpB,6BAC7BA,KAD6B,GACxB;IACRC,GAAG,QAAED,KAAK,CAACC,GAAR,MAAW,IAAX,IAAWC,aAAX,GAAWA,EAAX,GAAe,IADV;IAERC,QAAQ,EAAEH,KAAK,CAACG,QAAN,GAAiBC,iBAAiB,CAACJ,KAAD,CAAlC,GAA4C;MAAM,4BAAqB,CAACA,KAAD,CAArB;IAA4B,CAFhF;IAGRK,gBAAgB,EAAEL,KAAK,CAACG,QAAN,GAAiB,IAAjB,GAAwB;EAHlC,CADwB;AAKhC,CAPK;;AASP,IAAMC,iBAAiB,GAAG,UAACJ,KAAD,EAAiD;EACjE,YAAQ,GAAgBA,KAAK,SAA7B;EAAA,IAAUM,SAAS,GAAKN,KAAK,UAA7B;;EACR,IAAI,OAAOG,QAAP,KAAoB,QAAxB,EAAkC;IAChC,IAAMI,aAAW,GAAGC,OAAO,CAACC,OAAR,CAAgBH,SAAS,CAACH,QAAD,CAAzB,CAApB;IACA,OAAO;MAAM;IAAW,CAAxB;EACD,CAHD,MAGO,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;IACvC,IAAMO,aAAW,GAAGF,OAAO,CAACC,OAAR,CAAgBN,QAAhB,CAApB;IACA,OAAO;MAAM;IAAW,CAAxB;EACD;;EACD,OAAOA,QAAP;AACD,CAVD;;AAYA,IAAMQ,qBAAqB,GAAG,UAAOX,KAAP,EAAuD;EAAA;;;;;;;;UAC3EE,KAAeF,KAAK,IAApB,KAAG,mBAAG,IAAH,GAAOE,EAAV;UACO;UAAA;UAAA,EAAMF,KAAK,CAACY,MAAN,EAAN;;;UAATA,MAAM,GAAGC,SAAT;UAEAC,YAAY,GAAG,IAAIC,MAAJ,CAAW,0DAAX,CAAf;;UACN,IAAI,CAACD,YAAY,CAACE,IAAb,CAAkBJ,MAAlB,CAAL,EAAgC;YAC9B,MAAM,IAAIK,KAAJ,CAAU,iCAAV,CAAN;UACD;;UAEqB;UAAA;UAAA,EAAMjB,KAAK,CAACkB,kBAAN,CAAyBN,MAAzB,CAAN;;;UAAdO,QAAQ,UAAMN,SAAN,MAA6C,IAA7C,IAA6CO,aAA7C,GAA6CA,EAA7C,GAAiD,EAAjD,EAAmDD,QAA3D;;UACR,IAAI,CAACA,QAAL,EAAe;YACb,MAAM,IAAIF,KAAJ,CAAU,4CAAV,CAAN;UACD;;UAED;UAAA;UAAA,EAAOjB,KAAK,CAACM,SAAN,CAAgB,CAAGL,GAAG,GAAG,QAAH,GAAc,OAApB,IAA2B,IAA3B,GAAgCkB,QAAhD,CAAP;;;GAdmF;AAepF,CAfD","names":["resolveEndpointsConfig","input","tls","_a","endpoint","normalizeEndpoint","isCustomEndpoint","urlParser","promisified_1","Promise","resolve","promisified_2","getEndPointFromRegion","region","_c","dnsHostRegex","RegExp","test","Error","regionInfoProvider","hostname","_b"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\config-resolver\\src\\EndpointsConfig.ts"],"sourcesContent":["import { Endpoint, Provider, RegionInfoProvider, UrlParser } from \"@aws-sdk/types\";\n\nexport interface EndpointsInputConfig {\n  /**\n   * The fully qualified endpoint of the webservice. This is only required when using a custom endpoint (for example, when using a local version of S3).\n   */\n  endpoint?: string | Endpoint | Provider<Endpoint>;\n\n  /**\n   * Whether TLS is enabled for requests.\n   */\n  tls?: boolean;\n}\n\ninterface PreviouslyResolved {\n  regionInfoProvider: RegionInfoProvider;\n  urlParser: UrlParser;\n  region: Provider<string>;\n}\n\nexport interface EndpointsResolvedConfig extends Required<EndpointsInputConfig> {\n  endpoint: Provider<Endpoint>;\n  isCustomEndpoint: boolean;\n}\n\nexport const resolveEndpointsConfig = <T>(\n  input: T & EndpointsInputConfig & PreviouslyResolved\n): T & EndpointsResolvedConfig => ({\n  ...input,\n  tls: input.tls ?? true,\n  endpoint: input.endpoint ? normalizeEndpoint(input) : () => getEndPointFromRegion(input),\n  isCustomEndpoint: input.endpoint ? true : false,\n});\n\nconst normalizeEndpoint = (input: EndpointsInputConfig & PreviouslyResolved): Provider<Endpoint> => {\n  const { endpoint, urlParser } = input;\n  if (typeof endpoint === \"string\") {\n    const promisified = Promise.resolve(urlParser(endpoint));\n    return () => promisified;\n  } else if (typeof endpoint === \"object\") {\n    const promisified = Promise.resolve(endpoint);\n    return () => promisified;\n  }\n  return endpoint!;\n};\n\nconst getEndPointFromRegion = async (input: EndpointsInputConfig & PreviouslyResolved) => {\n  const { tls = true } = input;\n  const region = await input.region();\n\n  const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n  if (!dnsHostRegex.test(region)) {\n    throw new Error(\"Invalid region in client config\");\n  }\n\n  const { hostname } = (await input.regionInfoProvider(region)) ?? {};\n  if (!hostname) {\n    throw new Error(\"Cannot resolve hostname from client config\");\n  }\n\n  return input.urlParser(`${tls ? \"https:\" : \"http:\"}//${hostname}`);\n};\n"]},"metadata":{},"sourceType":"module"}