{"ast":null,"code":"/*!\n * The MIT License (MIT)\n *\n * Copyright (c) 2016 Christian Speckner <cnspeckn@googlemail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar Mutex =\n/** @class */\nfunction () {\n  function Mutex() {\n    this._queue = [];\n    this._pending = false;\n  }\n\n  Mutex.prototype.isLocked = function () {\n    return this._pending;\n  };\n\n  Mutex.prototype.acquire = function () {\n    var _this = this;\n\n    var ticket = new Promise(function (resolve) {\n      return _this._queue.push(resolve);\n    });\n\n    if (!this._pending) {\n      this._dispatchNext();\n    }\n\n    return ticket;\n  };\n\n  Mutex.prototype.runExclusive = function (callback) {\n    return this.acquire().then(function (release) {\n      var result;\n\n      try {\n        result = callback();\n      } catch (e) {\n        release();\n        throw e;\n      }\n\n      return Promise.resolve(result).then(function (x) {\n        return release(), x;\n      }, function (e) {\n        release();\n        throw e;\n      });\n    });\n  };\n\n  Mutex.prototype._dispatchNext = function () {\n    if (this._queue.length > 0) {\n      this._pending = true;\n\n      this._queue.shift()(this._dispatchNext.bind(this));\n    } else {\n      this._pending = false;\n    }\n  };\n\n  return Mutex;\n}();\n\nexport default Mutex;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AAAA;AAAA;EAAA;IA+CS,cAA4D,EAA5D;IACA,gBAAW,KAAX;EACR;;EAhDAA;IACC,OAAO,KAAKC,QAAZ;EACA,CAFD;;EAIAD;IAAA;;IACC,IAAME,MAAM,GAAG,IAAIC,OAAJ,CAAqC,mBAAO;MAC1D,YAAI,CAACC,MAAL,CAAYC,IAAZ,CAAiBC,OAAjB;IAAyB,CADX,CAAf;;IAIA,IAAI,CAAC,KAAKL,QAAV,EAAoB;MACnB,KAAKM,aAAL;IACA;;IAED,OAAOL,MAAP;EACA,CAVD;;EAYAF,yCAAgBQ,QAAhB,EAAkD;IACjD,OAAO,KAAKC,OAAL,GAAeC,IAAf,CAAoB,mBAAO;MACjC,IAAIC,MAAJ;;MAEA,IAAI;QACHA,MAAM,GAAGH,QAAQ,EAAjB;MACA,CAFD,CAEE,OAAOI,CAAP,EAAU;QACXC,OAAO;QACP,MAAMD,CAAN;MACA;;MAED,OAAOT,OAAO,CAACG,OAAR,CAAgBK,MAAhB,EAAwBD,IAAxB,CACN,UAACI,CAAD,EAAK;QAAK,OAACD,OAAO,IAAIC,CAAZ;MAAc,CADlB,EAEN,aAAC;QACAD,OAAO;QACP,MAAMD,CAAN;MACA,CALK,CAAP;IAOA,CAjBM,CAAP;EAkBA,CAnBD;;EAqBQZ,gCAAR;IACC,IAAI,KAAKI,MAAL,CAAYW,MAAZ,GAAqB,CAAzB,EAA4B;MAC3B,KAAKd,QAAL,GAAgB,IAAhB;;MACA,KAAKG,MAAL,CAAYY,KAAZ,GAAqB,KAAKT,aAAL,CAAmBU,IAAnB,CAAwB,IAAxB,CAArB;IACA,CAHD,MAGO;MACN,KAAKhB,QAAL,GAAgB,KAAhB;IACA;EACD,CAPO;;EAWT;AAAC,CAjDD;;AAmDA,eAAeD,KAAf","names":["Mutex","_pending","ticket","Promise","_queue","push","resolve","_dispatchNext","callback","acquire","then","result","e","release","x","length","shift","bind"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-amplify\\core\\src\\Util\\Mutex.ts"],"sourcesContent":["/*!\n * The MIT License (MIT)\n *\n * Copyright (c) 2016 Christian Speckner <cnspeckn@googlemail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\ninterface MutexInterface {\n\tacquire(): Promise<MutexInterface.Releaser>;\n\n\trunExclusive<T>(callback: MutexInterface.Worker<T>): Promise<T>;\n\n\tisLocked(): boolean;\n}\n\nnamespace MutexInterface {\n\texport interface Releaser {\n\t\t(): void;\n\t}\n\n\texport interface Worker<T> {\n\t\t(): Promise<T> | T;\n\t}\n}\n\nclass Mutex implements MutexInterface {\n\tisLocked(): boolean {\n\t\treturn this._pending;\n\t}\n\n\tacquire(): Promise<MutexInterface.Releaser> {\n\t\tconst ticket = new Promise<MutexInterface.Releaser>(resolve =>\n\t\t\tthis._queue.push(resolve)\n\t\t);\n\n\t\tif (!this._pending) {\n\t\t\tthis._dispatchNext();\n\t\t}\n\n\t\treturn ticket;\n\t}\n\n\trunExclusive<T>(callback: MutexInterface.Worker<T>): Promise<T> {\n\t\treturn this.acquire().then(release => {\n\t\t\tlet result: T | Promise<T>;\n\n\t\t\ttry {\n\t\t\t\tresult = callback();\n\t\t\t} catch (e) {\n\t\t\t\trelease();\n\t\t\t\tthrow e;\n\t\t\t}\n\n\t\t\treturn Promise.resolve(result).then(\n\t\t\t\t(x: T) => (release(), x),\n\t\t\t\te => {\n\t\t\t\t\trelease();\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate _dispatchNext(): void {\n\t\tif (this._queue.length > 0) {\n\t\t\tthis._pending = true;\n\t\t\tthis._queue.shift()!(this._dispatchNext.bind(this));\n\t\t} else {\n\t\t\tthis._pending = false;\n\t\t}\n\t}\n\n\tprivate _queue: Array<(release: MutexInterface.Releaser) => void> = [];\n\tprivate _pending = false;\n}\n\nexport default Mutex;\n"]},"metadata":{},"sourceType":"module"}