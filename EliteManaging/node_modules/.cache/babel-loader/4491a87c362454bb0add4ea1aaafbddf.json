{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar constants_1 = require(\"./constants\");\n\nvar RawSha256_1 = require(\"./RawSha256\");\n\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\n\nvar Sha256 =\n/** @class */\nfunction () {\n  function Sha256(secret) {\n    this.hash = new RawSha256_1.RawSha256();\n\n    if (secret) {\n      this.outer = new RawSha256_1.RawSha256();\n      var inner = bufferFromSecret(secret);\n      var outer = new Uint8Array(constants_1.BLOCK_SIZE);\n      outer.set(inner);\n\n      for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n\n      this.hash.update(inner);\n      this.outer.update(outer); // overwrite the copied key in memory\n\n      for (var i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  }\n\n  Sha256.prototype.update = function (toHash) {\n    if (isEmptyData(toHash) || this.error) {\n      return;\n    }\n\n    try {\n      this.hash.update(convertToBuffer(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  };\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n\n\n  Sha256.prototype.digestSync = function () {\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n\n      return this.outer.digest();\n    }\n\n    return this.hash.digest();\n  };\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n\n\n  Sha256.prototype.digest = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.digestSync()];\n      });\n    });\n  };\n\n  return Sha256;\n}();\n\nexports.Sha256 = Sha256;\n\nfunction bufferFromSecret(secret) {\n  var input = convertToBuffer(secret);\n\n  if (input.byteLength > constants_1.BLOCK_SIZE) {\n    var bufferHash = new RawSha256_1.RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n\n  var buffer = new Uint8Array(constants_1.BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}\n\nfunction isEmptyData(data) {\n  if (typeof data === \"string\") {\n    return data.length === 0;\n  }\n\n  return data.byteLength === 0;\n}\n\nfunction convertToBuffer(data) {\n  if (typeof data === \"string\") {\n    return util_utf8_browser_1.fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n\n  return new Uint8Array(data);\n}","map":{"version":3,"mappings":"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","names":["secret","RawSha256_1","outer","inner","bufferFromSecret","Uint8Array","constants_1","set","i","hash","update","byteLength","Sha256","toHash","isEmptyData","error","convertToBuffer","e","finished","digest","digestSync","exports","input","bufferHash","buffer","data","length","util_utf8_browser_1","ArrayBuffer","isView","byteOffset","BYTES_PER_ELEMENT"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-crypto\\sha256-js\\src\\jsSha256.ts"],"sourcesContent":["import { BLOCK_SIZE } from \"./constants\";\nimport { RawSha256 } from \"./RawSha256\";\nimport { Hash, SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8-browser\";\n\nexport class Sha256 implements Hash {\n  private readonly hash = new RawSha256();\n  private readonly outer?: RawSha256;\n  private error: any;\n\n  constructor(secret?: SourceData) {\n    if (secret) {\n      this.outer = new RawSha256();\n      const inner = bufferFromSecret(secret);\n      const outer = new Uint8Array(BLOCK_SIZE);\n      outer.set(inner);\n\n      for (let i = 0; i < BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n\n      this.hash.update(inner);\n      this.outer.update(outer);\n\n      // overwrite the copied key in memory\n      for (let i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  }\n\n  update(toHash: SourceData): void {\n    if (isEmptyData(toHash) || this.error) {\n      return;\n    }\n\n    try {\n      this.hash.update(convertToBuffer(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  }\n\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n  digestSync(): Uint8Array {\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n\n      return this.outer.digest();\n    }\n\n    return this.hash.digest();\n  }\n\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n  async digest(): Promise<Uint8Array> {\n    return this.digestSync();\n  }\n}\n\nfunction bufferFromSecret(secret: SourceData): Uint8Array {\n  let input = convertToBuffer(secret);\n\n  if (input.byteLength > BLOCK_SIZE) {\n    const bufferHash = new RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n\n  const buffer = new Uint8Array(BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}\n\nfunction isEmptyData(data: SourceData): boolean {\n  if (typeof data === \"string\") {\n    return data.length === 0;\n  }\n\n  return data.byteLength === 0;\n}\n\nfunction convertToBuffer(data: SourceData): Uint8Array {\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  return new Uint8Array(data);\n}\n"]},"metadata":{},"sourceType":"script"}