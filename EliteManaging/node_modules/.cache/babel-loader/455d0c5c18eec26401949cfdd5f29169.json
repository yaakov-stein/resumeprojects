{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('Predictions');\n\nvar PredictionsClass =\n/** @class */\nfunction () {\n  /**\n   * Initialize Predictions with AWS configurations\n   * @param {PredictionsOptions} options - Configuration object for Predictions\n   */\n  function PredictionsClass(options) {\n    this._options = options;\n    this._convertPluggables = [];\n    this._identifyPluggables = [];\n    this._interpretPluggables = [];\n  }\n\n  PredictionsClass.prototype.getModuleName = function () {\n    return 'Predictions';\n  };\n  /**\n   * add plugin/pluggable into Predictions category\n   * @param {Object} pluggable - an instance of the plugin/pluggable\n   **/\n\n\n  PredictionsClass.prototype.addPluggable = function (pluggable) {\n    if (this.getPluggable(pluggable.getProviderName())) {\n      throw new Error(\"Pluggable with name \" + pluggable.getProviderName() + \" has already been added.\");\n    }\n\n    var pluggableAdded = false;\n\n    if (this.implementsConvertPluggable(pluggable)) {\n      this._convertPluggables.push(pluggable);\n\n      pluggableAdded = true;\n    }\n\n    if (this.implementsIdentifyPluggable(pluggable)) {\n      this._identifyPluggables.push(pluggable);\n\n      pluggableAdded = true;\n    }\n\n    if (this.implementsInterpretPluggable(pluggable)) {\n      this._interpretPluggables.push(pluggable);\n\n      pluggableAdded = true;\n    }\n\n    if (pluggableAdded) {\n      this.configurePluggable(pluggable);\n    }\n  };\n  /**\n   * Get the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  PredictionsClass.prototype.getPluggable = function (providerName) {\n    var pluggable = this.getAllProviders().find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n\n    if (pluggable === undefined) {\n      logger.debug('No plugin found with providerName=>', providerName);\n      return null;\n    } else return pluggable;\n  };\n  /**\n   * Remove the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  PredictionsClass.prototype.removePluggable = function (providerName) {\n    this._convertPluggables = this._convertPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    this._identifyPluggables = this._identifyPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    this._interpretPluggables = this._interpretPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    return;\n  };\n  /**\n   * To make both top level providers and category level providers work with same interface and configuration\n   * this method duplicates Predictions config into parent level config (for top level provider) and\n   * category level config (such as convert, identify etc) and pass both to each provider.\n   */\n\n\n  PredictionsClass.prototype.configure = function (options) {\n    var _this = this;\n\n    var predictionsConfig = options ? options.predictions || options : {};\n    predictionsConfig = __assign(__assign({}, predictionsConfig), options);\n    this._options = Object.assign({}, this._options, predictionsConfig);\n    logger.debug('configure Predictions', this._options);\n    this.getAllProviders().forEach(function (pluggable) {\n      return _this.configurePluggable(pluggable);\n    });\n  };\n\n  PredictionsClass.prototype.interpret = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._interpretPluggables, options);\n    return pluggableToExecute.interpret(input);\n  };\n\n  PredictionsClass.prototype.convert = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._convertPluggables, options);\n    return pluggableToExecute.convert(input);\n  };\n\n  PredictionsClass.prototype.identify = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._identifyPluggables, options);\n    return pluggableToExecute.identify(input);\n  }; // tslint:disable-next-line: max-line-length\n\n\n  PredictionsClass.prototype.getPluggableToExecute = function (pluggables, providerOptions) {\n    // Give preference to provider name first since it is more specific to this call, even if\n    // there is only one provider configured to error out if the name provided is not the one matched.\n    if (providerOptions && providerOptions.providerName) {\n      return __spread(pluggables).find(function (pluggable) {\n        return pluggable.getProviderName() === providerOptions.providerName;\n      });\n    } else {\n      if (pluggables.length === 1) {\n        return pluggables[0];\n      } else {\n        throw new Error('More than one or no providers are configured, ' + 'Either specify a provider name or configure exactly one provider');\n      }\n    }\n  };\n\n  PredictionsClass.prototype.getAllProviders = function () {\n    return __spread(this._convertPluggables, this._identifyPluggables, this._interpretPluggables);\n  };\n\n  PredictionsClass.prototype.configurePluggable = function (pluggable) {\n    var categoryConfig = Object.assign({}, this._options['predictions'], // Parent predictions config for the top level provider\n    this._options[pluggable.getCategory().toLowerCase()] // Actual category level config\n    );\n    pluggable.configure(categoryConfig);\n  };\n\n  PredictionsClass.prototype.implementsConvertPluggable = function (obj) {\n    return obj && typeof obj.convert === 'function';\n  };\n\n  PredictionsClass.prototype.implementsIdentifyPluggable = function (obj) {\n    return obj && typeof obj.identify === 'function';\n  };\n\n  PredictionsClass.prototype.implementsInterpretPluggable = function (obj) {\n    return obj && typeof obj.interpret === 'function';\n  };\n\n  return PredictionsClass;\n}();\n\nexport { PredictionsClass };\nexport var Predictions = new PredictionsClass({});\nAmplify.register(Predictions);","map":{"version":3,"mappings":"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","names":["Amplify","ConsoleLogger","Logger","logger","options","_options","_convertPluggables","_identifyPluggables","_interpretPluggables","PredictionsClass","pluggable","getPluggable","getProviderName","Error","pluggableAdded","implementsConvertPluggable","push","implementsIdentifyPluggable","implementsInterpretPluggable","configurePluggable","providerName","getAllProviders","find","undefined","debug","filter","predictionsConfig","predictions","Object","assign","forEach","input","pluggableToExecute","getPluggableToExecute","interpret","convert","identify","pluggables","providerOptions","__spread","length","categoryConfig","getCategory","toLowerCase","configure","obj","Predictions","register"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-amplify\\predictions\\src\\Predictions.ts"],"sourcesContent":["import {\n\tPredictionsOptions,\n\tTranslateTextInput,\n\tTranslateTextOutput,\n\tTextToSpeechInput,\n\tProviderOptions,\n\tTextToSpeechOutput,\n\tSpeechToTextInput,\n\tSpeechToTextOutput,\n\tIdentifyTextInput,\n\tIdentifyTextOutput,\n\tIdentifyLabelsOutput,\n\tIdentifyLabelsInput,\n\tIdentifyEntitiesInput,\n\tIdentifyEntitiesOutput,\n\tInterpretTextOutput,\n\tInterpretTextInput,\n} from './types';\nimport {\n\tAbstractConvertPredictionsProvider,\n\tAbstractIdentifyPredictionsProvider,\n\tAbstractInterpretPredictionsProvider,\n\tAbstractPredictionsProvider,\n} from './types/Providers';\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\n\nconst logger = new Logger('Predictions');\n\nexport class PredictionsClass {\n\tprivate _options: PredictionsOptions;\n\n\tprivate _convertPluggables: AbstractConvertPredictionsProvider[];\n\tprivate _identifyPluggables: AbstractIdentifyPredictionsProvider[];\n\tprivate _interpretPluggables: AbstractInterpretPredictionsProvider[];\n\n\t/**\n\t * Initialize Predictions with AWS configurations\n\t * @param {PredictionsOptions} options - Configuration object for Predictions\n\t */\n\tconstructor(options: PredictionsOptions) {\n\t\tthis._options = options;\n\t\tthis._convertPluggables = [];\n\t\tthis._identifyPluggables = [];\n\t\tthis._interpretPluggables = [];\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Predictions';\n\t}\n\n\t/**\n\t * add plugin/pluggable into Predictions category\n\t * @param {Object} pluggable - an instance of the plugin/pluggable\n\t **/\n\tpublic addPluggable(pluggable: AbstractPredictionsProvider) {\n\t\tif (this.getPluggable(pluggable.getProviderName())) {\n\t\t\tthrow new Error(\n\t\t\t\t`Pluggable with name ${pluggable.getProviderName()} has already been added.`\n\t\t\t);\n\t\t}\n\t\tlet pluggableAdded: boolean = false;\n\t\tif (this.implementsConvertPluggable(pluggable)) {\n\t\t\tthis._convertPluggables.push(pluggable);\n\t\t\tpluggableAdded = true;\n\t\t}\n\t\tif (this.implementsIdentifyPluggable(pluggable)) {\n\t\t\tthis._identifyPluggables.push(pluggable);\n\t\t\tpluggableAdded = true;\n\t\t}\n\t\tif (this.implementsInterpretPluggable(pluggable)) {\n\t\t\tthis._interpretPluggables.push(pluggable);\n\t\t\tpluggableAdded = true;\n\t\t}\n\t\tif (pluggableAdded) {\n\t\t\tthis.configurePluggable(pluggable);\n\t\t}\n\t}\n\n\t/**\n\t * Get the plugin object\n\t * @param providerName - the name of the plugin\n\t */\n\tpublic getPluggable(providerName: string): AbstractPredictionsProvider {\n\t\tconst pluggable = this.getAllProviders().find(\n\t\t\tpluggable => pluggable.getProviderName() === providerName\n\t\t);\n\t\tif (pluggable === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName=>', providerName);\n\t\t\treturn null;\n\t\t} else return pluggable;\n\t}\n\n\t/**\n\t * Remove the plugin object\n\t * @param providerName - the name of the plugin\n\t */\n\tpublic removePluggable(providerName: string) {\n\t\tthis._convertPluggables = this._convertPluggables.filter(\n\t\t\tpluggable => pluggable.getProviderName() !== providerName\n\t\t);\n\t\tthis._identifyPluggables = this._identifyPluggables.filter(\n\t\t\tpluggable => pluggable.getProviderName() !== providerName\n\t\t);\n\t\tthis._interpretPluggables = this._interpretPluggables.filter(\n\t\t\tpluggable => pluggable.getProviderName() !== providerName\n\t\t);\n\t\treturn;\n\t}\n\n\t/**\n\t * To make both top level providers and category level providers work with same interface and configuration\n\t * this method duplicates Predictions config into parent level config (for top level provider) and\n\t * category level config (such as convert, identify etc) and pass both to each provider.\n\t */\n\tconfigure(options: PredictionsOptions) {\n\t\tlet predictionsConfig = options ? options.predictions || options : {};\n\t\tpredictionsConfig = { ...predictionsConfig, ...options };\n\t\tthis._options = Object.assign({}, this._options, predictionsConfig);\n\t\tlogger.debug('configure Predictions', this._options);\n\t\tthis.getAllProviders().forEach(pluggable =>\n\t\t\tthis.configurePluggable(pluggable)\n\t\t);\n\t}\n\n\tpublic interpret(\n\t\tinput: InterpretTextInput,\n\t\toptions?: ProviderOptions\n\t): Promise<InterpretTextOutput>;\n\tpublic interpret(\n\t\tinput: InterpretTextInput,\n\t\toptions?: ProviderOptions\n\t): Promise<InterpretTextOutput> {\n\t\tconst pluggableToExecute = this.getPluggableToExecute(\n\t\t\tthis._interpretPluggables,\n\t\t\toptions\n\t\t);\n\t\treturn pluggableToExecute.interpret(input);\n\t}\n\n\tpublic convert(\n\t\tinput: TranslateTextInput,\n\t\toptions?: ProviderOptions\n\t): Promise<TranslateTextOutput>;\n\tpublic convert(\n\t\tinput: TextToSpeechInput,\n\t\toptions?: ProviderOptions\n\t): Promise<TextToSpeechOutput>;\n\tpublic convert(\n\t\tinput: SpeechToTextInput,\n\t\toptions?: ProviderOptions\n\t): Promise<SpeechToTextOutput>;\n\tpublic convert(\n\t\tinput: TranslateTextInput | TextToSpeechInput | SpeechToTextInput,\n\t\toptions?: ProviderOptions\n\t): Promise<TranslateTextOutput | TextToSpeechOutput | SpeechToTextOutput> {\n\t\tconst pluggableToExecute = this.getPluggableToExecute(\n\t\t\tthis._convertPluggables,\n\t\t\toptions\n\t\t);\n\t\treturn pluggableToExecute.convert(input);\n\t}\n\n\tpublic identify(\n\t\tinput: IdentifyTextInput,\n\t\toptions?: ProviderOptions\n\t): Promise<IdentifyTextOutput>;\n\tpublic identify(\n\t\tinput: IdentifyLabelsInput,\n\t\toptions?: ProviderOptions\n\t): Promise<IdentifyLabelsOutput>;\n\tpublic identify(\n\t\tinput: IdentifyEntitiesInput,\n\t\toptions?: ProviderOptions\n\t): Promise<IdentifyEntitiesOutput>;\n\tpublic identify(\n\t\tinput: IdentifyTextInput | IdentifyLabelsInput | IdentifyEntitiesInput,\n\t\toptions: ProviderOptions\n\t): Promise<\n\t\tIdentifyTextOutput | IdentifyLabelsOutput | IdentifyEntitiesOutput\n\t> {\n\t\tconst pluggableToExecute = this.getPluggableToExecute(\n\t\t\tthis._identifyPluggables,\n\t\t\toptions\n\t\t);\n\t\treturn pluggableToExecute.identify(input);\n\t}\n\n\t// tslint:disable-next-line: max-line-length\n\tprivate getPluggableToExecute<T extends AbstractPredictionsProvider>(\n\t\tpluggables: T[],\n\t\tproviderOptions: ProviderOptions\n\t): T {\n\t\t// Give preference to provider name first since it is more specific to this call, even if\n\t\t// there is only one provider configured to error out if the name provided is not the one matched.\n\t\tif (providerOptions && providerOptions.providerName) {\n\t\t\treturn [...pluggables].find(\n\t\t\t\tpluggable =>\n\t\t\t\t\tpluggable.getProviderName() === providerOptions.providerName\n\t\t\t);\n\t\t} else {\n\t\t\tif (pluggables.length === 1) {\n\t\t\t\treturn pluggables[0];\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'More than one or no providers are configured, ' +\n\t\t\t\t\t\t'Either specify a provider name or configure exactly one provider'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getAllProviders() {\n\t\treturn [\n\t\t\t...this._convertPluggables,\n\t\t\t...this._identifyPluggables,\n\t\t\t...this._interpretPluggables,\n\t\t];\n\t}\n\n\tprivate configurePluggable(pluggable: AbstractPredictionsProvider) {\n\t\tconst categoryConfig = Object.assign(\n\t\t\t{},\n\t\t\tthis._options['predictions'], // Parent predictions config for the top level provider\n\t\t\tthis._options[pluggable.getCategory().toLowerCase()] // Actual category level config\n\t\t);\n\t\tpluggable.configure(categoryConfig);\n\t}\n\n\tprivate implementsConvertPluggable(\n\t\tobj: any\n\t): obj is AbstractConvertPredictionsProvider {\n\t\treturn obj && typeof obj.convert === 'function';\n\t}\n\n\tprivate implementsIdentifyPluggable(\n\t\tobj: any\n\t): obj is AbstractIdentifyPredictionsProvider {\n\t\treturn obj && typeof obj.identify === 'function';\n\t}\n\n\tprivate implementsInterpretPluggable(\n\t\tobj: any\n\t): obj is AbstractInterpretPredictionsProvider {\n\t\treturn obj && typeof obj.interpret === 'function';\n\t}\n}\n\nexport const Predictions = new PredictionsClass({});\nAmplify.register(Predictions);\n"]},"metadata":{},"sourceType":"module"}