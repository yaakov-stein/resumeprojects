{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ListBucketsOutput } from \"../models/models_0\";\nimport { deserializeAws_restXmlListBucketsCommand, serializeAws_restXmlListBucketsCommand } from \"../protocols/Aws_restXml\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Returns a list of all buckets owned by the authenticated sender of the request.</p>\n */\n\nvar ListBucketsCommand =\n/** @class */\nfunction (_super) {\n  __extends(ListBucketsCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function ListBucketsCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  ListBucketsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"ListBucketsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: function (input) {\n        return input;\n      },\n      outputFilterSensitiveLog: ListBucketsOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  ListBucketsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlListBucketsCommand(input, context);\n  };\n\n  ListBucketsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlListBucketsCommand(output, context);\n  };\n\n  return ListBucketsCommand;\n}($Command);\n\nexport { ListBucketsCommand };","map":{"version":3,"mappings":";AACA,SAASA,iBAAT,QAAkC,oBAAlC;AACA,SACEC,wCADF,EAEEC,sCAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;AAGA;AAAA;AAAA;EAAwCC,sCAAxC,CAKE;EACA;;;EAEA,4BAAqBC,KAArB,EAAmD;IAAnD,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAA8B,CAGjD;EACD;EAED;;;;;EAGAC,2DACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,UAAnB;IACA,IAAMC,WAAW,GAAG,oBAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAE,UAACjB,KAAD,EAAW;QAAK;MAAK,CAJS;MAKvDkB,wBAAwB,EAAEzB,iBAAiB,CAAC0B;IALW,CAAzD;IAOQ,kBAAc,GAAKd,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,yCAAR,UAAkBH,KAAlB,EAAkDuB,OAAlD,EAAyE;IACvE,OAAO5B,sCAAsC,CAACK,KAAD,EAAQuB,OAAR,CAA7C;EACD,CAFO;;EAIApB,2CAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO7B,wCAAwC,CAAC8B,MAAD,EAASD,OAAT,CAA/C;EACD,CAFO;;EAMV;AAAC,CAtDD,CAAwCzB,QAAxC","names":["ListBucketsOutput","deserializeAws_restXmlListBucketsCommand","serializeAws_restXmlListBucketsCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","ListBucketsCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","outputFilterSensitiveLog","filterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-s3\\commands\\ListBucketsCommand.ts"],"sourcesContent":["import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { ListBucketsOutput } from \"../models/models_0\";\nimport {\n  deserializeAws_restXmlListBucketsCommand,\n  serializeAws_restXmlListBucketsCommand,\n} from \"../protocols/Aws_restXml\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type ListBucketsCommandInput = {};\nexport type ListBucketsCommandOutput = ListBucketsOutput & __MetadataBearer;\n\n/**\n * <p>Returns a list of all buckets owned by the authenticated sender of the request.</p>\n */\nexport class ListBucketsCommand extends $Command<\n  ListBucketsCommandInput,\n  ListBucketsCommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: ListBucketsCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<ListBucketsCommandInput, ListBucketsCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"ListBucketsCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: (input: any) => input,\n      outputFilterSensitiveLog: ListBucketsOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: ListBucketsCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlListBucketsCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<ListBucketsCommandOutput> {\n    return deserializeAws_restXmlListBucketsCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}