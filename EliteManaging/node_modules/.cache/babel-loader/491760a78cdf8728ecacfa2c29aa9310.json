{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartDocumentAnalysisRequest, StartDocumentAnalysisResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartDocumentAnalysisCommand, serializeAws_json1_1StartDocumentAnalysisCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Starts the asynchronous analysis of an input document for relationships between detected\n *          items such as key-value pairs, tables, and selection elements.</p>\n *\n *          <p>\n *             <code>StartDocumentAnalysis</code> can analyze text in documents that are in JPEG, PNG, and PDF format. The\n *          documents are stored in an Amazon S3 bucket. Use <a>DocumentLocation</a> to specify the bucket name and file name\n *          of the document.\n *          </p>\n *          <p>\n *             <code>StartDocumentAnalysis</code> returns a job identifier\n *             (<code>JobId</code>) that you use to get the results of the operation. When text\n *          analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS)\n *          topic that you specify in <code>NotificationChannel</code>. To get the results of the text\n *          analysis operation, first check that the status value published to the Amazon SNS topic is\n *             <code>SUCCEEDED</code>. If so, call <a>GetDocumentAnalysis</a>, and pass\n *          the job identifier (<code>JobId</code>) from the initial call to\n *             <code>StartDocumentAnalysis</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\">Document Text Analysis</a>.</p>\n */\n\nvar StartDocumentAnalysisCommand =\n/** @class */\nfunction (_super) {\n  __extends(StartDocumentAnalysisCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StartDocumentAnalysisCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StartDocumentAnalysisCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"TextractClient\";\n    var commandName = \"StartDocumentAnalysisCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartDocumentAnalysisRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartDocumentAnalysisResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StartDocumentAnalysisCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartDocumentAnalysisCommand(input, context);\n  };\n\n  StartDocumentAnalysisCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartDocumentAnalysisCommand(output, context);\n  };\n\n  return StartDocumentAnalysisCommand;\n}($Command);\n\nexport { StartDocumentAnalysisCommand };","map":{"version":3,"mappings":";AACA,SAASA,4BAAT,EAAuCC,6BAAvC,QAA4E,oBAA5E;AACA,SACEC,kDADF,EAEEC,gDAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;AAoBA;AAAA;AAAA;EAAkDC,gDAAlD,CAKE;EACA;;;EAEA,sCAAqBC,KAArB,EAA6D;IAA7D,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAwC,CAG3D;EACD;EAED;;;;;EAGAC,qEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,gBAAnB;IACA,IAAMC,WAAW,GAAG,8BAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,4BAA4B,CAAC0B,kBAJC;MAKvDC,wBAAwB,EAAE1B,6BAA6B,CAACyB;IALD,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,mDAAR,UAAkBH,KAAlB,EAA4DuB,OAA5D,EAAmF;IACjF,OAAO5B,gDAAgD,CAACK,KAAD,EAAQuB,OAAR,CAAvD;EACD,CAFO;;EAIApB,qDAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO7B,kDAAkD,CAAC8B,MAAD,EAASD,OAAT,CAAzD;EACD,CAFO;;EAMV;AAAC,CAtDD,CAAkDzB,QAAlD","names":["StartDocumentAnalysisRequest","StartDocumentAnalysisResponse","deserializeAws_json1_1StartDocumentAnalysisCommand","serializeAws_json1_1StartDocumentAnalysisCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","StartDocumentAnalysisCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-textract\\commands\\StartDocumentAnalysisCommand.ts"],"sourcesContent":["import { ServiceInputTypes, ServiceOutputTypes, TextractClientResolvedConfig } from \"../TextractClient\";\nimport { StartDocumentAnalysisRequest, StartDocumentAnalysisResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1StartDocumentAnalysisCommand,\n  serializeAws_json1_1StartDocumentAnalysisCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type StartDocumentAnalysisCommandInput = StartDocumentAnalysisRequest;\nexport type StartDocumentAnalysisCommandOutput = StartDocumentAnalysisResponse & __MetadataBearer;\n\n/**\n * <p>Starts the asynchronous analysis of an input document for relationships between detected\n *          items such as key-value pairs, tables, and selection elements.</p>\n *\n *          <p>\n *             <code>StartDocumentAnalysis</code> can analyze text in documents that are in JPEG, PNG, and PDF format. The\n *          documents are stored in an Amazon S3 bucket. Use <a>DocumentLocation</a> to specify the bucket name and file name\n *          of the document.\n *          </p>\n *          <p>\n *             <code>StartDocumentAnalysis</code> returns a job identifier\n *             (<code>JobId</code>) that you use to get the results of the operation. When text\n *          analysis is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS)\n *          topic that you specify in <code>NotificationChannel</code>. To get the results of the text\n *          analysis operation, first check that the status value published to the Amazon SNS topic is\n *             <code>SUCCEEDED</code>. If so, call <a>GetDocumentAnalysis</a>, and pass\n *          the job identifier (<code>JobId</code>) from the initial call to\n *             <code>StartDocumentAnalysis</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-analyzing.html\">Document Text Analysis</a>.</p>\n */\nexport class StartDocumentAnalysisCommand extends $Command<\n  StartDocumentAnalysisCommandInput,\n  StartDocumentAnalysisCommandOutput,\n  TextractClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: StartDocumentAnalysisCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: TextractClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<StartDocumentAnalysisCommandInput, StartDocumentAnalysisCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"TextractClient\";\n    const commandName = \"StartDocumentAnalysisCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: StartDocumentAnalysisRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartDocumentAnalysisResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: StartDocumentAnalysisCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1StartDocumentAnalysisCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<StartDocumentAnalysisCommandOutput> {\n    return deserializeAws_json1_1StartDocumentAnalysisCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}