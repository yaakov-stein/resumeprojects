{"ast":null,"code":"import { __values } from \"tslib\";\nimport { ProviderError } from \"./ProviderError\";\n/**\n * Compose a single credential provider function from multiple credential\n * providers. The first provider in the argument list will always be invoked;\n * subsequent providers in the list will be invoked in the order in which the\n * were received if the preceding provider did not successfully resolve.\n *\n * If no providers were received or no provider resolves successfully, the\n * returned promise will be rejected.\n */\n\nexport function chain() {\n  var providers = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    providers[_i] = arguments[_i];\n  }\n\n  return function () {\n    var e_1, _a;\n\n    var promise = Promise.reject(new ProviderError(\"No providers in chain\"));\n\n    var _loop_1 = function (provider) {\n      promise = promise.catch(function (err) {\n        if (err === null || err === void 0 ? void 0 : err.tryNextLink) {\n          return provider();\n        }\n\n        throw err;\n      });\n    };\n\n    try {\n      for (var providers_1 = __values(providers), providers_1_1 = providers_1.next(); !providers_1_1.done; providers_1_1 = providers_1.next()) {\n        var provider = providers_1_1.value;\n\n        _loop_1(provider);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (providers_1_1 && !providers_1_1.done && (_a = providers_1.return)) _a.call(providers_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return promise;\n  };\n}","map":{"version":3,"mappings":";AAEA,SAASA,aAAT,QAA8B,iBAA9B;AAEA;;;;;;;;;;AASA,OAAM,SAAUC,KAAV,GAAe;EAAI;;OAAA,yCAAgC;IAAhCC;;;EACvB,OAAO;;;IACL,IAAIC,OAAO,GAAeC,OAAO,CAACC,MAAR,CAAe,IAAIL,aAAJ,CAAkB,uBAAlB,CAAf,CAA1B;;4BACWM,UAAQ;MACjBH,OAAO,GAAGA,OAAO,CAACI,KAAR,CAAc,UAACC,GAAD,EAAS;QAC/B,IAAIA,GAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAEC,WAAT,EAAsB;UACpB,OAAOH,QAAQ,EAAf;QACD;;QAED,MAAME,GAAN;MACD,CANS,CAAV;;;;MADF,KAAuB,uCAASE,kCAAhC,EAAgC,mBAAhC,EAAgCA,kCAAhC,EAAgC;QAA3B,IAAMJ,QAAQ,sBAAd;;gBAAMA;MAQV;;;;;;;;;;;;;IAED,OAAOH,OAAP;EACD,CAbD;AAcD","names":["ProviderError","chain","providers","promise","Promise","reject","provider","catch","err","tryNextLink","providers_1_1"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\property-provider\\src\\chain.ts"],"sourcesContent":["import { Provider } from \"@aws-sdk/types\";\n\nimport { ProviderError } from \"./ProviderError\";\n\n/**\n * Compose a single credential provider function from multiple credential\n * providers. The first provider in the argument list will always be invoked;\n * subsequent providers in the list will be invoked in the order in which the\n * were received if the preceding provider did not successfully resolve.\n *\n * If no providers were received or no provider resolves successfully, the\n * returned promise will be rejected.\n */\nexport function chain<T>(...providers: Array<Provider<T>>): Provider<T> {\n  return () => {\n    let promise: Promise<T> = Promise.reject(new ProviderError(\"No providers in chain\"));\n    for (const provider of providers) {\n      promise = promise.catch((err: any) => {\n        if (err?.tryNextLink) {\n          return provider();\n        }\n\n        throw err;\n      });\n    }\n\n    return promise;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}