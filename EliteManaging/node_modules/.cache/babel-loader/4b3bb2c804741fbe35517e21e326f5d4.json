{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { GetCredentialsForIdentityCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { resolveLogins } from \"./resolveLogins\";\n/**\n * Retrieves temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from this function call are not cached internally.\n */\n\nexport function fromCognitoIdentity(parameters) {\n  var _this = this;\n\n  return function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var _a, _b, _c, AccessKeyId, Expiration, _d, SecretKey, SessionToken, _e, _f, _g, _h;\n\n      var _j;\n\n      return __generator(this, function (_k) {\n        switch (_k.label) {\n          case 0:\n            _f = (_e = parameters.client).send;\n            _g = GetCredentialsForIdentityCommand.bind;\n            _j = {\n              CustomRoleArn: parameters.customRoleArn,\n              IdentityId: parameters.identityId\n            };\n            if (!parameters.logins) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , resolveLogins(parameters.logins)];\n\n          case 1:\n            _h = _k.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _h = undefined;\n            _k.label = 3;\n\n          case 3:\n            return [4\n            /*yield*/\n            , _f.apply(_e, [new (_g.apply(GetCredentialsForIdentityCommand, [void 0, (_j.Logins = _h, _j)]))()])];\n\n          case 4:\n            _a = _k.sent().Credentials, _b = _a === void 0 ? throwOnMissingCredentials() : _a, _c = _b.AccessKeyId, AccessKeyId = _c === void 0 ? throwOnMissingAccessKeyId() : _c, Expiration = _b.Expiration, _d = _b.SecretKey, SecretKey = _d === void 0 ? throwOnMissingSecretKey() : _d, SessionToken = _b.SessionToken;\n            return [2\n            /*return*/\n            , {\n              identityId: parameters.identityId,\n              accessKeyId: AccessKeyId,\n              secretAccessKey: SecretKey,\n              sessionToken: SessionToken,\n              expiration: Expiration\n            }];\n        }\n      });\n    });\n  };\n}\n\nfunction throwOnMissingAccessKeyId() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no access key ID\");\n}\n\nfunction throwOnMissingCredentials() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no credentials\");\n}\n\nfunction throwOnMissingSecretKey() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no secret key\");\n}","map":{"version":3,"mappings":";AAAA,SAASA,gCAAT,QAAiD,kCAAjD;AACA,SAASC,aAAT,QAA8B,4BAA9B;AAIA,SAASC,aAAT,QAA8B,iBAA9B;AASA;;;;;;;AAMA,OAAM,SAAUC,mBAAV,CAA8BC,UAA9B,EAAuE;EAA7E;;EACE,OAAO;IAAA;;;;;;;;YAQKC,qBAAU,CAACC,MAAX,EAAkBC,IAAlB;iBACJP,gCAAgC;;cAClCQ,aAAa,EAAEJ,UAAU,CAACK;cAC1BC,UAAU,EAAEN,UAAU,CAACO;;iBACfP,UAAU,CAACQ,QAAX;YAAA;YAAA;YAAoB;YAAA;YAAA,EAAMV,aAAa,CAACE,UAAU,CAACQ,MAAZ,CAAnB;;;YAAAC;;;;;;YAAyCA;;;;YAJrE;YAAA;YAAA,EAAMR,cACR,cAAIL,gCAAJ,EAAoC,UAGlCc,YAAMD,EAAN,IAHkC,EAApC,IADQ,EAAN;;;YANFE,KAMEC,UAMHC,WAZC,uBAKIC,yBAAyB,EAL7B,GAK+BH,EAL/B,EACEI,mBADF,EACEC,WAAW,mBAAGC,yBAAyB,EAA5B,GAA8BF,EAD3C,EAEEG,UAAU,gBAFZ,EAGEC,iBAHF,EAGEC,SAAS,mBAAGC,uBAAuB,EAA1B,GAA4BF,EAHvC,EAIEG,YAAY,kBAJd;YAcF;YAAA;YAAA,EAAO;cACLf,UAAU,EAAEP,UAAU,CAACO,UADlB;cAELgB,WAAW,EAAEP,WAFR;cAGLQ,eAAe,EAAEJ,SAHZ;cAILK,YAAY,EAAEH,YAJT;cAKLI,UAAU,EAAER;YALP,CAAP;;;KAhBK;EAuBN,CAvBD;AAwBD;;AAUD,SAASD,yBAAT,GAAkC;EAChC,MAAM,IAAIpB,aAAJ,CAAkB,yDAAlB,CAAN;AACD;;AAED,SAASiB,yBAAT,GAAkC;EAChC,MAAM,IAAIjB,aAAJ,CAAkB,uDAAlB,CAAN;AACD;;AAED,SAASwB,uBAAT,GAAgC;EAC9B,MAAM,IAAIxB,aAAJ,CAAkB,sDAAlB,CAAN;AACD","names":["GetCredentialsForIdentityCommand","ProviderError","resolveLogins","fromCognitoIdentity","parameters","_f","client","send","CustomRoleArn","customRoleArn","IdentityId","identityId","logins","_h","_j","_a","_k","Credentials","throwOnMissingCredentials","_c","AccessKeyId","throwOnMissingAccessKeyId","Expiration","_d","SecretKey","throwOnMissingSecretKey","SessionToken","accessKeyId","secretAccessKey","sessionToken","expiration"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\credential-provider-cognito-identity\\src\\fromCognitoIdentity.ts"],"sourcesContent":["import { GetCredentialsForIdentityCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { CredentialProvider, Credentials } from \"@aws-sdk/types\";\n\nimport { CognitoProviderParameters } from \"./CognitoProviderParameters\";\nimport { resolveLogins } from \"./resolveLogins\";\n\nexport interface CognitoIdentityCredentials extends Credentials {\n  /**\n   * The Cognito ID returned by the last call to AWS.CognitoIdentity.getOpenIdToken().\n   */\n  identityId: string;\n}\n\n/**\n * Retrieves temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from this function call are not cached internally.\n */\nexport function fromCognitoIdentity(parameters: FromCognitoIdentityParameters): CredentialProvider {\n  return async (): Promise<CognitoIdentityCredentials> => {\n    const {\n      Credentials: {\n        AccessKeyId = throwOnMissingAccessKeyId(),\n        Expiration,\n        SecretKey = throwOnMissingSecretKey(),\n        SessionToken,\n      } = throwOnMissingCredentials(),\n    } = await parameters.client.send(\n      new GetCredentialsForIdentityCommand({\n        CustomRoleArn: parameters.customRoleArn,\n        IdentityId: parameters.identityId,\n        Logins: parameters.logins ? await resolveLogins(parameters.logins) : undefined,\n      })\n    );\n\n    return {\n      identityId: parameters.identityId,\n      accessKeyId: AccessKeyId,\n      secretAccessKey: SecretKey,\n      sessionToken: SessionToken,\n      expiration: Expiration,\n    };\n  };\n}\n\nexport interface FromCognitoIdentityParameters extends CognitoProviderParameters {\n  /**\n   * The unique identifier for the identity against which credentials will be\n   * issued.\n   */\n  identityId: string;\n}\n\nfunction throwOnMissingAccessKeyId(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no access key ID\");\n}\n\nfunction throwOnMissingCredentials(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no credentials\");\n}\n\nfunction throwOnMissingSecretKey(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no secret key\");\n}\n"]},"metadata":{},"sourceType":"module"}