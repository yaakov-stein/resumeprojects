{"ast":null,"code":"var STORE_NAME = \"IdentityIds\";\n\nvar IndexedDbStorage =\n/** @class */\nfunction () {\n  function IndexedDbStorage(dbName) {\n    if (dbName === void 0) {\n      dbName = \"aws:cognito-identity-ids\";\n    }\n\n    this.dbName = dbName;\n  }\n\n  IndexedDbStorage.prototype.getItem = function (key) {\n    return this.withObjectStore(\"readonly\", function (store) {\n      var req = store.get(key);\n      return new Promise(function (resolve) {\n        req.onerror = function () {\n          return resolve(null);\n        };\n\n        req.onsuccess = function () {\n          return resolve(req.result ? req.result.value : null);\n        };\n      });\n    }).catch(function () {\n      return null;\n    });\n  };\n\n  IndexedDbStorage.prototype.removeItem = function (key) {\n    return this.withObjectStore(\"readwrite\", function (store) {\n      var req = store.delete(key);\n      return new Promise(function (resolve, reject) {\n        req.onerror = function () {\n          return reject(req.error);\n        };\n\n        req.onsuccess = function () {\n          return resolve();\n        };\n      });\n    });\n  };\n\n  IndexedDbStorage.prototype.setItem = function (id, value) {\n    return this.withObjectStore(\"readwrite\", function (store) {\n      var req = store.put({\n        id: id,\n        value: value\n      });\n      return new Promise(function (resolve, reject) {\n        req.onerror = function () {\n          return reject(req.error);\n        };\n\n        req.onsuccess = function () {\n          return resolve();\n        };\n      });\n    });\n  };\n\n  IndexedDbStorage.prototype.getDb = function () {\n    var openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise(function (resolve, reject) {\n      openDbRequest.onsuccess = function () {\n        resolve(openDbRequest.result);\n      };\n\n      openDbRequest.onerror = function () {\n        reject(openDbRequest.error);\n      };\n\n      openDbRequest.onblocked = function () {\n        reject(new Error(\"Unable to access DB\"));\n      };\n\n      openDbRequest.onupgradeneeded = function () {\n        var db = openDbRequest.result;\n\n        db.onerror = function () {\n          reject(new Error(\"Failed to create object store\"));\n        };\n\n        db.createObjectStore(STORE_NAME, {\n          keyPath: \"id\"\n        });\n      };\n    });\n  };\n\n  IndexedDbStorage.prototype.withObjectStore = function (mode, action) {\n    return this.getDb().then(function (db) {\n      var tx = db.transaction(STORE_NAME, mode);\n\n      tx.oncomplete = function () {\n        return db.close();\n      };\n\n      return new Promise(function (resolve, reject) {\n        tx.onerror = function () {\n          return reject(tx.error);\n        };\n\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch(function (err) {\n        db.close();\n        throw err;\n      });\n    });\n  };\n\n  return IndexedDbStorage;\n}();\n\nexport { IndexedDbStorage };","map":{"version":3,"mappings":"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","names":["STORE_NAME","dbName","IndexedDbStorage","key","withObjectStore","store","req","get","Promise","resolve","onerror","onsuccess","result","value","catch","delete","reject","error","id","put","openDbRequest","self","indexedDB","open","onblocked","Error","onupgradeneeded","db","createObjectStore","keyPath","mode","action","getDb","then","tx","transaction","oncomplete","close","objectStore","err"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\credential-provider-cognito-identity\\src\\IndexedDbStorage.ts"],"sourcesContent":["import { Storage } from \"./Storage\";\n\nconst STORE_NAME = \"IdentityIds\";\n\nexport class IndexedDbStorage implements Storage {\n  constructor(private readonly dbName: string = \"aws:cognito-identity-ids\") {}\n\n  getItem(key: string): Promise<string | null> {\n    return this.withObjectStore(\"readonly\", (store) => {\n      const req = store.get(key);\n\n      return new Promise<string | null>((resolve) => {\n        req.onerror = () => resolve(null);\n\n        req.onsuccess = () => resolve(req.result ? req.result.value : null);\n      });\n    }).catch(() => null);\n  }\n\n  removeItem(key: string): Promise<void> {\n    return this.withObjectStore(\"readwrite\", (store) => {\n      const req = store.delete(key);\n\n      return new Promise<void>((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n\n  setItem(id: string, value: string): Promise<void> {\n    return this.withObjectStore(\"readwrite\", (store) => {\n      const req = store.put({ id, value });\n\n      return new Promise<void>((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n\n  private getDb(): Promise<IDBDatabase> {\n    const openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise((resolve, reject) => {\n      openDbRequest.onsuccess = () => {\n        resolve(openDbRequest.result);\n      };\n\n      openDbRequest.onerror = () => {\n        reject(openDbRequest.error);\n      };\n\n      openDbRequest.onblocked = () => {\n        reject(new Error(\"Unable to access DB\"));\n      };\n\n      openDbRequest.onupgradeneeded = () => {\n        const db = openDbRequest.result;\n        db.onerror = () => {\n          reject(new Error(\"Failed to create object store\"));\n        };\n\n        db.createObjectStore(STORE_NAME, { keyPath: \"id\" });\n      };\n    });\n  }\n\n  private withObjectStore<R>(mode: IDBTransactionMode, action: (store: IDBObjectStore) => Promise<R>): Promise<R> {\n    return this.getDb().then((db) => {\n      const tx = db.transaction(STORE_NAME, mode);\n      tx.oncomplete = () => db.close();\n\n      return new Promise<R>((resolve, reject) => {\n        tx.onerror = () => reject(tx.error);\n\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch((err) => {\n        db.close();\n        throw err;\n      });\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}