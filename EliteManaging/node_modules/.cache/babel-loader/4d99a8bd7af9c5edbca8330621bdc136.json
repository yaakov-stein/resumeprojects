{"ast":null,"code":"import { __assign } from \"tslib\";\nexport var AddTagsToStreamInput;\n\n(function (AddTagsToStreamInput) {\n  AddTagsToStreamInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(AddTagsToStreamInput || (AddTagsToStreamInput = {}));\n\nexport var InvalidArgumentException;\n\n(function (InvalidArgumentException) {\n  InvalidArgumentException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidArgumentException || (InvalidArgumentException = {}));\n\nexport var LimitExceededException;\n\n(function (LimitExceededException) {\n  LimitExceededException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(LimitExceededException || (LimitExceededException = {}));\n\nexport var ResourceInUseException;\n\n(function (ResourceInUseException) {\n  ResourceInUseException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ResourceInUseException || (ResourceInUseException = {}));\n\nexport var ResourceNotFoundException;\n\n(function (ResourceNotFoundException) {\n  ResourceNotFoundException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ResourceNotFoundException || (ResourceNotFoundException = {}));\n\nexport var HashKeyRange;\n\n(function (HashKeyRange) {\n  HashKeyRange.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(HashKeyRange || (HashKeyRange = {}));\n\nexport var ChildShard;\n\n(function (ChildShard) {\n  ChildShard.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ChildShard || (ChildShard = {}));\n\nexport var ConsumerStatus;\n\n(function (ConsumerStatus) {\n  ConsumerStatus[\"ACTIVE\"] = \"ACTIVE\";\n  ConsumerStatus[\"CREATING\"] = \"CREATING\";\n  ConsumerStatus[\"DELETING\"] = \"DELETING\";\n})(ConsumerStatus || (ConsumerStatus = {}));\n\nexport var Consumer;\n\n(function (Consumer) {\n  Consumer.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Consumer || (Consumer = {}));\n\nexport var ConsumerDescription;\n\n(function (ConsumerDescription) {\n  ConsumerDescription.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ConsumerDescription || (ConsumerDescription = {}));\n\nexport var CreateStreamInput;\n\n(function (CreateStreamInput) {\n  CreateStreamInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(CreateStreamInput || (CreateStreamInput = {}));\n\nexport var DecreaseStreamRetentionPeriodInput;\n\n(function (DecreaseStreamRetentionPeriodInput) {\n  DecreaseStreamRetentionPeriodInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DecreaseStreamRetentionPeriodInput || (DecreaseStreamRetentionPeriodInput = {}));\n\nexport var DeleteStreamInput;\n\n(function (DeleteStreamInput) {\n  DeleteStreamInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeleteStreamInput || (DeleteStreamInput = {}));\n\nexport var DeregisterStreamConsumerInput;\n\n(function (DeregisterStreamConsumerInput) {\n  DeregisterStreamConsumerInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DeregisterStreamConsumerInput || (DeregisterStreamConsumerInput = {}));\n\nexport var DescribeLimitsInput;\n\n(function (DescribeLimitsInput) {\n  DescribeLimitsInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeLimitsInput || (DescribeLimitsInput = {}));\n\nexport var DescribeLimitsOutput;\n\n(function (DescribeLimitsOutput) {\n  DescribeLimitsOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeLimitsOutput || (DescribeLimitsOutput = {}));\n\nexport var DescribeStreamInput;\n\n(function (DescribeStreamInput) {\n  DescribeStreamInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeStreamInput || (DescribeStreamInput = {}));\n\nexport var EncryptionType;\n\n(function (EncryptionType) {\n  EncryptionType[\"KMS\"] = \"KMS\";\n  EncryptionType[\"NONE\"] = \"NONE\";\n})(EncryptionType || (EncryptionType = {}));\n\nexport var MetricsName;\n\n(function (MetricsName) {\n  MetricsName[\"ALL\"] = \"ALL\";\n  MetricsName[\"INCOMING_BYTES\"] = \"IncomingBytes\";\n  MetricsName[\"INCOMING_RECORDS\"] = \"IncomingRecords\";\n  MetricsName[\"ITERATOR_AGE_MILLISECONDS\"] = \"IteratorAgeMilliseconds\";\n  MetricsName[\"OUTGOING_BYTES\"] = \"OutgoingBytes\";\n  MetricsName[\"OUTGOING_RECORDS\"] = \"OutgoingRecords\";\n  MetricsName[\"READ_PROVISIONED_THROUGHPUT_EXCEEDED\"] = \"ReadProvisionedThroughputExceeded\";\n  MetricsName[\"WRITE_PROVISIONED_THROUGHPUT_EXCEEDED\"] = \"WriteProvisionedThroughputExceeded\";\n})(MetricsName || (MetricsName = {}));\n\nexport var EnhancedMetrics;\n\n(function (EnhancedMetrics) {\n  EnhancedMetrics.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EnhancedMetrics || (EnhancedMetrics = {}));\n\nexport var SequenceNumberRange;\n\n(function (SequenceNumberRange) {\n  SequenceNumberRange.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(SequenceNumberRange || (SequenceNumberRange = {}));\n\nexport var Shard;\n\n(function (Shard) {\n  Shard.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Shard || (Shard = {}));\n\nexport var StreamStatus;\n\n(function (StreamStatus) {\n  StreamStatus[\"ACTIVE\"] = \"ACTIVE\";\n  StreamStatus[\"CREATING\"] = \"CREATING\";\n  StreamStatus[\"DELETING\"] = \"DELETING\";\n  StreamStatus[\"UPDATING\"] = \"UPDATING\";\n})(StreamStatus || (StreamStatus = {}));\n\nexport var StreamDescription;\n\n(function (StreamDescription) {\n  StreamDescription.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StreamDescription || (StreamDescription = {}));\n\nexport var DescribeStreamOutput;\n\n(function (DescribeStreamOutput) {\n  DescribeStreamOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeStreamOutput || (DescribeStreamOutput = {}));\n\nexport var DescribeStreamConsumerInput;\n\n(function (DescribeStreamConsumerInput) {\n  DescribeStreamConsumerInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeStreamConsumerInput || (DescribeStreamConsumerInput = {}));\n\nexport var DescribeStreamConsumerOutput;\n\n(function (DescribeStreamConsumerOutput) {\n  DescribeStreamConsumerOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeStreamConsumerOutput || (DescribeStreamConsumerOutput = {}));\n\nexport var DescribeStreamSummaryInput;\n\n(function (DescribeStreamSummaryInput) {\n  DescribeStreamSummaryInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeStreamSummaryInput || (DescribeStreamSummaryInput = {}));\n\nexport var StreamDescriptionSummary;\n\n(function (StreamDescriptionSummary) {\n  StreamDescriptionSummary.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StreamDescriptionSummary || (StreamDescriptionSummary = {}));\n\nexport var DescribeStreamSummaryOutput;\n\n(function (DescribeStreamSummaryOutput) {\n  DescribeStreamSummaryOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DescribeStreamSummaryOutput || (DescribeStreamSummaryOutput = {}));\n\nexport var DisableEnhancedMonitoringInput;\n\n(function (DisableEnhancedMonitoringInput) {\n  DisableEnhancedMonitoringInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(DisableEnhancedMonitoringInput || (DisableEnhancedMonitoringInput = {}));\n\nexport var EnhancedMonitoringOutput;\n\n(function (EnhancedMonitoringOutput) {\n  EnhancedMonitoringOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EnhancedMonitoringOutput || (EnhancedMonitoringOutput = {}));\n\nexport var EnableEnhancedMonitoringInput;\n\n(function (EnableEnhancedMonitoringInput) {\n  EnableEnhancedMonitoringInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(EnableEnhancedMonitoringInput || (EnableEnhancedMonitoringInput = {}));\n\nexport var ExpiredIteratorException;\n\n(function (ExpiredIteratorException) {\n  ExpiredIteratorException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ExpiredIteratorException || (ExpiredIteratorException = {}));\n\nexport var ExpiredNextTokenException;\n\n(function (ExpiredNextTokenException) {\n  ExpiredNextTokenException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ExpiredNextTokenException || (ExpiredNextTokenException = {}));\n\nexport var GetRecordsInput;\n\n(function (GetRecordsInput) {\n  GetRecordsInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetRecordsInput || (GetRecordsInput = {}));\n\nexport var _Record;\n\n(function (_Record) {\n  _Record.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(_Record || (_Record = {}));\n\nexport var GetRecordsOutput;\n\n(function (GetRecordsOutput) {\n  GetRecordsOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetRecordsOutput || (GetRecordsOutput = {}));\n\nexport var KMSAccessDeniedException;\n\n(function (KMSAccessDeniedException) {\n  KMSAccessDeniedException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(KMSAccessDeniedException || (KMSAccessDeniedException = {}));\n\nexport var KMSDisabledException;\n\n(function (KMSDisabledException) {\n  KMSDisabledException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(KMSDisabledException || (KMSDisabledException = {}));\n\nexport var KMSInvalidStateException;\n\n(function (KMSInvalidStateException) {\n  KMSInvalidStateException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(KMSInvalidStateException || (KMSInvalidStateException = {}));\n\nexport var KMSNotFoundException;\n\n(function (KMSNotFoundException) {\n  KMSNotFoundException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(KMSNotFoundException || (KMSNotFoundException = {}));\n\nexport var KMSOptInRequired;\n\n(function (KMSOptInRequired) {\n  KMSOptInRequired.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(KMSOptInRequired || (KMSOptInRequired = {}));\n\nexport var KMSThrottlingException;\n\n(function (KMSThrottlingException) {\n  KMSThrottlingException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(KMSThrottlingException || (KMSThrottlingException = {}));\n\nexport var ProvisionedThroughputExceededException;\n\n(function (ProvisionedThroughputExceededException) {\n  ProvisionedThroughputExceededException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ProvisionedThroughputExceededException || (ProvisionedThroughputExceededException = {}));\n\nexport var ShardIteratorType;\n\n(function (ShardIteratorType) {\n  ShardIteratorType[\"AFTER_SEQUENCE_NUMBER\"] = \"AFTER_SEQUENCE_NUMBER\";\n  ShardIteratorType[\"AT_SEQUENCE_NUMBER\"] = \"AT_SEQUENCE_NUMBER\";\n  ShardIteratorType[\"AT_TIMESTAMP\"] = \"AT_TIMESTAMP\";\n  ShardIteratorType[\"LATEST\"] = \"LATEST\";\n  ShardIteratorType[\"TRIM_HORIZON\"] = \"TRIM_HORIZON\";\n})(ShardIteratorType || (ShardIteratorType = {}));\n\nexport var GetShardIteratorInput;\n\n(function (GetShardIteratorInput) {\n  GetShardIteratorInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetShardIteratorInput || (GetShardIteratorInput = {}));\n\nexport var GetShardIteratorOutput;\n\n(function (GetShardIteratorOutput) {\n  GetShardIteratorOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(GetShardIteratorOutput || (GetShardIteratorOutput = {}));\n\nexport var IncreaseStreamRetentionPeriodInput;\n\n(function (IncreaseStreamRetentionPeriodInput) {\n  IncreaseStreamRetentionPeriodInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(IncreaseStreamRetentionPeriodInput || (IncreaseStreamRetentionPeriodInput = {}));\n\nexport var InternalFailureException;\n\n(function (InternalFailureException) {\n  InternalFailureException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InternalFailureException || (InternalFailureException = {}));\n\nexport var ShardFilterType;\n\n(function (ShardFilterType) {\n  ShardFilterType[\"AFTER_SHARD_ID\"] = \"AFTER_SHARD_ID\";\n  ShardFilterType[\"AT_LATEST\"] = \"AT_LATEST\";\n  ShardFilterType[\"AT_TIMESTAMP\"] = \"AT_TIMESTAMP\";\n  ShardFilterType[\"AT_TRIM_HORIZON\"] = \"AT_TRIM_HORIZON\";\n  ShardFilterType[\"FROM_TIMESTAMP\"] = \"FROM_TIMESTAMP\";\n  ShardFilterType[\"FROM_TRIM_HORIZON\"] = \"FROM_TRIM_HORIZON\";\n})(ShardFilterType || (ShardFilterType = {}));\n\nexport var ShardFilter;\n\n(function (ShardFilter) {\n  ShardFilter.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ShardFilter || (ShardFilter = {}));\n\nexport var ListShardsInput;\n\n(function (ListShardsInput) {\n  ListShardsInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListShardsInput || (ListShardsInput = {}));\n\nexport var ListShardsOutput;\n\n(function (ListShardsOutput) {\n  ListShardsOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListShardsOutput || (ListShardsOutput = {}));\n\nexport var ListStreamConsumersInput;\n\n(function (ListStreamConsumersInput) {\n  ListStreamConsumersInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListStreamConsumersInput || (ListStreamConsumersInput = {}));\n\nexport var ListStreamConsumersOutput;\n\n(function (ListStreamConsumersOutput) {\n  ListStreamConsumersOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListStreamConsumersOutput || (ListStreamConsumersOutput = {}));\n\nexport var ListStreamsInput;\n\n(function (ListStreamsInput) {\n  ListStreamsInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListStreamsInput || (ListStreamsInput = {}));\n\nexport var ListStreamsOutput;\n\n(function (ListStreamsOutput) {\n  ListStreamsOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListStreamsOutput || (ListStreamsOutput = {}));\n\nexport var ListTagsForStreamInput;\n\n(function (ListTagsForStreamInput) {\n  ListTagsForStreamInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListTagsForStreamInput || (ListTagsForStreamInput = {}));\n\nexport var Tag;\n\n(function (Tag) {\n  Tag.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Tag || (Tag = {}));\n\nexport var ListTagsForStreamOutput;\n\n(function (ListTagsForStreamOutput) {\n  ListTagsForStreamOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ListTagsForStreamOutput || (ListTagsForStreamOutput = {}));\n\nexport var MergeShardsInput;\n\n(function (MergeShardsInput) {\n  MergeShardsInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(MergeShardsInput || (MergeShardsInput = {}));\n\nexport var PutRecordInput;\n\n(function (PutRecordInput) {\n  PutRecordInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PutRecordInput || (PutRecordInput = {}));\n\nexport var PutRecordOutput;\n\n(function (PutRecordOutput) {\n  PutRecordOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PutRecordOutput || (PutRecordOutput = {}));\n\nexport var PutRecordsRequestEntry;\n\n(function (PutRecordsRequestEntry) {\n  PutRecordsRequestEntry.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PutRecordsRequestEntry || (PutRecordsRequestEntry = {}));\n\nexport var PutRecordsInput;\n\n(function (PutRecordsInput) {\n  PutRecordsInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PutRecordsInput || (PutRecordsInput = {}));\n\nexport var PutRecordsResultEntry;\n\n(function (PutRecordsResultEntry) {\n  PutRecordsResultEntry.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PutRecordsResultEntry || (PutRecordsResultEntry = {}));\n\nexport var PutRecordsOutput;\n\n(function (PutRecordsOutput) {\n  PutRecordsOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PutRecordsOutput || (PutRecordsOutput = {}));\n\nexport var RegisterStreamConsumerInput;\n\n(function (RegisterStreamConsumerInput) {\n  RegisterStreamConsumerInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(RegisterStreamConsumerInput || (RegisterStreamConsumerInput = {}));\n\nexport var RegisterStreamConsumerOutput;\n\n(function (RegisterStreamConsumerOutput) {\n  RegisterStreamConsumerOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(RegisterStreamConsumerOutput || (RegisterStreamConsumerOutput = {}));\n\nexport var RemoveTagsFromStreamInput;\n\n(function (RemoveTagsFromStreamInput) {\n  RemoveTagsFromStreamInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(RemoveTagsFromStreamInput || (RemoveTagsFromStreamInput = {}));\n\nexport var SplitShardInput;\n\n(function (SplitShardInput) {\n  SplitShardInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(SplitShardInput || (SplitShardInput = {}));\n\nexport var StartStreamEncryptionInput;\n\n(function (StartStreamEncryptionInput) {\n  StartStreamEncryptionInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartStreamEncryptionInput || (StartStreamEncryptionInput = {}));\n\nexport var StopStreamEncryptionInput;\n\n(function (StopStreamEncryptionInput) {\n  StopStreamEncryptionInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StopStreamEncryptionInput || (StopStreamEncryptionInput = {}));\n\nexport var StartingPosition;\n\n(function (StartingPosition) {\n  StartingPosition.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(StartingPosition || (StartingPosition = {}));\n\nexport var SubscribeToShardInput;\n\n(function (SubscribeToShardInput) {\n  SubscribeToShardInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(SubscribeToShardInput || (SubscribeToShardInput = {}));\n\nexport var SubscribeToShardEvent;\n\n(function (SubscribeToShardEvent) {\n  SubscribeToShardEvent.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(SubscribeToShardEvent || (SubscribeToShardEvent = {}));\n\nexport var SubscribeToShardEventStream;\n\n(function (SubscribeToShardEventStream) {\n  SubscribeToShardEventStream.visit = function (value, visitor) {\n    if (value.SubscribeToShardEvent !== undefined) return visitor.SubscribeToShardEvent(value.SubscribeToShardEvent);\n    if (value.ResourceNotFoundException !== undefined) return visitor.ResourceNotFoundException(value.ResourceNotFoundException);\n    if (value.ResourceInUseException !== undefined) return visitor.ResourceInUseException(value.ResourceInUseException);\n    if (value.KMSDisabledException !== undefined) return visitor.KMSDisabledException(value.KMSDisabledException);\n    if (value.KMSInvalidStateException !== undefined) return visitor.KMSInvalidStateException(value.KMSInvalidStateException);\n    if (value.KMSAccessDeniedException !== undefined) return visitor.KMSAccessDeniedException(value.KMSAccessDeniedException);\n    if (value.KMSNotFoundException !== undefined) return visitor.KMSNotFoundException(value.KMSNotFoundException);\n    if (value.KMSOptInRequired !== undefined) return visitor.KMSOptInRequired(value.KMSOptInRequired);\n    if (value.KMSThrottlingException !== undefined) return visitor.KMSThrottlingException(value.KMSThrottlingException);\n    if (value.InternalFailureException !== undefined) return visitor.InternalFailureException(value.InternalFailureException);\n    return visitor._(value.$unknown[0], value.$unknown[1]);\n  };\n\n  SubscribeToShardEventStream.filterSensitiveLog = function (obj) {\n    var _a;\n\n    if (obj.SubscribeToShardEvent !== undefined) return {\n      SubscribeToShardEvent: SubscribeToShardEvent.filterSensitiveLog(obj.SubscribeToShardEvent)\n    };\n    if (obj.ResourceNotFoundException !== undefined) return {\n      ResourceNotFoundException: ResourceNotFoundException.filterSensitiveLog(obj.ResourceNotFoundException)\n    };\n    if (obj.ResourceInUseException !== undefined) return {\n      ResourceInUseException: ResourceInUseException.filterSensitiveLog(obj.ResourceInUseException)\n    };\n    if (obj.KMSDisabledException !== undefined) return {\n      KMSDisabledException: KMSDisabledException.filterSensitiveLog(obj.KMSDisabledException)\n    };\n    if (obj.KMSInvalidStateException !== undefined) return {\n      KMSInvalidStateException: KMSInvalidStateException.filterSensitiveLog(obj.KMSInvalidStateException)\n    };\n    if (obj.KMSAccessDeniedException !== undefined) return {\n      KMSAccessDeniedException: KMSAccessDeniedException.filterSensitiveLog(obj.KMSAccessDeniedException)\n    };\n    if (obj.KMSNotFoundException !== undefined) return {\n      KMSNotFoundException: KMSNotFoundException.filterSensitiveLog(obj.KMSNotFoundException)\n    };\n    if (obj.KMSOptInRequired !== undefined) return {\n      KMSOptInRequired: KMSOptInRequired.filterSensitiveLog(obj.KMSOptInRequired)\n    };\n    if (obj.KMSThrottlingException !== undefined) return {\n      KMSThrottlingException: KMSThrottlingException.filterSensitiveLog(obj.KMSThrottlingException)\n    };\n    if (obj.InternalFailureException !== undefined) return {\n      InternalFailureException: InternalFailureException.filterSensitiveLog(obj.InternalFailureException)\n    };\n    if (obj.$unknown !== undefined) return _a = {}, _a[obj.$unknown[0]] = \"UNKNOWN\", _a;\n  };\n})(SubscribeToShardEventStream || (SubscribeToShardEventStream = {}));\n\nexport var SubscribeToShardOutput;\n\n(function (SubscribeToShardOutput) {\n  SubscribeToShardOutput.filterSensitiveLog = function (obj) {\n    return __assign(__assign({}, obj), obj.EventStream && {\n      EventStream: \"STREAMING_CONTENT\"\n    });\n  };\n})(SubscribeToShardOutput || (SubscribeToShardOutput = {}));\n\nexport var ScalingType;\n\n(function (ScalingType) {\n  ScalingType[\"UNIFORM_SCALING\"] = \"UNIFORM_SCALING\";\n})(ScalingType || (ScalingType = {}));\n\nexport var UpdateShardCountInput;\n\n(function (UpdateShardCountInput) {\n  UpdateShardCountInput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(UpdateShardCountInput || (UpdateShardCountInput = {}));\n\nexport var UpdateShardCountOutput;\n\n(function (UpdateShardCountOutput) {\n  UpdateShardCountOutput.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(UpdateShardCountOutput || (UpdateShardCountOutput = {}));","map":{"version":3,"mappings":"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","names":["AddTagsToStreamInput","obj","InvalidArgumentException","LimitExceededException","ResourceInUseException","ResourceNotFoundException","HashKeyRange","ChildShard","ConsumerStatus","Consumer","ConsumerDescription","CreateStreamInput","DecreaseStreamRetentionPeriodInput","DeleteStreamInput","DeregisterStreamConsumerInput","DescribeLimitsInput","DescribeLimitsOutput","DescribeStreamInput","EncryptionType","MetricsName","EnhancedMetrics","SequenceNumberRange","Shard","StreamStatus","StreamDescription","DescribeStreamOutput","DescribeStreamConsumerInput","DescribeStreamConsumerOutput","DescribeStreamSummaryInput","StreamDescriptionSummary","DescribeStreamSummaryOutput","DisableEnhancedMonitoringInput","EnhancedMonitoringOutput","EnableEnhancedMonitoringInput","ExpiredIteratorException","ExpiredNextTokenException","GetRecordsInput","_Record","GetRecordsOutput","KMSAccessDeniedException","KMSDisabledException","KMSInvalidStateException","KMSNotFoundException","KMSOptInRequired","KMSThrottlingException","ProvisionedThroughputExceededException","ShardIteratorType","GetShardIteratorInput","GetShardIteratorOutput","IncreaseStreamRetentionPeriodInput","InternalFailureException","ShardFilterType","ShardFilter","ListShardsInput","ListShardsOutput","ListStreamConsumersInput","ListStreamConsumersOutput","ListStreamsInput","ListStreamsOutput","ListTagsForStreamInput","Tag","ListTagsForStreamOutput","MergeShardsInput","PutRecordInput","PutRecordOutput","PutRecordsRequestEntry","PutRecordsInput","PutRecordsResultEntry","PutRecordsOutput","RegisterStreamConsumerInput","RegisterStreamConsumerOutput","RemoveTagsFromStreamInput","SplitShardInput","StartStreamEncryptionInput","StopStreamEncryptionInput","StartingPosition","SubscribeToShardInput","SubscribeToShardEvent","SubscribeToShardEventStream","value","visitor","undefined","_","$unknown","filterSensitiveLog","_a","SubscribeToShardOutput","EventStream","ScalingType","UpdateShardCountInput","UpdateShardCountOutput"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\client-kinesis\\models\\models_0.ts"],"sourcesContent":["import { SmithyException as __SmithyException } from \"@aws-sdk/smithy-client\";\nimport { MetadataBearer as $MetadataBearer } from \"@aws-sdk/types\";\n\n/**\n * <p>Represents the input for <code>AddTagsToStream</code>.</p>\n */\nexport interface AddTagsToStreamInput {\n  /**\n   * <p>The name of the stream.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>A set of up to 10 key-value pairs to use to create the tags.</p>\n   */\n  Tags: { [key: string]: string } | undefined;\n}\n\nexport namespace AddTagsToStreamInput {\n  export const filterSensitiveLog = (obj: AddTagsToStreamInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A specified parameter exceeds its restrictions, is not supported, or can't be used.\n *             For more information, see the returned message.</p>\n */\nexport interface InvalidArgumentException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidArgumentException\";\n  $fault: \"client\";\n  /**\n   * <p>A message that provides information about the error.</p>\n   */\n  message?: string;\n}\n\nexport namespace InvalidArgumentException {\n  export const filterSensitiveLog = (obj: InvalidArgumentException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The requested resource exceeds the maximum number allowed, or the number of\n *             concurrent stream requests exceeds the maximum number allowed. </p>\n */\nexport interface LimitExceededException extends __SmithyException, $MetadataBearer {\n  name: \"LimitExceededException\";\n  $fault: \"client\";\n  /**\n   * <p>A message that provides information about the error.</p>\n   */\n  message?: string;\n}\n\nexport namespace LimitExceededException {\n  export const filterSensitiveLog = (obj: LimitExceededException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The resource is not available for this operation. For successful operation, the\n *             resource must be in the <code>ACTIVE</code> state.</p>\n */\nexport interface ResourceInUseException extends __SmithyException, $MetadataBearer {\n  name: \"ResourceInUseException\";\n  $fault: \"client\";\n  /**\n   * <p>A message that provides information about the error.</p>\n   */\n  message?: string;\n}\n\nexport namespace ResourceInUseException {\n  export const filterSensitiveLog = (obj: ResourceInUseException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The requested resource could not be found. The stream might not be specified\n *             correctly.</p>\n */\nexport interface ResourceNotFoundException extends __SmithyException, $MetadataBearer {\n  name: \"ResourceNotFoundException\";\n  $fault: \"client\";\n  /**\n   * <p>A message that provides information about the error.</p>\n   */\n  message?: string;\n}\n\nexport namespace ResourceNotFoundException {\n  export const filterSensitiveLog = (obj: ResourceNotFoundException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The range of possible hash key values for the shard, which is a set of ordered\n *             contiguous positive integers.</p>\n */\nexport interface HashKeyRange {\n  /**\n   * <p>The starting hash key of the hash key range.</p>\n   */\n  StartingHashKey: string | undefined;\n\n  /**\n   * <p>The ending hash key of the hash key range.</p>\n   */\n  EndingHashKey: string | undefined;\n}\n\nexport namespace HashKeyRange {\n  export const filterSensitiveLog = (obj: HashKeyRange): any => ({\n    ...obj,\n  });\n}\n\nexport interface ChildShard {\n  ShardId: string | undefined;\n  ParentShards: string[] | undefined;\n  /**\n   * <p>The range of possible hash key values for the shard, which is a set of ordered\n   *             contiguous positive integers.</p>\n   */\n  HashKeyRange: HashKeyRange | undefined;\n}\n\nexport namespace ChildShard {\n  export const filterSensitiveLog = (obj: ChildShard): any => ({\n    ...obj,\n  });\n}\n\nexport enum ConsumerStatus {\n  ACTIVE = \"ACTIVE\",\n  CREATING = \"CREATING\",\n  DELETING = \"DELETING\",\n}\n\n/**\n * <p>An object that represents the details of the consumer you registered. This type of\n *             object is returned by <a>RegisterStreamConsumer</a>.</p>\n */\nexport interface Consumer {\n  /**\n   * <p>The name of the consumer is something you choose when you register the\n   *             consumer.</p>\n   */\n  ConsumerName: string | undefined;\n\n  /**\n   * <p>When you register a consumer, Kinesis Data Streams generates an ARN for it. You need\n   *             this ARN to be able to call <a>SubscribeToShard</a>.</p>\n   *         <p>If you delete a consumer and then create a new one with the same name, it won't have\n   *             the same ARN. That's because consumer ARNs contain the creation timestamp. This is\n   *             important to keep in mind if you have IAM policies that reference consumer ARNs.</p>\n   */\n  ConsumerARN: string | undefined;\n\n  /**\n   * <p>A consumer can't read data while in the <code>CREATING</code> or <code>DELETING</code>\n   *             states.</p>\n   */\n  ConsumerStatus: ConsumerStatus | string | undefined;\n\n  /**\n   * <p></p>\n   */\n  ConsumerCreationTimestamp: Date | undefined;\n}\n\nexport namespace Consumer {\n  export const filterSensitiveLog = (obj: Consumer): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>An object that represents the details of a registered consumer. This type of object is\n *             returned by <a>DescribeStreamConsumer</a>.</p>\n */\nexport interface ConsumerDescription {\n  /**\n   * <p>The name of the consumer is something you choose when you register the\n   *             consumer.</p>\n   */\n  ConsumerName: string | undefined;\n\n  /**\n   * <p>When you register a consumer, Kinesis Data Streams generates an ARN for it. You need\n   *             this ARN to be able to call <a>SubscribeToShard</a>.</p>\n   *         <p>If you delete a consumer and then create a new one with the same name, it won't have\n   *             the same ARN. That's because consumer ARNs contain the creation timestamp. This is\n   *             important to keep in mind if you have IAM policies that reference consumer ARNs.</p>\n   */\n  ConsumerARN: string | undefined;\n\n  /**\n   * <p>A consumer can't read data while in the <code>CREATING</code> or <code>DELETING</code>\n   *             states.</p>\n   */\n  ConsumerStatus: ConsumerStatus | string | undefined;\n\n  /**\n   * <p></p>\n   */\n  ConsumerCreationTimestamp: Date | undefined;\n\n  /**\n   * <p>The ARN of the stream with which you registered the consumer.</p>\n   */\n  StreamARN: string | undefined;\n}\n\nexport namespace ConsumerDescription {\n  export const filterSensitiveLog = (obj: ConsumerDescription): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the input for <code>CreateStream</code>.</p>\n */\nexport interface CreateStreamInput {\n  /**\n   * <p>A name to identify the stream. The stream name is scoped to the AWS account used by\n   *             the application that creates the stream. It is also scoped by AWS Region. That is, two\n   *             streams in two different AWS accounts can have the same name. Two streams in the same\n   *             AWS account but in two different Regions can also have the same name.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>The number of shards that the stream will use. The throughput of the stream is a\n   *             function of the number of shards; more shards are required for greater provisioned\n   *             throughput.</p>\n   */\n  ShardCount: number | undefined;\n}\n\nexport namespace CreateStreamInput {\n  export const filterSensitiveLog = (obj: CreateStreamInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the input for <a>DecreaseStreamRetentionPeriod</a>.</p>\n */\nexport interface DecreaseStreamRetentionPeriodInput {\n  /**\n   * <p>The name of the stream to modify.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>The new retention period of the stream, in hours. Must be less than the current\n   *             retention period.</p>\n   */\n  RetentionPeriodHours: number | undefined;\n}\n\nexport namespace DecreaseStreamRetentionPeriodInput {\n  export const filterSensitiveLog = (obj: DecreaseStreamRetentionPeriodInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the input for <a>DeleteStream</a>.</p>\n */\nexport interface DeleteStreamInput {\n  /**\n   * <p>The name of the stream to delete.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>If this parameter is unset (<code>null</code>) or if you set it to <code>false</code>,\n   *             and the stream has registered consumers, the call to <code>DeleteStream</code> fails\n   *             with a <code>ResourceInUseException</code>. </p>\n   */\n  EnforceConsumerDeletion?: boolean;\n}\n\nexport namespace DeleteStreamInput {\n  export const filterSensitiveLog = (obj: DeleteStreamInput): any => ({\n    ...obj,\n  });\n}\n\nexport interface DeregisterStreamConsumerInput {\n  /**\n   * <p>The ARN of the Kinesis data stream that the consumer is registered with. For more\n   *             information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>\n   */\n  StreamARN?: string;\n\n  /**\n   * <p>The name that you gave to the consumer.</p>\n   */\n  ConsumerName?: string;\n\n  /**\n   * <p>The ARN returned by Kinesis Data Streams when you registered the consumer. If you\n   *             don't know the ARN of the consumer that you want to deregister, you can use the\n   *             ListStreamConsumers operation to get a list of the descriptions of all the consumers\n   *             that are currently registered with a given data stream. The description of a consumer\n   *             contains its ARN.</p>\n   */\n  ConsumerARN?: string;\n}\n\nexport namespace DeregisterStreamConsumerInput {\n  export const filterSensitiveLog = (obj: DeregisterStreamConsumerInput): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeLimitsInput {}\n\nexport namespace DescribeLimitsInput {\n  export const filterSensitiveLog = (obj: DescribeLimitsInput): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeLimitsOutput {\n  /**\n   * <p>The maximum number of shards.</p>\n   */\n  ShardLimit: number | undefined;\n\n  /**\n   * <p>The number of open shards.</p>\n   */\n  OpenShardCount: number | undefined;\n}\n\nexport namespace DescribeLimitsOutput {\n  export const filterSensitiveLog = (obj: DescribeLimitsOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the input for <code>DescribeStream</code>.</p>\n */\nexport interface DescribeStreamInput {\n  /**\n   * <p>The name of the stream to describe.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>The maximum number of shards to return in a single call. The default value is 100.\n   *             If you specify a value greater than 100, at most 100 shards are returned.</p>\n   */\n  Limit?: number;\n\n  /**\n   * <p>The shard ID of the shard to start with.</p>\n   */\n  ExclusiveStartShardId?: string;\n}\n\nexport namespace DescribeStreamInput {\n  export const filterSensitiveLog = (obj: DescribeStreamInput): any => ({\n    ...obj,\n  });\n}\n\nexport enum EncryptionType {\n  KMS = \"KMS\",\n  NONE = \"NONE\",\n}\n\nexport enum MetricsName {\n  ALL = \"ALL\",\n  INCOMING_BYTES = \"IncomingBytes\",\n  INCOMING_RECORDS = \"IncomingRecords\",\n  ITERATOR_AGE_MILLISECONDS = \"IteratorAgeMilliseconds\",\n  OUTGOING_BYTES = \"OutgoingBytes\",\n  OUTGOING_RECORDS = \"OutgoingRecords\",\n  READ_PROVISIONED_THROUGHPUT_EXCEEDED = \"ReadProvisionedThroughputExceeded\",\n  WRITE_PROVISIONED_THROUGHPUT_EXCEEDED = \"WriteProvisionedThroughputExceeded\",\n}\n\n/**\n * <p>Represents enhanced metrics types.</p>\n */\nexport interface EnhancedMetrics {\n  /**\n   * <p>List of shard-level metrics.</p>\n   *         <p>The following are the valid shard-level metrics. The value \"<code>ALL</code>\"\n   *             enhances every metric.</p>\n   *         <ul>\n   *             <li>\n   *                 <p>\n   *                     <code>IncomingBytes</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>IncomingRecords</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>OutgoingBytes</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>OutgoingRecords</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>WriteProvisionedThroughputExceeded</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>ReadProvisionedThroughputExceeded</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>IteratorAgeMilliseconds</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>ALL</code>\n   *                 </p>\n   *             </li>\n   *          </ul>\n   *         <p>For more information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/monitoring-with-cloudwatch.html\">Monitoring the Amazon\n   *                 Kinesis Data Streams Service with Amazon CloudWatch</a> in the <i>Amazon\n   *                 Kinesis Data Streams Developer Guide</i>.</p>\n   */\n  ShardLevelMetrics?: (MetricsName | string)[];\n}\n\nexport namespace EnhancedMetrics {\n  export const filterSensitiveLog = (obj: EnhancedMetrics): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The range of possible sequence numbers for the shard.</p>\n */\nexport interface SequenceNumberRange {\n  /**\n   * <p>The starting sequence number for the range.</p>\n   */\n  StartingSequenceNumber: string | undefined;\n\n  /**\n   * <p>The ending sequence number for the range. Shards that are in the OPEN state have an\n   *             ending sequence number of <code>null</code>.</p>\n   */\n  EndingSequenceNumber?: string;\n}\n\nexport namespace SequenceNumberRange {\n  export const filterSensitiveLog = (obj: SequenceNumberRange): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A uniquely identified group of data records in a Kinesis data stream.</p>\n */\nexport interface Shard {\n  /**\n   * <p>The unique identifier of the shard within the stream.</p>\n   */\n  ShardId: string | undefined;\n\n  /**\n   * <p>The shard ID of the shard's parent.</p>\n   */\n  ParentShardId?: string;\n\n  /**\n   * <p>The shard ID of the shard adjacent to the shard's parent.</p>\n   */\n  AdjacentParentShardId?: string;\n\n  /**\n   * <p>The range of possible hash key values for the shard, which is a set of ordered\n   *             contiguous positive integers.</p>\n   */\n  HashKeyRange: HashKeyRange | undefined;\n\n  /**\n   * <p>The range of possible sequence numbers for the shard.</p>\n   */\n  SequenceNumberRange: SequenceNumberRange | undefined;\n}\n\nexport namespace Shard {\n  export const filterSensitiveLog = (obj: Shard): any => ({\n    ...obj,\n  });\n}\n\nexport enum StreamStatus {\n  ACTIVE = \"ACTIVE\",\n  CREATING = \"CREATING\",\n  DELETING = \"DELETING\",\n  UPDATING = \"UPDATING\",\n}\n\n/**\n * <p>Represents the output for <a>DescribeStream</a>.</p>\n */\nexport interface StreamDescription {\n  /**\n   * <p>The name of the stream being described.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) for the stream being described.</p>\n   */\n  StreamARN: string | undefined;\n\n  /**\n   * <p>The current status of the stream being described. The stream status is one of the\n   *             following states:</p>\n   *         <ul>\n   *             <li>\n   *                 <p>\n   *                     <code>CREATING</code> - The stream is being created. Kinesis Data Streams\n   *                     immediately returns and sets <code>StreamStatus</code> to\n   *                     <code>CREATING</code>.</p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>DELETING</code> - The stream is being deleted. The specified stream is in\n   *                     the <code>DELETING</code> state until Kinesis Data Streams completes the\n   *                     deletion.</p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>ACTIVE</code> - The stream exists and is ready for read and write\n   *                     operations or deletion. You should perform read and write operations only on an\n   *                         <code>ACTIVE</code> stream.</p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>UPDATING</code> - Shards in the stream are being merged or split. Read and\n   *                     write operations continue to work while the stream is in the\n   *                         <code>UPDATING</code> state.</p>\n   *             </li>\n   *          </ul>\n   */\n  StreamStatus: StreamStatus | string | undefined;\n\n  /**\n   * <p>The shards that comprise the stream.</p>\n   */\n  Shards: Shard[] | undefined;\n\n  /**\n   * <p>If set to <code>true</code>, more shards in the stream are available to\n   *             describe.</p>\n   */\n  HasMoreShards: boolean | undefined;\n\n  /**\n   * <p>The current retention period, in hours. Minimum value of 24. Maximum value of\n   *             168.</p>\n   */\n  RetentionPeriodHours: number | undefined;\n\n  /**\n   * <p>The approximate time that the stream was created.</p>\n   */\n  StreamCreationTimestamp: Date | undefined;\n\n  /**\n   * <p>Represents the current enhanced monitoring settings of the stream.</p>\n   */\n  EnhancedMonitoring: EnhancedMetrics[] | undefined;\n\n  /**\n   * <p>The server-side encryption type used on the stream. This parameter can be one of\n   *             the following values:</p>\n   *         <ul>\n   *             <li>\n   *                 <p>\n   *                   <code>NONE</code>: Do not encrypt the records in the stream.</p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                   <code>KMS</code>: Use server-side encryption on the records in the stream\n   *                     using a customer-managed AWS KMS key.</p>\n   *             </li>\n   *          </ul>\n   */\n  EncryptionType?: EncryptionType | string;\n\n  /**\n   * <p>The GUID for the customer-managed AWS KMS key to use for encryption. This value can\n   *             be a globally unique identifier, a fully specified ARN to either an alias or a key, or\n   *             an alias name prefixed by \"alias/\".You can also use a master key owned by Kinesis Data\n   *             Streams by specifying the alias <code>aws/kinesis</code>.</p>\n   *         <ul>\n   *             <li>\n   *                 <p>Key ARN example:\n   *                         <code>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>Alias ARN example:\n   *                         <code>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>Globally unique key ID example:\n   *                         <code>12345678-1234-1234-1234-123456789012</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>Alias name example: <code>alias/MyAliasName</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>Master key owned by Kinesis Data Streams:\n   *                     <code>alias/aws/kinesis</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  KeyId?: string;\n}\n\nexport namespace StreamDescription {\n  export const filterSensitiveLog = (obj: StreamDescription): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the output for <code>DescribeStream</code>.</p>\n */\nexport interface DescribeStreamOutput {\n  /**\n   * <p>The current status of the stream, the stream Amazon Resource Name (ARN), an array\n   *             of shard objects that comprise the stream, and whether there are more shards\n   *             available.</p>\n   */\n  StreamDescription: StreamDescription | undefined;\n}\n\nexport namespace DescribeStreamOutput {\n  export const filterSensitiveLog = (obj: DescribeStreamOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeStreamConsumerInput {\n  /**\n   * <p>The ARN of the Kinesis data stream that the consumer is registered with. For more\n   *             information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>\n   */\n  StreamARN?: string;\n\n  /**\n   * <p>The name that you gave to the consumer.</p>\n   */\n  ConsumerName?: string;\n\n  /**\n   * <p>The ARN returned by Kinesis Data Streams when you registered the consumer.</p>\n   */\n  ConsumerARN?: string;\n}\n\nexport namespace DescribeStreamConsumerInput {\n  export const filterSensitiveLog = (obj: DescribeStreamConsumerInput): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeStreamConsumerOutput {\n  /**\n   * <p>An object that represents the details of the consumer.</p>\n   */\n  ConsumerDescription: ConsumerDescription | undefined;\n}\n\nexport namespace DescribeStreamConsumerOutput {\n  export const filterSensitiveLog = (obj: DescribeStreamConsumerOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeStreamSummaryInput {\n  /**\n   * <p>The name of the stream to describe.</p>\n   */\n  StreamName: string | undefined;\n}\n\nexport namespace DescribeStreamSummaryInput {\n  export const filterSensitiveLog = (obj: DescribeStreamSummaryInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the output for <a>DescribeStreamSummary</a>\n *          </p>\n */\nexport interface StreamDescriptionSummary {\n  /**\n   * <p>The name of the stream being described.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>The Amazon Resource Name (ARN) for the stream being described.</p>\n   */\n  StreamARN: string | undefined;\n\n  /**\n   * <p>The current status of the stream being described. The stream status is one of the\n   *             following states:</p>\n   *         <ul>\n   *             <li>\n   *                 <p>\n   *                     <code>CREATING</code> - The stream is being created. Kinesis Data Streams\n   *                     immediately returns and sets <code>StreamStatus</code> to\n   *                     <code>CREATING</code>.</p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>DELETING</code> - The stream is being deleted. The specified stream is in\n   *                     the <code>DELETING</code> state until Kinesis Data Streams completes the\n   *                     deletion.</p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>ACTIVE</code> - The stream exists and is ready for read and write\n   *                     operations or deletion. You should perform read and write operations only on an\n   *                         <code>ACTIVE</code> stream.</p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>UPDATING</code> - Shards in the stream are being merged or split. Read and\n   *                     write operations continue to work while the stream is in the\n   *                         <code>UPDATING</code> state.</p>\n   *             </li>\n   *          </ul>\n   */\n  StreamStatus: StreamStatus | string | undefined;\n\n  /**\n   * <p>The current retention period, in hours.</p>\n   */\n  RetentionPeriodHours: number | undefined;\n\n  /**\n   * <p>The approximate time that the stream was created.</p>\n   */\n  StreamCreationTimestamp: Date | undefined;\n\n  /**\n   * <p>Represents the current enhanced monitoring settings of the stream.</p>\n   */\n  EnhancedMonitoring: EnhancedMetrics[] | undefined;\n\n  /**\n   * <p>The encryption type used. This value is one of the following:</p>\n   *         <ul>\n   *             <li>\n   *                 <p>\n   *                   <code>KMS</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                   <code>NONE</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  EncryptionType?: EncryptionType | string;\n\n  /**\n   * <p>The GUID for the customer-managed AWS KMS key to use for encryption. This value can\n   *             be a globally unique identifier, a fully specified ARN to either an alias or a key, or\n   *             an alias name prefixed by \"alias/\".You can also use a master key owned by Kinesis Data\n   *             Streams by specifying the alias <code>aws/kinesis</code>.</p>\n   *         <ul>\n   *             <li>\n   *                 <p>Key ARN example:\n   *                         <code>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>Alias ARN example: <code>\n   *                         arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>Globally unique key ID example:\n   *                         <code>12345678-1234-1234-1234-123456789012</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>Alias name example: <code>alias/MyAliasName</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>Master key owned by Kinesis Data Streams:\n   *                     <code>alias/aws/kinesis</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  KeyId?: string;\n\n  /**\n   * <p>The number of open shards in the stream.</p>\n   */\n  OpenShardCount: number | undefined;\n\n  /**\n   * <p>The number of enhanced fan-out consumers registered with the stream.</p>\n   */\n  ConsumerCount?: number;\n}\n\nexport namespace StreamDescriptionSummary {\n  export const filterSensitiveLog = (obj: StreamDescriptionSummary): any => ({\n    ...obj,\n  });\n}\n\nexport interface DescribeStreamSummaryOutput {\n  /**\n   * <p>A <a>StreamDescriptionSummary</a> containing information about the\n   *             stream.</p>\n   */\n  StreamDescriptionSummary: StreamDescriptionSummary | undefined;\n}\n\nexport namespace DescribeStreamSummaryOutput {\n  export const filterSensitiveLog = (obj: DescribeStreamSummaryOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the input for <a>DisableEnhancedMonitoring</a>.</p>\n */\nexport interface DisableEnhancedMonitoringInput {\n  /**\n   * <p>The name of the Kinesis data stream for which to disable enhanced\n   *             monitoring.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>List of shard-level metrics to disable.</p>\n   *         <p>The following are the valid shard-level metrics. The value \"<code>ALL</code>\"\n   *             disables every metric.</p>\n   *         <ul>\n   *             <li>\n   *                 <p>\n   *                     <code>IncomingBytes</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>IncomingRecords</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>OutgoingBytes</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>OutgoingRecords</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>WriteProvisionedThroughputExceeded</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>ReadProvisionedThroughputExceeded</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>IteratorAgeMilliseconds</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>ALL</code>\n   *                 </p>\n   *             </li>\n   *          </ul>\n   *         <p>For more information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/monitoring-with-cloudwatch.html\">Monitoring the Amazon\n   *                 Kinesis Data Streams Service with Amazon CloudWatch</a> in the <i>Amazon\n   *                 Kinesis Data Streams Developer Guide</i>.</p>\n   */\n  ShardLevelMetrics: (MetricsName | string)[] | undefined;\n}\n\nexport namespace DisableEnhancedMonitoringInput {\n  export const filterSensitiveLog = (obj: DisableEnhancedMonitoringInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the output for <a>EnableEnhancedMonitoring</a> and <a>DisableEnhancedMonitoring</a>.</p>\n */\nexport interface EnhancedMonitoringOutput {\n  /**\n   * <p>The name of the Kinesis data stream.</p>\n   */\n  StreamName?: string;\n\n  /**\n   * <p>Represents the current state of the metrics that are in the enhanced state before\n   *             the operation.</p>\n   */\n  CurrentShardLevelMetrics?: (MetricsName | string)[];\n\n  /**\n   * <p>Represents the list of all the metrics that would be in the enhanced state after\n   *             the operation.</p>\n   */\n  DesiredShardLevelMetrics?: (MetricsName | string)[];\n}\n\nexport namespace EnhancedMonitoringOutput {\n  export const filterSensitiveLog = (obj: EnhancedMonitoringOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the input for <a>EnableEnhancedMonitoring</a>.</p>\n */\nexport interface EnableEnhancedMonitoringInput {\n  /**\n   * <p>The name of the stream for which to enable enhanced monitoring.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>List of shard-level metrics to enable.</p>\n   *         <p>The following are the valid shard-level metrics. The value \"<code>ALL</code>\"\n   *             enables every metric.</p>\n   *         <ul>\n   *             <li>\n   *                 <p>\n   *                     <code>IncomingBytes</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>IncomingRecords</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>OutgoingBytes</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>OutgoingRecords</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>WriteProvisionedThroughputExceeded</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>ReadProvisionedThroughputExceeded</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>IteratorAgeMilliseconds</code>\n   *                 </p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                     <code>ALL</code>\n   *                 </p>\n   *             </li>\n   *          </ul>\n   *         <p>For more information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/monitoring-with-cloudwatch.html\">Monitoring the Amazon\n   *                 Kinesis Data Streams Service with Amazon CloudWatch</a> in the <i>Amazon\n   *                 Kinesis Data Streams Developer Guide</i>.</p>\n   */\n  ShardLevelMetrics: (MetricsName | string)[] | undefined;\n}\n\nexport namespace EnableEnhancedMonitoringInput {\n  export const filterSensitiveLog = (obj: EnableEnhancedMonitoringInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The provided iterator exceeds the maximum age allowed.</p>\n */\nexport interface ExpiredIteratorException extends __SmithyException, $MetadataBearer {\n  name: \"ExpiredIteratorException\";\n  $fault: \"client\";\n  /**\n   * <p>A message that provides information about the error.</p>\n   */\n  message?: string;\n}\n\nexport namespace ExpiredIteratorException {\n  export const filterSensitiveLog = (obj: ExpiredIteratorException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The pagination token passed to the operation is expired.</p>\n */\nexport interface ExpiredNextTokenException extends __SmithyException, $MetadataBearer {\n  name: \"ExpiredNextTokenException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace ExpiredNextTokenException {\n  export const filterSensitiveLog = (obj: ExpiredNextTokenException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the input for <a>GetRecords</a>.</p>\n */\nexport interface GetRecordsInput {\n  /**\n   * <p>The position in the shard from which you want to start sequentially reading data\n   *             records. A shard iterator specifies this position using the sequence number of a data\n   *             record in the shard.</p>\n   */\n  ShardIterator: string | undefined;\n\n  /**\n   * <p>The maximum number of records to return. Specify a value of up to 10,000. If you\n   *             specify a value that is greater than 10,000, <a>GetRecords</a> throws\n   *                 <code>InvalidArgumentException</code>. The default value is 10,000.</p>\n   */\n  Limit?: number;\n}\n\nexport namespace GetRecordsInput {\n  export const filterSensitiveLog = (obj: GetRecordsInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The unit of data of the Kinesis data stream, which is composed of a sequence\n *             number, a partition key, and a data blob.</p>\n */\nexport interface _Record {\n  /**\n   * <p>The unique identifier of the record within its shard.</p>\n   */\n  SequenceNumber: string | undefined;\n\n  /**\n   * <p>The approximate time that the record was inserted into the stream.</p>\n   */\n  ApproximateArrivalTimestamp?: Date;\n\n  /**\n   * <p>The data blob. The data in the blob is both opaque and immutable to Kinesis Data\n   *             Streams, which does not inspect, interpret, or change the data in the blob in any way.\n   *             When the data blob (the payload before base64-encoding) is added to the partition key\n   *             size, the total size must not exceed the maximum record size (1 MiB).</p>\n   */\n  Data: Uint8Array | undefined;\n\n  /**\n   * <p>Identifies which shard in the stream the data record is assigned to.</p>\n   */\n  PartitionKey: string | undefined;\n\n  /**\n   * <p>The encryption type used on the record. This parameter can be one of the following\n   *             values:</p>\n   *         <ul>\n   *             <li>\n   *                 <p>\n   *                   <code>NONE</code>: Do not encrypt the records in the stream.</p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                   <code>KMS</code>: Use server-side encryption on the records in the stream\n   *                     using a customer-managed AWS KMS key.</p>\n   *             </li>\n   *          </ul>\n   */\n  EncryptionType?: EncryptionType | string;\n}\n\nexport namespace _Record {\n  export const filterSensitiveLog = (obj: _Record): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the output for <a>GetRecords</a>.</p>\n */\nexport interface GetRecordsOutput {\n  /**\n   * <p>The data records retrieved from the shard.</p>\n   */\n  Records: _Record[] | undefined;\n\n  /**\n   * <p>The next position in the shard from which to start sequentially reading data\n   *             records. If set to <code>null</code>, the shard has been closed and the requested\n   *             iterator does not return any more data. </p>\n   */\n  NextShardIterator?: string;\n\n  /**\n   * <p>The number of milliseconds the <a>GetRecords</a> response is from the\n   *             tip of the stream, indicating how far behind current time the consumer is. A value of\n   *             zero indicates that record processing is caught up, and there are no new records to\n   *             process at this moment.</p>\n   */\n  MillisBehindLatest?: number;\n\n  ChildShards?: ChildShard[];\n}\n\nexport namespace GetRecordsOutput {\n  export const filterSensitiveLog = (obj: GetRecordsOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The ciphertext references a key that doesn't exist or that you don't have access\n *             to.</p>\n */\nexport interface KMSAccessDeniedException extends __SmithyException, $MetadataBearer {\n  name: \"KMSAccessDeniedException\";\n  $fault: \"client\";\n  /**\n   * <p>A message that provides information about the error.</p>\n   */\n  message?: string;\n}\n\nexport namespace KMSAccessDeniedException {\n  export const filterSensitiveLog = (obj: KMSAccessDeniedException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The request was rejected because the specified customer master key (CMK) isn't\n *             enabled.</p>\n */\nexport interface KMSDisabledException extends __SmithyException, $MetadataBearer {\n  name: \"KMSDisabledException\";\n  $fault: \"client\";\n  /**\n   * <p>A message that provides information about the error.</p>\n   */\n  message?: string;\n}\n\nexport namespace KMSDisabledException {\n  export const filterSensitiveLog = (obj: KMSDisabledException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The request was rejected because the state of the specified resource isn't valid\n *             for this request. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html\">How Key State Affects Use of a\n *                 Customer Master Key</a> in the <i>AWS Key Management Service Developer\n *                 Guide</i>.</p>\n */\nexport interface KMSInvalidStateException extends __SmithyException, $MetadataBearer {\n  name: \"KMSInvalidStateException\";\n  $fault: \"client\";\n  /**\n   * <p>A message that provides information about the error.</p>\n   */\n  message?: string;\n}\n\nexport namespace KMSInvalidStateException {\n  export const filterSensitiveLog = (obj: KMSInvalidStateException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The request was rejected because the specified entity or resource can't be\n *             found.</p>\n */\nexport interface KMSNotFoundException extends __SmithyException, $MetadataBearer {\n  name: \"KMSNotFoundException\";\n  $fault: \"client\";\n  /**\n   * <p>A message that provides information about the error.</p>\n   */\n  message?: string;\n}\n\nexport namespace KMSNotFoundException {\n  export const filterSensitiveLog = (obj: KMSNotFoundException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The AWS access key ID needs a subscription for the service.</p>\n */\nexport interface KMSOptInRequired extends __SmithyException, $MetadataBearer {\n  name: \"KMSOptInRequired\";\n  $fault: \"client\";\n  /**\n   * <p>A message that provides information about the error.</p>\n   */\n  message?: string;\n}\n\nexport namespace KMSOptInRequired {\n  export const filterSensitiveLog = (obj: KMSOptInRequired): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The request was denied due to request throttling. For more information about\n *             throttling, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second\">Limits</a> in\n *             the <i>AWS Key Management Service Developer Guide</i>.</p>\n */\nexport interface KMSThrottlingException extends __SmithyException, $MetadataBearer {\n  name: \"KMSThrottlingException\";\n  $fault: \"client\";\n  /**\n   * <p>A message that provides information about the error.</p>\n   */\n  message?: string;\n}\n\nexport namespace KMSThrottlingException {\n  export const filterSensitiveLog = (obj: KMSThrottlingException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The request rate for the stream is too high, or the requested data is too large for\n *             the available throughput. Reduce the frequency or size of your requests. For more\n *             information, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Streams Limits</a> in the\n *                 <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href=\"https://docs.aws.amazon.com/general/latest/gr/api-retries.html\">Error Retries and\n *                 Exponential Backoff in AWS</a> in the <i>AWS General\n *             Reference</i>.</p>\n */\nexport interface ProvisionedThroughputExceededException extends __SmithyException, $MetadataBearer {\n  name: \"ProvisionedThroughputExceededException\";\n  $fault: \"client\";\n  /**\n   * <p>A message that provides information about the error.</p>\n   */\n  message?: string;\n}\n\nexport namespace ProvisionedThroughputExceededException {\n  export const filterSensitiveLog = (obj: ProvisionedThroughputExceededException): any => ({\n    ...obj,\n  });\n}\n\nexport enum ShardIteratorType {\n  AFTER_SEQUENCE_NUMBER = \"AFTER_SEQUENCE_NUMBER\",\n  AT_SEQUENCE_NUMBER = \"AT_SEQUENCE_NUMBER\",\n  AT_TIMESTAMP = \"AT_TIMESTAMP\",\n  LATEST = \"LATEST\",\n  TRIM_HORIZON = \"TRIM_HORIZON\",\n}\n\n/**\n * <p>Represents the input for <code>GetShardIterator</code>.</p>\n */\nexport interface GetShardIteratorInput {\n  /**\n   * <p>The name of the Amazon Kinesis data stream.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>The shard ID of the Kinesis Data Streams shard to get the iterator for.</p>\n   */\n  ShardId: string | undefined;\n\n  /**\n   * <p>Determines how the shard iterator is used to start reading data records from the\n   *             shard.</p>\n   *         <p>The following are the valid Amazon Kinesis shard iterator types:</p>\n   *         <ul>\n   *             <li>\n   *\n   *                 <p>AT_SEQUENCE_NUMBER - Start reading from the position denoted by a specific\n   *                     sequence number, provided in the value\n   *                     <code>StartingSequenceNumber</code>.</p>\n   *             </li>\n   *             <li>\n   *\n   *                 <p>AFTER_SEQUENCE_NUMBER - Start reading right after the position denoted by a\n   *                     specific sequence number, provided in the value\n   *                         <code>StartingSequenceNumber</code>.</p>\n   *             </li>\n   *             <li>\n   *\n   *                 <p>AT_TIMESTAMP - Start reading from the position denoted by a specific time\n   *                     stamp, provided in the value <code>Timestamp</code>.</p>\n   *             </li>\n   *             <li>\n   *\n   *                 <p>TRIM_HORIZON - Start reading at the last untrimmed record in the shard in\n   *                     the system, which is the oldest data record in the shard.</p>\n   *             </li>\n   *             <li>\n   *\n   *                 <p>LATEST - Start reading just after the most recent record in the shard, so\n   *                     that you always read the most recent data in the shard.</p>\n   *             </li>\n   *          </ul>\n   */\n  ShardIteratorType: ShardIteratorType | string | undefined;\n\n  /**\n   * <p>The sequence number of the data record in the shard from which to start reading.\n   *             Used with shard iterator type AT_SEQUENCE_NUMBER and AFTER_SEQUENCE_NUMBER.</p>\n   */\n  StartingSequenceNumber?: string;\n\n  /**\n   * <p>The time stamp of the data record from which to start reading. Used with shard\n   *             iterator type AT_TIMESTAMP. A time stamp is the Unix epoch date with precision in\n   *             milliseconds. For example, <code>2016-04-04T19:58:46.480-00:00</code> or\n   *                 <code>1459799926.480</code>. If a record with this exact time stamp does not exist,\n   *             the iterator returned is for the next (later) record. If the time stamp is older than\n   *             the current trim horizon, the iterator returned is for the oldest untrimmed data record\n   *             (TRIM_HORIZON).</p>\n   */\n  Timestamp?: Date;\n}\n\nexport namespace GetShardIteratorInput {\n  export const filterSensitiveLog = (obj: GetShardIteratorInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the output for <code>GetShardIterator</code>.</p>\n */\nexport interface GetShardIteratorOutput {\n  /**\n   * <p>The position in the shard from which to start reading data records sequentially. A\n   *             shard iterator specifies this position using the sequence number of a data record in a\n   *             shard.</p>\n   */\n  ShardIterator?: string;\n}\n\nexport namespace GetShardIteratorOutput {\n  export const filterSensitiveLog = (obj: GetShardIteratorOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the input for <a>IncreaseStreamRetentionPeriod</a>.</p>\n */\nexport interface IncreaseStreamRetentionPeriodInput {\n  /**\n   * <p>The name of the stream to modify.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>The new retention period of the stream, in hours. Must be more than the current\n   *             retention period.</p>\n   */\n  RetentionPeriodHours: number | undefined;\n}\n\nexport namespace IncreaseStreamRetentionPeriodInput {\n  export const filterSensitiveLog = (obj: IncreaseStreamRetentionPeriodInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>The processing of the request failed because of an unknown error, exception, or\n *             failure.</p>\n */\nexport interface InternalFailureException extends __SmithyException {\n  name: \"InternalFailureException\";\n  $fault: \"server\";\n  message?: string;\n}\n\nexport namespace InternalFailureException {\n  export const filterSensitiveLog = (obj: InternalFailureException): any => ({\n    ...obj,\n  });\n}\n\nexport enum ShardFilterType {\n  AFTER_SHARD_ID = \"AFTER_SHARD_ID\",\n  AT_LATEST = \"AT_LATEST\",\n  AT_TIMESTAMP = \"AT_TIMESTAMP\",\n  AT_TRIM_HORIZON = \"AT_TRIM_HORIZON\",\n  FROM_TIMESTAMP = \"FROM_TIMESTAMP\",\n  FROM_TRIM_HORIZON = \"FROM_TRIM_HORIZON\",\n}\n\nexport interface ShardFilter {\n  Type: ShardFilterType | string | undefined;\n  ShardId?: string;\n  Timestamp?: Date;\n}\n\nexport namespace ShardFilter {\n  export const filterSensitiveLog = (obj: ShardFilter): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListShardsInput {\n  /**\n   * <p>The name of the data stream whose shards you want to list. </p>\n   *         <p>You cannot specify this parameter if you specify the <code>NextToken</code>\n   *             parameter.</p>\n   */\n  StreamName?: string;\n\n  /**\n   * <p>When the number of shards in the data stream is greater than the default value for\n   *             the <code>MaxResults</code> parameter, or if you explicitly specify a value for\n   *                 <code>MaxResults</code> that is less than the number of shards in the data stream,\n   *             the response includes a pagination token named <code>NextToken</code>. You can specify\n   *             this <code>NextToken</code> value in a subsequent call to <code>ListShards</code> to\n   *             list the next set of shards.</p>\n   *         <p>Don't specify <code>StreamName</code> or <code>StreamCreationTimestamp</code> if\n   *             you specify <code>NextToken</code> because the latter unambiguously identifies the\n   *             stream.</p>\n   *         <p>You can optionally specify a value for the <code>MaxResults</code> parameter when\n   *             you specify <code>NextToken</code>. If you specify a <code>MaxResults</code> value that\n   *             is less than the number of shards that the operation returns if you don't specify\n   *                 <code>MaxResults</code>, the response will contain a new <code>NextToken</code>\n   *             value. You can use the new <code>NextToken</code> value in a subsequent call to the\n   *                 <code>ListShards</code> operation.</p>\n   *         <important>\n   *             <p>Tokens expire after 300 seconds. When you obtain a value for\n   *                     <code>NextToken</code> in the response to a call to <code>ListShards</code>, you\n   *                 have 300 seconds to use that value. If you specify an expired token in a call to\n   *                     <code>ListShards</code>, you get\n   *                 <code>ExpiredNextTokenException</code>.</p>\n   *         </important>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>Specify this parameter to indicate that you want to list the shards starting with\n   *             the shard whose ID immediately follows <code>ExclusiveStartShardId</code>.</p>\n   *         <p>If you don't specify this parameter, the default behavior is for\n   *                 <code>ListShards</code> to list the shards starting with the first one in the\n   *             stream.</p>\n   *         <p>You cannot specify this parameter if you specify <code>NextToken</code>.</p>\n   */\n  ExclusiveStartShardId?: string;\n\n  /**\n   * <p>The maximum number of shards to return in a single call to <code>ListShards</code>.\n   *             The minimum value you can specify for this parameter is 1, and the maximum is 10,000,\n   *             which is also the default.</p>\n   *         <p>When the number of shards to be listed is greater than the value of\n   *                 <code>MaxResults</code>, the response contains a <code>NextToken</code> value that\n   *             you can use in a subsequent call to <code>ListShards</code> to list the next set of\n   *             shards.</p>\n   */\n  MaxResults?: number;\n\n  /**\n   * <p>Specify this input parameter to distinguish data streams that have the same name.\n   *             For example, if you create a data stream and then delete it, and you later create\n   *             another data stream with the same name, you can use this input parameter to specify\n   *             which of the two streams you want to list the shards for.</p>\n   *         <p>You cannot specify this parameter if you specify the <code>NextToken</code>\n   *             parameter.</p>\n   */\n  StreamCreationTimestamp?: Date;\n\n  ShardFilter?: ShardFilter;\n}\n\nexport namespace ListShardsInput {\n  export const filterSensitiveLog = (obj: ListShardsInput): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListShardsOutput {\n  /**\n   * <p>An array of JSON objects. Each object represents one shard and specifies the IDs of\n   *             the shard, the shard's parent, and the shard that's adjacent to the shard's parent. Each\n   *             object also contains the starting and ending hash keys and the starting and ending\n   *             sequence numbers for the shard.</p>\n   */\n  Shards?: Shard[];\n\n  /**\n   * <p>When the number of shards in the data stream is greater than the default value for\n   *             the <code>MaxResults</code> parameter, or if you explicitly specify a value for\n   *                 <code>MaxResults</code> that is less than the number of shards in the data stream,\n   *             the response includes a pagination token named <code>NextToken</code>. You can specify\n   *             this <code>NextToken</code> value in a subsequent call to <code>ListShards</code> to\n   *             list the next set of shards. For more information about the use of this pagination token\n   *             when calling the <code>ListShards</code> operation, see <a>ListShardsInput$NextToken</a>.</p>\n   *         <important>\n   *             <p>Tokens expire after 300 seconds. When you obtain a value for\n   *                     <code>NextToken</code> in the response to a call to <code>ListShards</code>, you\n   *                 have 300 seconds to use that value. If you specify an expired token in a call to\n   *                     <code>ListShards</code>, you get\n   *                 <code>ExpiredNextTokenException</code>.</p>\n   *         </important>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListShardsOutput {\n  export const filterSensitiveLog = (obj: ListShardsOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListStreamConsumersInput {\n  /**\n   * <p>The ARN of the Kinesis data stream for which you want to list the registered\n   *             consumers. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>\n   */\n  StreamARN: string | undefined;\n\n  /**\n   * <p>When the number of consumers that are registered with the data stream is greater than\n   *             the default value for the <code>MaxResults</code> parameter, or if you explicitly\n   *             specify a value for <code>MaxResults</code> that is less than the number of consumers\n   *             that are registered with the data stream, the response includes a pagination token named\n   *                 <code>NextToken</code>. You can specify this <code>NextToken</code> value in a\n   *             subsequent call to <code>ListStreamConsumers</code> to list the next set of registered\n   *             consumers.</p>\n   *         <p>Don't specify <code>StreamName</code> or <code>StreamCreationTimestamp</code> if you\n   *             specify <code>NextToken</code> because the latter unambiguously identifies the\n   *             stream.</p>\n   *         <p>You can optionally specify a value for the <code>MaxResults</code> parameter when you\n   *             specify <code>NextToken</code>. If you specify a <code>MaxResults</code> value that is\n   *             less than the number of consumers that the operation returns if you don't specify\n   *                 <code>MaxResults</code>, the response will contain a new <code>NextToken</code>\n   *             value. You can use the new <code>NextToken</code> value in a subsequent call to the\n   *                 <code>ListStreamConsumers</code> operation to list the next set of consumers.</p>\n   *         <important>\n   *             <p>Tokens expire after 300 seconds. When you obtain a value for\n   *                     <code>NextToken</code> in the response to a call to\n   *                     <code>ListStreamConsumers</code>, you have 300 seconds to use that value. If you\n   *                 specify an expired token in a call to <code>ListStreamConsumers</code>, you get\n   *                     <code>ExpiredNextTokenException</code>.</p>\n   *         </important>\n   */\n  NextToken?: string;\n\n  /**\n   * <p>The maximum number of consumers that you want a single call of\n   *                 <code>ListStreamConsumers</code> to return.</p>\n   */\n  MaxResults?: number;\n\n  /**\n   * <p>Specify this input parameter to distinguish data streams that have the same name. For\n   *             example, if you create a data stream and then delete it, and you later create another\n   *             data stream with the same name, you can use this input parameter to specify which of the\n   *             two streams you want to list the consumers for. </p>\n   *         <p>You can't specify this parameter if you specify the NextToken parameter. </p>\n   */\n  StreamCreationTimestamp?: Date;\n}\n\nexport namespace ListStreamConsumersInput {\n  export const filterSensitiveLog = (obj: ListStreamConsumersInput): any => ({\n    ...obj,\n  });\n}\n\nexport interface ListStreamConsumersOutput {\n  /**\n   * <p>An array of JSON objects. Each object represents one registered consumer.</p>\n   */\n  Consumers?: Consumer[];\n\n  /**\n   * <p>When the number of consumers that are registered with the data stream is greater than\n   *             the default value for the <code>MaxResults</code> parameter, or if you explicitly\n   *             specify a value for <code>MaxResults</code> that is less than the number of registered\n   *             consumers, the response includes a pagination token named <code>NextToken</code>. You\n   *             can specify this <code>NextToken</code> value in a subsequent call to\n   *                 <code>ListStreamConsumers</code> to list the next set of registered consumers. For\n   *             more information about the use of this pagination token when calling the\n   *                 <code>ListStreamConsumers</code> operation, see <a>ListStreamConsumersInput$NextToken</a>.</p>\n   *         <important>\n   *             <p>Tokens expire after 300 seconds. When you obtain a value for\n   *                     <code>NextToken</code> in the response to a call to\n   *                     <code>ListStreamConsumers</code>, you have 300 seconds to use that value. If you\n   *                 specify an expired token in a call to <code>ListStreamConsumers</code>, you get\n   *                     <code>ExpiredNextTokenException</code>.</p>\n   *         </important>\n   */\n  NextToken?: string;\n}\n\nexport namespace ListStreamConsumersOutput {\n  export const filterSensitiveLog = (obj: ListStreamConsumersOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the input for <code>ListStreams</code>.</p>\n */\nexport interface ListStreamsInput {\n  /**\n   * <p>The maximum number of streams to list.</p>\n   */\n  Limit?: number;\n\n  /**\n   * <p>The name of the stream to start the list with.</p>\n   */\n  ExclusiveStartStreamName?: string;\n}\n\nexport namespace ListStreamsInput {\n  export const filterSensitiveLog = (obj: ListStreamsInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the output for <code>ListStreams</code>.</p>\n */\nexport interface ListStreamsOutput {\n  /**\n   * <p>The names of the streams that are associated with the AWS account making the\n   *                 <code>ListStreams</code> request.</p>\n   */\n  StreamNames: string[] | undefined;\n\n  /**\n   * <p>If set to <code>true</code>, there are more streams available to list.</p>\n   */\n  HasMoreStreams: boolean | undefined;\n}\n\nexport namespace ListStreamsOutput {\n  export const filterSensitiveLog = (obj: ListStreamsOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the input for <code>ListTagsForStream</code>.</p>\n */\nexport interface ListTagsForStreamInput {\n  /**\n   * <p>The name of the stream.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>The key to use as the starting point for the list of tags. If this parameter is\n   *             set, <code>ListTagsForStream</code> gets all tags that occur after\n   *                 <code>ExclusiveStartTagKey</code>. </p>\n   */\n  ExclusiveStartTagKey?: string;\n\n  /**\n   * <p>The number of tags to return. If this number is less than the total number of tags\n   *             associated with the stream, <code>HasMoreTags</code> is set to <code>true</code>. To\n   *             list additional tags, set <code>ExclusiveStartTagKey</code> to the last key in the\n   *             response.</p>\n   */\n  Limit?: number;\n}\n\nexport namespace ListTagsForStreamInput {\n  export const filterSensitiveLog = (obj: ListTagsForStreamInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Metadata assigned to the stream, consisting of a key-value pair.</p>\n */\nexport interface Tag {\n  /**\n   * <p>A unique identifier for the tag. Maximum length: 128 characters. Valid characters:\n   *             Unicode letters, digits, white space, _ . / = + - % @</p>\n   */\n  Key: string | undefined;\n\n  /**\n   * <p>An optional string, typically used to describe or define the tag. Maximum length:\n   *             256 characters. Valid characters: Unicode letters, digits, white space, _ . / = + - %\n   *             @</p>\n   */\n  Value?: string;\n}\n\nexport namespace Tag {\n  export const filterSensitiveLog = (obj: Tag): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the output for <code>ListTagsForStream</code>.</p>\n */\nexport interface ListTagsForStreamOutput {\n  /**\n   * <p>A list of tags associated with <code>StreamName</code>, starting with the first tag\n   *             after <code>ExclusiveStartTagKey</code> and up to the specified <code>Limit</code>.\n   *         </p>\n   */\n  Tags: Tag[] | undefined;\n\n  /**\n   * <p>If set to <code>true</code>, more tags are available. To request additional tags,\n   *             set <code>ExclusiveStartTagKey</code> to the key of the last tag returned.</p>\n   */\n  HasMoreTags: boolean | undefined;\n}\n\nexport namespace ListTagsForStreamOutput {\n  export const filterSensitiveLog = (obj: ListTagsForStreamOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the input for <code>MergeShards</code>.</p>\n */\nexport interface MergeShardsInput {\n  /**\n   * <p>The name of the stream for the merge.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>The shard ID of the shard to combine with the adjacent shard for the\n   *             merge.</p>\n   */\n  ShardToMerge: string | undefined;\n\n  /**\n   * <p>The shard ID of the adjacent shard for the merge.</p>\n   */\n  AdjacentShardToMerge: string | undefined;\n}\n\nexport namespace MergeShardsInput {\n  export const filterSensitiveLog = (obj: MergeShardsInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the input for <code>PutRecord</code>.</p>\n */\nexport interface PutRecordInput {\n  /**\n   * <p>The name of the stream to put the data record into.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>The data blob to put into the record, which is base64-encoded when the blob is\n   *             serialized. When the data blob (the payload before base64-encoding) is added to the\n   *             partition key size, the total size must not exceed the maximum record size (1\n   *             MiB).</p>\n   */\n  Data: Uint8Array | undefined;\n\n  /**\n   * <p>Determines which shard in the stream the data record is assigned to. Partition keys\n   *             are Unicode strings with a maximum length limit of 256 characters for each key. Amazon\n   *             Kinesis Data Streams uses the partition key as input to a hash function that maps the\n   *             partition key and associated data to a specific shard. Specifically, an MD5 hash\n   *             function is used to map partition keys to 128-bit integer values and to map associated\n   *             data records to shards. As a result of this hashing mechanism, all data records with the\n   *             same partition key map to the same shard within the stream.</p>\n   */\n  PartitionKey: string | undefined;\n\n  /**\n   * <p>The hash value used to explicitly determine the shard the data record is assigned\n   *             to by overriding the partition key hash.</p>\n   */\n  ExplicitHashKey?: string;\n\n  /**\n   * <p>Guarantees strictly increasing sequence numbers, for puts from the same client and\n   *             to the same partition key. Usage: set the <code>SequenceNumberForOrdering</code> of\n   *             record <i>n</i> to the sequence number of record <i>n-1</i>\n   *             (as returned in the result when putting record <i>n-1</i>). If this\n   *             parameter is not set, records are coarsely ordered based on arrival time.</p>\n   */\n  SequenceNumberForOrdering?: string;\n}\n\nexport namespace PutRecordInput {\n  export const filterSensitiveLog = (obj: PutRecordInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the output for <code>PutRecord</code>.</p>\n */\nexport interface PutRecordOutput {\n  /**\n   * <p>The shard ID of the shard where the data record was placed.</p>\n   */\n  ShardId: string | undefined;\n\n  /**\n   * <p>The sequence number identifier that was assigned to the put data record. The\n   *             sequence number for the record is unique across all records in the stream. A sequence\n   *             number is the identifier associated with every record put into the stream.</p>\n   */\n  SequenceNumber: string | undefined;\n\n  /**\n   * <p>The encryption type to use on the record. This parameter can be one of the\n   *             following values:</p>\n   *         <ul>\n   *             <li>\n   *                 <p>\n   *                   <code>NONE</code>: Do not encrypt the records in the stream.</p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                   <code>KMS</code>: Use server-side encryption on the records in the stream\n   *                     using a customer-managed AWS KMS key.</p>\n   *             </li>\n   *          </ul>\n   */\n  EncryptionType?: EncryptionType | string;\n}\n\nexport namespace PutRecordOutput {\n  export const filterSensitiveLog = (obj: PutRecordOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the output for <code>PutRecords</code>.</p>\n */\nexport interface PutRecordsRequestEntry {\n  /**\n   * <p>The data blob to put into the record, which is base64-encoded when the blob is\n   *             serialized. When the data blob (the payload before base64-encoding) is added to the\n   *             partition key size, the total size must not exceed the maximum record size (1\n   *             MiB).</p>\n   */\n  Data: Uint8Array | undefined;\n\n  /**\n   * <p>The hash value used to determine explicitly the shard that the data record is\n   *             assigned to by overriding the partition key hash.</p>\n   */\n  ExplicitHashKey?: string;\n\n  /**\n   * <p>Determines which shard in the stream the data record is assigned to. Partition keys\n   *             are Unicode strings with a maximum length limit of 256 characters for each key. Amazon\n   *             Kinesis Data Streams uses the partition key as input to a hash function that maps the\n   *             partition key and associated data to a specific shard. Specifically, an MD5 hash\n   *             function is used to map partition keys to 128-bit integer values and to map associated\n   *             data records to shards. As a result of this hashing mechanism, all data records with the\n   *             same partition key map to the same shard within the stream.</p>\n   */\n  PartitionKey: string | undefined;\n}\n\nexport namespace PutRecordsRequestEntry {\n  export const filterSensitiveLog = (obj: PutRecordsRequestEntry): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>A <code>PutRecords</code> request.</p>\n */\nexport interface PutRecordsInput {\n  /**\n   * <p>The records associated with the request.</p>\n   */\n  Records: PutRecordsRequestEntry[] | undefined;\n\n  /**\n   * <p>The stream name associated with the request.</p>\n   */\n  StreamName: string | undefined;\n}\n\nexport namespace PutRecordsInput {\n  export const filterSensitiveLog = (obj: PutRecordsInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the result of an individual record from a <code>PutRecords</code>\n *             request. A record that is successfully added to a stream includes\n *                 <code>SequenceNumber</code> and <code>ShardId</code> in the result. A record that\n *             fails to be added to the stream includes <code>ErrorCode</code> and\n *                 <code>ErrorMessage</code> in the result.</p>\n */\nexport interface PutRecordsResultEntry {\n  /**\n   * <p>The sequence number for an individual record result.</p>\n   */\n  SequenceNumber?: string;\n\n  /**\n   * <p>The shard ID for an individual record result.</p>\n   */\n  ShardId?: string;\n\n  /**\n   * <p>The error code for an individual record result. <code>ErrorCodes</code> can be\n   *             either <code>ProvisionedThroughputExceededException</code> or\n   *                 <code>InternalFailure</code>.</p>\n   */\n  ErrorCode?: string;\n\n  /**\n   * <p>The error message for an individual record result. An <code>ErrorCode</code> value\n   *             of <code>ProvisionedThroughputExceededException</code> has an error message that\n   *             includes the account ID, stream name, and shard ID. An <code>ErrorCode</code> value of\n   *                 <code>InternalFailure</code> has the error message <code>\"Internal Service\n   *                 Failure\"</code>.</p>\n   */\n  ErrorMessage?: string;\n}\n\nexport namespace PutRecordsResultEntry {\n  export const filterSensitiveLog = (obj: PutRecordsResultEntry): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>\n *             <code>PutRecords</code> results.</p>\n */\nexport interface PutRecordsOutput {\n  /**\n   * <p>The number of unsuccessfully processed records in a <code>PutRecords</code>\n   *             request.</p>\n   */\n  FailedRecordCount?: number;\n\n  /**\n   * <p>An array of successfully and unsuccessfully processed record results, correlated\n   *             with the request by natural ordering. A record that is successfully added to a stream\n   *             includes <code>SequenceNumber</code> and <code>ShardId</code> in the result. A record\n   *             that fails to be added to a stream includes <code>ErrorCode</code> and\n   *                 <code>ErrorMessage</code> in the result.</p>\n   */\n  Records: PutRecordsResultEntry[] | undefined;\n\n  /**\n   * <p>The encryption type used on the records. This parameter can be one of the following\n   *             values:</p>\n   *         <ul>\n   *             <li>\n   *                 <p>\n   *                   <code>NONE</code>: Do not encrypt the records.</p>\n   *             </li>\n   *             <li>\n   *                 <p>\n   *                   <code>KMS</code>: Use server-side encryption on the records using a\n   *                     customer-managed AWS KMS key.</p>\n   *             </li>\n   *          </ul>\n   */\n  EncryptionType?: EncryptionType | string;\n}\n\nexport namespace PutRecordsOutput {\n  export const filterSensitiveLog = (obj: PutRecordsOutput): any => ({\n    ...obj,\n  });\n}\n\nexport interface RegisterStreamConsumerInput {\n  /**\n   * <p>The ARN of the Kinesis data stream that you want to register the consumer with. For\n   *             more info, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams\">Amazon Resource Names (ARNs) and AWS Service Namespaces</a>.</p>\n   */\n  StreamARN: string | undefined;\n\n  /**\n   * <p>For a given Kinesis data stream, each consumer must have a unique name. However,\n   *             consumer names don't have to be unique across data streams.</p>\n   */\n  ConsumerName: string | undefined;\n}\n\nexport namespace RegisterStreamConsumerInput {\n  export const filterSensitiveLog = (obj: RegisterStreamConsumerInput): any => ({\n    ...obj,\n  });\n}\n\nexport interface RegisterStreamConsumerOutput {\n  /**\n   * <p>An object that represents the details of the consumer you registered. When you\n   *             register a consumer, it gets an ARN that is generated by Kinesis Data Streams.</p>\n   */\n  Consumer: Consumer | undefined;\n}\n\nexport namespace RegisterStreamConsumerOutput {\n  export const filterSensitiveLog = (obj: RegisterStreamConsumerOutput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the input for <code>RemoveTagsFromStream</code>.</p>\n */\nexport interface RemoveTagsFromStreamInput {\n  /**\n   * <p>The name of the stream.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>A list of tag keys. Each corresponding tag is removed from the stream.</p>\n   */\n  TagKeys: string[] | undefined;\n}\n\nexport namespace RemoveTagsFromStreamInput {\n  export const filterSensitiveLog = (obj: RemoveTagsFromStreamInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents the input for <code>SplitShard</code>.</p>\n */\nexport interface SplitShardInput {\n  /**\n   * <p>The name of the stream for the shard split.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>The shard ID of the shard to split.</p>\n   */\n  ShardToSplit: string | undefined;\n\n  /**\n   * <p>A hash key value for the starting hash key of one of the child shards created by\n   *             the split. The hash key range for a given shard constitutes a set of ordered contiguous\n   *             positive integers. The value for <code>NewStartingHashKey</code> must be in the range of\n   *             hash keys being mapped into the shard. The <code>NewStartingHashKey</code> hash key\n   *             value and all higher hash key values in hash key range are distributed to one of the\n   *             child shards. All the lower hash key values in the range are distributed to the other\n   *             child shard.</p>\n   */\n  NewStartingHashKey: string | undefined;\n}\n\nexport namespace SplitShardInput {\n  export const filterSensitiveLog = (obj: SplitShardInput): any => ({\n    ...obj,\n  });\n}\n\nexport interface StartStreamEncryptionInput {\n  /**\n   * <p>The name of the stream for which to start encrypting records.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>The encryption type to use. The only valid value is <code>KMS</code>.</p>\n   */\n  EncryptionType: EncryptionType | string | undefined;\n\n  /**\n   * <p>The GUID for the customer-managed AWS KMS key to use for encryption. This value can\n   *             be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either\n   *             an alias or a key, or an alias name prefixed by \"alias/\".You can also use a master key\n   *             owned by Kinesis Data Streams by specifying the alias\n   *             <code>aws/kinesis</code>.</p>\n   *         <ul>\n   *             <li>\n   *                 <p>Key ARN example:\n   *                         <code>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>Alias ARN example:\n   *                         <code>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>Globally unique key ID example:\n   *                         <code>12345678-1234-1234-1234-123456789012</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>Alias name example: <code>alias/MyAliasName</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>Master key owned by Kinesis Data Streams:\n   *                     <code>alias/aws/kinesis</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  KeyId: string | undefined;\n}\n\nexport namespace StartStreamEncryptionInput {\n  export const filterSensitiveLog = (obj: StartStreamEncryptionInput): any => ({\n    ...obj,\n  });\n}\n\nexport interface StopStreamEncryptionInput {\n  /**\n   * <p>The name of the stream on which to stop encrypting records.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>The encryption type. The only valid value is <code>KMS</code>.</p>\n   */\n  EncryptionType: EncryptionType | string | undefined;\n\n  /**\n   * <p>The GUID for the customer-managed AWS KMS key to use for encryption. This value can\n   *             be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either\n   *             an alias or a key, or an alias name prefixed by \"alias/\".You can also use a master key\n   *             owned by Kinesis Data Streams by specifying the alias\n   *             <code>aws/kinesis</code>.</p>\n   *         <ul>\n   *             <li>\n   *                 <p>Key ARN example:\n   *                         <code>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>Alias ARN example:\n   *                         <code>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>Globally unique key ID example:\n   *                         <code>12345678-1234-1234-1234-123456789012</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>Alias name example: <code>alias/MyAliasName</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                 <p>Master key owned by Kinesis Data Streams:\n   *                     <code>alias/aws/kinesis</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   */\n  KeyId: string | undefined;\n}\n\nexport namespace StopStreamEncryptionInput {\n  export const filterSensitiveLog = (obj: StopStreamEncryptionInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p></p>\n */\nexport interface StartingPosition {\n  /**\n   * <p>You can set the starting position to one of the following values:</p>\n   *         <p>\n   *             <code>AT_SEQUENCE_NUMBER</code>: Start streaming from the position denoted by the\n   *             sequence number specified in the <code>SequenceNumber</code> field.</p>\n   *         <p>\n   *             <code>AFTER_SEQUENCE_NUMBER</code>: Start streaming right after the position denoted\n   *             by the sequence number specified in the <code>SequenceNumber</code> field.</p>\n   *         <p>\n   *             <code>AT_TIMESTAMP</code>: Start streaming from the position denoted by the time stamp\n   *             specified in the <code>Timestamp</code> field.</p>\n   *         <p>\n   *             <code>TRIM_HORIZON</code>: Start streaming at the last untrimmed record in the shard,\n   *             which is the oldest data record in the shard.</p>\n   *         <p>\n   *             <code>LATEST</code>: Start streaming just after the most recent record in the shard,\n   *             so that you always read the most recent data in the shard.</p>\n   */\n  Type: ShardIteratorType | string | undefined;\n\n  /**\n   * <p>The sequence number of the data record in the shard from which to start streaming. To\n   *             specify a sequence number, set <code>StartingPosition</code> to\n   *                 <code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>.</p>\n   */\n  SequenceNumber?: string;\n\n  /**\n   * <p>The time stamp of the data record from which to start reading. To specify a time\n   *             stamp, set <code>StartingPosition</code> to <code>Type AT_TIMESTAMP</code>. A time stamp\n   *             is the Unix epoch date with precision in milliseconds. For example,\n   *                 <code>2016-04-04T19:58:46.480-00:00</code> or <code>1459799926.480</code>. If a\n   *             record with this exact time stamp does not exist, records will be streamed from the next\n   *             (later) record. If the time stamp is older than the current trim horizon, records will\n   *             be streamed from the oldest untrimmed data record (<code>TRIM_HORIZON</code>).</p>\n   */\n  Timestamp?: Date;\n}\n\nexport namespace StartingPosition {\n  export const filterSensitiveLog = (obj: StartingPosition): any => ({\n    ...obj,\n  });\n}\n\nexport interface SubscribeToShardInput {\n  /**\n   * <p>For this parameter, use the value you obtained when you called <a>RegisterStreamConsumer</a>.</p>\n   */\n  ConsumerARN: string | undefined;\n\n  /**\n   * <p>The ID of the shard you want to subscribe to. To see a list of all the shards for a\n   *             given stream, use <a>ListShards</a>.</p>\n   */\n  ShardId: string | undefined;\n\n  /**\n   * <p></p>\n   */\n  StartingPosition: StartingPosition | undefined;\n}\n\nexport namespace SubscribeToShardInput {\n  export const filterSensitiveLog = (obj: SubscribeToShardInput): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>After you call <a>SubscribeToShard</a>, Kinesis Data Streams sends events\n *             of this type over an HTTP/2 connection to your consumer.</p>\n */\nexport interface SubscribeToShardEvent {\n  /**\n   * <p></p>\n   */\n  Records: _Record[] | undefined;\n\n  /**\n   * <p>Use this as <code>SequenceNumber</code> in the next call to <a>SubscribeToShard</a>, with <code>StartingPosition</code> set to\n   *                 <code>AT_SEQUENCE_NUMBER</code> or <code>AFTER_SEQUENCE_NUMBER</code>. Use\n   *                 <code>ContinuationSequenceNumber</code> for checkpointing because it captures your\n   *             shard progress even when no data is written to the shard.</p>\n   */\n  ContinuationSequenceNumber: string | undefined;\n\n  /**\n   * <p>The number of milliseconds the read records are from the tip of the stream, indicating\n   *             how far behind current time the consumer is. A value of zero indicates that record\n   *             processing is caught up, and there are no new records to process at this moment.</p>\n   */\n  MillisBehindLatest: number | undefined;\n\n  ChildShards?: ChildShard[];\n}\n\nexport namespace SubscribeToShardEvent {\n  export const filterSensitiveLog = (obj: SubscribeToShardEvent): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>This is a tagged union for all of the types of events an enhanced fan-out consumer can\n *             receive over HTTP/2 after a call to <a>SubscribeToShard</a>.</p>\n */\nexport type SubscribeToShardEventStream =\n  | SubscribeToShardEventStream.InternalFailureExceptionMember\n  | SubscribeToShardEventStream.KMSAccessDeniedExceptionMember\n  | SubscribeToShardEventStream.KMSDisabledExceptionMember\n  | SubscribeToShardEventStream.KMSInvalidStateExceptionMember\n  | SubscribeToShardEventStream.KMSNotFoundExceptionMember\n  | SubscribeToShardEventStream.KMSOptInRequiredMember\n  | SubscribeToShardEventStream.KMSThrottlingExceptionMember\n  | SubscribeToShardEventStream.ResourceInUseExceptionMember\n  | SubscribeToShardEventStream.ResourceNotFoundExceptionMember\n  | SubscribeToShardEventStream.SubscribeToShardEventMember\n  | SubscribeToShardEventStream.$UnknownMember;\n\nexport namespace SubscribeToShardEventStream {\n  /**\n   * <p>After you call <a>SubscribeToShard</a>, Kinesis Data Streams sends events\n   *             of this type to your consumer. For an example of how to handle these events, see <a href=\"/streams/latest/dev/building-enhanced-consumers-api.html\">Enhanced Fan-Out\n   *                 Using the Kinesis Data Streams API</a>.</p>\n   */\n  export interface SubscribeToShardEventMember {\n    SubscribeToShardEvent: SubscribeToShardEvent;\n    ResourceNotFoundException?: never;\n    ResourceInUseException?: never;\n    KMSDisabledException?: never;\n    KMSInvalidStateException?: never;\n    KMSAccessDeniedException?: never;\n    KMSNotFoundException?: never;\n    KMSOptInRequired?: never;\n    KMSThrottlingException?: never;\n    InternalFailureException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>The requested resource could not be found. The stream might not be specified\n   *             correctly.</p>\n   */\n  export interface ResourceNotFoundExceptionMember {\n    SubscribeToShardEvent?: never;\n    ResourceNotFoundException: ResourceNotFoundException;\n    ResourceInUseException?: never;\n    KMSDisabledException?: never;\n    KMSInvalidStateException?: never;\n    KMSAccessDeniedException?: never;\n    KMSNotFoundException?: never;\n    KMSOptInRequired?: never;\n    KMSThrottlingException?: never;\n    InternalFailureException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>The resource is not available for this operation. For successful operation, the\n   *             resource must be in the <code>ACTIVE</code> state.</p>\n   */\n  export interface ResourceInUseExceptionMember {\n    SubscribeToShardEvent?: never;\n    ResourceNotFoundException?: never;\n    ResourceInUseException: ResourceInUseException;\n    KMSDisabledException?: never;\n    KMSInvalidStateException?: never;\n    KMSAccessDeniedException?: never;\n    KMSNotFoundException?: never;\n    KMSOptInRequired?: never;\n    KMSThrottlingException?: never;\n    InternalFailureException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>The request was rejected because the specified customer master key (CMK) isn't\n   *             enabled.</p>\n   */\n  export interface KMSDisabledExceptionMember {\n    SubscribeToShardEvent?: never;\n    ResourceNotFoundException?: never;\n    ResourceInUseException?: never;\n    KMSDisabledException: KMSDisabledException;\n    KMSInvalidStateException?: never;\n    KMSAccessDeniedException?: never;\n    KMSNotFoundException?: never;\n    KMSOptInRequired?: never;\n    KMSThrottlingException?: never;\n    InternalFailureException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>The request was rejected because the state of the specified resource isn't valid\n   *             for this request. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html\">How Key State Affects Use of a\n   *                 Customer Master Key</a> in the <i>AWS Key Management Service Developer\n   *                 Guide</i>.</p>\n   */\n  export interface KMSInvalidStateExceptionMember {\n    SubscribeToShardEvent?: never;\n    ResourceNotFoundException?: never;\n    ResourceInUseException?: never;\n    KMSDisabledException?: never;\n    KMSInvalidStateException: KMSInvalidStateException;\n    KMSAccessDeniedException?: never;\n    KMSNotFoundException?: never;\n    KMSOptInRequired?: never;\n    KMSThrottlingException?: never;\n    InternalFailureException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>The ciphertext references a key that doesn't exist or that you don't have access\n   *             to.</p>\n   */\n  export interface KMSAccessDeniedExceptionMember {\n    SubscribeToShardEvent?: never;\n    ResourceNotFoundException?: never;\n    ResourceInUseException?: never;\n    KMSDisabledException?: never;\n    KMSInvalidStateException?: never;\n    KMSAccessDeniedException: KMSAccessDeniedException;\n    KMSNotFoundException?: never;\n    KMSOptInRequired?: never;\n    KMSThrottlingException?: never;\n    InternalFailureException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>The request was rejected because the specified entity or resource can't be\n   *             found.</p>\n   */\n  export interface KMSNotFoundExceptionMember {\n    SubscribeToShardEvent?: never;\n    ResourceNotFoundException?: never;\n    ResourceInUseException?: never;\n    KMSDisabledException?: never;\n    KMSInvalidStateException?: never;\n    KMSAccessDeniedException?: never;\n    KMSNotFoundException: KMSNotFoundException;\n    KMSOptInRequired?: never;\n    KMSThrottlingException?: never;\n    InternalFailureException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>The AWS access key ID needs a subscription for the service.</p>\n   */\n  export interface KMSOptInRequiredMember {\n    SubscribeToShardEvent?: never;\n    ResourceNotFoundException?: never;\n    ResourceInUseException?: never;\n    KMSDisabledException?: never;\n    KMSInvalidStateException?: never;\n    KMSAccessDeniedException?: never;\n    KMSNotFoundException?: never;\n    KMSOptInRequired: KMSOptInRequired;\n    KMSThrottlingException?: never;\n    InternalFailureException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>The request was denied due to request throttling. For more information about\n   *             throttling, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second\">Limits</a> in\n   *             the <i>AWS Key Management Service Developer Guide</i>.</p>\n   */\n  export interface KMSThrottlingExceptionMember {\n    SubscribeToShardEvent?: never;\n    ResourceNotFoundException?: never;\n    ResourceInUseException?: never;\n    KMSDisabledException?: never;\n    KMSInvalidStateException?: never;\n    KMSAccessDeniedException?: never;\n    KMSNotFoundException?: never;\n    KMSOptInRequired?: never;\n    KMSThrottlingException: KMSThrottlingException;\n    InternalFailureException?: never;\n    $unknown?: never;\n  }\n\n  /**\n   * <p>The processing of the request failed because of an unknown error, exception, or\n   *             failure.</p>\n   */\n  export interface InternalFailureExceptionMember {\n    SubscribeToShardEvent?: never;\n    ResourceNotFoundException?: never;\n    ResourceInUseException?: never;\n    KMSDisabledException?: never;\n    KMSInvalidStateException?: never;\n    KMSAccessDeniedException?: never;\n    KMSNotFoundException?: never;\n    KMSOptInRequired?: never;\n    KMSThrottlingException?: never;\n    InternalFailureException: InternalFailureException;\n    $unknown?: never;\n  }\n\n  export interface $UnknownMember {\n    SubscribeToShardEvent?: never;\n    ResourceNotFoundException?: never;\n    ResourceInUseException?: never;\n    KMSDisabledException?: never;\n    KMSInvalidStateException?: never;\n    KMSAccessDeniedException?: never;\n    KMSNotFoundException?: never;\n    KMSOptInRequired?: never;\n    KMSThrottlingException?: never;\n    InternalFailureException?: never;\n    $unknown: [string, any];\n  }\n\n  export interface Visitor<T> {\n    SubscribeToShardEvent: (value: SubscribeToShardEvent) => T;\n    ResourceNotFoundException: (value: ResourceNotFoundException) => T;\n    ResourceInUseException: (value: ResourceInUseException) => T;\n    KMSDisabledException: (value: KMSDisabledException) => T;\n    KMSInvalidStateException: (value: KMSInvalidStateException) => T;\n    KMSAccessDeniedException: (value: KMSAccessDeniedException) => T;\n    KMSNotFoundException: (value: KMSNotFoundException) => T;\n    KMSOptInRequired: (value: KMSOptInRequired) => T;\n    KMSThrottlingException: (value: KMSThrottlingException) => T;\n    InternalFailureException: (value: InternalFailureException) => T;\n    _: (name: string, value: any) => T;\n  }\n\n  export const visit = <T>(value: SubscribeToShardEventStream, visitor: Visitor<T>): T => {\n    if (value.SubscribeToShardEvent !== undefined) return visitor.SubscribeToShardEvent(value.SubscribeToShardEvent);\n    if (value.ResourceNotFoundException !== undefined)\n      return visitor.ResourceNotFoundException(value.ResourceNotFoundException);\n    if (value.ResourceInUseException !== undefined) return visitor.ResourceInUseException(value.ResourceInUseException);\n    if (value.KMSDisabledException !== undefined) return visitor.KMSDisabledException(value.KMSDisabledException);\n    if (value.KMSInvalidStateException !== undefined)\n      return visitor.KMSInvalidStateException(value.KMSInvalidStateException);\n    if (value.KMSAccessDeniedException !== undefined)\n      return visitor.KMSAccessDeniedException(value.KMSAccessDeniedException);\n    if (value.KMSNotFoundException !== undefined) return visitor.KMSNotFoundException(value.KMSNotFoundException);\n    if (value.KMSOptInRequired !== undefined) return visitor.KMSOptInRequired(value.KMSOptInRequired);\n    if (value.KMSThrottlingException !== undefined) return visitor.KMSThrottlingException(value.KMSThrottlingException);\n    if (value.InternalFailureException !== undefined)\n      return visitor.InternalFailureException(value.InternalFailureException);\n    return visitor._(value.$unknown[0], value.$unknown[1]);\n  };\n\n  export const filterSensitiveLog = (obj: SubscribeToShardEventStream): any => {\n    if (obj.SubscribeToShardEvent !== undefined)\n      return { SubscribeToShardEvent: SubscribeToShardEvent.filterSensitiveLog(obj.SubscribeToShardEvent) };\n    if (obj.ResourceNotFoundException !== undefined)\n      return { ResourceNotFoundException: ResourceNotFoundException.filterSensitiveLog(obj.ResourceNotFoundException) };\n    if (obj.ResourceInUseException !== undefined)\n      return { ResourceInUseException: ResourceInUseException.filterSensitiveLog(obj.ResourceInUseException) };\n    if (obj.KMSDisabledException !== undefined)\n      return { KMSDisabledException: KMSDisabledException.filterSensitiveLog(obj.KMSDisabledException) };\n    if (obj.KMSInvalidStateException !== undefined)\n      return { KMSInvalidStateException: KMSInvalidStateException.filterSensitiveLog(obj.KMSInvalidStateException) };\n    if (obj.KMSAccessDeniedException !== undefined)\n      return { KMSAccessDeniedException: KMSAccessDeniedException.filterSensitiveLog(obj.KMSAccessDeniedException) };\n    if (obj.KMSNotFoundException !== undefined)\n      return { KMSNotFoundException: KMSNotFoundException.filterSensitiveLog(obj.KMSNotFoundException) };\n    if (obj.KMSOptInRequired !== undefined)\n      return { KMSOptInRequired: KMSOptInRequired.filterSensitiveLog(obj.KMSOptInRequired) };\n    if (obj.KMSThrottlingException !== undefined)\n      return { KMSThrottlingException: KMSThrottlingException.filterSensitiveLog(obj.KMSThrottlingException) };\n    if (obj.InternalFailureException !== undefined)\n      return { InternalFailureException: InternalFailureException.filterSensitiveLog(obj.InternalFailureException) };\n    if (obj.$unknown !== undefined) return { [obj.$unknown[0]]: \"UNKNOWN\" };\n  };\n}\n\nexport interface SubscribeToShardOutput {\n  /**\n   * <p>The event stream that your consumer can use to read records from the shard.</p>\n   */\n  EventStream: AsyncIterable<SubscribeToShardEventStream> | undefined;\n}\n\nexport namespace SubscribeToShardOutput {\n  export const filterSensitiveLog = (obj: SubscribeToShardOutput): any => ({\n    ...obj,\n    ...(obj.EventStream && { EventStream: \"STREAMING_CONTENT\" }),\n  });\n}\n\nexport enum ScalingType {\n  UNIFORM_SCALING = \"UNIFORM_SCALING\",\n}\n\nexport interface UpdateShardCountInput {\n  /**\n   * <p>The name of the stream.</p>\n   */\n  StreamName: string | undefined;\n\n  /**\n   * <p>The new number of shards. This value has the following default limits. By default,\n   *             you cannot do the following: </p>\n   *         <ul>\n   *             <li>\n   *                 <p>Set this value to more than double your current shard count for a\n   *                     stream.</p>\n   *             </li>\n   *             <li>\n   *                 <p>Set this value below half your current shard count for a stream.</p>\n   *             </li>\n   *             <li>\n   *                 <p>Set this value to more than 500 shards in a stream (the default limit for\n   *                     shard count per stream is 500 per account per region), unless you request a\n   *                     limit increase.</p>\n   *             </li>\n   *             <li>\n   *                 <p>Scale a stream with more than 500 shards down unless you set this value to\n   *                     less than 500 shards.</p>\n   *             </li>\n   *          </ul>\n   */\n  TargetShardCount: number | undefined;\n\n  /**\n   * <p>The scaling type. Uniform scaling creates shards of equal size.</p>\n   */\n  ScalingType: ScalingType | string | undefined;\n}\n\nexport namespace UpdateShardCountInput {\n  export const filterSensitiveLog = (obj: UpdateShardCountInput): any => ({\n    ...obj,\n  });\n}\n\nexport interface UpdateShardCountOutput {\n  /**\n   * <p>The name of the stream.</p>\n   */\n  StreamName?: string;\n\n  /**\n   * <p>The current number of shards.</p>\n   */\n  CurrentShardCount?: number;\n\n  /**\n   * <p>The updated number of shards.</p>\n   */\n  TargetShardCount?: number;\n}\n\nexport namespace UpdateShardCountOutput {\n  export const filterSensitiveLog = (obj: UpdateShardCountOutput): any => ({\n    ...obj,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}