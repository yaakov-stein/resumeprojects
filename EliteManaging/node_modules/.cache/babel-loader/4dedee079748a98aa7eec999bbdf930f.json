{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DescribeVoicesInput, DescribeVoicesOutput } from \"../models/models_0\";\nimport { deserializeAws_restJson1DescribeVoicesCommand, serializeAws_restJson1DescribeVoicesCommand } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Returns the list of voices that are available for use when requesting speech synthesis.\n *       Each voice speaks a specified language, is either male or female, and is identified by an ID,\n *       which is the ASCII version of the voice name. </p>\n *\n *          <p>When synthesizing speech ( <code>SynthesizeSpeech</code> ), you provide the voice ID\n *       for the voice you want from the list of voices returned by\n *       <code>DescribeVoices</code>.</p>\n *\n *          <p>For example, you want your news reader application to read news in a specific language,\n *       but giving a user the option to choose the voice. Using the <code>DescribeVoices</code>\n *       operation you can provide the user with a list of available voices to select from.</p>\n *\n *          <p> You can optionally specify a language code to filter the available voices. For\n *       example, if you specify <code>en-US</code>, the operation returns a list of all available US\n *       English voices. </p>\n *          <p>This operation requires permissions to perform the <code>polly:DescribeVoices</code>\n *       action.</p>\n */\n\nvar DescribeVoicesCommand =\n/** @class */\nfunction (_super) {\n  __extends(DescribeVoicesCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function DescribeVoicesCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  DescribeVoicesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"PollyClient\";\n    var commandName = \"DescribeVoicesCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DescribeVoicesInput.filterSensitiveLog,\n      outputFilterSensitiveLog: DescribeVoicesOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  DescribeVoicesCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1DescribeVoicesCommand(input, context);\n  };\n\n  DescribeVoicesCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1DescribeVoicesCommand(output, context);\n  };\n\n  return DescribeVoicesCommand;\n}($Command);\n\nexport { DescribeVoicesCommand };","map":{"version":3,"mappings":";AACA,SAASA,mBAAT,EAA8BC,oBAA9B,QAA0D,oBAA1D;AACA,SACEC,6CADF,EAEEC,2CAFF,QAGO,4BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;AAmBA;AAAA;AAAA;EAA2CC,yCAA3C,CAKE;EACA;;;EAEA,+BAAqBC,KAArB,EAAsD;IAAtD,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAiC,CAGpD;EACD;EAED;;;;;EAGAC,8DACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,aAAnB;IACA,IAAMC,WAAW,GAAG,uBAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,mBAAmB,CAAC0B,kBAJU;MAKvDC,wBAAwB,EAAE1B,oBAAoB,CAACyB;IALQ,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,4CAAR,UAAkBH,KAAlB,EAAqDuB,OAArD,EAA4E;IAC1E,OAAO5B,2CAA2C,CAACK,KAAD,EAAQuB,OAAR,CAAlD;EACD,CAFO;;EAIApB,8CAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO7B,6CAA6C,CAAC8B,MAAD,EAASD,OAAT,CAApD;EACD,CAFO;;EAMV;AAAC,CAtDD,CAA2CzB,QAA3C","names":["DescribeVoicesInput","DescribeVoicesOutput","deserializeAws_restJson1DescribeVoicesCommand","serializeAws_restJson1DescribeVoicesCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","DescribeVoicesCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-polly\\commands\\DescribeVoicesCommand.ts"],"sourcesContent":["import { PollyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../PollyClient\";\nimport { DescribeVoicesInput, DescribeVoicesOutput } from \"../models/models_0\";\nimport {\n  deserializeAws_restJson1DescribeVoicesCommand,\n  serializeAws_restJson1DescribeVoicesCommand,\n} from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type DescribeVoicesCommandInput = DescribeVoicesInput;\nexport type DescribeVoicesCommandOutput = DescribeVoicesOutput & __MetadataBearer;\n\n/**\n * <p>Returns the list of voices that are available for use when requesting speech synthesis.\n *       Each voice speaks a specified language, is either male or female, and is identified by an ID,\n *       which is the ASCII version of the voice name. </p>\n *\n *          <p>When synthesizing speech ( <code>SynthesizeSpeech</code> ), you provide the voice ID\n *       for the voice you want from the list of voices returned by\n *       <code>DescribeVoices</code>.</p>\n *\n *          <p>For example, you want your news reader application to read news in a specific language,\n *       but giving a user the option to choose the voice. Using the <code>DescribeVoices</code>\n *       operation you can provide the user with a list of available voices to select from.</p>\n *\n *          <p> You can optionally specify a language code to filter the available voices. For\n *       example, if you specify <code>en-US</code>, the operation returns a list of all available US\n *       English voices. </p>\n *          <p>This operation requires permissions to perform the <code>polly:DescribeVoices</code>\n *       action.</p>\n */\nexport class DescribeVoicesCommand extends $Command<\n  DescribeVoicesCommandInput,\n  DescribeVoicesCommandOutput,\n  PollyClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: DescribeVoicesCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: PollyClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<DescribeVoicesCommandInput, DescribeVoicesCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"PollyClient\";\n    const commandName = \"DescribeVoicesCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: DescribeVoicesInput.filterSensitiveLog,\n      outputFilterSensitiveLog: DescribeVoicesOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: DescribeVoicesCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restJson1DescribeVoicesCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<DescribeVoicesCommandOutput> {\n    return deserializeAws_restJson1DescribeVoicesCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}