{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SetIdentityPoolRolesInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1SetIdentityPoolRolesCommand, serializeAws_json1_1SetIdentityPoolRolesCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getAwsAuthPlugin } from \"@aws-sdk/middleware-signing\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Sets the roles for an identity pool. These roles are used when making calls to <a>GetCredentialsForIdentity</a> action.</p>\n *          <p>You must use AWS Developer credentials to call this API.</p>\n */\n\nvar SetIdentityPoolRolesCommand =\n/** @class */\nfunction (_super) {\n  __extends(SetIdentityPoolRolesCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function SetIdentityPoolRolesCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  SetIdentityPoolRolesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getAwsAuthPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"CognitoIdentityClient\";\n    var commandName = \"SetIdentityPoolRolesCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: SetIdentityPoolRolesInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  SetIdentityPoolRolesCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1SetIdentityPoolRolesCommand(input, context);\n  };\n\n  SetIdentityPoolRolesCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1SetIdentityPoolRolesCommand(output, context);\n  };\n\n  return SetIdentityPoolRolesCommand;\n}($Command);\n\nexport { SetIdentityPoolRolesCommand };","map":{"version":3,"mappings":";AACA,SAASA,yBAAT,QAA0C,oBAA1C;AACA,SACEC,iDADF,EAEEC,+CAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;AAIA;AAAA;AAAA;EAAiDC,+CAAjD,CAKE;EACA;;;EAEA,qCAAqBC,KAArB,EAA4D;IAA5D,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAuC,CAG1D;EACD;EAED;;;;;EAGAC,oEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBb,cAAc,CAACU,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,KAAKH,eAAL,CAAqBC,GAArB,CAAyBZ,gBAAgB,CAACS,aAAD,CAAzC;IAEA,IAAMM,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,uBAAnB;IACA,IAAMC,WAAW,GAAG,6BAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,yBAAyB,CAAC0B,kBAJI;MAKvDC,wBAAwB,EAAE,UAACC,MAAD,EAAY;QAAK;MAAM;IALM,CAAzD;IAOQ,kBAAc,GAAKf,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACU,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDhB,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CA1BD;;EA4BQZ,kDAAR,UAAkBH,KAAlB,EAA2DwB,OAA3D,EAAkF;IAChF,OAAO9B,+CAA+C,CAACM,KAAD,EAAQwB,OAAR,CAAtD;EACD,CAFO;;EAIArB,oDAAR,UAAoBiB,MAApB,EAA4CI,OAA5C,EAAmE;IACjE,OAAO/B,iDAAiD,CAAC2B,MAAD,EAASI,OAAT,CAAxD;EACD,CAFO;;EAMV;AAAC,CAvDD,CAAiD1B,QAAjD","names":["SetIdentityPoolRolesInput","deserializeAws_json1_1SetIdentityPoolRolesCommand","serializeAws_json1_1SetIdentityPoolRolesCommand","getSerdePlugin","getAwsAuthPlugin","Command","$Command","__extends","input","_super","_this","SetIdentityPoolRolesCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","resolve","request","handle","context"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-cognito-identity\\commands\\SetIdentityPoolRolesCommand.ts"],"sourcesContent":["import { CognitoIdentityClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../CognitoIdentityClient\";\nimport { SetIdentityPoolRolesInput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1SetIdentityPoolRolesCommand,\n  serializeAws_json1_1SetIdentityPoolRolesCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getAwsAuthPlugin } from \"@aws-sdk/middleware-signing\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type SetIdentityPoolRolesCommandInput = SetIdentityPoolRolesInput;\nexport type SetIdentityPoolRolesCommandOutput = __MetadataBearer;\n\n/**\n * <p>Sets the roles for an identity pool. These roles are used when making calls to <a>GetCredentialsForIdentity</a> action.</p>\n *          <p>You must use AWS Developer credentials to call this API.</p>\n */\nexport class SetIdentityPoolRolesCommand extends $Command<\n  SetIdentityPoolRolesCommandInput,\n  SetIdentityPoolRolesCommandOutput,\n  CognitoIdentityClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: SetIdentityPoolRolesCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: CognitoIdentityClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<SetIdentityPoolRolesCommandInput, SetIdentityPoolRolesCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getAwsAuthPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"CognitoIdentityClient\";\n    const commandName = \"SetIdentityPoolRolesCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: SetIdentityPoolRolesInput.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: SetIdentityPoolRolesCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1SetIdentityPoolRolesCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<SetIdentityPoolRolesCommandOutput> {\n    return deserializeAws_json1_1SetIdentityPoolRolesCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}