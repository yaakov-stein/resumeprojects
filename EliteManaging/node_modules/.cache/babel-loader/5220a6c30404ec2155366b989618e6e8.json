{"ast":null,"code":"import { __assign } from \"tslib\";\nexport var REGION_ENV_NAME = \"AWS_REGION\";\nexport var REGION_INI_NAME = \"region\";\nexport var NODE_REGION_CONFIG_OPTIONS = {\n  environmentVariableSelector: function (env) {\n    return env[REGION_ENV_NAME];\n  },\n  configFileSelector: function (profile) {\n    return profile[REGION_INI_NAME];\n  },\n  default: function () {\n    throw new Error(\"Region is missing\");\n  }\n};\nexport var NODE_REGION_CONFIG_FILE_OPTIONS = {\n  preferredFile: \"credentials\"\n};\nexport var resolveRegionConfig = function (input) {\n  if (!input.region) {\n    throw new Error(\"Region is missing\");\n  }\n\n  return __assign(__assign({}, input), {\n    region: normalizeRegion(input.region)\n  });\n};\n\nvar normalizeRegion = function (region) {\n  if (typeof region === \"string\") {\n    var promisified_1 = Promise.resolve(region);\n    return function () {\n      return promisified_1;\n    };\n  }\n\n  return region;\n};","map":{"version":3,"mappings":";AAGA,OAAO,IAAMA,eAAe,GAAG,YAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,QAAxB;AAEP,OAAO,IAAMC,0BAA0B,GAAkC;EACvEC,2BAA2B,EAAE,UAACC,GAAD,EAAI;IAAK,UAAG,CAACJ,eAAD,CAAH;EAAoB,CADa;EAEvEK,kBAAkB,EAAE,UAACC,OAAD,EAAQ;IAAK,cAAO,CAACL,eAAD,CAAP;EAAwB,CAFc;EAGvEM,OAAO,EAAE;IACP,MAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;EACD;AALsE,CAAlE;AAQP,OAAO,IAAMC,+BAA+B,GAAuB;EACjEC,aAAa,EAAE;AADkD,CAA5D;AAiBP,OAAO,IAAMC,mBAAmB,GAAG,UAAIC,KAAJ,EAAqD;EACtF,IAAI,CAACA,KAAK,CAACC,MAAX,EAAmB;IACjB,MAAM,IAAIL,KAAJ,CAAU,mBAAV,CAAN;EACD;;EACD,6BACKI,KADL,GACU;IACRC,MAAM,EAAEC,eAAe,CAACF,KAAK,CAACC,MAAP;EADf,CADV;AAID,CARM;;AAUP,IAAMC,eAAe,GAAG,UAACD,MAAD,EAAkC;EACxD,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;IAC9B,IAAME,aAAW,GAAGC,OAAO,CAACC,OAAR,CAAgBJ,MAAhB,CAApB;IACA,OAAO;MAAM;IAAW,CAAxB;EACD;;EACD,OAAOA,MAAP;AACD,CAND","names":["REGION_ENV_NAME","REGION_INI_NAME","NODE_REGION_CONFIG_OPTIONS","environmentVariableSelector","env","configFileSelector","profile","default","Error","NODE_REGION_CONFIG_FILE_OPTIONS","preferredFile","resolveRegionConfig","input","region","normalizeRegion","promisified_1","Promise","resolve"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\config-resolver\\src\\RegionConfig.ts"],"sourcesContent":["import { LoadedConfigSelectors, LocalConfigOptions } from \"@aws-sdk/node-config-provider\";\nimport { Provider } from \"@aws-sdk/types\";\n\nexport const REGION_ENV_NAME = \"AWS_REGION\";\nexport const REGION_INI_NAME = \"region\";\n\nexport const NODE_REGION_CONFIG_OPTIONS: LoadedConfigSelectors<string> = {\n  environmentVariableSelector: (env) => env[REGION_ENV_NAME],\n  configFileSelector: (profile) => profile[REGION_INI_NAME],\n  default: () => {\n    throw new Error(\"Region is missing\");\n  },\n};\n\nexport const NODE_REGION_CONFIG_FILE_OPTIONS: LocalConfigOptions = {\n  preferredFile: \"credentials\",\n};\n\nexport interface RegionInputConfig {\n  /**\n   * The AWS region to which this client will send requests\n   */\n  region?: string | Provider<string>;\n}\n\ninterface PreviouslyResolved {}\n\nexport interface RegionResolvedConfig {\n  region: Provider<string>;\n}\n\nexport const resolveRegionConfig = <T>(input: T & RegionInputConfig & PreviouslyResolved): T & RegionResolvedConfig => {\n  if (!input.region) {\n    throw new Error(\"Region is missing\");\n  }\n  return {\n    ...input,\n    region: normalizeRegion(input.region!),\n  };\n};\n\nconst normalizeRegion = (region: string | Provider<string>): Provider<string> => {\n  if (typeof region === \"string\") {\n    const promisified = Promise.resolve(region);\n    return () => promisified;\n  }\n  return region as Provider<string>;\n};\n"]},"metadata":{},"sourceType":"module"}