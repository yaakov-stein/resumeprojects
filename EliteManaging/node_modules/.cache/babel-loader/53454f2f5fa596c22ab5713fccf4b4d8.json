{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { parse as parseArn, validate as validateArn } from \"@aws-sdk/util-arn-parser\";\nimport { bucketHostname } from \"./bucketHostname\";\nimport { getPseudoRegion } from \"./bucketHostnameUtils\";\nexport var bucketEndpointMiddleware = function (options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var bucketName, replaceBucketInPath, request, bucketArn, clientRegion, _a, _b, partition, _c, signingRegion, useArnRegion, _d, hostname, bucketEndpoint, modifiedSigningRegion, signingService, clientRegion, _e, _f, hostname, bucketEndpoint;\n\n        return __generator(this, function (_g) {\n          switch (_g.label) {\n            case 0:\n              bucketName = args.input.Bucket;\n              replaceBucketInPath = options.bucketEndpoint;\n              request = args.request;\n              if (!HttpRequest.isInstance(request)) return [3\n              /*break*/\n              , 8];\n              if (!options.bucketEndpoint) return [3\n              /*break*/\n              , 1];\n              request.hostname = bucketName;\n              return [3\n              /*break*/\n              , 7];\n\n            case 1:\n              if (!validateArn(bucketName)) return [3\n              /*break*/\n              , 5];\n              bucketArn = parseArn(bucketName);\n              _a = getPseudoRegion;\n              return [4\n              /*yield*/\n              , options.region()];\n\n            case 2:\n              clientRegion = _a.apply(void 0, [_g.sent()]);\n              return [4\n              /*yield*/\n              , options.regionInfoProvider(clientRegion)];\n\n            case 3:\n              _b = _g.sent() || {}, partition = _b.partition, _c = _b.signingRegion, signingRegion = _c === void 0 ? clientRegion : _c;\n              return [4\n              /*yield*/\n              , options.useArnRegion()];\n\n            case 4:\n              useArnRegion = _g.sent();\n              _d = bucketHostname({\n                bucketName: bucketArn,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: options.useDualstackEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                useArnRegion: useArnRegion,\n                clientPartition: partition,\n                clientSigningRegion: signingRegion,\n                clientRegion: clientRegion,\n                isCustomEndpoint: options.isCustomEndpoint\n              }), hostname = _d.hostname, bucketEndpoint = _d.bucketEndpoint, modifiedSigningRegion = _d.signingRegion, signingService = _d.signingService; // If the request needs to use a region or service name inferred from ARN that different from client region, we\n              // need to set them in the handler context so the signer will use them\n\n              if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n                context[\"signing_region\"] = modifiedSigningRegion;\n              }\n\n              if (signingService && signingService !== \"s3\") {\n                context[\"signing_service\"] = signingService;\n              }\n\n              request.hostname = hostname;\n              replaceBucketInPath = bucketEndpoint;\n              return [3\n              /*break*/\n              , 7];\n\n            case 5:\n              _e = getPseudoRegion;\n              return [4\n              /*yield*/\n              , options.region()];\n\n            case 6:\n              clientRegion = _e.apply(void 0, [_g.sent()]);\n              _f = bucketHostname({\n                bucketName: bucketName,\n                clientRegion: clientRegion,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: options.useDualstackEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                isCustomEndpoint: options.isCustomEndpoint\n              }), hostname = _f.hostname, bucketEndpoint = _f.bucketEndpoint;\n              request.hostname = hostname;\n              replaceBucketInPath = bucketEndpoint;\n              _g.label = 7;\n\n            case 7:\n              if (replaceBucketInPath) {\n                request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n\n                if (request.path === \"\") {\n                  request.path = \"/\";\n                }\n              }\n\n              _g.label = 8;\n\n            case 8:\n              return [2\n              /*return*/\n              , next(__assign(__assign({}, args), {\n                request: request\n              }))];\n          }\n        });\n      });\n    };\n  };\n};\nexport var bucketEndpointMiddlewareOptions = {\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\",\n  override: true\n};\nexport var getBucketEndpointPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":"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","names":["HttpRequest","parse","parseArn","validate","validateArn","bucketHostname","getPseudoRegion","bucketEndpointMiddleware","options","next","context","args","bucketName","input","Bucket","replaceBucketInPath","bucketEndpoint","request","isInstance","hostname","bucketArn","_a","region","clientRegion","_g","regionInfoProvider","_b","partition","_c","signingRegion","useArnRegion","_d","baseHostname","accelerateEndpoint","useAccelerateEndpoint","dualstackEndpoint","useDualstackEndpoint","pathStyleEndpoint","forcePathStyle","tlsCompatible","protocol","clientPartition","clientSigningRegion","isCustomEndpoint","modifiedSigningRegion","signingService","_e","_f","path","replace","bucketEndpointMiddlewareOptions","tags","name","relation","toMiddleware","override","getBucketEndpointPlugin","applyToStack","clientStack","addRelativeTo"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\middleware-bucket-endpoint\\src\\bucketEndpointMiddleware.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  HandlerExecutionContext,\n  MetadataBearer,\n  Pluggable,\n  RelativeMiddlewareOptions,\n} from \"@aws-sdk/types\";\nimport { parse as parseArn, validate as validateArn } from \"@aws-sdk/util-arn-parser\";\n\nimport { bucketHostname } from \"./bucketHostname\";\nimport { getPseudoRegion } from \"./bucketHostnameUtils\";\nimport { BucketEndpointResolvedConfig } from \"./configurations\";\n\nexport const bucketEndpointMiddleware = (options: BucketEndpointResolvedConfig): BuildMiddleware<any, any> => <\n  Output extends MetadataBearer\n>(\n  next: BuildHandler<any, Output>,\n  context: HandlerExecutionContext\n): BuildHandler<any, Output> => async (args: BuildHandlerArguments<any>): Promise<BuildHandlerOutput<Output>> => {\n  const { Bucket: bucketName } = args.input as { Bucket: string };\n  let replaceBucketInPath = options.bucketEndpoint;\n  const request = args.request;\n  if (HttpRequest.isInstance(request)) {\n    if (options.bucketEndpoint) {\n      request.hostname = bucketName;\n    } else if (validateArn(bucketName)) {\n      const bucketArn = parseArn(bucketName);\n      const clientRegion = getPseudoRegion(await options.region());\n      const { partition, signingRegion = clientRegion } = (await options.regionInfoProvider(clientRegion)) || {};\n      const useArnRegion = await options.useArnRegion();\n      const { hostname, bucketEndpoint, signingRegion: modifiedSigningRegion, signingService } = bucketHostname({\n        bucketName: bucketArn,\n        baseHostname: request.hostname,\n        accelerateEndpoint: options.useAccelerateEndpoint,\n        dualstackEndpoint: options.useDualstackEndpoint,\n        pathStyleEndpoint: options.forcePathStyle,\n        tlsCompatible: request.protocol === \"https:\",\n        useArnRegion,\n        clientPartition: partition,\n        clientSigningRegion: signingRegion,\n        clientRegion: clientRegion,\n        isCustomEndpoint: options.isCustomEndpoint,\n      });\n\n      // If the request needs to use a region or service name inferred from ARN that different from client region, we\n      // need to set them in the handler context so the signer will use them\n      if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n        context[\"signing_region\"] = modifiedSigningRegion;\n      }\n      if (signingService && signingService !== \"s3\") {\n        context[\"signing_service\"] = signingService;\n      }\n\n      request.hostname = hostname;\n      replaceBucketInPath = bucketEndpoint;\n    } else {\n      const clientRegion = getPseudoRegion(await options.region());\n      const { hostname, bucketEndpoint } = bucketHostname({\n        bucketName,\n        clientRegion,\n        baseHostname: request.hostname,\n        accelerateEndpoint: options.useAccelerateEndpoint,\n        dualstackEndpoint: options.useDualstackEndpoint,\n        pathStyleEndpoint: options.forcePathStyle,\n        tlsCompatible: request.protocol === \"https:\",\n        isCustomEndpoint: options.isCustomEndpoint,\n      });\n\n      request.hostname = hostname;\n      replaceBucketInPath = bucketEndpoint;\n    }\n\n    if (replaceBucketInPath) {\n      request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n      if (request.path === \"\") {\n        request.path = \"/\";\n      }\n    }\n  }\n\n  return next({ ...args, request });\n};\n\nexport const bucketEndpointMiddlewareOptions: RelativeMiddlewareOptions = {\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\",\n  override: true,\n};\n\nexport const getBucketEndpointPlugin = (options: BucketEndpointResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}