{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SubscribeToShardInput, SubscribeToShardOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1SubscribeToShardCommand, serializeAws_json1_1SubscribeToShardCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>This operation establishes an HTTP/2 connection between the consumer you specify in\n *             the <code>ConsumerARN</code> parameter and the shard you specify in the\n *                 <code>ShardId</code> parameter. After the connection is successfully established,\n *             Kinesis Data Streams pushes records from the shard to the consumer over this connection.\n *             Before you call this operation, call <a>RegisterStreamConsumer</a> to\n *             register the consumer with Kinesis Data Streams.</p>\n *         <p>When the <code>SubscribeToShard</code> call succeeds, your consumer starts receiving\n *             events of type <a>SubscribeToShardEvent</a> over the HTTP/2 connection for up\n *             to 5 minutes, after which time you need to call <code>SubscribeToShard</code> again to\n *             renew the subscription if you want to continue to receive records.</p>\n *         <p>You can make one call to <code>SubscribeToShard</code> per second per registered\n *             consumer per shard. For example, if you have a 4000 shard stream and two registered\n *             stream consumers, you can make one <code>SubscribeToShard</code> request per second for\n *             each combination of shard and registered consumer, allowing you to subscribe both\n *             consumers to all 4000 shards in one second. </p>\n *         <p>If you call <code>SubscribeToShard</code> again with the same <code>ConsumerARN</code>\n *             and <code>ShardId</code> within 5 seconds of a successful call, you'll get a\n *                 <code>ResourceInUseException</code>. If you call <code>SubscribeToShard</code> 5\n *             seconds or more after a successful call, the first connection will expire and the second\n *             call will take over the subscription.</p>\n *         <p>For an example of how to use this operations, see <a href=\"/streams/latest/dev/building-enhanced-consumers-api.html\">Enhanced Fan-Out\n *                 Using the Kinesis Data Streams API</a>.</p>\n */\n\nvar SubscribeToShardCommand =\n/** @class */\nfunction (_super) {\n  __extends(SubscribeToShardCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function SubscribeToShardCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  SubscribeToShardCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"SubscribeToShardCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: SubscribeToShardInput.filterSensitiveLog,\n      outputFilterSensitiveLog: SubscribeToShardOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  SubscribeToShardCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1SubscribeToShardCommand(input, context);\n  };\n\n  SubscribeToShardCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1SubscribeToShardCommand(output, context);\n  };\n\n  return SubscribeToShardCommand;\n}($Command);\n\nexport { SubscribeToShardCommand };","map":{"version":3,"mappings":";AACA,SAASA,qBAAT,EAAgCC,sBAAhC,QAA8D,oBAA9D;AACA,SACEC,6CADF,EAEEC,2CAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AAAA;AAAA;EAA6CC,2CAA7C,CAKE;EACA;;;EAEA,iCAAqBC,KAArB,EAAwD;IAAxD,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAmC,CAGtD;EACD;EAED;;;;;EAGAC,gEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,eAAnB;IACA,IAAMC,WAAW,GAAG,yBAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,qBAAqB,CAAC0B,kBAJQ;MAKvDC,wBAAwB,EAAE1B,sBAAsB,CAACyB;IALM,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,8CAAR,UAAkBH,KAAlB,EAAuDuB,OAAvD,EAA8E;IAC5E,OAAO5B,2CAA2C,CAACK,KAAD,EAAQuB,OAAR,CAAlD;EACD,CAFO;;EAIApB,gDAAR,UACEqB,MADF,EAEED,OAFF,EAEqD;IAEnD,OAAO7B,6CAA6C,CAAC8B,MAAD,EAASD,OAAT,CAApD;EACD,CALO;;EASV;AAAC,CAzDD,CAA6CzB,QAA7C","names":["SubscribeToShardInput","SubscribeToShardOutput","deserializeAws_json1_1SubscribeToShardCommand","serializeAws_json1_1SubscribeToShardCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","SubscribeToShardCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-kinesis\\commands\\SubscribeToShardCommand.ts"],"sourcesContent":["import { KinesisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../KinesisClient\";\nimport { SubscribeToShardInput, SubscribeToShardOutput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1SubscribeToShardCommand,\n  serializeAws_json1_1SubscribeToShardCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  EventStreamSerdeContext as __EventStreamSerdeContext,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type SubscribeToShardCommandInput = SubscribeToShardInput;\nexport type SubscribeToShardCommandOutput = SubscribeToShardOutput & __MetadataBearer;\n\n/**\n * <p>This operation establishes an HTTP/2 connection between the consumer you specify in\n *             the <code>ConsumerARN</code> parameter and the shard you specify in the\n *                 <code>ShardId</code> parameter. After the connection is successfully established,\n *             Kinesis Data Streams pushes records from the shard to the consumer over this connection.\n *             Before you call this operation, call <a>RegisterStreamConsumer</a> to\n *             register the consumer with Kinesis Data Streams.</p>\n *         <p>When the <code>SubscribeToShard</code> call succeeds, your consumer starts receiving\n *             events of type <a>SubscribeToShardEvent</a> over the HTTP/2 connection for up\n *             to 5 minutes, after which time you need to call <code>SubscribeToShard</code> again to\n *             renew the subscription if you want to continue to receive records.</p>\n *         <p>You can make one call to <code>SubscribeToShard</code> per second per registered\n *             consumer per shard. For example, if you have a 4000 shard stream and two registered\n *             stream consumers, you can make one <code>SubscribeToShard</code> request per second for\n *             each combination of shard and registered consumer, allowing you to subscribe both\n *             consumers to all 4000 shards in one second. </p>\n *         <p>If you call <code>SubscribeToShard</code> again with the same <code>ConsumerARN</code>\n *             and <code>ShardId</code> within 5 seconds of a successful call, you'll get a\n *                 <code>ResourceInUseException</code>. If you call <code>SubscribeToShard</code> 5\n *             seconds or more after a successful call, the first connection will expire and the second\n *             call will take over the subscription.</p>\n *         <p>For an example of how to use this operations, see <a href=\"/streams/latest/dev/building-enhanced-consumers-api.html\">Enhanced Fan-Out\n *                 Using the Kinesis Data Streams API</a>.</p>\n */\nexport class SubscribeToShardCommand extends $Command<\n  SubscribeToShardCommandInput,\n  SubscribeToShardCommandOutput,\n  KinesisClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: SubscribeToShardCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: KinesisClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<SubscribeToShardCommandInput, SubscribeToShardCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"KinesisClient\";\n    const commandName = \"SubscribeToShardCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: SubscribeToShardInput.filterSensitiveLog,\n      outputFilterSensitiveLog: SubscribeToShardOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: SubscribeToShardCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1SubscribeToShardCommand(input, context);\n  }\n\n  private deserialize(\n    output: __HttpResponse,\n    context: __SerdeContext & __EventStreamSerdeContext\n  ): Promise<SubscribeToShardCommandOutput> {\n    return deserializeAws_json1_1SubscribeToShardCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}