{"ast":null,"code":"import { Crc32 } from \"@aws-crypto/crc32\"; // All prelude components are unsigned, 32-bit integers\n\nvar PRELUDE_MEMBER_LENGTH = 4; // The prelude consists of two components\n\nvar PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2; // Checksums are always CRC32 hashes.\n\nvar CHECKSUM_LENGTH = 4; // Messages must include a full prelude, a prelude checksum, and a message checksum\n\nvar MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\n/**\n * @internal\n */\n\nexport function splitMessage(_a) {\n  var byteLength = _a.byteLength,\n      byteOffset = _a.byteOffset,\n      buffer = _a.buffer;\n\n  if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n    throw new Error(\"Provided message too short to accommodate event stream message overhead\");\n  }\n\n  var view = new DataView(buffer, byteOffset, byteLength);\n  var messageLength = view.getUint32(0, false);\n\n  if (byteLength !== messageLength) {\n    throw new Error(\"Reported message length does not match received message length\");\n  }\n\n  var headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n  var expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n  var expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n  var checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n\n  if (expectedPreludeChecksum !== checksummer.digest()) {\n    throw new Error(\"The prelude checksum specified in the message (\" + expectedPreludeChecksum + \") does not match the calculated CRC32 checksum (\" + checksummer.digest() + \")\");\n  }\n\n  checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\n\n  if (expectedMessageChecksum !== checksummer.digest()) {\n    throw new Error(\"The message checksum (\" + checksummer.digest() + \") did not match the expected value of \" + expectedMessageChecksum);\n  }\n\n  return {\n    headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n    body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAsB,mBAAtB,C,CAEA;;AACA,IAAMC,qBAAqB,GAAG,CAA9B,C,CACA;;AACA,IAAMC,cAAc,GAAGD,qBAAqB,GAAG,CAA/C,C,CACA;;AACA,IAAME,eAAe,GAAG,CAAxB,C,CACA;;AACA,IAAMC,sBAAsB,GAAGF,cAAc,GAAGC,eAAe,GAAG,CAAlE;AAUA;;;;AAGA,OAAM,SAAUE,YAAV,CAAuBC,EAAvB,EAA0E;MAAjDC,UAAU;MAAEC,UAAU;MAAEC,MAAM;;EAC3D,IAAIF,UAAU,GAAGH,sBAAjB,EAAyC;IACvC,MAAM,IAAIM,KAAJ,CAAU,yEAAV,CAAN;EACD;;EAED,IAAMC,IAAI,GAAG,IAAIC,QAAJ,CAAaH,MAAb,EAAqBD,UAArB,EAAiCD,UAAjC,CAAb;EAEA,IAAMM,aAAa,GAAGF,IAAI,CAACG,SAAL,CAAe,CAAf,EAAkB,KAAlB,CAAtB;;EAEA,IAAIP,UAAU,KAAKM,aAAnB,EAAkC;IAChC,MAAM,IAAIH,KAAJ,CAAU,gEAAV,CAAN;EACD;;EAED,IAAMK,YAAY,GAAGJ,IAAI,CAACG,SAAL,CAAeb,qBAAf,EAAsC,KAAtC,CAArB;EACA,IAAMe,uBAAuB,GAAGL,IAAI,CAACG,SAAL,CAAeZ,cAAf,EAA+B,KAA/B,CAAhC;EACA,IAAMe,uBAAuB,GAAGN,IAAI,CAACG,SAAL,CAAeP,UAAU,GAAGJ,eAA5B,EAA6C,KAA7C,CAAhC;EAEA,IAAMe,WAAW,GAAG,IAAIlB,KAAJ,GAAYmB,MAAZ,CAAmB,IAAIC,UAAJ,CAAeX,MAAf,EAAuBD,UAAvB,EAAmCN,cAAnC,CAAnB,CAApB;;EACA,IAAIc,uBAAuB,KAAKE,WAAW,CAACG,MAAZ,EAAhC,EAAsD;IACpD,MAAM,IAAIX,KAAJ,CACJ,oDAAkDM,uBAAlD,GAAyE,kDAAzE,GAA4HE,WAAW,CAACG,MAAZ,EAA5H,GAAgJ,GAD5I,CAAN;EAGD;;EAEDH,WAAW,CAACC,MAAZ,CACE,IAAIC,UAAJ,CAAeX,MAAf,EAAuBD,UAAU,GAAGN,cAApC,EAAoDK,UAAU,IAAIL,cAAc,GAAGC,eAArB,CAA9D,CADF;;EAGA,IAAIc,uBAAuB,KAAKC,WAAW,CAACG,MAAZ,EAAhC,EAAsD;IACpD,MAAM,IAAIX,KAAJ,CACJ,2BAAyBQ,WAAW,CAACG,MAAZ,EAAzB,GAA6C,wCAA7C,GAAsFJ,uBADlF,CAAN;EAGD;;EAED,OAAO;IACLK,OAAO,EAAE,IAAIV,QAAJ,CAAaH,MAAb,EAAqBD,UAAU,GAAGN,cAAb,GAA8BC,eAAnD,EAAoEY,YAApE,CADJ;IAELQ,IAAI,EAAE,IAAIH,UAAJ,CACJX,MADI,EAEJD,UAAU,GAAGN,cAAb,GAA8BC,eAA9B,GAAgDY,YAF5C,EAGJF,aAAa,GAAGE,YAAhB,IAAgCb,cAAc,GAAGC,eAAjB,GAAmCA,eAAnE,CAHI;EAFD,CAAP;AAQD","names":["Crc32","PRELUDE_MEMBER_LENGTH","PRELUDE_LENGTH","CHECKSUM_LENGTH","MINIMUM_MESSAGE_LENGTH","splitMessage","_a","byteLength","byteOffset","buffer","Error","view","DataView","messageLength","getUint32","headerLength","expectedPreludeChecksum","expectedMessageChecksum","checksummer","update","Uint8Array","digest","headers","body"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\eventstream-marshaller\\src\\splitMessage.ts"],"sourcesContent":["import { Crc32 } from \"@aws-crypto/crc32\";\n\n// All prelude components are unsigned, 32-bit integers\nconst PRELUDE_MEMBER_LENGTH = 4;\n// The prelude consists of two components\nconst PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\n// Checksums are always CRC32 hashes.\nconst CHECKSUM_LENGTH = 4;\n// Messages must include a full prelude, a prelude checksum, and a message checksum\nconst MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\n\n/**\n * @internal\n */\nexport interface MessageParts {\n  headers: DataView;\n  body: Uint8Array;\n}\n\n/**\n * @internal\n */\nexport function splitMessage({ byteLength, byteOffset, buffer }: ArrayBufferView): MessageParts {\n  if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n    throw new Error(\"Provided message too short to accommodate event stream message overhead\");\n  }\n\n  const view = new DataView(buffer, byteOffset, byteLength);\n\n  const messageLength = view.getUint32(0, false);\n\n  if (byteLength !== messageLength) {\n    throw new Error(\"Reported message length does not match received message length\");\n  }\n\n  const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n  const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n  const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n\n  const checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n  if (expectedPreludeChecksum !== checksummer.digest()) {\n    throw new Error(\n      `The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`\n    );\n  }\n\n  checksummer.update(\n    new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH))\n  );\n  if (expectedMessageChecksum !== checksummer.digest()) {\n    throw new Error(\n      `The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`\n    );\n  }\n\n  return {\n    headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n    body: new Uint8Array(\n      buffer,\n      byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength,\n      messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH)\n    ),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}