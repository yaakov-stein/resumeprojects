{"ast":null,"code":"import { __awaiter, __generator, __values } from \"tslib\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\nvar signingKeyCache = {};\nvar cacheQueue = [];\n/**\n * Create a string describing the scope of credentials used to sign a request.\n *\n * @param shortDate The current calendar date in the form YYYYMMDD.\n * @param region    The AWS region in which the service resides.\n * @param service   The service to which the signed request is being sent.\n */\n\nexport function createScope(shortDate, region, service) {\n  return shortDate + \"/\" + region + \"/\" + service + \"/\" + KEY_TYPE_IDENTIFIER;\n}\n/**\n * Derive a signing key from its composite parts\n *\n * @param sha256Constructor A constructor function that can instantiate SHA-256\n *                          hash objects.\n * @param credentials       The credentials with which the request will be\n *                          signed.\n * @param shortDate         The current calendar date in the form YYYYMMDD.\n * @param region            The AWS region in which the service resides.\n * @param service           The service to which the signed request is being\n *                          sent.\n */\n\nexport var getSigningKey = function (sha256Constructor, credentials, shortDate, region, service) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var credsHash, cacheKey, key, _a, _b, signable, e_1_1;\n\n    var e_1, _c;\n\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)];\n\n        case 1:\n          credsHash = _d.sent();\n          cacheKey = shortDate + \":\" + region + \":\" + service + \":\" + toHex(credsHash) + \":\" + credentials.sessionToken;\n\n          if (cacheKey in signingKeyCache) {\n            return [2\n            /*return*/\n            , signingKeyCache[cacheKey]];\n          }\n\n          cacheQueue.push(cacheKey);\n\n          while (cacheQueue.length > MAX_CACHE_SIZE) {\n            delete signingKeyCache[cacheQueue.shift()];\n          }\n\n          key = \"AWS4\" + credentials.secretAccessKey;\n          _d.label = 2;\n\n        case 2:\n          _d.trys.push([2, 7, 8, 9]);\n\n          _a = __values([shortDate, region, service, KEY_TYPE_IDENTIFIER]), _b = _a.next();\n          _d.label = 3;\n\n        case 3:\n          if (!!_b.done) return [3\n          /*break*/\n          , 6];\n          signable = _b.value;\n          return [4\n          /*yield*/\n          , hmac(sha256Constructor, key, signable)];\n\n        case 4:\n          key = _d.sent();\n          _d.label = 5;\n\n        case 5:\n          _b = _a.next();\n          return [3\n          /*break*/\n          , 3];\n\n        case 6:\n          return [3\n          /*break*/\n          , 9];\n\n        case 7:\n          e_1_1 = _d.sent();\n          e_1 = {\n            error: e_1_1\n          };\n          return [3\n          /*break*/\n          , 9];\n\n        case 8:\n          try {\n            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n\n          return [7\n          /*endfinally*/\n          ];\n\n        case 9:\n          return [2\n          /*return*/\n          , signingKeyCache[cacheKey] = key];\n      }\n    });\n  });\n};\n/**\n * @internal\n */\n\nexport function clearCredentialCache() {\n  cacheQueue.length = 0;\n  Object.keys(signingKeyCache).forEach(function (cacheKey) {\n    delete signingKeyCache[cacheKey];\n  });\n}\n\nfunction hmac(ctor, secret, data) {\n  var hash = new ctor(secret);\n  hash.update(data);\n  return hash.digest();\n}","map":{"version":3,"mappings":";AACA,SAASA,KAAT,QAAsB,4BAAtB;AAEA,SAASC,mBAAT,EAA8BC,cAA9B,QAAoD,aAApD;AAEA,IAAMC,eAAe,GAAkC,EAAvD;AACA,IAAMC,UAAU,GAAkB,EAAlC;AAEA;;;;;;;;AAOA,OAAM,SAAUC,WAAV,CAAsBC,SAAtB,EAAyCC,MAAzC,EAAyDC,OAAzD,EAAwE;EAC5E,OAAUF,SAAS,MAAT,GAAaC,MAAb,GAAmB,GAAnB,GAAuBC,OAAvB,GAA8B,GAA9B,GAAkCP,mBAA5C;AACD;AAED;;;;;;;;;;;;;AAYA,OAAO,IAAMQ,aAAa,GAAG,UAC3BC,iBAD2B,EAE3BC,WAF2B,EAG3BL,SAH2B,EAI3BC,MAJ2B,EAK3BC,OAL2B,EAKZ;EAAA;;;;;;;;UAEG;UAAA;UAAA,EAAMI,IAAI,CAACF,iBAAD,EAAoBC,WAAW,CAACE,eAAhC,EAAiDF,WAAW,CAACG,WAA7D,CAAV;;;UAAZC,SAAS,GAAGC,SAAZ;UACAC,QAAQ,GAAMX,SAAS,MAAT,GAAaC,MAAb,GAAmB,GAAnB,GAAuBC,OAAvB,GAA8B,GAA9B,GAAkCR,KAAK,CAACe,SAAD,CAAvC,GAAkD,GAAlD,GAAsDJ,WAAW,CAACO,YAAhF;;UACN,IAAID,QAAQ,IAAId,eAAhB,EAAiC;YAC/B;YAAA;YAAA,EAAOA,eAAe,CAACc,QAAD,CAAtB;UACD;;UAEDb,UAAU,CAACe,IAAX,CAAgBF,QAAhB;;UACA,OAAOb,UAAU,CAACgB,MAAX,GAAoBlB,cAA3B,EAA2C;YACzC,OAAOC,eAAe,CAACC,UAAU,CAACiB,KAAX,EAAD,CAAtB;UACD;;UAEGC,GAAG,GAAe,SAAOX,WAAW,CAACE,eAArC;;;;;;UACmBU,eAACjB,SAAD,EAAYC,MAAZ,EAAoBC,OAApB,EAA6BP,mBAA7B,IAAiDuB,cAAjD;;;;;;;UAAZC,QAAQ,WAAR;UACH;UAAA;UAAA,EAAMb,IAAI,CAACF,iBAAD,EAAoBY,GAApB,EAAyBG,QAAzB,CAAV;;;UAANH,GAAG,GAAGN,SAAN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAEF;UAAA;UAAA,EAAQb,eAAe,CAACc,QAAD,CAAf,GAA4BK,GAApC;;;GAjBe;AAkBhB,CAvBM;AAyBP;;;;AAGA,OAAM,SAAUI,oBAAV,GAA8B;EAClCtB,UAAU,CAACgB,MAAX,GAAoB,CAApB;EACAO,MAAM,CAACC,IAAP,CAAYzB,eAAZ,EAA6B0B,OAA7B,CAAqC,UAACZ,QAAD,EAAS;IAC5C,OAAOd,eAAe,CAACc,QAAD,CAAtB;EACD,CAFD;AAGD;;AAED,SAASL,IAAT,CAAckB,IAAd,EAAqCC,MAArC,EAAyDC,IAAzD,EAAyE;EACvE,IAAMC,IAAI,GAAG,IAAIH,IAAJ,CAASC,MAAT,CAAb;EACAE,IAAI,CAACC,MAAL,CAAYF,IAAZ;EACA,OAAOC,IAAI,CAACE,MAAL,EAAP;AACD","names":["toHex","KEY_TYPE_IDENTIFIER","MAX_CACHE_SIZE","signingKeyCache","cacheQueue","createScope","shortDate","region","service","getSigningKey","sha256Constructor","credentials","hmac","secretAccessKey","accessKeyId","credsHash","_d","cacheKey","sessionToken","push","length","shift","key","_a","_b","signable","clearCredentialCache","Object","keys","forEach","ctor","secret","data","hash","update","digest"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\signature-v4\\src\\credentialDerivation.ts"],"sourcesContent":["import { Credentials, HashConstructor, SourceData } from \"@aws-sdk/types\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\n\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\n\nconst signingKeyCache: { [key: string]: Uint8Array } = {};\nconst cacheQueue: Array<string> = [];\n\n/**\n * Create a string describing the scope of credentials used to sign a request.\n *\n * @param shortDate The current calendar date in the form YYYYMMDD.\n * @param region    The AWS region in which the service resides.\n * @param service   The service to which the signed request is being sent.\n */\nexport function createScope(shortDate: string, region: string, service: string): string {\n  return `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;\n}\n\n/**\n * Derive a signing key from its composite parts\n *\n * @param sha256Constructor A constructor function that can instantiate SHA-256\n *                          hash objects.\n * @param credentials       The credentials with which the request will be\n *                          signed.\n * @param shortDate         The current calendar date in the form YYYYMMDD.\n * @param region            The AWS region in which the service resides.\n * @param service           The service to which the signed request is being\n *                          sent.\n */\nexport const getSigningKey = async (\n  sha256Constructor: HashConstructor,\n  credentials: Credentials,\n  shortDate: string,\n  region: string,\n  service: string\n): Promise<Uint8Array> => {\n  const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\n  const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;\n  if (cacheKey in signingKeyCache) {\n    return signingKeyCache[cacheKey];\n  }\n\n  cacheQueue.push(cacheKey);\n  while (cacheQueue.length > MAX_CACHE_SIZE) {\n    delete signingKeyCache[cacheQueue.shift() as string];\n  }\n\n  let key: SourceData = `AWS4${credentials.secretAccessKey}`;\n  for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {\n    key = await hmac(sha256Constructor, key, signable);\n  }\n  return (signingKeyCache[cacheKey] = key as Uint8Array);\n};\n\n/**\n * @internal\n */\nexport function clearCredentialCache(): void {\n  cacheQueue.length = 0;\n  Object.keys(signingKeyCache).forEach((cacheKey) => {\n    delete signingKeyCache[cacheKey];\n  });\n}\n\nfunction hmac(ctor: HashConstructor, secret: SourceData, data: SourceData): Promise<Uint8Array> {\n  const hash = new ctor(secret);\n  hash.update(data);\n  return hash.digest();\n}\n"]},"metadata":{},"sourceType":"module"}