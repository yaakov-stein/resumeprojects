{"ast":null,"code":"import { __asyncGenerator, __await, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { S3 } from \"../S3\";\nimport { S3Client } from \"../S3Client\";\nimport { ListPartsCommand } from \"../commands/ListPartsCommand\";\n/**\n * @private\n */\n\nvar makePagedClientRequest = function (client, input) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , client.send.apply(client, __spread([new ListPartsCommand(input)], args))];\n\n        case 1:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n};\n/**\n * @private\n */\n\n\nvar makePagedRequest = function (client, input) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , client.listParts.apply(client, __spread([input], args))];\n\n        case 1:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n};\n\nexport function paginateListParts(config, input) {\n  var additionalArguments = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    additionalArguments[_i - 2] = arguments[_i];\n  }\n\n  return __asyncGenerator(this, arguments, function paginateListParts_1() {\n    var token, hasNext, page;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          token = config.startingToken || undefined;\n          hasNext = true;\n          _a.label = 1;\n\n        case 1:\n          if (!hasNext) return [3\n          /*break*/\n          , 9];\n          input.PartNumberMarker = token;\n          input[\"MaxParts\"] = config.pageSize;\n          if (!(config.client instanceof S3)) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , __await(makePagedRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n\n        case 2:\n          page = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 3:\n          if (!(config.client instanceof S3Client)) return [3\n          /*break*/\n          , 5];\n          return [4\n          /*yield*/\n          , __await(makePagedClientRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n\n        case 4:\n          page = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          throw new Error(\"Invalid client, expected S3 | S3Client\");\n\n        case 6:\n          return [4\n          /*yield*/\n          , __await(page)];\n\n        case 7:\n          return [4\n          /*yield*/\n          , _a.sent()];\n\n        case 8:\n          _a.sent();\n\n          token = page.NextPartNumberMarker;\n          hasNext = !!token;\n          return [3\n          /*break*/\n          , 1];\n\n        case 9:\n          return [4\n          /*yield*/\n          , __await(undefined)];\n\n        case 10:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,EAAT,QAAmB,OAAnB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,gBAAT,QAAgF,8BAAhF;AAIA;;;;AAGA,IAAMC,sBAAsB,GAAG,UAC7BC,MAD6B,EAE7BC,KAF6B,EAED;EAC5B;;OAAA,yCAAY;IAAZC;;;;;;;UAGO;UAAA;UAAA,EAAMF,MAAM,CAACG,IAAP,CAAWC,KAAX,SAAMC,UAAM,IAAIP,gBAAJ,CAAqBG,KAArB,CAAN,GAAsCC,IAAtC,CAAN,CAAN;;;UADP;UACA;UAAA;UAAA,EAAOI,SAAP;;;;AACD,CAPD;AAQA;;;;;AAGA,IAAMC,gBAAgB,GAAG,UACvBP,MADuB,EAEvBC,KAFuB,EAEK;EAC5B;;OAAA,yCAAY;IAAZC;;;;;;;UAGO;UAAA;UAAA,EAAMF,MAAM,CAACQ,SAAP,CAAgBJ,KAAhB,SAAMC,UAAWJ,KAAX,GAAqBC,IAArB,CAAN,CAAN;;;UADP;UACA;UAAA;UAAA,EAAOI,SAAP;;;;AACD,CAPD;;AAQA,OAAM,SAAiBG,iBAAjB,CACJC,MADI,EAEJT,KAFI,EAEwB;EAC5B;;OAAA,yCAA2B;IAA3BU;;;;;;;;UAGIC,KAAK,GAA8CF,MAAM,CAACG,aAAP,IAAwBC,SAA3E;UACAC,OAAO,GAAG,IAAV;;;;eAEGA,SAAO;UAAA;UAAA;UACZd,KAAK,CAACe,gBAAN,GAAyBJ,KAAzB;UACAX,KAAK,CAAC,UAAD,CAAL,GAAoBS,MAAM,CAACO,QAA3B;gBACIP,MAAM,CAACV,MAAP,YAAyBJ,KAAzB;UAAA;UAAA;UACK;UAAA;UAAA,UAAMW,gBAAgB,MAAhB,CAAgB,MAAhB,EAAgBF,UAACK,MAAM,CAACV,MAAR,EAAgBC,KAAhB,GAA0BU,mBAA1B,CAAhB,CAAN;;;UAAPO,IAAI,GAAGZ,SAAP;;;;;;gBACSI,MAAM,CAACV,MAAP,YAAyBH,WAAzB;UAAA;UAAA;UACF;UAAA;UAAA,UAAME,sBAAsB,MAAtB,CAAsB,MAAtB,EAAsBM,UAACK,MAAM,CAACV,MAAR,EAAgBC,KAAhB,GAA0BU,mBAA1B,CAAtB,CAAN;;;UAAPO,IAAI,GAAGZ,SAAP;;;;;;UAEA,MAAM,IAAIa,KAAJ,CAAU,wCAAV,CAAN;;;;;oBAEID;;;UAAN;UAAA;UAAA;;;UAAAZ;;UACAM,KAAK,GAAGM,IAAI,CAACE,oBAAb;UACAL,OAAO,GAAG,CAAC,CAACH,KAAZ;;;;;;;;oBAGKE;;;UADP;UACA;UAAA;UAAA;;;;AACD","names":["S3","S3Client","ListPartsCommand","makePagedClientRequest","client","input","args","send","apply","__spread","_a","makePagedRequest","listParts","paginateListParts","config","additionalArguments","token","startingToken","undefined","hasNext","PartNumberMarker","pageSize","page","Error","NextPartNumberMarker"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\client-s3\\pagination\\ListPartsPaginator.ts"],"sourcesContent":["import { S3 } from \"../S3\";\nimport { S3Client } from \"../S3Client\";\nimport { ListPartsCommand, ListPartsCommandInput, ListPartsCommandOutput } from \"../commands/ListPartsCommand\";\nimport { S3PaginationConfiguration } from \"./Interfaces\";\nimport { Paginator } from \"@aws-sdk/types\";\n\n/**\n * @private\n */\nconst makePagedClientRequest = async (\n  client: S3Client,\n  input: ListPartsCommandInput,\n  ...args: any\n): Promise<ListPartsCommandOutput> => {\n  // @ts-ignore\n  return await client.send(new ListPartsCommand(input), ...args);\n};\n/**\n * @private\n */\nconst makePagedRequest = async (\n  client: S3,\n  input: ListPartsCommandInput,\n  ...args: any\n): Promise<ListPartsCommandOutput> => {\n  // @ts-ignore\n  return await client.listParts(input, ...args);\n};\nexport async function* paginateListParts(\n  config: S3PaginationConfiguration,\n  input: ListPartsCommandInput,\n  ...additionalArguments: any\n): Paginator<ListPartsCommandOutput> {\n  // ToDo: replace with actual type instead of typeof input.PartNumberMarker\n  let token: typeof input.PartNumberMarker | undefined = config.startingToken || undefined;\n  let hasNext = true;\n  let page: ListPartsCommandOutput;\n  while (hasNext) {\n    input.PartNumberMarker = token;\n    input[\"MaxParts\"] = config.pageSize;\n    if (config.client instanceof S3) {\n      page = await makePagedRequest(config.client, input, ...additionalArguments);\n    } else if (config.client instanceof S3Client) {\n      page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n    } else {\n      throw new Error(\"Invalid client, expected S3 | S3Client\");\n    }\n    yield page;\n    token = page.NextPartNumberMarker;\n    hasNext = !!token;\n  }\n  // @ts-ignore\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}