{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { AnalyticsFilter, LifecycleRuleFilter, MetricsFilter, ReplicationRuleFilter } from \"../models/models_0\";\nimport { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { dateToUtcString as __dateToUtcString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getArrayIfSingleItem as __getArrayIfSingleItem, getValueFromTextNode as __getValueFromTextNode } from \"@aws-sdk/smithy-client\";\nimport { XmlNode as __XmlNode, XmlText as __XmlText } from \"@aws-sdk/xml-builder\";\nimport { parse as xmlParse } from \"fast-xml-parser\";\nexport var serializeAws_restXmlAbortMultipartUploadCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign({\n            \"x-id\": \"AbortMultipartUpload\"\n          }, input.UploadId !== undefined && {\n            uploadId: input.UploadId\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlCompleteMultipartUploadCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign({}, input.UploadId !== undefined && {\n            uploadId: input.UploadId\n          });\n\n          if (input.MultipartUpload !== undefined) {\n            contents = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlCopyObjectCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.ACL) && {\n            \"x-amz-acl\": input.ACL\n          }), isSerializableHeaderValue(input.CacheControl) && {\n            \"cache-control\": input.CacheControl\n          }), isSerializableHeaderValue(input.ContentDisposition) && {\n            \"content-disposition\": input.ContentDisposition\n          }), isSerializableHeaderValue(input.ContentEncoding) && {\n            \"content-encoding\": input.ContentEncoding\n          }), isSerializableHeaderValue(input.ContentLanguage) && {\n            \"content-language\": input.ContentLanguage\n          }), isSerializableHeaderValue(input.ContentType) && {\n            \"content-type\": input.ContentType\n          }), isSerializableHeaderValue(input.CopySource) && {\n            \"x-amz-copy-source\": input.CopySource\n          }), isSerializableHeaderValue(input.CopySourceIfMatch) && {\n            \"x-amz-copy-source-if-match\": input.CopySourceIfMatch\n          }), isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {\n            \"x-amz-copy-source-if-modified-since\": __dateToUtcString(input.CopySourceIfModifiedSince).toString()\n          }), isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {\n            \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch\n          }), isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {\n            \"x-amz-copy-source-if-unmodified-since\": __dateToUtcString(input.CopySourceIfUnmodifiedSince).toString()\n          }), isSerializableHeaderValue(input.Expires) && {\n            expires: __dateToUtcString(input.Expires).toString()\n          }), isSerializableHeaderValue(input.GrantFullControl) && {\n            \"x-amz-grant-full-control\": input.GrantFullControl\n          }), isSerializableHeaderValue(input.GrantRead) && {\n            \"x-amz-grant-read\": input.GrantRead\n          }), isSerializableHeaderValue(input.GrantReadACP) && {\n            \"x-amz-grant-read-acp\": input.GrantReadACP\n          }), isSerializableHeaderValue(input.GrantWriteACP) && {\n            \"x-amz-grant-write-acp\": input.GrantWriteACP\n          }), isSerializableHeaderValue(input.MetadataDirective) && {\n            \"x-amz-metadata-directive\": input.MetadataDirective\n          }), isSerializableHeaderValue(input.TaggingDirective) && {\n            \"x-amz-tagging-directive\": input.TaggingDirective\n          }), isSerializableHeaderValue(input.ServerSideEncryption) && {\n            \"x-amz-server-side-encryption\": input.ServerSideEncryption\n          }), isSerializableHeaderValue(input.StorageClass) && {\n            \"x-amz-storage-class\": input.StorageClass\n          }), isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n            \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation\n          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey\n          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.SSEKMSKeyId) && {\n            \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId\n          }), isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n            \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext\n          }), isSerializableHeaderValue(input.BucketKeyEnabled) && {\n            \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled.toString()\n          }), isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {\n            \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {\n            \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey\n          }), isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {\n            \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.Tagging) && {\n            \"x-amz-tagging\": input.Tagging\n          }), isSerializableHeaderValue(input.ObjectLockMode) && {\n            \"x-amz-object-lock-mode\": input.ObjectLockMode\n          }), isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n            \"x-amz-object-lock-retain-until-date\": (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString()\n          }), isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n            \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          }), isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {\n            \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner\n          }), input.Metadata !== undefined && Object.keys(input.Metadata).reduce(function (acc, suffix) {\n            var _a;\n\n            return __assign(__assign({}, acc), (_a = {}, _a[\"x-amz-meta-\" + suffix.toLowerCase()] = input.Metadata[suffix], _a));\n          }, {}));\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = {\n            \"x-id\": \"CopyObject\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlCreateBucketCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ACL) && {\n            \"x-amz-acl\": input.ACL\n          }), isSerializableHeaderValue(input.GrantFullControl) && {\n            \"x-amz-grant-full-control\": input.GrantFullControl\n          }), isSerializableHeaderValue(input.GrantRead) && {\n            \"x-amz-grant-read\": input.GrantRead\n          }), isSerializableHeaderValue(input.GrantReadACP) && {\n            \"x-amz-grant-read-acp\": input.GrantReadACP\n          }), isSerializableHeaderValue(input.GrantWrite) && {\n            \"x-amz-grant-write\": input.GrantWrite\n          }), isSerializableHeaderValue(input.GrantWriteACP) && {\n            \"x-amz-grant-write-acp\": input.GrantWriteACP\n          }), isSerializableHeaderValue(input.ObjectLockEnabledForBucket) && {\n            \"x-amz-bucket-object-lock-enabled\": input.ObjectLockEnabledForBucket.toString()\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.CreateBucketConfiguration !== undefined) {\n            contents = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlCreateMultipartUploadCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.ACL) && {\n            \"x-amz-acl\": input.ACL\n          }), isSerializableHeaderValue(input.CacheControl) && {\n            \"cache-control\": input.CacheControl\n          }), isSerializableHeaderValue(input.ContentDisposition) && {\n            \"content-disposition\": input.ContentDisposition\n          }), isSerializableHeaderValue(input.ContentEncoding) && {\n            \"content-encoding\": input.ContentEncoding\n          }), isSerializableHeaderValue(input.ContentLanguage) && {\n            \"content-language\": input.ContentLanguage\n          }), isSerializableHeaderValue(input.ContentType) && {\n            \"content-type\": input.ContentType\n          }), isSerializableHeaderValue(input.Expires) && {\n            expires: __dateToUtcString(input.Expires).toString()\n          }), isSerializableHeaderValue(input.GrantFullControl) && {\n            \"x-amz-grant-full-control\": input.GrantFullControl\n          }), isSerializableHeaderValue(input.GrantRead) && {\n            \"x-amz-grant-read\": input.GrantRead\n          }), isSerializableHeaderValue(input.GrantReadACP) && {\n            \"x-amz-grant-read-acp\": input.GrantReadACP\n          }), isSerializableHeaderValue(input.GrantWriteACP) && {\n            \"x-amz-grant-write-acp\": input.GrantWriteACP\n          }), isSerializableHeaderValue(input.ServerSideEncryption) && {\n            \"x-amz-server-side-encryption\": input.ServerSideEncryption\n          }), isSerializableHeaderValue(input.StorageClass) && {\n            \"x-amz-storage-class\": input.StorageClass\n          }), isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n            \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation\n          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey\n          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.SSEKMSKeyId) && {\n            \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId\n          }), isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n            \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext\n          }), isSerializableHeaderValue(input.BucketKeyEnabled) && {\n            \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled.toString()\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.Tagging) && {\n            \"x-amz-tagging\": input.Tagging\n          }), isSerializableHeaderValue(input.ObjectLockMode) && {\n            \"x-amz-object-lock-mode\": input.ObjectLockMode\n          }), isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n            \"x-amz-object-lock-retain-until-date\": (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString()\n          }), isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n            \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          }), input.Metadata !== undefined && Object.keys(input.Metadata).reduce(function (acc, suffix) {\n            var _a;\n\n            return __assign(__assign({}, acc), (_a = {}, _a[\"x-amz-meta-\" + suffix.toLowerCase()] = input.Metadata[suffix], _a));\n          }, {}));\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = {\n            uploads: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign({\n            analytics: \"\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketCorsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            cors: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketEncryptionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            encryption: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign({\n            \"intelligent-tiering\": \"\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign({\n            inventory: \"\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketLifecycleCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            lifecycle: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign({\n            metrics: \"\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketOwnershipControlsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            ownershipControls: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketPolicyCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            policy: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketReplicationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            replication: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketTaggingCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            tagging: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteBucketWebsiteCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            website: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteObjectCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.MFA) && {\n            \"x-amz-mfa\": input.MFA\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n            \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention.toString()\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign({\n            \"x-id\": \"DeleteObject\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteObjectsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.MFA) && {\n            \"x-amz-mfa\": input.MFA\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n            \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention.toString()\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            delete: \"\"\n          };\n\n          if (input.Delete !== undefined) {\n            contents = serializeAws_restXmlDelete(input.Delete, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeleteObjectTaggingCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign({\n            tagging: \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlDeletePublicAccessBlockCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            publicAccessBlock: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketAccelerateConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            accelerate: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketAclCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            acl: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign({\n            analytics: \"\",\n            \"x-id\": \"GetBucketAnalyticsConfiguration\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketCorsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            cors: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketEncryptionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            encryption: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign({\n            \"intelligent-tiering\": \"\",\n            \"x-id\": \"GetBucketIntelligentTieringConfiguration\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketInventoryConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign({\n            inventory: \"\",\n            \"x-id\": \"GetBucketInventoryConfiguration\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketLifecycleConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            lifecycle: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketLocationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            location: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketLoggingCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            logging: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketMetricsConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign({\n            metrics: \"\",\n            \"x-id\": \"GetBucketMetricsConfiguration\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketNotificationConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            notification: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketOwnershipControlsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            ownershipControls: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketPolicyCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            policy: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketPolicyStatusCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            policyStatus: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketReplicationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            replication: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketRequestPaymentCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            requestPayment: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketTaggingCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            tagging: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketVersioningCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            versioning: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetBucketWebsiteCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            website: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetObjectCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.IfMatch) && {\n            \"if-match\": input.IfMatch\n          }), isSerializableHeaderValue(input.IfModifiedSince) && {\n            \"if-modified-since\": __dateToUtcString(input.IfModifiedSince).toString()\n          }), isSerializableHeaderValue(input.IfNoneMatch) && {\n            \"if-none-match\": input.IfNoneMatch\n          }), isSerializableHeaderValue(input.IfUnmodifiedSince) && {\n            \"if-unmodified-since\": __dateToUtcString(input.IfUnmodifiedSince).toString()\n          }), isSerializableHeaderValue(input.Range) && {\n            range: input.Range\n          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey\n          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({\n            \"x-id\": \"GetObject\"\n          }, input.ResponseCacheControl !== undefined && {\n            \"response-cache-control\": input.ResponseCacheControl\n          }), input.ResponseContentDisposition !== undefined && {\n            \"response-content-disposition\": input.ResponseContentDisposition\n          }), input.ResponseContentEncoding !== undefined && {\n            \"response-content-encoding\": input.ResponseContentEncoding\n          }), input.ResponseContentLanguage !== undefined && {\n            \"response-content-language\": input.ResponseContentLanguage\n          }), input.ResponseContentType !== undefined && {\n            \"response-content-type\": input.ResponseContentType\n          }), input.ResponseExpires !== undefined && {\n            \"response-expires\": (input.ResponseExpires.toISOString().split(\".\")[0] + \"Z\").toString()\n          }), input.VersionId !== undefined && {\n            versionId: input.VersionId\n          }), input.PartNumber !== undefined && {\n            partNumber: input.PartNumber.toString()\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetObjectAclCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign({\n            acl: \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetObjectLegalHoldCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign({\n            \"legal-hold\": \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetObjectLockConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            \"object-lock\": \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetObjectRetentionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign({\n            retention: \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetObjectTaggingCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign({\n            tagging: \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetObjectTorrentCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = {\n            torrent: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlGetPublicAccessBlockCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            publicAccessBlock: \"\"\n          };\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlHeadBucketCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"HEAD\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlHeadObjectCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.IfMatch) && {\n            \"if-match\": input.IfMatch\n          }), isSerializableHeaderValue(input.IfModifiedSince) && {\n            \"if-modified-since\": __dateToUtcString(input.IfModifiedSince).toString()\n          }), isSerializableHeaderValue(input.IfNoneMatch) && {\n            \"if-none-match\": input.IfNoneMatch\n          }), isSerializableHeaderValue(input.IfUnmodifiedSince) && {\n            \"if-unmodified-since\": __dateToUtcString(input.IfUnmodifiedSince).toString()\n          }), isSerializableHeaderValue(input.Range) && {\n            range: input.Range\n          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey\n          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign(__assign({}, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          }), input.PartNumber !== undefined && {\n            partNumber: input.PartNumber.toString()\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"HEAD\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign({\n            analytics: \"\",\n            \"x-id\": \"ListBucketAnalyticsConfigurations\"\n          }, input.ContinuationToken !== undefined && {\n            \"continuation-token\": input.ContinuationToken\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign({\n            \"intelligent-tiering\": \"\",\n            \"x-id\": \"ListBucketIntelligentTieringConfigurations\"\n          }, input.ContinuationToken !== undefined && {\n            \"continuation-token\": input.ContinuationToken\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListBucketInventoryConfigurationsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign({\n            inventory: \"\",\n            \"x-id\": \"ListBucketInventoryConfigurations\"\n          }, input.ContinuationToken !== undefined && {\n            \"continuation-token\": input.ContinuationToken\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListBucketMetricsConfigurationsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign({\n            metrics: \"\",\n            \"x-id\": \"ListBucketMetricsConfigurations\"\n          }, input.ContinuationToken !== undefined && {\n            \"continuation-token\": input.ContinuationToken\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListBucketsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/\";\n          body = \"\";\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListMultipartUploadsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign(__assign(__assign(__assign(__assign(__assign({\n            uploads: \"\"\n          }, input.Delimiter !== undefined && {\n            delimiter: input.Delimiter\n          }), input.EncodingType !== undefined && {\n            \"encoding-type\": input.EncodingType\n          }), input.KeyMarker !== undefined && {\n            \"key-marker\": input.KeyMarker\n          }), input.MaxUploads !== undefined && {\n            \"max-uploads\": input.MaxUploads.toString()\n          }), input.Prefix !== undefined && {\n            prefix: input.Prefix\n          }), input.UploadIdMarker !== undefined && {\n            \"upload-id-marker\": input.UploadIdMarker\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListObjectsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign(__assign(__assign(__assign(__assign({}, input.Delimiter !== undefined && {\n            delimiter: input.Delimiter\n          }), input.EncodingType !== undefined && {\n            \"encoding-type\": input.EncodingType\n          }), input.Marker !== undefined && {\n            marker: input.Marker\n          }), input.MaxKeys !== undefined && {\n            \"max-keys\": input.MaxKeys.toString()\n          }), input.Prefix !== undefined && {\n            prefix: input.Prefix\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListObjectsV2Command = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign(__assign(__assign(__assign(__assign(__assign(__assign({\n            \"list-type\": \"2\"\n          }, input.Delimiter !== undefined && {\n            delimiter: input.Delimiter\n          }), input.EncodingType !== undefined && {\n            \"encoding-type\": input.EncodingType\n          }), input.MaxKeys !== undefined && {\n            \"max-keys\": input.MaxKeys.toString()\n          }), input.Prefix !== undefined && {\n            prefix: input.Prefix\n          }), input.ContinuationToken !== undefined && {\n            \"continuation-token\": input.ContinuationToken\n          }), input.FetchOwner !== undefined && {\n            \"fetch-owner\": input.FetchOwner.toString()\n          }), input.StartAfter !== undefined && {\n            \"start-after\": input.StartAfter\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListObjectVersionsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign(__assign(__assign(__assign(__assign(__assign({\n            versions: \"\"\n          }, input.Delimiter !== undefined && {\n            delimiter: input.Delimiter\n          }), input.EncodingType !== undefined && {\n            \"encoding-type\": input.EncodingType\n          }), input.KeyMarker !== undefined && {\n            \"key-marker\": input.KeyMarker\n          }), input.MaxKeys !== undefined && {\n            \"max-keys\": input.MaxKeys.toString()\n          }), input.Prefix !== undefined && {\n            prefix: input.Prefix\n          }), input.VersionIdMarker !== undefined && {\n            \"version-id-marker\": input.VersionIdMarker\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlListPartsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({}, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign(__assign(__assign({\n            \"x-id\": \"ListParts\"\n          }, input.MaxParts !== undefined && {\n            \"max-parts\": input.MaxParts.toString()\n          }), input.PartNumberMarker !== undefined && {\n            \"part-number-marker\": input.PartNumberMarker\n          }), input.UploadId !== undefined && {\n            uploadId: input.UploadId\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketAccelerateConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            accelerate: \"\"\n          };\n\n          if (input.AccelerateConfiguration !== undefined) {\n            contents = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketAclCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ACL) && {\n            \"x-amz-acl\": input.ACL\n          }), isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.GrantFullControl) && {\n            \"x-amz-grant-full-control\": input.GrantFullControl\n          }), isSerializableHeaderValue(input.GrantRead) && {\n            \"x-amz-grant-read\": input.GrantRead\n          }), isSerializableHeaderValue(input.GrantReadACP) && {\n            \"x-amz-grant-read-acp\": input.GrantReadACP\n          }), isSerializableHeaderValue(input.GrantWrite) && {\n            \"x-amz-grant-write\": input.GrantWrite\n          }), isSerializableHeaderValue(input.GrantWriteACP) && {\n            \"x-amz-grant-write-acp\": input.GrantWriteACP\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            acl: \"\"\n          };\n\n          if (input.AccessControlPolicy !== undefined) {\n            contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign({\n            analytics: \"\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n\n          if (input.AnalyticsConfiguration !== undefined) {\n            contents = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketCorsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            cors: \"\"\n          };\n\n          if (input.CORSConfiguration !== undefined) {\n            contents = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketEncryptionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            encryption: \"\"\n          };\n\n          if (input.ServerSideEncryptionConfiguration !== undefined) {\n            contents = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/xml\"\n          };\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign({\n            \"intelligent-tiering\": \"\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n\n          if (input.IntelligentTieringConfiguration !== undefined) {\n            contents = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketInventoryConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign({\n            inventory: \"\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n\n          if (input.InventoryConfiguration !== undefined) {\n            contents = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketLifecycleConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            lifecycle: \"\"\n          };\n\n          if (input.LifecycleConfiguration !== undefined) {\n            contents = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketLoggingCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            logging: \"\"\n          };\n\n          if (input.BucketLoggingStatus !== undefined) {\n            contents = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketMetricsConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = __assign({\n            metrics: \"\"\n          }, input.Id !== undefined && {\n            id: input.Id\n          });\n\n          if (input.MetricsConfiguration !== undefined) {\n            contents = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketNotificationConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            notification: \"\"\n          };\n\n          if (input.NotificationConfiguration !== undefined) {\n            contents = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketOwnershipControlsCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            ownershipControls: \"\"\n          };\n\n          if (input.OwnershipControls !== undefined) {\n            contents = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketPolicyCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign({\n            \"content-type\": \"text/plain\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess) && {\n            \"x-amz-confirm-remove-self-bucket-access\": input.ConfirmRemoveSelfBucketAccess.toString()\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            policy: \"\"\n          };\n\n          if (input.Policy !== undefined) {\n            contents = input.Policy;\n            body = contents;\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketReplicationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.Token) && {\n            \"x-amz-bucket-object-lock-token\": input.Token\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            replication: \"\"\n          };\n\n          if (input.ReplicationConfiguration !== undefined) {\n            contents = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketRequestPaymentCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            requestPayment: \"\"\n          };\n\n          if (input.RequestPaymentConfiguration !== undefined) {\n            contents = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketTaggingCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            tagging: \"\"\n          };\n\n          if (input.Tagging !== undefined) {\n            contents = serializeAws_restXmlTagging(input.Tagging, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketVersioningCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.MFA) && {\n            \"x-amz-mfa\": input.MFA\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            versioning: \"\"\n          };\n\n          if (input.VersioningConfiguration !== undefined) {\n            contents = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutBucketWebsiteCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            website: \"\"\n          };\n\n          if (input.WebsiteConfiguration !== undefined) {\n            contents = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutObjectCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({\n            \"content-type\": \"application/octet-stream\"\n          }, isSerializableHeaderValue(input.ACL) && {\n            \"x-amz-acl\": input.ACL\n          }), isSerializableHeaderValue(input.CacheControl) && {\n            \"cache-control\": input.CacheControl\n          }), isSerializableHeaderValue(input.ContentDisposition) && {\n            \"content-disposition\": input.ContentDisposition\n          }), isSerializableHeaderValue(input.ContentEncoding) && {\n            \"content-encoding\": input.ContentEncoding\n          }), isSerializableHeaderValue(input.ContentLanguage) && {\n            \"content-language\": input.ContentLanguage\n          }), isSerializableHeaderValue(input.ContentLength) && {\n            \"content-length\": input.ContentLength.toString()\n          }), isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ContentType) && {\n            \"content-type\": input.ContentType\n          }), isSerializableHeaderValue(input.Expires) && {\n            expires: __dateToUtcString(input.Expires).toString()\n          }), isSerializableHeaderValue(input.GrantFullControl) && {\n            \"x-amz-grant-full-control\": input.GrantFullControl\n          }), isSerializableHeaderValue(input.GrantRead) && {\n            \"x-amz-grant-read\": input.GrantRead\n          }), isSerializableHeaderValue(input.GrantReadACP) && {\n            \"x-amz-grant-read-acp\": input.GrantReadACP\n          }), isSerializableHeaderValue(input.GrantWriteACP) && {\n            \"x-amz-grant-write-acp\": input.GrantWriteACP\n          }), isSerializableHeaderValue(input.ServerSideEncryption) && {\n            \"x-amz-server-side-encryption\": input.ServerSideEncryption\n          }), isSerializableHeaderValue(input.StorageClass) && {\n            \"x-amz-storage-class\": input.StorageClass\n          }), isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n            \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation\n          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey\n          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.SSEKMSKeyId) && {\n            \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId\n          }), isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n            \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext\n          }), isSerializableHeaderValue(input.BucketKeyEnabled) && {\n            \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled.toString()\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.Tagging) && {\n            \"x-amz-tagging\": input.Tagging\n          }), isSerializableHeaderValue(input.ObjectLockMode) && {\n            \"x-amz-object-lock-mode\": input.ObjectLockMode\n          }), isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n            \"x-amz-object-lock-retain-until-date\": (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString()\n          }), isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n            \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          }), input.Metadata !== undefined && Object.keys(input.Metadata).reduce(function (acc, suffix) {\n            var _a;\n\n            return __assign(__assign({}, acc), (_a = {}, _a[\"x-amz-meta-\" + suffix.toLowerCase()] = input.Metadata[suffix], _a));\n          }, {}));\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = {\n            \"x-id\": \"PutObject\"\n          };\n\n          if (input.Body !== undefined) {\n            contents = input.Body;\n            body = contents;\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutObjectAclCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ACL) && {\n            \"x-amz-acl\": input.ACL\n          }), isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.GrantFullControl) && {\n            \"x-amz-grant-full-control\": input.GrantFullControl\n          }), isSerializableHeaderValue(input.GrantRead) && {\n            \"x-amz-grant-read\": input.GrantRead\n          }), isSerializableHeaderValue(input.GrantReadACP) && {\n            \"x-amz-grant-read-acp\": input.GrantReadACP\n          }), isSerializableHeaderValue(input.GrantWrite) && {\n            \"x-amz-grant-write\": input.GrantWrite\n          }), isSerializableHeaderValue(input.GrantWriteACP) && {\n            \"x-amz-grant-write-acp\": input.GrantWriteACP\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign({\n            acl: \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n\n          if (input.AccessControlPolicy !== undefined) {\n            contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutObjectLegalHoldCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign({\n            \"legal-hold\": \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n\n          if (input.LegalHold !== undefined) {\n            contents = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutObjectLockConfigurationCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.Token) && {\n            \"x-amz-bucket-object-lock-token\": input.Token\n          }), isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            \"object-lock\": \"\"\n          };\n\n          if (input.ObjectLockConfiguration !== undefined) {\n            contents = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutObjectRetentionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n            \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention.toString()\n          }), isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign({\n            retention: \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n\n          if (input.Retention !== undefined) {\n            contents = serializeAws_restXmlObjectLockRetention(input.Retention, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutObjectTaggingCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign({\n            tagging: \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n\n          if (input.Tagging !== undefined) {\n            contents = serializeAws_restXmlTagging(input.Tagging, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlPutPublicAccessBlockCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          query = {\n            publicAccessBlock: \"\"\n          };\n\n          if (input.PublicAccessBlockConfiguration !== undefined) {\n            contents = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlRestoreObjectCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign({\n            restore: \"\"\n          }, input.VersionId !== undefined && {\n            versionId: input.VersionId\n          });\n\n          if (input.RestoreRequest !== undefined) {\n            contents = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);\n            body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n            contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n            body += contents.toString();\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlSelectObjectContentCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, bodyNode, node, node, node, node, node, node, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign({\n            \"content-type\": \"application/xml\"\n          }, isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey\n          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = {\n            select: \"\",\n            \"select-type\": \"2\"\n          };\n          body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n          bodyNode = new __XmlNode(\"SelectObjectContentRequest\");\n          bodyNode.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n\n          if (input.Expression !== undefined) {\n            node = new __XmlNode(\"Expression\").addChildNode(new __XmlText(input.Expression)).withName(\"Expression\");\n            bodyNode.addChildNode(node);\n          }\n\n          if (input.ExpressionType !== undefined) {\n            node = new __XmlNode(\"ExpressionType\").addChildNode(new __XmlText(input.ExpressionType)).withName(\"ExpressionType\");\n            bodyNode.addChildNode(node);\n          }\n\n          if (input.InputSerialization !== undefined) {\n            node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\"InputSerialization\");\n            bodyNode.addChildNode(node);\n          }\n\n          if (input.OutputSerialization !== undefined) {\n            node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\"OutputSerialization\");\n            bodyNode.addChildNode(node);\n          }\n\n          if (input.RequestProgress !== undefined) {\n            node = serializeAws_restXmlRequestProgress(input.RequestProgress, context).withName(\"RequestProgress\");\n            bodyNode.addChildNode(node);\n          }\n\n          if (input.ScanRange !== undefined) {\n            node = serializeAws_restXmlScanRange(input.ScanRange, context).withName(\"ScanRange\");\n            bodyNode.addChildNode(node);\n          }\n\n          body += bodyNode.toString();\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlUploadPartCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign({\n            \"content-type\": \"application/octet-stream\"\n          }, isSerializableHeaderValue(input.ContentLength) && {\n            \"content-length\": input.ContentLength.toString()\n          }), isSerializableHeaderValue(input.ContentMD5) && {\n            \"content-md5\": input.ContentMD5\n          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey\n          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign(__assign({\n            \"x-id\": \"UploadPart\"\n          }, input.PartNumber !== undefined && {\n            partNumber: input.PartNumber.toString()\n          }), input.UploadId !== undefined && {\n            uploadId: input.UploadId\n          });\n\n          if (input.Body !== undefined) {\n            contents = input.Body;\n            body = contents;\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restXmlUploadPartCopyCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, isSerializableHeaderValue(input.CopySource) && {\n            \"x-amz-copy-source\": input.CopySource\n          }), isSerializableHeaderValue(input.CopySourceIfMatch) && {\n            \"x-amz-copy-source-if-match\": input.CopySourceIfMatch\n          }), isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {\n            \"x-amz-copy-source-if-modified-since\": __dateToUtcString(input.CopySourceIfModifiedSince).toString()\n          }), isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {\n            \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch\n          }), isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {\n            \"x-amz-copy-source-if-unmodified-since\": __dateToUtcString(input.CopySourceIfUnmodifiedSince).toString()\n          }), isSerializableHeaderValue(input.CopySourceRange) && {\n            \"x-amz-copy-source-range\": input.CopySourceRange\n          }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey\n          }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {\n            \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm\n          }), isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {\n            \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey\n          }), isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {\n            \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5\n          }), isSerializableHeaderValue(input.RequestPayer) && {\n            \"x-amz-request-payer\": input.RequestPayer\n          }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner\n          }), isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {\n            \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner\n          });\n          resolvedPath = \"/{Bucket}/{Key+}\";\n\n          if (input.Bucket !== undefined) {\n            labelValue = input.Bucket;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Bucket.\");\n          }\n\n          if (input.Key !== undefined) {\n            labelValue = input.Key;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Key.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue.split(\"/\").map(function (segment) {\n              return __extendedEncodeURIComponent(segment);\n            }).join(\"/\"));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Key.\");\n          }\n\n          query = __assign(__assign({\n            \"x-id\": \"UploadPartCopy\"\n          }, input.PartNumber !== undefined && {\n            partNumber: input.PartNumber.toString()\n          }), input.UploadId !== undefined && {\n            uploadId: input.UploadId\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var deserializeAws_restXmlAbortMultipartUploadCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlAbortMultipartUploadCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            RequestCharged: undefined\n          };\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlAbortMultipartUploadCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n\n    var _d;\n\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"NoSuchUpload\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.s3#NoSuchUpload\":\n              return [3\n              /*break*/\n              , 2];\n          }\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlNoSuchUploadResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlCompleteMultipartUploadCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlCompleteMultipartUploadCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Bucket: undefined,\n            BucketKeyEnabled: undefined,\n            ETag: undefined,\n            Expiration: undefined,\n            Key: undefined,\n            Location: undefined,\n            RequestCharged: undefined,\n            SSEKMSKeyId: undefined,\n            ServerSideEncryption: undefined,\n            VersionId: undefined\n          };\n\n          if (output.headers[\"x-amz-expiration\"] !== undefined) {\n            contents.Expiration = output.headers[\"x-amz-expiration\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n            contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n          }\n\n          if (output.headers[\"x-amz-version-id\"] !== undefined) {\n            contents.VersionId = output.headers[\"x-amz-version-id\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n            contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n            contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n          }\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data[\"Bucket\"] !== undefined) {\n            contents.Bucket = data[\"Bucket\"];\n          }\n\n          if (data[\"ETag\"] !== undefined) {\n            contents.ETag = data[\"ETag\"];\n          }\n\n          if (data[\"Key\"] !== undefined) {\n            contents.Key = data[\"Key\"];\n          }\n\n          if (data[\"Location\"] !== undefined) {\n            contents.Location = data[\"Location\"];\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlCompleteMultipartUploadCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlCopyObjectCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlCopyObjectCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            BucketKeyEnabled: undefined,\n            CopyObjectResult: undefined,\n            CopySourceVersionId: undefined,\n            Expiration: undefined,\n            RequestCharged: undefined,\n            SSECustomerAlgorithm: undefined,\n            SSECustomerKeyMD5: undefined,\n            SSEKMSEncryptionContext: undefined,\n            SSEKMSKeyId: undefined,\n            ServerSideEncryption: undefined,\n            VersionId: undefined\n          };\n\n          if (output.headers[\"x-amz-expiration\"] !== undefined) {\n            contents.Expiration = output.headers[\"x-amz-expiration\"];\n          }\n\n          if (output.headers[\"x-amz-copy-source-version-id\"] !== undefined) {\n            contents.CopySourceVersionId = output.headers[\"x-amz-copy-source-version-id\"];\n          }\n\n          if (output.headers[\"x-amz-version-id\"] !== undefined) {\n            contents.VersionId = output.headers[\"x-amz-version-id\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n            contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n            contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n            contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n            contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n            contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n            contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n          }\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.CopyObjectResult = deserializeAws_restXmlCopyObjectResult(data, context);\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlCopyObjectCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n\n    var _d;\n\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"ObjectNotInActiveTierError\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.s3#ObjectNotInActiveTierError\":\n              return [3\n              /*break*/\n              , 2];\n          }\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlObjectNotInActiveTierErrorResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlCreateBucketCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlCreateBucketCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Location: undefined\n          };\n\n          if (output.headers[\"location\"] !== undefined) {\n            contents.Location = output.headers[\"location\"];\n          }\n\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlCreateBucketCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n\n    var _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"BucketAlreadyExists\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.s3#BucketAlreadyExists\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"BucketAlreadyOwnedByYou\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.s3#BucketAlreadyOwnedByYou\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlBucketAlreadyExistsResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlBucketAlreadyOwnedByYouResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlCreateMultipartUploadCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlCreateMultipartUploadCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            AbortDate: undefined,\n            AbortRuleId: undefined,\n            Bucket: undefined,\n            BucketKeyEnabled: undefined,\n            Key: undefined,\n            RequestCharged: undefined,\n            SSECustomerAlgorithm: undefined,\n            SSECustomerKeyMD5: undefined,\n            SSEKMSEncryptionContext: undefined,\n            SSEKMSKeyId: undefined,\n            ServerSideEncryption: undefined,\n            UploadId: undefined\n          };\n\n          if (output.headers[\"x-amz-abort-date\"] !== undefined) {\n            contents.AbortDate = new Date(output.headers[\"x-amz-abort-date\"]);\n          }\n\n          if (output.headers[\"x-amz-abort-rule-id\"] !== undefined) {\n            contents.AbortRuleId = output.headers[\"x-amz-abort-rule-id\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n            contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n            contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n            contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n            contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n            contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n            contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n          }\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data[\"Bucket\"] !== undefined) {\n            contents.Bucket = data[\"Bucket\"];\n          }\n\n          if (data[\"Key\"] !== undefined) {\n            contents.Key = data[\"Key\"];\n          }\n\n          if (data[\"UploadId\"] !== undefined) {\n            contents.UploadId = data[\"UploadId\"];\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlCreateMultipartUploadCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeleteBucketCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeleteBucketCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeleteBucketCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeleteBucketCorsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeleteBucketCorsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeleteBucketCorsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeleteBucketEncryptionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeleteBucketEncryptionCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeleteBucketEncryptionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeleteBucketLifecycleCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeleteBucketLifecycleCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeleteBucketLifecycleCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeleteBucketPolicyCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeleteBucketPolicyCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeleteBucketPolicyCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeleteBucketReplicationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeleteBucketReplicationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeleteBucketReplicationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeleteBucketTaggingCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeleteBucketTaggingCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeleteBucketTaggingCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeleteBucketWebsiteCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeleteBucketWebsiteCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeleteBucketWebsiteCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeleteObjectCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeleteObjectCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            DeleteMarker: undefined,\n            RequestCharged: undefined,\n            VersionId: undefined\n          };\n\n          if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n            contents.DeleteMarker = output.headers[\"x-amz-delete-marker\"] === \"true\";\n          }\n\n          if (output.headers[\"x-amz-version-id\"] !== undefined) {\n            contents.VersionId = output.headers[\"x-amz-version-id\"];\n          }\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeleteObjectCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeleteObjectsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeleteObjectsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Deleted: undefined,\n            Errors: undefined,\n            RequestCharged: undefined\n          };\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Deleted === \"\") {\n            contents.Deleted = [];\n          }\n\n          if (data[\"Deleted\"] !== undefined) {\n            contents.Deleted = deserializeAws_restXmlDeletedObjects(__getArrayIfSingleItem(data[\"Deleted\"]), context);\n          }\n\n          if (data.Error === \"\") {\n            contents.Errors = [];\n          }\n\n          if (data[\"Error\"] !== undefined) {\n            contents.Errors = deserializeAws_restXmlErrors(__getArrayIfSingleItem(data[\"Error\"]), context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeleteObjectsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeleteObjectTaggingCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeleteObjectTaggingCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            VersionId: undefined\n          };\n\n          if (output.headers[\"x-amz-version-id\"] !== undefined) {\n            contents.VersionId = output.headers[\"x-amz-version-id\"];\n          }\n\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeleteObjectTaggingCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlDeletePublicAccessBlockCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 204 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlDeletePublicAccessBlockCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlDeletePublicAccessBlockCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Status: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data[\"Status\"] !== undefined) {\n            contents.Status = data[\"Status\"];\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketAclCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketAclCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Grants: undefined,\n            Owner: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.AccessControlList === \"\") {\n            contents.Grants = [];\n          }\n\n          if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n            contents.Grants = deserializeAws_restXmlGrants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n          }\n\n          if (data[\"Owner\"] !== undefined) {\n            contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketAclCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            AnalyticsConfiguration: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.AnalyticsConfiguration = deserializeAws_restXmlAnalyticsConfiguration(data, context);\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketCorsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketCorsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CORSRules: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.CORSRule === \"\") {\n            contents.CORSRules = [];\n          }\n\n          if (data[\"CORSRule\"] !== undefined) {\n            contents.CORSRules = deserializeAws_restXmlCORSRules(__getArrayIfSingleItem(data[\"CORSRule\"]), context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketCorsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketEncryptionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketEncryptionCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            ServerSideEncryptionConfiguration: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.ServerSideEncryptionConfiguration = deserializeAws_restXmlServerSideEncryptionConfiguration(data, context);\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketEncryptionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            IntelligentTieringConfiguration: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.IntelligentTieringConfiguration = deserializeAws_restXmlIntelligentTieringConfiguration(data, context);\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketInventoryConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketInventoryConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            InventoryConfiguration: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.InventoryConfiguration = deserializeAws_restXmlInventoryConfiguration(data, context);\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketInventoryConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Rules: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Rule === \"\") {\n            contents.Rules = [];\n          }\n\n          if (data[\"Rule\"] !== undefined) {\n            contents.Rules = deserializeAws_restXmlLifecycleRules(__getArrayIfSingleItem(data[\"Rule\"]), context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketLocationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketLocationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            LocationConstraint: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data[\"LocationConstraint\"] !== undefined) {\n            contents.LocationConstraint = data[\"LocationConstraint\"];\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketLocationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketLoggingCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketLoggingCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            LoggingEnabled: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data[\"LoggingEnabled\"] !== undefined) {\n            contents.LoggingEnabled = deserializeAws_restXmlLoggingEnabled(data[\"LoggingEnabled\"], context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketLoggingCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketMetricsConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketMetricsConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            MetricsConfiguration: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.MetricsConfiguration = deserializeAws_restXmlMetricsConfiguration(data, context);\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketMetricsConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketNotificationConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketNotificationConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            LambdaFunctionConfigurations: undefined,\n            QueueConfigurations: undefined,\n            TopicConfigurations: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.CloudFunctionConfiguration === \"\") {\n            contents.LambdaFunctionConfigurations = [];\n          }\n\n          if (data[\"CloudFunctionConfiguration\"] !== undefined) {\n            contents.LambdaFunctionConfigurations = deserializeAws_restXmlLambdaFunctionConfigurationList(__getArrayIfSingleItem(data[\"CloudFunctionConfiguration\"]), context);\n          }\n\n          if (data.QueueConfiguration === \"\") {\n            contents.QueueConfigurations = [];\n          }\n\n          if (data[\"QueueConfiguration\"] !== undefined) {\n            contents.QueueConfigurations = deserializeAws_restXmlQueueConfigurationList(__getArrayIfSingleItem(data[\"QueueConfiguration\"]), context);\n          }\n\n          if (data.TopicConfiguration === \"\") {\n            contents.TopicConfigurations = [];\n          }\n\n          if (data[\"TopicConfiguration\"] !== undefined) {\n            contents.TopicConfigurations = deserializeAws_restXmlTopicConfigurationList(__getArrayIfSingleItem(data[\"TopicConfiguration\"]), context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketNotificationConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketOwnershipControlsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketOwnershipControlsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            OwnershipControls: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.OwnershipControls = deserializeAws_restXmlOwnershipControls(data, context);\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketOwnershipControlsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketPolicyCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketPolicyCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Policy: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data[\"Policy\"] !== undefined) {\n            contents.Policy = data[\"Policy\"];\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketPolicyCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketPolicyStatusCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketPolicyStatusCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            PolicyStatus: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.PolicyStatus = deserializeAws_restXmlPolicyStatus(data, context);\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketPolicyStatusCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketReplicationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketReplicationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            ReplicationConfiguration: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.ReplicationConfiguration = deserializeAws_restXmlReplicationConfiguration(data, context);\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketReplicationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketRequestPaymentCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketRequestPaymentCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Payer: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data[\"Payer\"] !== undefined) {\n            contents.Payer = data[\"Payer\"];\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketRequestPaymentCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketTaggingCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketTaggingCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            TagSet: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.TagSet === \"\") {\n            contents.TagSet = [];\n          }\n\n          if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n            contents.TagSet = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketTaggingCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketVersioningCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketVersioningCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            MFADelete: undefined,\n            Status: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data[\"MfaDelete\"] !== undefined) {\n            contents.MFADelete = data[\"MfaDelete\"];\n          }\n\n          if (data[\"Status\"] !== undefined) {\n            contents.Status = data[\"Status\"];\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketVersioningCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetBucketWebsiteCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetBucketWebsiteCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            ErrorDocument: undefined,\n            IndexDocument: undefined,\n            RedirectAllRequestsTo: undefined,\n            RoutingRules: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data[\"ErrorDocument\"] !== undefined) {\n            contents.ErrorDocument = deserializeAws_restXmlErrorDocument(data[\"ErrorDocument\"], context);\n          }\n\n          if (data[\"IndexDocument\"] !== undefined) {\n            contents.IndexDocument = deserializeAws_restXmlIndexDocument(data[\"IndexDocument\"], context);\n          }\n\n          if (data[\"RedirectAllRequestsTo\"] !== undefined) {\n            contents.RedirectAllRequestsTo = deserializeAws_restXmlRedirectAllRequestsTo(data[\"RedirectAllRequestsTo\"], context);\n          }\n\n          if (data.RoutingRules === \"\") {\n            contents.RoutingRules = [];\n          }\n\n          if (data[\"RoutingRules\"] !== undefined && data[\"RoutingRules\"][\"RoutingRule\"] !== undefined) {\n            contents.RoutingRules = deserializeAws_restXmlRoutingRules(__getArrayIfSingleItem(data[\"RoutingRules\"][\"RoutingRule\"]), context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetBucketWebsiteCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetObjectCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return [2\n        /*return*/\n        , deserializeAws_restXmlGetObjectCommandError(output, context)];\n      }\n\n      contents = {\n        $metadata: deserializeMetadata(output),\n        AcceptRanges: undefined,\n        Body: undefined,\n        BucketKeyEnabled: undefined,\n        CacheControl: undefined,\n        ContentDisposition: undefined,\n        ContentEncoding: undefined,\n        ContentLanguage: undefined,\n        ContentLength: undefined,\n        ContentRange: undefined,\n        ContentType: undefined,\n        DeleteMarker: undefined,\n        ETag: undefined,\n        Expiration: undefined,\n        Expires: undefined,\n        LastModified: undefined,\n        Metadata: undefined,\n        MissingMeta: undefined,\n        ObjectLockLegalHoldStatus: undefined,\n        ObjectLockMode: undefined,\n        ObjectLockRetainUntilDate: undefined,\n        PartsCount: undefined,\n        ReplicationStatus: undefined,\n        RequestCharged: undefined,\n        Restore: undefined,\n        SSECustomerAlgorithm: undefined,\n        SSECustomerKeyMD5: undefined,\n        SSEKMSKeyId: undefined,\n        ServerSideEncryption: undefined,\n        StorageClass: undefined,\n        TagCount: undefined,\n        VersionId: undefined,\n        WebsiteRedirectLocation: undefined\n      };\n\n      if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n        contents.DeleteMarker = output.headers[\"x-amz-delete-marker\"] === \"true\";\n      }\n\n      if (output.headers[\"accept-ranges\"] !== undefined) {\n        contents.AcceptRanges = output.headers[\"accept-ranges\"];\n      }\n\n      if (output.headers[\"x-amz-expiration\"] !== undefined) {\n        contents.Expiration = output.headers[\"x-amz-expiration\"];\n      }\n\n      if (output.headers[\"x-amz-restore\"] !== undefined) {\n        contents.Restore = output.headers[\"x-amz-restore\"];\n      }\n\n      if (output.headers[\"last-modified\"] !== undefined) {\n        contents.LastModified = new Date(output.headers[\"last-modified\"]);\n      }\n\n      if (output.headers[\"content-length\"] !== undefined) {\n        contents.ContentLength = parseInt(output.headers[\"content-length\"], 10);\n      }\n\n      if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n      }\n\n      if (output.headers[\"x-amz-missing-meta\"] !== undefined) {\n        contents.MissingMeta = parseInt(output.headers[\"x-amz-missing-meta\"], 10);\n      }\n\n      if (output.headers[\"x-amz-version-id\"] !== undefined) {\n        contents.VersionId = output.headers[\"x-amz-version-id\"];\n      }\n\n      if (output.headers[\"cache-control\"] !== undefined) {\n        contents.CacheControl = output.headers[\"cache-control\"];\n      }\n\n      if (output.headers[\"content-disposition\"] !== undefined) {\n        contents.ContentDisposition = output.headers[\"content-disposition\"];\n      }\n\n      if (output.headers[\"content-encoding\"] !== undefined) {\n        contents.ContentEncoding = output.headers[\"content-encoding\"];\n      }\n\n      if (output.headers[\"content-language\"] !== undefined) {\n        contents.ContentLanguage = output.headers[\"content-language\"];\n      }\n\n      if (output.headers[\"content-range\"] !== undefined) {\n        contents.ContentRange = output.headers[\"content-range\"];\n      }\n\n      if (output.headers[\"content-type\"] !== undefined) {\n        contents.ContentType = output.headers[\"content-type\"];\n      }\n\n      if (output.headers[\"expires\"] !== undefined) {\n        contents.Expires = new Date(output.headers[\"expires\"]);\n      }\n\n      if (output.headers[\"x-amz-website-redirect-location\"] !== undefined) {\n        contents.WebsiteRedirectLocation = output.headers[\"x-amz-website-redirect-location\"];\n      }\n\n      if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n        contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n      }\n\n      if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n        contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n      }\n\n      if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n        contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n      }\n\n      if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n        contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n      }\n\n      if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n        contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n      }\n\n      if (output.headers[\"x-amz-storage-class\"] !== undefined) {\n        contents.StorageClass = output.headers[\"x-amz-storage-class\"];\n      }\n\n      if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n      }\n\n      if (output.headers[\"x-amz-replication-status\"] !== undefined) {\n        contents.ReplicationStatus = output.headers[\"x-amz-replication-status\"];\n      }\n\n      if (output.headers[\"x-amz-mp-parts-count\"] !== undefined) {\n        contents.PartsCount = parseInt(output.headers[\"x-amz-mp-parts-count\"], 10);\n      }\n\n      if (output.headers[\"x-amz-tagging-count\"] !== undefined) {\n        contents.TagCount = parseInt(output.headers[\"x-amz-tagging-count\"], 10);\n      }\n\n      if (output.headers[\"x-amz-object-lock-mode\"] !== undefined) {\n        contents.ObjectLockMode = output.headers[\"x-amz-object-lock-mode\"];\n      }\n\n      if (output.headers[\"x-amz-object-lock-retain-until-date\"] !== undefined) {\n        contents.ObjectLockRetainUntilDate = new Date(output.headers[\"x-amz-object-lock-retain-until-date\"]);\n      }\n\n      if (output.headers[\"x-amz-object-lock-legal-hold\"] !== undefined) {\n        contents.ObjectLockLegalHoldStatus = output.headers[\"x-amz-object-lock-legal-hold\"];\n      }\n\n      Object.keys(output.headers).forEach(function (header) {\n        if (contents.Metadata === undefined) {\n          contents.Metadata = {};\n        }\n\n        if (header.startsWith(\"x-amz-meta-\")) {\n          contents.Metadata[header.substring(11)] = output.headers[header];\n        }\n      });\n      data = output.body;\n      contents.Body = data;\n      return [2\n      /*return*/\n      , Promise.resolve(contents)];\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetObjectCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n\n    var _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"InvalidObjectState\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.s3#InvalidObjectState\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"NoSuchKey\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.s3#NoSuchKey\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlInvalidObjectStateResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetObjectAclCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetObjectAclCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Grants: undefined,\n            Owner: undefined,\n            RequestCharged: undefined\n          };\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.AccessControlList === \"\") {\n            contents.Grants = [];\n          }\n\n          if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n            contents.Grants = deserializeAws_restXmlGrants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n          }\n\n          if (data[\"Owner\"] !== undefined) {\n            contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetObjectAclCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n\n    var _d;\n\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"NoSuchKey\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.s3#NoSuchKey\":\n              return [3\n              /*break*/\n              , 2];\n          }\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetObjectLegalHoldCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetObjectLegalHoldCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            LegalHold: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.LegalHold = deserializeAws_restXmlObjectLockLegalHold(data, context);\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetObjectLegalHoldCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetObjectLockConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetObjectLockConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            ObjectLockConfiguration: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.ObjectLockConfiguration = deserializeAws_restXmlObjectLockConfiguration(data, context);\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetObjectLockConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetObjectRetentionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetObjectRetentionCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Retention: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.Retention = deserializeAws_restXmlObjectLockRetention(data, context);\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetObjectRetentionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetObjectTaggingCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetObjectTaggingCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            TagSet: undefined,\n            VersionId: undefined\n          };\n\n          if (output.headers[\"x-amz-version-id\"] !== undefined) {\n            contents.VersionId = output.headers[\"x-amz-version-id\"];\n          }\n\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.TagSet === \"\") {\n            contents.TagSet = [];\n          }\n\n          if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n            contents.TagSet = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetObjectTaggingCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetObjectTorrentCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return [2\n        /*return*/\n        , deserializeAws_restXmlGetObjectTorrentCommandError(output, context)];\n      }\n\n      contents = {\n        $metadata: deserializeMetadata(output),\n        Body: undefined,\n        RequestCharged: undefined\n      };\n\n      if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n      }\n\n      data = output.body;\n      contents.Body = data;\n      return [2\n      /*return*/\n      , Promise.resolve(contents)];\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetObjectTorrentCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlGetPublicAccessBlockCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlGetPublicAccessBlockCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            PublicAccessBlockConfiguration: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.PublicAccessBlockConfiguration = deserializeAws_restXmlPublicAccessBlockConfiguration(data, context);\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlGetPublicAccessBlockCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlHeadBucketCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlHeadBucketCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlHeadBucketCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n\n    var _d;\n\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"NoSuchBucket\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.s3#NoSuchBucket\":\n              return [3\n              /*break*/\n              , 2];\n          }\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlHeadObjectCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlHeadObjectCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            AcceptRanges: undefined,\n            ArchiveStatus: undefined,\n            BucketKeyEnabled: undefined,\n            CacheControl: undefined,\n            ContentDisposition: undefined,\n            ContentEncoding: undefined,\n            ContentLanguage: undefined,\n            ContentLength: undefined,\n            ContentType: undefined,\n            DeleteMarker: undefined,\n            ETag: undefined,\n            Expiration: undefined,\n            Expires: undefined,\n            LastModified: undefined,\n            Metadata: undefined,\n            MissingMeta: undefined,\n            ObjectLockLegalHoldStatus: undefined,\n            ObjectLockMode: undefined,\n            ObjectLockRetainUntilDate: undefined,\n            PartsCount: undefined,\n            ReplicationStatus: undefined,\n            RequestCharged: undefined,\n            Restore: undefined,\n            SSECustomerAlgorithm: undefined,\n            SSECustomerKeyMD5: undefined,\n            SSEKMSKeyId: undefined,\n            ServerSideEncryption: undefined,\n            StorageClass: undefined,\n            VersionId: undefined,\n            WebsiteRedirectLocation: undefined\n          };\n\n          if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n            contents.DeleteMarker = output.headers[\"x-amz-delete-marker\"] === \"true\";\n          }\n\n          if (output.headers[\"accept-ranges\"] !== undefined) {\n            contents.AcceptRanges = output.headers[\"accept-ranges\"];\n          }\n\n          if (output.headers[\"x-amz-expiration\"] !== undefined) {\n            contents.Expiration = output.headers[\"x-amz-expiration\"];\n          }\n\n          if (output.headers[\"x-amz-restore\"] !== undefined) {\n            contents.Restore = output.headers[\"x-amz-restore\"];\n          }\n\n          if (output.headers[\"x-amz-archive-status\"] !== undefined) {\n            contents.ArchiveStatus = output.headers[\"x-amz-archive-status\"];\n          }\n\n          if (output.headers[\"last-modified\"] !== undefined) {\n            contents.LastModified = new Date(output.headers[\"last-modified\"]);\n          }\n\n          if (output.headers[\"content-length\"] !== undefined) {\n            contents.ContentLength = parseInt(output.headers[\"content-length\"], 10);\n          }\n\n          if (output.headers[\"etag\"] !== undefined) {\n            contents.ETag = output.headers[\"etag\"];\n          }\n\n          if (output.headers[\"x-amz-missing-meta\"] !== undefined) {\n            contents.MissingMeta = parseInt(output.headers[\"x-amz-missing-meta\"], 10);\n          }\n\n          if (output.headers[\"x-amz-version-id\"] !== undefined) {\n            contents.VersionId = output.headers[\"x-amz-version-id\"];\n          }\n\n          if (output.headers[\"cache-control\"] !== undefined) {\n            contents.CacheControl = output.headers[\"cache-control\"];\n          }\n\n          if (output.headers[\"content-disposition\"] !== undefined) {\n            contents.ContentDisposition = output.headers[\"content-disposition\"];\n          }\n\n          if (output.headers[\"content-encoding\"] !== undefined) {\n            contents.ContentEncoding = output.headers[\"content-encoding\"];\n          }\n\n          if (output.headers[\"content-language\"] !== undefined) {\n            contents.ContentLanguage = output.headers[\"content-language\"];\n          }\n\n          if (output.headers[\"content-type\"] !== undefined) {\n            contents.ContentType = output.headers[\"content-type\"];\n          }\n\n          if (output.headers[\"expires\"] !== undefined) {\n            contents.Expires = new Date(output.headers[\"expires\"]);\n          }\n\n          if (output.headers[\"x-amz-website-redirect-location\"] !== undefined) {\n            contents.WebsiteRedirectLocation = output.headers[\"x-amz-website-redirect-location\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n            contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n            contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n            contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n            contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n            contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n          }\n\n          if (output.headers[\"x-amz-storage-class\"] !== undefined) {\n            contents.StorageClass = output.headers[\"x-amz-storage-class\"];\n          }\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          if (output.headers[\"x-amz-replication-status\"] !== undefined) {\n            contents.ReplicationStatus = output.headers[\"x-amz-replication-status\"];\n          }\n\n          if (output.headers[\"x-amz-mp-parts-count\"] !== undefined) {\n            contents.PartsCount = parseInt(output.headers[\"x-amz-mp-parts-count\"], 10);\n          }\n\n          if (output.headers[\"x-amz-object-lock-mode\"] !== undefined) {\n            contents.ObjectLockMode = output.headers[\"x-amz-object-lock-mode\"];\n          }\n\n          if (output.headers[\"x-amz-object-lock-retain-until-date\"] !== undefined) {\n            contents.ObjectLockRetainUntilDate = new Date(output.headers[\"x-amz-object-lock-retain-until-date\"]);\n          }\n\n          if (output.headers[\"x-amz-object-lock-legal-hold\"] !== undefined) {\n            contents.ObjectLockLegalHoldStatus = output.headers[\"x-amz-object-lock-legal-hold\"];\n          }\n\n          Object.keys(output.headers).forEach(function (header) {\n            if (contents.Metadata === undefined) {\n              contents.Metadata = {};\n            }\n\n            if (header.startsWith(\"x-amz-meta-\")) {\n              contents.Metadata[header.substring(11)] = output.headers[header];\n            }\n          });\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlHeadObjectCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n\n    var _d;\n\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"NoSuchKey\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.s3#NoSuchKey\":\n              return [3\n              /*break*/\n              , 2];\n          }\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            AnalyticsConfigurationList: undefined,\n            ContinuationToken: undefined,\n            IsTruncated: undefined,\n            NextContinuationToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.AnalyticsConfiguration === \"\") {\n            contents.AnalyticsConfigurationList = [];\n          }\n\n          if (data[\"AnalyticsConfiguration\"] !== undefined) {\n            contents.AnalyticsConfigurationList = deserializeAws_restXmlAnalyticsConfigurationList(__getArrayIfSingleItem(data[\"AnalyticsConfiguration\"]), context);\n          }\n\n          if (data[\"ContinuationToken\"] !== undefined) {\n            contents.ContinuationToken = data[\"ContinuationToken\"];\n          }\n\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n\n          if (data[\"NextContinuationToken\"] !== undefined) {\n            contents.NextContinuationToken = data[\"NextContinuationToken\"];\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            ContinuationToken: undefined,\n            IntelligentTieringConfigurationList: undefined,\n            IsTruncated: undefined,\n            NextContinuationToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data[\"ContinuationToken\"] !== undefined) {\n            contents.ContinuationToken = data[\"ContinuationToken\"];\n          }\n\n          if (data.IntelligentTieringConfiguration === \"\") {\n            contents.IntelligentTieringConfigurationList = [];\n          }\n\n          if (data[\"IntelligentTieringConfiguration\"] !== undefined) {\n            contents.IntelligentTieringConfigurationList = deserializeAws_restXmlIntelligentTieringConfigurationList(__getArrayIfSingleItem(data[\"IntelligentTieringConfiguration\"]), context);\n          }\n\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n\n          if (data[\"NextContinuationToken\"] !== undefined) {\n            contents.NextContinuationToken = data[\"NextContinuationToken\"];\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlListBucketInventoryConfigurationsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlListBucketInventoryConfigurationsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            ContinuationToken: undefined,\n            InventoryConfigurationList: undefined,\n            IsTruncated: undefined,\n            NextContinuationToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data[\"ContinuationToken\"] !== undefined) {\n            contents.ContinuationToken = data[\"ContinuationToken\"];\n          }\n\n          if (data.InventoryConfiguration === \"\") {\n            contents.InventoryConfigurationList = [];\n          }\n\n          if (data[\"InventoryConfiguration\"] !== undefined) {\n            contents.InventoryConfigurationList = deserializeAws_restXmlInventoryConfigurationList(__getArrayIfSingleItem(data[\"InventoryConfiguration\"]), context);\n          }\n\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n\n          if (data[\"NextContinuationToken\"] !== undefined) {\n            contents.NextContinuationToken = data[\"NextContinuationToken\"];\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlListBucketInventoryConfigurationsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlListBucketMetricsConfigurationsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlListBucketMetricsConfigurationsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            ContinuationToken: undefined,\n            IsTruncated: undefined,\n            MetricsConfigurationList: undefined,\n            NextContinuationToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data[\"ContinuationToken\"] !== undefined) {\n            contents.ContinuationToken = data[\"ContinuationToken\"];\n          }\n\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n\n          if (data.MetricsConfiguration === \"\") {\n            contents.MetricsConfigurationList = [];\n          }\n\n          if (data[\"MetricsConfiguration\"] !== undefined) {\n            contents.MetricsConfigurationList = deserializeAws_restXmlMetricsConfigurationList(__getArrayIfSingleItem(data[\"MetricsConfiguration\"]), context);\n          }\n\n          if (data[\"NextContinuationToken\"] !== undefined) {\n            contents.NextContinuationToken = data[\"NextContinuationToken\"];\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlListBucketMetricsConfigurationsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlListBucketsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlListBucketsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Buckets: undefined,\n            Owner: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Buckets === \"\") {\n            contents.Buckets = [];\n          }\n\n          if (data[\"Buckets\"] !== undefined && data[\"Buckets\"][\"Bucket\"] !== undefined) {\n            contents.Buckets = deserializeAws_restXmlBuckets(__getArrayIfSingleItem(data[\"Buckets\"][\"Bucket\"]), context);\n          }\n\n          if (data[\"Owner\"] !== undefined) {\n            contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlListBucketsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlListMultipartUploadsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlListMultipartUploadsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Bucket: undefined,\n            CommonPrefixes: undefined,\n            Delimiter: undefined,\n            EncodingType: undefined,\n            IsTruncated: undefined,\n            KeyMarker: undefined,\n            MaxUploads: undefined,\n            NextKeyMarker: undefined,\n            NextUploadIdMarker: undefined,\n            Prefix: undefined,\n            UploadIdMarker: undefined,\n            Uploads: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data[\"Bucket\"] !== undefined) {\n            contents.Bucket = data[\"Bucket\"];\n          }\n\n          if (data.CommonPrefixes === \"\") {\n            contents.CommonPrefixes = [];\n          }\n\n          if (data[\"CommonPrefixes\"] !== undefined) {\n            contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n          }\n\n          if (data[\"Delimiter\"] !== undefined) {\n            contents.Delimiter = data[\"Delimiter\"];\n          }\n\n          if (data[\"EncodingType\"] !== undefined) {\n            contents.EncodingType = data[\"EncodingType\"];\n          }\n\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n\n          if (data[\"KeyMarker\"] !== undefined) {\n            contents.KeyMarker = data[\"KeyMarker\"];\n          }\n\n          if (data[\"MaxUploads\"] !== undefined) {\n            contents.MaxUploads = parseInt(data[\"MaxUploads\"]);\n          }\n\n          if (data[\"NextKeyMarker\"] !== undefined) {\n            contents.NextKeyMarker = data[\"NextKeyMarker\"];\n          }\n\n          if (data[\"NextUploadIdMarker\"] !== undefined) {\n            contents.NextUploadIdMarker = data[\"NextUploadIdMarker\"];\n          }\n\n          if (data[\"Prefix\"] !== undefined) {\n            contents.Prefix = data[\"Prefix\"];\n          }\n\n          if (data[\"UploadIdMarker\"] !== undefined) {\n            contents.UploadIdMarker = data[\"UploadIdMarker\"];\n          }\n\n          if (data.Upload === \"\") {\n            contents.Uploads = [];\n          }\n\n          if (data[\"Upload\"] !== undefined) {\n            contents.Uploads = deserializeAws_restXmlMultipartUploadList(__getArrayIfSingleItem(data[\"Upload\"]), context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlListMultipartUploadsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlListObjectsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlListObjectsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CommonPrefixes: undefined,\n            Contents: undefined,\n            Delimiter: undefined,\n            EncodingType: undefined,\n            IsTruncated: undefined,\n            Marker: undefined,\n            MaxKeys: undefined,\n            Name: undefined,\n            NextMarker: undefined,\n            Prefix: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.CommonPrefixes === \"\") {\n            contents.CommonPrefixes = [];\n          }\n\n          if (data[\"CommonPrefixes\"] !== undefined) {\n            contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n          }\n\n          if (data.Contents === \"\") {\n            contents.Contents = [];\n          }\n\n          if (data[\"Contents\"] !== undefined) {\n            contents.Contents = deserializeAws_restXmlObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n          }\n\n          if (data[\"Delimiter\"] !== undefined) {\n            contents.Delimiter = data[\"Delimiter\"];\n          }\n\n          if (data[\"EncodingType\"] !== undefined) {\n            contents.EncodingType = data[\"EncodingType\"];\n          }\n\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n\n          if (data[\"Marker\"] !== undefined) {\n            contents.Marker = data[\"Marker\"];\n          }\n\n          if (data[\"MaxKeys\"] !== undefined) {\n            contents.MaxKeys = parseInt(data[\"MaxKeys\"]);\n          }\n\n          if (data[\"Name\"] !== undefined) {\n            contents.Name = data[\"Name\"];\n          }\n\n          if (data[\"NextMarker\"] !== undefined) {\n            contents.NextMarker = data[\"NextMarker\"];\n          }\n\n          if (data[\"Prefix\"] !== undefined) {\n            contents.Prefix = data[\"Prefix\"];\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlListObjectsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n\n    var _d;\n\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"NoSuchBucket\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.s3#NoSuchBucket\":\n              return [3\n              /*break*/\n              , 2];\n          }\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlListObjectsV2Command = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlListObjectsV2CommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CommonPrefixes: undefined,\n            Contents: undefined,\n            ContinuationToken: undefined,\n            Delimiter: undefined,\n            EncodingType: undefined,\n            IsTruncated: undefined,\n            KeyCount: undefined,\n            MaxKeys: undefined,\n            Name: undefined,\n            NextContinuationToken: undefined,\n            Prefix: undefined,\n            StartAfter: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.CommonPrefixes === \"\") {\n            contents.CommonPrefixes = [];\n          }\n\n          if (data[\"CommonPrefixes\"] !== undefined) {\n            contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n          }\n\n          if (data.Contents === \"\") {\n            contents.Contents = [];\n          }\n\n          if (data[\"Contents\"] !== undefined) {\n            contents.Contents = deserializeAws_restXmlObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n          }\n\n          if (data[\"ContinuationToken\"] !== undefined) {\n            contents.ContinuationToken = data[\"ContinuationToken\"];\n          }\n\n          if (data[\"Delimiter\"] !== undefined) {\n            contents.Delimiter = data[\"Delimiter\"];\n          }\n\n          if (data[\"EncodingType\"] !== undefined) {\n            contents.EncodingType = data[\"EncodingType\"];\n          }\n\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n\n          if (data[\"KeyCount\"] !== undefined) {\n            contents.KeyCount = parseInt(data[\"KeyCount\"]);\n          }\n\n          if (data[\"MaxKeys\"] !== undefined) {\n            contents.MaxKeys = parseInt(data[\"MaxKeys\"]);\n          }\n\n          if (data[\"Name\"] !== undefined) {\n            contents.Name = data[\"Name\"];\n          }\n\n          if (data[\"NextContinuationToken\"] !== undefined) {\n            contents.NextContinuationToken = data[\"NextContinuationToken\"];\n          }\n\n          if (data[\"Prefix\"] !== undefined) {\n            contents.Prefix = data[\"Prefix\"];\n          }\n\n          if (data[\"StartAfter\"] !== undefined) {\n            contents.StartAfter = data[\"StartAfter\"];\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlListObjectsV2CommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n\n    var _d;\n\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"NoSuchBucket\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.s3#NoSuchBucket\":\n              return [3\n              /*break*/\n              , 2];\n          }\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlListObjectVersionsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlListObjectVersionsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            CommonPrefixes: undefined,\n            DeleteMarkers: undefined,\n            Delimiter: undefined,\n            EncodingType: undefined,\n            IsTruncated: undefined,\n            KeyMarker: undefined,\n            MaxKeys: undefined,\n            Name: undefined,\n            NextKeyMarker: undefined,\n            NextVersionIdMarker: undefined,\n            Prefix: undefined,\n            VersionIdMarker: undefined,\n            Versions: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.CommonPrefixes === \"\") {\n            contents.CommonPrefixes = [];\n          }\n\n          if (data[\"CommonPrefixes\"] !== undefined) {\n            contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(__getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n          }\n\n          if (data.DeleteMarker === \"\") {\n            contents.DeleteMarkers = [];\n          }\n\n          if (data[\"DeleteMarker\"] !== undefined) {\n            contents.DeleteMarkers = deserializeAws_restXmlDeleteMarkers(__getArrayIfSingleItem(data[\"DeleteMarker\"]), context);\n          }\n\n          if (data[\"Delimiter\"] !== undefined) {\n            contents.Delimiter = data[\"Delimiter\"];\n          }\n\n          if (data[\"EncodingType\"] !== undefined) {\n            contents.EncodingType = data[\"EncodingType\"];\n          }\n\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n\n          if (data[\"KeyMarker\"] !== undefined) {\n            contents.KeyMarker = data[\"KeyMarker\"];\n          }\n\n          if (data[\"MaxKeys\"] !== undefined) {\n            contents.MaxKeys = parseInt(data[\"MaxKeys\"]);\n          }\n\n          if (data[\"Name\"] !== undefined) {\n            contents.Name = data[\"Name\"];\n          }\n\n          if (data[\"NextKeyMarker\"] !== undefined) {\n            contents.NextKeyMarker = data[\"NextKeyMarker\"];\n          }\n\n          if (data[\"NextVersionIdMarker\"] !== undefined) {\n            contents.NextVersionIdMarker = data[\"NextVersionIdMarker\"];\n          }\n\n          if (data[\"Prefix\"] !== undefined) {\n            contents.Prefix = data[\"Prefix\"];\n          }\n\n          if (data[\"VersionIdMarker\"] !== undefined) {\n            contents.VersionIdMarker = data[\"VersionIdMarker\"];\n          }\n\n          if (data.Version === \"\") {\n            contents.Versions = [];\n          }\n\n          if (data[\"Version\"] !== undefined) {\n            contents.Versions = deserializeAws_restXmlObjectVersionList(__getArrayIfSingleItem(data[\"Version\"]), context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlListObjectVersionsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlListPartsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlListPartsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            AbortDate: undefined,\n            AbortRuleId: undefined,\n            Bucket: undefined,\n            Initiator: undefined,\n            IsTruncated: undefined,\n            Key: undefined,\n            MaxParts: undefined,\n            NextPartNumberMarker: undefined,\n            Owner: undefined,\n            PartNumberMarker: undefined,\n            Parts: undefined,\n            RequestCharged: undefined,\n            StorageClass: undefined,\n            UploadId: undefined\n          };\n\n          if (output.headers[\"x-amz-abort-date\"] !== undefined) {\n            contents.AbortDate = new Date(output.headers[\"x-amz-abort-date\"]);\n          }\n\n          if (output.headers[\"x-amz-abort-rule-id\"] !== undefined) {\n            contents.AbortRuleId = output.headers[\"x-amz-abort-rule-id\"];\n          }\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data[\"Bucket\"] !== undefined) {\n            contents.Bucket = data[\"Bucket\"];\n          }\n\n          if (data[\"Initiator\"] !== undefined) {\n            contents.Initiator = deserializeAws_restXmlInitiator(data[\"Initiator\"], context);\n          }\n\n          if (data[\"IsTruncated\"] !== undefined) {\n            contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n          }\n\n          if (data[\"Key\"] !== undefined) {\n            contents.Key = data[\"Key\"];\n          }\n\n          if (data[\"MaxParts\"] !== undefined) {\n            contents.MaxParts = parseInt(data[\"MaxParts\"]);\n          }\n\n          if (data[\"NextPartNumberMarker\"] !== undefined) {\n            contents.NextPartNumberMarker = data[\"NextPartNumberMarker\"];\n          }\n\n          if (data[\"Owner\"] !== undefined) {\n            contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n          }\n\n          if (data[\"PartNumberMarker\"] !== undefined) {\n            contents.PartNumberMarker = data[\"PartNumberMarker\"];\n          }\n\n          if (data.Part === \"\") {\n            contents.Parts = [];\n          }\n\n          if (data[\"Part\"] !== undefined) {\n            contents.Parts = deserializeAws_restXmlParts(__getArrayIfSingleItem(data[\"Part\"]), context);\n          }\n\n          if (data[\"StorageClass\"] !== undefined) {\n            contents.StorageClass = data[\"StorageClass\"];\n          }\n\n          if (data[\"UploadId\"] !== undefined) {\n            contents.UploadId = data[\"UploadId\"];\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlListPartsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketAclCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketAclCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketAclCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketCorsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketCorsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketCorsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketEncryptionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketEncryptionCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketEncryptionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketInventoryConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketInventoryConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketInventoryConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketLoggingCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketLoggingCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketLoggingCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketMetricsConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketMetricsConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketMetricsConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketNotificationConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketNotificationConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketNotificationConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketOwnershipControlsCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketOwnershipControlsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketOwnershipControlsCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketPolicyCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketPolicyCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketPolicyCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketReplicationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketReplicationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketReplicationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketRequestPaymentCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketRequestPaymentCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketRequestPaymentCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketTaggingCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketTaggingCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketTaggingCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketVersioningCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketVersioningCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketVersioningCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutBucketWebsiteCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutBucketWebsiteCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutBucketWebsiteCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutObjectCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutObjectCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            BucketKeyEnabled: undefined,\n            ETag: undefined,\n            Expiration: undefined,\n            RequestCharged: undefined,\n            SSECustomerAlgorithm: undefined,\n            SSECustomerKeyMD5: undefined,\n            SSEKMSEncryptionContext: undefined,\n            SSEKMSKeyId: undefined,\n            ServerSideEncryption: undefined,\n            VersionId: undefined\n          };\n\n          if (output.headers[\"x-amz-expiration\"] !== undefined) {\n            contents.Expiration = output.headers[\"x-amz-expiration\"];\n          }\n\n          if (output.headers[\"etag\"] !== undefined) {\n            contents.ETag = output.headers[\"etag\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n            contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n          }\n\n          if (output.headers[\"x-amz-version-id\"] !== undefined) {\n            contents.VersionId = output.headers[\"x-amz-version-id\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n            contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n            contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n            contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n            contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n            contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n          }\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutObjectCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutObjectAclCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutObjectAclCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            RequestCharged: undefined\n          };\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutObjectAclCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n\n    var _d;\n\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"NoSuchKey\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.s3#NoSuchKey\":\n              return [3\n              /*break*/\n              , 2];\n          }\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutObjectLegalHoldCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutObjectLegalHoldCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            RequestCharged: undefined\n          };\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutObjectLegalHoldCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutObjectLockConfigurationCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutObjectLockConfigurationCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            RequestCharged: undefined\n          };\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutObjectLockConfigurationCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutObjectRetentionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutObjectRetentionCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            RequestCharged: undefined\n          };\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutObjectRetentionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutObjectTaggingCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutObjectTaggingCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            VersionId: undefined\n          };\n\n          if (output.headers[\"x-amz-version-id\"] !== undefined) {\n            contents.VersionId = output.headers[\"x-amz-version-id\"];\n          }\n\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutObjectTaggingCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlPutPublicAccessBlockCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlPutPublicAccessBlockCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlPutPublicAccessBlockCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlRestoreObjectCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlRestoreObjectCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            RequestCharged: undefined,\n            RestoreOutputPath: undefined\n          };\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          if (output.headers[\"x-amz-restore-output-path\"] !== undefined) {\n            contents.RestoreOutputPath = output.headers[\"x-amz-restore-output-path\"];\n          }\n\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlRestoreObjectCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;\n\n    var _d;\n\n    return __generator(this, function (_e) {\n      switch (_e.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _d = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_d.body = _e.sent(), _d)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"ObjectAlreadyInActiveTierError\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.s3#ObjectAlreadyInActiveTierError\":\n              return [3\n              /*break*/\n              , 2];\n          }\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_e.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 5];\n\n        case 4:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _e.label = 5;\n\n        case 5:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlSelectObjectContentCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return [2\n        /*return*/\n        , deserializeAws_restXmlSelectObjectContentCommandError(output, context)];\n      }\n\n      contents = {\n        $metadata: deserializeMetadata(output),\n        Payload: undefined\n      };\n      data = context.eventStreamMarshaller.deserialize(output.body, function (event) {\n        return __awaiter(void 0, void 0, void 0, function () {\n          var eventName, eventHeaders, eventMessage, parsedEvent;\n\n          var _a;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                eventName = Object.keys(event)[0];\n                eventHeaders = Object.entries(event[eventName].headers).reduce(function (accummulator, curr) {\n                  accummulator[curr[0]] = curr[1].value;\n                  return accummulator;\n                }, {});\n                eventMessage = {\n                  headers: eventHeaders,\n                  body: event[eventName].body\n                };\n                parsedEvent = (_a = {}, _a[eventName] = eventMessage, _a);\n                return [4\n                /*yield*/\n                , deserializeAws_restXmlSelectObjectContentEventStream_event(parsedEvent, context)];\n\n              case 1:\n                return [2\n                /*return*/\n                , _b.sent()];\n            }\n          });\n        });\n      });\n      contents.Payload = data;\n      return [2\n      /*return*/\n      , Promise.resolve(contents)];\n    });\n  });\n};\n\nvar deserializeAws_restXmlSelectObjectContentCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlUploadPartCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlUploadPartCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            BucketKeyEnabled: undefined,\n            ETag: undefined,\n            RequestCharged: undefined,\n            SSECustomerAlgorithm: undefined,\n            SSECustomerKeyMD5: undefined,\n            SSEKMSKeyId: undefined,\n            ServerSideEncryption: undefined\n          };\n\n          if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n            contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n          }\n\n          if (output.headers[\"etag\"] !== undefined) {\n            contents.ETag = output.headers[\"etag\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n            contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n            contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n            contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n            contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n          }\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlUploadPartCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restXmlUploadPartCopyCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restXmlUploadPartCopyCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            BucketKeyEnabled: undefined,\n            CopyPartResult: undefined,\n            CopySourceVersionId: undefined,\n            RequestCharged: undefined,\n            SSECustomerAlgorithm: undefined,\n            SSECustomerKeyMD5: undefined,\n            SSEKMSKeyId: undefined,\n            ServerSideEncryption: undefined\n          };\n\n          if (output.headers[\"x-amz-copy-source-version-id\"] !== undefined) {\n            contents.CopySourceVersionId = output.headers[\"x-amz-copy-source-version-id\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n            contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n            contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n            contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n            contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n          }\n\n          if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n            contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n          }\n\n          if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n            contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n          }\n\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n          contents.CopyPartResult = deserializeAws_restXmlCopyPartResult(data, context);\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlUploadPartCopyCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, parsedBody, message;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _c.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n\n          switch (errorCode) {\n            default:\n              parsedBody = parsedOutput.body;\n              errorCode = parsedBody.code || parsedBody.Code || errorCode;\n              response = __assign(__assign({}, parsedBody), {\n                name: \"\" + errorCode,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output)\n              });\n          }\n\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlSelectObjectContentEventStream_event = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, _b, _c, _d, _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          if (!(output[\"Records\"] !== undefined)) return [3\n          /*break*/\n          , 2];\n          _a = {};\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlRecordsEvent_event(output[\"Records\"], context)];\n\n        case 1:\n          return [2\n          /*return*/\n          , (_a.Records = _f.sent(), _a)];\n\n        case 2:\n          if (!(output[\"Stats\"] !== undefined)) return [3\n          /*break*/\n          , 4];\n          _b = {};\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlStatsEvent_event(output[\"Stats\"], context)];\n\n        case 3:\n          return [2\n          /*return*/\n          , (_b.Stats = _f.sent(), _b)];\n\n        case 4:\n          if (!(output[\"Progress\"] !== undefined)) return [3\n          /*break*/\n          , 6];\n          _c = {};\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlProgressEvent_event(output[\"Progress\"], context)];\n\n        case 5:\n          return [2\n          /*return*/\n          , (_c.Progress = _f.sent(), _c)];\n\n        case 6:\n          if (!(output[\"Cont\"] !== undefined)) return [3\n          /*break*/\n          , 8];\n          _d = {};\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlContinuationEvent_event(output[\"Cont\"], context)];\n\n        case 7:\n          return [2\n          /*return*/\n          , (_d.Cont = _f.sent(), _d)];\n\n        case 8:\n          if (!(output[\"End\"] !== undefined)) return [3\n          /*break*/\n          , 10];\n          _e = {};\n          return [4\n          /*yield*/\n          , deserializeAws_restXmlEndEvent_event(output[\"End\"], context)];\n\n        case 9:\n          return [2\n          /*return*/\n          , (_e.End = _f.sent(), _e)];\n\n        case 10:\n          return [2\n          /*return*/\n          , {\n            $unknown: output\n          }];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlContinuationEvent_event = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      contents = {};\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restXmlEndEvent_event = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      contents = {};\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restXmlProgressEvent_event = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          contents = {};\n          _a = contents;\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          _a.Details = _b.sent();\n          return [2\n          /*return*/\n          , contents];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlRecordsEvent_event = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      contents = {};\n      contents.Payload = output.body;\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restXmlStatsEvent_event = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          contents = {};\n          _a = contents;\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          _a.Details = _b.sent();\n          return [2\n          /*return*/\n          , contents];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restXmlBucketAlreadyExistsResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"BucketAlreadyExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput)\n      };\n      data = parsedOutput.body;\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restXmlBucketAlreadyOwnedByYouResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"BucketAlreadyOwnedByYou\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput)\n      };\n      data = parsedOutput.body;\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restXmlInvalidObjectStateResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidObjectState\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        AccessTier: undefined,\n        StorageClass: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data[\"AccessTier\"] !== undefined) {\n        contents.AccessTier = data[\"AccessTier\"];\n      }\n\n      if (data[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = data[\"StorageClass\"];\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restXmlNoSuchBucketResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"NoSuchBucket\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput)\n      };\n      data = parsedOutput.body;\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restXmlNoSuchKeyResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"NoSuchKey\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput)\n      };\n      data = parsedOutput.body;\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restXmlNoSuchUploadResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"NoSuchUpload\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput)\n      };\n      data = parsedOutput.body;\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ObjectAlreadyInActiveTierError\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput)\n      };\n      data = parsedOutput.body;\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restXmlObjectNotInActiveTierErrorResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ObjectNotInActiveTierError\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput)\n      };\n      data = parsedOutput.body;\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar serializeAws_restXmlAbortIncompleteMultipartUpload = function (input, context) {\n  var bodyNode = new __XmlNode(\"AbortIncompleteMultipartUpload\");\n\n  if (input.DaysAfterInitiation !== undefined && input.DaysAfterInitiation !== null) {\n    var node = new __XmlNode(\"DaysAfterInitiation\").addChildNode(new __XmlText(String(input.DaysAfterInitiation))).withName(\"DaysAfterInitiation\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlAccelerateConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"AccelerateConfiguration\");\n\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"BucketAccelerateStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlAccessControlPolicy = function (input, context) {\n  var bodyNode = new __XmlNode(\"AccessControlPolicy\");\n\n  if (input.Grants !== undefined && input.Grants !== null) {\n    var nodes = serializeAws_restXmlGrants(input.Grants, context);\n    var containerNode_1 = new __XmlNode(\"AccessControlList\");\n    nodes.map(function (node) {\n      containerNode_1.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode_1);\n  }\n\n  if (input.Owner !== undefined && input.Owner !== null) {\n    var node = serializeAws_restXmlOwner(input.Owner, context).withName(\"Owner\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlAccessControlTranslation = function (input, context) {\n  var bodyNode = new __XmlNode(\"AccessControlTranslation\");\n\n  if (input.Owner !== undefined && input.Owner !== null) {\n    var node = new __XmlNode(\"OwnerOverride\").addChildNode(new __XmlText(input.Owner)).withName(\"Owner\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlAllowedHeaders = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = new __XmlNode(\"AllowedHeader\").addChildNode(new __XmlText(entry));\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlAllowedMethods = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = new __XmlNode(\"AllowedMethod\").addChildNode(new __XmlText(entry));\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlAllowedOrigins = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = new __XmlNode(\"AllowedOrigin\").addChildNode(new __XmlText(entry));\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlAnalyticsAndOperator = function (input, context) {\n  var bodyNode = new __XmlNode(\"AnalyticsAndOperator\");\n\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Tags !== undefined && input.Tags !== null) {\n    var nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlAnalyticsConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"AnalyticsConfiguration\");\n\n  if (input.Id !== undefined && input.Id !== null) {\n    var node = new __XmlNode(\"AnalyticsId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlAnalyticsFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.StorageClassAnalysis !== undefined && input.StorageClassAnalysis !== null) {\n    var node = serializeAws_restXmlStorageClassAnalysis(input.StorageClassAnalysis, context).withName(\"StorageClassAnalysis\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlAnalyticsExportDestination = function (input, context) {\n  var bodyNode = new __XmlNode(\"AnalyticsExportDestination\");\n\n  if (input.S3BucketDestination !== undefined && input.S3BucketDestination !== null) {\n    var node = serializeAws_restXmlAnalyticsS3BucketDestination(input.S3BucketDestination, context).withName(\"S3BucketDestination\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlAnalyticsFilter = function (input, context) {\n  var bodyNode = new __XmlNode(\"AnalyticsFilter\");\n  AnalyticsFilter.visit(input, {\n    Prefix: function (value) {\n      var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: function (value) {\n      var node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: function (value) {\n      var node = serializeAws_restXmlAnalyticsAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: function (name, value) {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    }\n  });\n  return bodyNode;\n};\n\nvar serializeAws_restXmlAnalyticsS3BucketDestination = function (input, context) {\n  var bodyNode = new __XmlNode(\"AnalyticsS3BucketDestination\");\n\n  if (input.Format !== undefined && input.Format !== null) {\n    var node = new __XmlNode(\"AnalyticsS3ExportFileFormat\").addChildNode(new __XmlText(input.Format)).withName(\"Format\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.BucketAccountId !== undefined && input.BucketAccountId !== null) {\n    var node = new __XmlNode(\"AccountId\").addChildNode(new __XmlText(input.BucketAccountId)).withName(\"BucketAccountId\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Bucket !== undefined && input.Bucket !== null) {\n    var node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.Bucket)).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlBucketLifecycleConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"BucketLifecycleConfiguration\");\n\n  if (input.Rules !== undefined && input.Rules !== null) {\n    var nodes = serializeAws_restXmlLifecycleRules(input.Rules, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlBucketLoggingStatus = function (input, context) {\n  var bodyNode = new __XmlNode(\"BucketLoggingStatus\");\n\n  if (input.LoggingEnabled !== undefined && input.LoggingEnabled !== null) {\n    var node = serializeAws_restXmlLoggingEnabled(input.LoggingEnabled, context).withName(\"LoggingEnabled\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlCompletedMultipartUpload = function (input, context) {\n  var bodyNode = new __XmlNode(\"CompletedMultipartUpload\");\n\n  if (input.Parts !== undefined && input.Parts !== null) {\n    var nodes = serializeAws_restXmlCompletedPartList(input.Parts, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Part\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlCompletedPart = function (input, context) {\n  var bodyNode = new __XmlNode(\"CompletedPart\");\n\n  if (input.ETag !== undefined && input.ETag !== null) {\n    var node = new __XmlNode(\"ETag\").addChildNode(new __XmlText(input.ETag)).withName(\"ETag\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.PartNumber !== undefined && input.PartNumber !== null) {\n    var node = new __XmlNode(\"PartNumber\").addChildNode(new __XmlText(String(input.PartNumber))).withName(\"PartNumber\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlCompletedPartList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlCompletedPart(entry, context);\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlCondition = function (input, context) {\n  var bodyNode = new __XmlNode(\"Condition\");\n\n  if (input.HttpErrorCodeReturnedEquals !== undefined && input.HttpErrorCodeReturnedEquals !== null) {\n    var node = new __XmlNode(\"HttpErrorCodeReturnedEquals\").addChildNode(new __XmlText(input.HttpErrorCodeReturnedEquals)).withName(\"HttpErrorCodeReturnedEquals\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.KeyPrefixEquals !== undefined && input.KeyPrefixEquals !== null) {\n    var node = new __XmlNode(\"KeyPrefixEquals\").addChildNode(new __XmlText(input.KeyPrefixEquals)).withName(\"KeyPrefixEquals\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlCORSConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"CORSConfiguration\");\n\n  if (input.CORSRules !== undefined && input.CORSRules !== null) {\n    var nodes = serializeAws_restXmlCORSRules(input.CORSRules, context);\n    nodes.map(function (node) {\n      node = node.withName(\"CORSRule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlCORSRule = function (input, context) {\n  var bodyNode = new __XmlNode(\"CORSRule\");\n\n  if (input.AllowedHeaders !== undefined && input.AllowedHeaders !== null) {\n    var nodes = serializeAws_restXmlAllowedHeaders(input.AllowedHeaders, context);\n    nodes.map(function (node) {\n      node = node.withName(\"AllowedHeader\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  if (input.AllowedMethods !== undefined && input.AllowedMethods !== null) {\n    var nodes = serializeAws_restXmlAllowedMethods(input.AllowedMethods, context);\n    nodes.map(function (node) {\n      node = node.withName(\"AllowedMethod\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  if (input.AllowedOrigins !== undefined && input.AllowedOrigins !== null) {\n    var nodes = serializeAws_restXmlAllowedOrigins(input.AllowedOrigins, context);\n    nodes.map(function (node) {\n      node = node.withName(\"AllowedOrigin\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  if (input.ExposeHeaders !== undefined && input.ExposeHeaders !== null) {\n    var nodes = serializeAws_restXmlExposeHeaders(input.ExposeHeaders, context);\n    nodes.map(function (node) {\n      node = node.withName(\"ExposeHeader\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  if (input.MaxAgeSeconds !== undefined && input.MaxAgeSeconds !== null) {\n    var node = new __XmlNode(\"MaxAgeSeconds\").addChildNode(new __XmlText(String(input.MaxAgeSeconds))).withName(\"MaxAgeSeconds\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlCORSRules = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlCORSRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlCreateBucketConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"CreateBucketConfiguration\");\n\n  if (input.LocationConstraint !== undefined && input.LocationConstraint !== null) {\n    var node = new __XmlNode(\"BucketLocationConstraint\").addChildNode(new __XmlText(input.LocationConstraint)).withName(\"LocationConstraint\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlCSVInput = function (input, context) {\n  var bodyNode = new __XmlNode(\"CSVInput\");\n\n  if (input.FileHeaderInfo !== undefined && input.FileHeaderInfo !== null) {\n    var node = new __XmlNode(\"FileHeaderInfo\").addChildNode(new __XmlText(input.FileHeaderInfo)).withName(\"FileHeaderInfo\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Comments !== undefined && input.Comments !== null) {\n    var node = new __XmlNode(\"Comments\").addChildNode(new __XmlText(input.Comments)).withName(\"Comments\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.QuoteEscapeCharacter !== undefined && input.QuoteEscapeCharacter !== null) {\n    var node = new __XmlNode(\"QuoteEscapeCharacter\").addChildNode(new __XmlText(input.QuoteEscapeCharacter)).withName(\"QuoteEscapeCharacter\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n    var node = new __XmlNode(\"RecordDelimiter\").addChildNode(new __XmlText(input.RecordDelimiter)).withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.FieldDelimiter !== undefined && input.FieldDelimiter !== null) {\n    var node = new __XmlNode(\"FieldDelimiter\").addChildNode(new __XmlText(input.FieldDelimiter)).withName(\"FieldDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.QuoteCharacter !== undefined && input.QuoteCharacter !== null) {\n    var node = new __XmlNode(\"QuoteCharacter\").addChildNode(new __XmlText(input.QuoteCharacter)).withName(\"QuoteCharacter\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.AllowQuotedRecordDelimiter !== undefined && input.AllowQuotedRecordDelimiter !== null) {\n    var node = new __XmlNode(\"AllowQuotedRecordDelimiter\").addChildNode(new __XmlText(String(input.AllowQuotedRecordDelimiter))).withName(\"AllowQuotedRecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlCSVOutput = function (input, context) {\n  var bodyNode = new __XmlNode(\"CSVOutput\");\n\n  if (input.QuoteFields !== undefined && input.QuoteFields !== null) {\n    var node = new __XmlNode(\"QuoteFields\").addChildNode(new __XmlText(input.QuoteFields)).withName(\"QuoteFields\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.QuoteEscapeCharacter !== undefined && input.QuoteEscapeCharacter !== null) {\n    var node = new __XmlNode(\"QuoteEscapeCharacter\").addChildNode(new __XmlText(input.QuoteEscapeCharacter)).withName(\"QuoteEscapeCharacter\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n    var node = new __XmlNode(\"RecordDelimiter\").addChildNode(new __XmlText(input.RecordDelimiter)).withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.FieldDelimiter !== undefined && input.FieldDelimiter !== null) {\n    var node = new __XmlNode(\"FieldDelimiter\").addChildNode(new __XmlText(input.FieldDelimiter)).withName(\"FieldDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.QuoteCharacter !== undefined && input.QuoteCharacter !== null) {\n    var node = new __XmlNode(\"QuoteCharacter\").addChildNode(new __XmlText(input.QuoteCharacter)).withName(\"QuoteCharacter\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlDefaultRetention = function (input, context) {\n  var bodyNode = new __XmlNode(\"DefaultRetention\");\n\n  if (input.Mode !== undefined && input.Mode !== null) {\n    var node = new __XmlNode(\"ObjectLockRetentionMode\").addChildNode(new __XmlText(input.Mode)).withName(\"Mode\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Days !== undefined && input.Days !== null) {\n    var node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Years !== undefined && input.Years !== null) {\n    var node = new __XmlNode(\"Years\").addChildNode(new __XmlText(String(input.Years))).withName(\"Years\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlDelete = function (input, context) {\n  var bodyNode = new __XmlNode(\"Delete\");\n\n  if (input.Objects !== undefined && input.Objects !== null) {\n    var nodes = serializeAws_restXmlObjectIdentifierList(input.Objects, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Object\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  if (input.Quiet !== undefined && input.Quiet !== null) {\n    var node = new __XmlNode(\"Quiet\").addChildNode(new __XmlText(String(input.Quiet))).withName(\"Quiet\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlDeleteMarkerReplication = function (input, context) {\n  var bodyNode = new __XmlNode(\"DeleteMarkerReplication\");\n\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"DeleteMarkerReplicationStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlDestination = function (input, context) {\n  var bodyNode = new __XmlNode(\"Destination\");\n\n  if (input.Bucket !== undefined && input.Bucket !== null) {\n    var node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.Bucket)).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Account !== undefined && input.Account !== null) {\n    var node = new __XmlNode(\"AccountId\").addChildNode(new __XmlText(input.Account)).withName(\"Account\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    var node = new __XmlNode(\"StorageClass\").addChildNode(new __XmlText(input.StorageClass)).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.AccessControlTranslation !== undefined && input.AccessControlTranslation !== null) {\n    var node = serializeAws_restXmlAccessControlTranslation(input.AccessControlTranslation, context).withName(\"AccessControlTranslation\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.EncryptionConfiguration !== undefined && input.EncryptionConfiguration !== null) {\n    var node = serializeAws_restXmlEncryptionConfiguration(input.EncryptionConfiguration, context).withName(\"EncryptionConfiguration\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.ReplicationTime !== undefined && input.ReplicationTime !== null) {\n    var node = serializeAws_restXmlReplicationTime(input.ReplicationTime, context).withName(\"ReplicationTime\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Metrics !== undefined && input.Metrics !== null) {\n    var node = serializeAws_restXmlMetrics(input.Metrics, context).withName(\"Metrics\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlEncryption = function (input, context) {\n  var bodyNode = new __XmlNode(\"Encryption\");\n\n  if (input.EncryptionType !== undefined && input.EncryptionType !== null) {\n    var node = new __XmlNode(\"ServerSideEncryption\").addChildNode(new __XmlText(input.EncryptionType)).withName(\"EncryptionType\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.KMSKeyId !== undefined && input.KMSKeyId !== null) {\n    var node = new __XmlNode(\"SSEKMSKeyId\").addChildNode(new __XmlText(input.KMSKeyId)).withName(\"KMSKeyId\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.KMSContext !== undefined && input.KMSContext !== null) {\n    var node = new __XmlNode(\"KMSContext\").addChildNode(new __XmlText(input.KMSContext)).withName(\"KMSContext\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlEncryptionConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"EncryptionConfiguration\");\n\n  if (input.ReplicaKmsKeyID !== undefined && input.ReplicaKmsKeyID !== null) {\n    var node = new __XmlNode(\"ReplicaKmsKeyID\").addChildNode(new __XmlText(input.ReplicaKmsKeyID)).withName(\"ReplicaKmsKeyID\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlErrorDocument = function (input, context) {\n  var bodyNode = new __XmlNode(\"ErrorDocument\");\n\n  if (input.Key !== undefined && input.Key !== null) {\n    var node = new __XmlNode(\"ObjectKey\").addChildNode(new __XmlText(input.Key)).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlEventList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = new __XmlNode(\"Event\").addChildNode(new __XmlText(entry));\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlExistingObjectReplication = function (input, context) {\n  var bodyNode = new __XmlNode(\"ExistingObjectReplication\");\n\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"ExistingObjectReplicationStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlExposeHeaders = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = new __XmlNode(\"ExposeHeader\").addChildNode(new __XmlText(entry));\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlFilterRule = function (input, context) {\n  var bodyNode = new __XmlNode(\"FilterRule\");\n\n  if (input.Name !== undefined && input.Name !== null) {\n    var node = new __XmlNode(\"FilterRuleName\").addChildNode(new __XmlText(input.Name)).withName(\"Name\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Value !== undefined && input.Value !== null) {\n    var node = new __XmlNode(\"FilterRuleValue\").addChildNode(new __XmlText(input.Value)).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlFilterRuleList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlFilterRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlGlacierJobParameters = function (input, context) {\n  var bodyNode = new __XmlNode(\"GlacierJobParameters\");\n\n  if (input.Tier !== undefined && input.Tier !== null) {\n    var node = new __XmlNode(\"Tier\").addChildNode(new __XmlText(input.Tier)).withName(\"Tier\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlGrant = function (input, context) {\n  var bodyNode = new __XmlNode(\"Grant\");\n\n  if (input.Grantee !== undefined && input.Grantee !== null) {\n    var node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Permission !== undefined && input.Permission !== null) {\n    var node = new __XmlNode(\"Permission\").addChildNode(new __XmlText(input.Permission)).withName(\"Permission\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlGrantee = function (input, context) {\n  var bodyNode = new __XmlNode(\"Grantee\");\n\n  if (input.DisplayName !== undefined && input.DisplayName !== null) {\n    var node = new __XmlNode(\"DisplayName\").addChildNode(new __XmlText(input.DisplayName)).withName(\"DisplayName\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.EmailAddress !== undefined && input.EmailAddress !== null) {\n    var node = new __XmlNode(\"EmailAddress\").addChildNode(new __XmlText(input.EmailAddress)).withName(\"EmailAddress\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.ID !== undefined && input.ID !== null) {\n    var node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.URI !== undefined && input.URI !== null) {\n    var node = new __XmlNode(\"URI\").addChildNode(new __XmlText(input.URI)).withName(\"URI\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Type !== undefined && input.Type !== null) {\n    bodyNode.addAttribute(\"xsi:type\", input.Type);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlGrants = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlGrant(entry, context);\n    return node.withName(\"Grant\");\n  });\n};\n\nvar serializeAws_restXmlIndexDocument = function (input, context) {\n  var bodyNode = new __XmlNode(\"IndexDocument\");\n\n  if (input.Suffix !== undefined && input.Suffix !== null) {\n    var node = new __XmlNode(\"Suffix\").addChildNode(new __XmlText(input.Suffix)).withName(\"Suffix\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlInputSerialization = function (input, context) {\n  var bodyNode = new __XmlNode(\"InputSerialization\");\n\n  if (input.CSV !== undefined && input.CSV !== null) {\n    var node = serializeAws_restXmlCSVInput(input.CSV, context).withName(\"CSV\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.CompressionType !== undefined && input.CompressionType !== null) {\n    var node = new __XmlNode(\"CompressionType\").addChildNode(new __XmlText(input.CompressionType)).withName(\"CompressionType\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.JSON !== undefined && input.JSON !== null) {\n    var node = serializeAws_restXmlJSONInput(input.JSON, context).withName(\"JSON\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Parquet !== undefined && input.Parquet !== null) {\n    var node = serializeAws_restXmlParquetInput(input.Parquet, context).withName(\"Parquet\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlIntelligentTieringAndOperator = function (input, context) {\n  var bodyNode = new __XmlNode(\"IntelligentTieringAndOperator\");\n\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Tags !== undefined && input.Tags !== null) {\n    var nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlIntelligentTieringConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"IntelligentTieringConfiguration\");\n\n  if (input.Id !== undefined && input.Id !== null) {\n    var node = new __XmlNode(\"IntelligentTieringId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlIntelligentTieringFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"IntelligentTieringStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Tierings !== undefined && input.Tierings !== null) {\n    var nodes = serializeAws_restXmlTieringList(input.Tierings, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Tiering\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlIntelligentTieringFilter = function (input, context) {\n  var bodyNode = new __XmlNode(\"IntelligentTieringFilter\");\n\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Tag !== undefined && input.Tag !== null) {\n    var node = serializeAws_restXmlTag(input.Tag, context).withName(\"Tag\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.And !== undefined && input.And !== null) {\n    var node = serializeAws_restXmlIntelligentTieringAndOperator(input.And, context).withName(\"And\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlInventoryConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"InventoryConfiguration\");\n\n  if (input.Destination !== undefined && input.Destination !== null) {\n    var node = serializeAws_restXmlInventoryDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.IsEnabled !== undefined && input.IsEnabled !== null) {\n    var node = new __XmlNode(\"IsEnabled\").addChildNode(new __XmlText(String(input.IsEnabled))).withName(\"IsEnabled\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlInventoryFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Id !== undefined && input.Id !== null) {\n    var node = new __XmlNode(\"InventoryId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.IncludedObjectVersions !== undefined && input.IncludedObjectVersions !== null) {\n    var node = new __XmlNode(\"InventoryIncludedObjectVersions\").addChildNode(new __XmlText(input.IncludedObjectVersions)).withName(\"IncludedObjectVersions\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.OptionalFields !== undefined && input.OptionalFields !== null) {\n    var nodes = serializeAws_restXmlInventoryOptionalFields(input.OptionalFields, context);\n    var containerNode_2 = new __XmlNode(\"OptionalFields\");\n    nodes.map(function (node) {\n      containerNode_2.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode_2);\n  }\n\n  if (input.Schedule !== undefined && input.Schedule !== null) {\n    var node = serializeAws_restXmlInventorySchedule(input.Schedule, context).withName(\"Schedule\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlInventoryDestination = function (input, context) {\n  var bodyNode = new __XmlNode(\"InventoryDestination\");\n\n  if (input.S3BucketDestination !== undefined && input.S3BucketDestination !== null) {\n    var node = serializeAws_restXmlInventoryS3BucketDestination(input.S3BucketDestination, context).withName(\"S3BucketDestination\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlInventoryEncryption = function (input, context) {\n  var bodyNode = new __XmlNode(\"InventoryEncryption\");\n\n  if (input.SSES3 !== undefined && input.SSES3 !== null) {\n    var node = serializeAws_restXmlSSES3(input.SSES3, context).withName(\"SSE-S3\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.SSEKMS !== undefined && input.SSEKMS !== null) {\n    var node = serializeAws_restXmlSSEKMS(input.SSEKMS, context).withName(\"SSE-KMS\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlInventoryFilter = function (input, context) {\n  var bodyNode = new __XmlNode(\"InventoryFilter\");\n\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlInventoryOptionalFields = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = new __XmlNode(\"InventoryOptionalField\").addChildNode(new __XmlText(entry));\n    return node.withName(\"Field\");\n  });\n};\n\nvar serializeAws_restXmlInventoryS3BucketDestination = function (input, context) {\n  var bodyNode = new __XmlNode(\"InventoryS3BucketDestination\");\n\n  if (input.AccountId !== undefined && input.AccountId !== null) {\n    var node = new __XmlNode(\"AccountId\").addChildNode(new __XmlText(input.AccountId)).withName(\"AccountId\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Bucket !== undefined && input.Bucket !== null) {\n    var node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.Bucket)).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Format !== undefined && input.Format !== null) {\n    var node = new __XmlNode(\"InventoryFormat\").addChildNode(new __XmlText(input.Format)).withName(\"Format\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Encryption !== undefined && input.Encryption !== null) {\n    var node = serializeAws_restXmlInventoryEncryption(input.Encryption, context).withName(\"Encryption\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlInventorySchedule = function (input, context) {\n  var bodyNode = new __XmlNode(\"InventorySchedule\");\n\n  if (input.Frequency !== undefined && input.Frequency !== null) {\n    var node = new __XmlNode(\"InventoryFrequency\").addChildNode(new __XmlText(input.Frequency)).withName(\"Frequency\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlJSONInput = function (input, context) {\n  var bodyNode = new __XmlNode(\"JSONInput\");\n\n  if (input.Type !== undefined && input.Type !== null) {\n    var node = new __XmlNode(\"JSONType\").addChildNode(new __XmlText(input.Type)).withName(\"Type\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlJSONOutput = function (input, context) {\n  var bodyNode = new __XmlNode(\"JSONOutput\");\n\n  if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n    var node = new __XmlNode(\"RecordDelimiter\").addChildNode(new __XmlText(input.RecordDelimiter)).withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlLambdaFunctionConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"LambdaFunctionConfiguration\");\n\n  if (input.Id !== undefined && input.Id !== null) {\n    var node = new __XmlNode(\"NotificationId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.LambdaFunctionArn !== undefined && input.LambdaFunctionArn !== null) {\n    var node = new __XmlNode(\"LambdaFunctionArn\").addChildNode(new __XmlText(input.LambdaFunctionArn)).withName(\"CloudFunction\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Events !== undefined && input.Events !== null) {\n    var nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlLambdaFunctionConfigurationList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlLifecycleExpiration = function (input, context) {\n  var bodyNode = new __XmlNode(\"LifecycleExpiration\");\n\n  if (input.Date !== undefined && input.Date !== null) {\n    var node = new __XmlNode(\"Date\").addChildNode(new __XmlText(input.Date.toISOString().split(\".\")[0] + \"Z\")).withName(\"Date\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Days !== undefined && input.Days !== null) {\n    var node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.ExpiredObjectDeleteMarker !== undefined && input.ExpiredObjectDeleteMarker !== null) {\n    var node = new __XmlNode(\"ExpiredObjectDeleteMarker\").addChildNode(new __XmlText(String(input.ExpiredObjectDeleteMarker))).withName(\"ExpiredObjectDeleteMarker\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlLifecycleRule = function (input, context) {\n  var bodyNode = new __XmlNode(\"LifecycleRule\");\n\n  if (input.Expiration !== undefined && input.Expiration !== null) {\n    var node = serializeAws_restXmlLifecycleExpiration(input.Expiration, context).withName(\"Expiration\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.ID !== undefined && input.ID !== null) {\n    var node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlLifecycleRuleFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"ExpirationStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Transitions !== undefined && input.Transitions !== null) {\n    var nodes = serializeAws_restXmlTransitionList(input.Transitions, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Transition\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  if (input.NoncurrentVersionTransitions !== undefined && input.NoncurrentVersionTransitions !== null) {\n    var nodes = serializeAws_restXmlNoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);\n    nodes.map(function (node) {\n      node = node.withName(\"NoncurrentVersionTransition\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  if (input.NoncurrentVersionExpiration !== undefined && input.NoncurrentVersionExpiration !== null) {\n    var node = serializeAws_restXmlNoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName(\"NoncurrentVersionExpiration\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.AbortIncompleteMultipartUpload !== undefined && input.AbortIncompleteMultipartUpload !== null) {\n    var node = serializeAws_restXmlAbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload, context).withName(\"AbortIncompleteMultipartUpload\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlLifecycleRuleAndOperator = function (input, context) {\n  var bodyNode = new __XmlNode(\"LifecycleRuleAndOperator\");\n\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Tags !== undefined && input.Tags !== null) {\n    var nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlLifecycleRuleFilter = function (input, context) {\n  var bodyNode = new __XmlNode(\"LifecycleRuleFilter\");\n  LifecycleRuleFilter.visit(input, {\n    Prefix: function (value) {\n      var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: function (value) {\n      var node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: function (value) {\n      var node = serializeAws_restXmlLifecycleRuleAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: function (name, value) {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    }\n  });\n  return bodyNode;\n};\n\nvar serializeAws_restXmlLifecycleRules = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlLifecycleRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlLoggingEnabled = function (input, context) {\n  var bodyNode = new __XmlNode(\"LoggingEnabled\");\n\n  if (input.TargetBucket !== undefined && input.TargetBucket !== null) {\n    var node = new __XmlNode(\"TargetBucket\").addChildNode(new __XmlText(input.TargetBucket)).withName(\"TargetBucket\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.TargetGrants !== undefined && input.TargetGrants !== null) {\n    var nodes = serializeAws_restXmlTargetGrants(input.TargetGrants, context);\n    var containerNode_3 = new __XmlNode(\"TargetGrants\");\n    nodes.map(function (node) {\n      containerNode_3.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode_3);\n  }\n\n  if (input.TargetPrefix !== undefined && input.TargetPrefix !== null) {\n    var node = new __XmlNode(\"TargetPrefix\").addChildNode(new __XmlText(input.TargetPrefix)).withName(\"TargetPrefix\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlMetadataEntry = function (input, context) {\n  var bodyNode = new __XmlNode(\"MetadataEntry\");\n\n  if (input.Name !== undefined && input.Name !== null) {\n    var node = new __XmlNode(\"MetadataKey\").addChildNode(new __XmlText(input.Name)).withName(\"Name\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Value !== undefined && input.Value !== null) {\n    var node = new __XmlNode(\"MetadataValue\").addChildNode(new __XmlText(input.Value)).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlMetrics = function (input, context) {\n  var bodyNode = new __XmlNode(\"Metrics\");\n\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"MetricsStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.EventThreshold !== undefined && input.EventThreshold !== null) {\n    var node = serializeAws_restXmlReplicationTimeValue(input.EventThreshold, context).withName(\"EventThreshold\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlMetricsAndOperator = function (input, context) {\n  var bodyNode = new __XmlNode(\"MetricsAndOperator\");\n\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Tags !== undefined && input.Tags !== null) {\n    var nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlMetricsConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"MetricsConfiguration\");\n\n  if (input.Id !== undefined && input.Id !== null) {\n    var node = new __XmlNode(\"MetricsId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlMetricsFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlMetricsFilter = function (input, context) {\n  var bodyNode = new __XmlNode(\"MetricsFilter\");\n  MetricsFilter.visit(input, {\n    Prefix: function (value) {\n      var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: function (value) {\n      var node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: function (value) {\n      var node = serializeAws_restXmlMetricsAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: function (name, value) {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    }\n  });\n  return bodyNode;\n};\n\nvar serializeAws_restXmlNoncurrentVersionExpiration = function (input, context) {\n  var bodyNode = new __XmlNode(\"NoncurrentVersionExpiration\");\n\n  if (input.NoncurrentDays !== undefined && input.NoncurrentDays !== null) {\n    var node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.NoncurrentDays))).withName(\"NoncurrentDays\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlNoncurrentVersionTransition = function (input, context) {\n  var bodyNode = new __XmlNode(\"NoncurrentVersionTransition\");\n\n  if (input.NoncurrentDays !== undefined && input.NoncurrentDays !== null) {\n    var node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.NoncurrentDays))).withName(\"NoncurrentDays\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    var node = new __XmlNode(\"TransitionStorageClass\").addChildNode(new __XmlText(input.StorageClass)).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlNoncurrentVersionTransitionList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlNoncurrentVersionTransition(entry, context);\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlNotificationConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"NotificationConfiguration\");\n\n  if (input.TopicConfigurations !== undefined && input.TopicConfigurations !== null) {\n    var nodes = serializeAws_restXmlTopicConfigurationList(input.TopicConfigurations, context);\n    nodes.map(function (node) {\n      node = node.withName(\"TopicConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  if (input.QueueConfigurations !== undefined && input.QueueConfigurations !== null) {\n    var nodes = serializeAws_restXmlQueueConfigurationList(input.QueueConfigurations, context);\n    nodes.map(function (node) {\n      node = node.withName(\"QueueConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  if (input.LambdaFunctionConfigurations !== undefined && input.LambdaFunctionConfigurations !== null) {\n    var nodes = serializeAws_restXmlLambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);\n    nodes.map(function (node) {\n      node = node.withName(\"CloudFunctionConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlNotificationConfigurationFilter = function (input, context) {\n  var bodyNode = new __XmlNode(\"NotificationConfigurationFilter\");\n\n  if (input.Key !== undefined && input.Key !== null) {\n    var node = serializeAws_restXmlS3KeyFilter(input.Key, context).withName(\"S3Key\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlObjectIdentifier = function (input, context) {\n  var bodyNode = new __XmlNode(\"ObjectIdentifier\");\n\n  if (input.Key !== undefined && input.Key !== null) {\n    var node = new __XmlNode(\"ObjectKey\").addChildNode(new __XmlText(input.Key)).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.VersionId !== undefined && input.VersionId !== null) {\n    var node = new __XmlNode(\"ObjectVersionId\").addChildNode(new __XmlText(input.VersionId)).withName(\"VersionId\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlObjectIdentifierList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlObjectIdentifier(entry, context);\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlObjectLockConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"ObjectLockConfiguration\");\n\n  if (input.ObjectLockEnabled !== undefined && input.ObjectLockEnabled !== null) {\n    var node = new __XmlNode(\"ObjectLockEnabled\").addChildNode(new __XmlText(input.ObjectLockEnabled)).withName(\"ObjectLockEnabled\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Rule !== undefined && input.Rule !== null) {\n    var node = serializeAws_restXmlObjectLockRule(input.Rule, context).withName(\"Rule\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlObjectLockLegalHold = function (input, context) {\n  var bodyNode = new __XmlNode(\"ObjectLockLegalHold\");\n\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"ObjectLockLegalHoldStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlObjectLockRetention = function (input, context) {\n  var bodyNode = new __XmlNode(\"ObjectLockRetention\");\n\n  if (input.Mode !== undefined && input.Mode !== null) {\n    var node = new __XmlNode(\"ObjectLockRetentionMode\").addChildNode(new __XmlText(input.Mode)).withName(\"Mode\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.RetainUntilDate !== undefined && input.RetainUntilDate !== null) {\n    var node = new __XmlNode(\"Date\").addChildNode(new __XmlText(input.RetainUntilDate.toISOString().split(\".\")[0] + \"Z\")).withName(\"RetainUntilDate\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlObjectLockRule = function (input, context) {\n  var bodyNode = new __XmlNode(\"ObjectLockRule\");\n\n  if (input.DefaultRetention !== undefined && input.DefaultRetention !== null) {\n    var node = serializeAws_restXmlDefaultRetention(input.DefaultRetention, context).withName(\"DefaultRetention\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlOutputLocation = function (input, context) {\n  var bodyNode = new __XmlNode(\"OutputLocation\");\n\n  if (input.S3 !== undefined && input.S3 !== null) {\n    var node = serializeAws_restXmlS3Location(input.S3, context).withName(\"S3\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlOutputSerialization = function (input, context) {\n  var bodyNode = new __XmlNode(\"OutputSerialization\");\n\n  if (input.CSV !== undefined && input.CSV !== null) {\n    var node = serializeAws_restXmlCSVOutput(input.CSV, context).withName(\"CSV\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.JSON !== undefined && input.JSON !== null) {\n    var node = serializeAws_restXmlJSONOutput(input.JSON, context).withName(\"JSON\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlOwner = function (input, context) {\n  var bodyNode = new __XmlNode(\"Owner\");\n\n  if (input.DisplayName !== undefined && input.DisplayName !== null) {\n    var node = new __XmlNode(\"DisplayName\").addChildNode(new __XmlText(input.DisplayName)).withName(\"DisplayName\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.ID !== undefined && input.ID !== null) {\n    var node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlOwnershipControls = function (input, context) {\n  var bodyNode = new __XmlNode(\"OwnershipControls\");\n\n  if (input.Rules !== undefined && input.Rules !== null) {\n    var nodes = serializeAws_restXmlOwnershipControlsRules(input.Rules, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlOwnershipControlsRule = function (input, context) {\n  var bodyNode = new __XmlNode(\"OwnershipControlsRule\");\n\n  if (input.ObjectOwnership !== undefined && input.ObjectOwnership !== null) {\n    var node = new __XmlNode(\"ObjectOwnership\").addChildNode(new __XmlText(input.ObjectOwnership)).withName(\"ObjectOwnership\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlOwnershipControlsRules = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlOwnershipControlsRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlParquetInput = function (input, context) {\n  var bodyNode = new __XmlNode(\"ParquetInput\");\n  return bodyNode;\n};\n\nvar serializeAws_restXmlPublicAccessBlockConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"PublicAccessBlockConfiguration\");\n\n  if (input.BlockPublicAcls !== undefined && input.BlockPublicAcls !== null) {\n    var node = new __XmlNode(\"Setting\").addChildNode(new __XmlText(String(input.BlockPublicAcls))).withName(\"BlockPublicAcls\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.IgnorePublicAcls !== undefined && input.IgnorePublicAcls !== null) {\n    var node = new __XmlNode(\"Setting\").addChildNode(new __XmlText(String(input.IgnorePublicAcls))).withName(\"IgnorePublicAcls\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.BlockPublicPolicy !== undefined && input.BlockPublicPolicy !== null) {\n    var node = new __XmlNode(\"Setting\").addChildNode(new __XmlText(String(input.BlockPublicPolicy))).withName(\"BlockPublicPolicy\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.RestrictPublicBuckets !== undefined && input.RestrictPublicBuckets !== null) {\n    var node = new __XmlNode(\"Setting\").addChildNode(new __XmlText(String(input.RestrictPublicBuckets))).withName(\"RestrictPublicBuckets\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlQueueConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"QueueConfiguration\");\n\n  if (input.Id !== undefined && input.Id !== null) {\n    var node = new __XmlNode(\"NotificationId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.QueueArn !== undefined && input.QueueArn !== null) {\n    var node = new __XmlNode(\"QueueArn\").addChildNode(new __XmlText(input.QueueArn)).withName(\"Queue\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Events !== undefined && input.Events !== null) {\n    var nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlQueueConfigurationList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlQueueConfiguration(entry, context);\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlRedirect = function (input, context) {\n  var bodyNode = new __XmlNode(\"Redirect\");\n\n  if (input.HostName !== undefined && input.HostName !== null) {\n    var node = new __XmlNode(\"HostName\").addChildNode(new __XmlText(input.HostName)).withName(\"HostName\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.HttpRedirectCode !== undefined && input.HttpRedirectCode !== null) {\n    var node = new __XmlNode(\"HttpRedirectCode\").addChildNode(new __XmlText(input.HttpRedirectCode)).withName(\"HttpRedirectCode\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Protocol !== undefined && input.Protocol !== null) {\n    var node = new __XmlNode(\"Protocol\").addChildNode(new __XmlText(input.Protocol)).withName(\"Protocol\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.ReplaceKeyPrefixWith !== undefined && input.ReplaceKeyPrefixWith !== null) {\n    var node = new __XmlNode(\"ReplaceKeyPrefixWith\").addChildNode(new __XmlText(input.ReplaceKeyPrefixWith)).withName(\"ReplaceKeyPrefixWith\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.ReplaceKeyWith !== undefined && input.ReplaceKeyWith !== null) {\n    var node = new __XmlNode(\"ReplaceKeyWith\").addChildNode(new __XmlText(input.ReplaceKeyWith)).withName(\"ReplaceKeyWith\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlRedirectAllRequestsTo = function (input, context) {\n  var bodyNode = new __XmlNode(\"RedirectAllRequestsTo\");\n\n  if (input.HostName !== undefined && input.HostName !== null) {\n    var node = new __XmlNode(\"HostName\").addChildNode(new __XmlText(input.HostName)).withName(\"HostName\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Protocol !== undefined && input.Protocol !== null) {\n    var node = new __XmlNode(\"Protocol\").addChildNode(new __XmlText(input.Protocol)).withName(\"Protocol\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlReplicaModifications = function (input, context) {\n  var bodyNode = new __XmlNode(\"ReplicaModifications\");\n\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"ReplicaModificationsStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlReplicationConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"ReplicationConfiguration\");\n\n  if (input.Role !== undefined && input.Role !== null) {\n    var node = new __XmlNode(\"Role\").addChildNode(new __XmlText(input.Role)).withName(\"Role\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Rules !== undefined && input.Rules !== null) {\n    var nodes = serializeAws_restXmlReplicationRules(input.Rules, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlReplicationRule = function (input, context) {\n  var bodyNode = new __XmlNode(\"ReplicationRule\");\n\n  if (input.ID !== undefined && input.ID !== null) {\n    var node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Priority !== undefined && input.Priority !== null) {\n    var node = new __XmlNode(\"Priority\").addChildNode(new __XmlText(String(input.Priority))).withName(\"Priority\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlReplicationRuleFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"ReplicationRuleStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.SourceSelectionCriteria !== undefined && input.SourceSelectionCriteria !== null) {\n    var node = serializeAws_restXmlSourceSelectionCriteria(input.SourceSelectionCriteria, context).withName(\"SourceSelectionCriteria\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.ExistingObjectReplication !== undefined && input.ExistingObjectReplication !== null) {\n    var node = serializeAws_restXmlExistingObjectReplication(input.ExistingObjectReplication, context).withName(\"ExistingObjectReplication\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Destination !== undefined && input.Destination !== null) {\n    var node = serializeAws_restXmlDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.DeleteMarkerReplication !== undefined && input.DeleteMarkerReplication !== null) {\n    var node = serializeAws_restXmlDeleteMarkerReplication(input.DeleteMarkerReplication, context).withName(\"DeleteMarkerReplication\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlReplicationRuleAndOperator = function (input, context) {\n  var bodyNode = new __XmlNode(\"ReplicationRuleAndOperator\");\n\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Tags !== undefined && input.Tags !== null) {\n    var nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlReplicationRuleFilter = function (input, context) {\n  var bodyNode = new __XmlNode(\"ReplicationRuleFilter\");\n  ReplicationRuleFilter.visit(input, {\n    Prefix: function (value) {\n      var node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: function (value) {\n      var node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: function (value) {\n      var node = serializeAws_restXmlReplicationRuleAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: function (name, value) {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    }\n  });\n  return bodyNode;\n};\n\nvar serializeAws_restXmlReplicationRules = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlReplicationRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlReplicationTime = function (input, context) {\n  var bodyNode = new __XmlNode(\"ReplicationTime\");\n\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"ReplicationTimeStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Time !== undefined && input.Time !== null) {\n    var node = serializeAws_restXmlReplicationTimeValue(input.Time, context).withName(\"Time\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlReplicationTimeValue = function (input, context) {\n  var bodyNode = new __XmlNode(\"ReplicationTimeValue\");\n\n  if (input.Minutes !== undefined && input.Minutes !== null) {\n    var node = new __XmlNode(\"Minutes\").addChildNode(new __XmlText(String(input.Minutes))).withName(\"Minutes\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlRequestPaymentConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"RequestPaymentConfiguration\");\n\n  if (input.Payer !== undefined && input.Payer !== null) {\n    var node = new __XmlNode(\"Payer\").addChildNode(new __XmlText(input.Payer)).withName(\"Payer\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlRequestProgress = function (input, context) {\n  var bodyNode = new __XmlNode(\"RequestProgress\");\n\n  if (input.Enabled !== undefined && input.Enabled !== null) {\n    var node = new __XmlNode(\"EnableRequestProgress\").addChildNode(new __XmlText(String(input.Enabled))).withName(\"Enabled\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlRestoreRequest = function (input, context) {\n  var bodyNode = new __XmlNode(\"RestoreRequest\");\n\n  if (input.Days !== undefined && input.Days !== null) {\n    var node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.GlacierJobParameters !== undefined && input.GlacierJobParameters !== null) {\n    var node = serializeAws_restXmlGlacierJobParameters(input.GlacierJobParameters, context).withName(\"GlacierJobParameters\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Type !== undefined && input.Type !== null) {\n    var node = new __XmlNode(\"RestoreRequestType\").addChildNode(new __XmlText(input.Type)).withName(\"Type\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Tier !== undefined && input.Tier !== null) {\n    var node = new __XmlNode(\"Tier\").addChildNode(new __XmlText(input.Tier)).withName(\"Tier\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Description !== undefined && input.Description !== null) {\n    var node = new __XmlNode(\"Description\").addChildNode(new __XmlText(input.Description)).withName(\"Description\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.SelectParameters !== undefined && input.SelectParameters !== null) {\n    var node = serializeAws_restXmlSelectParameters(input.SelectParameters, context).withName(\"SelectParameters\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.OutputLocation !== undefined && input.OutputLocation !== null) {\n    var node = serializeAws_restXmlOutputLocation(input.OutputLocation, context).withName(\"OutputLocation\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlRoutingRule = function (input, context) {\n  var bodyNode = new __XmlNode(\"RoutingRule\");\n\n  if (input.Condition !== undefined && input.Condition !== null) {\n    var node = serializeAws_restXmlCondition(input.Condition, context).withName(\"Condition\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Redirect !== undefined && input.Redirect !== null) {\n    var node = serializeAws_restXmlRedirect(input.Redirect, context).withName(\"Redirect\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlRoutingRules = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlRoutingRule(entry, context);\n    return node.withName(\"RoutingRule\");\n  });\n};\n\nvar serializeAws_restXmlS3KeyFilter = function (input, context) {\n  var bodyNode = new __XmlNode(\"S3KeyFilter\");\n\n  if (input.FilterRules !== undefined && input.FilterRules !== null) {\n    var nodes = serializeAws_restXmlFilterRuleList(input.FilterRules, context);\n    nodes.map(function (node) {\n      node = node.withName(\"FilterRule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlS3Location = function (input, context) {\n  var bodyNode = new __XmlNode(\"S3Location\");\n\n  if (input.BucketName !== undefined && input.BucketName !== null) {\n    var node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.BucketName)).withName(\"BucketName\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    var node = new __XmlNode(\"LocationPrefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Encryption !== undefined && input.Encryption !== null) {\n    var node = serializeAws_restXmlEncryption(input.Encryption, context).withName(\"Encryption\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.CannedACL !== undefined && input.CannedACL !== null) {\n    var node = new __XmlNode(\"ObjectCannedACL\").addChildNode(new __XmlText(input.CannedACL)).withName(\"CannedACL\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.AccessControlList !== undefined && input.AccessControlList !== null) {\n    var nodes = serializeAws_restXmlGrants(input.AccessControlList, context);\n    var containerNode_4 = new __XmlNode(\"AccessControlList\");\n    nodes.map(function (node) {\n      containerNode_4.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode_4);\n  }\n\n  if (input.Tagging !== undefined && input.Tagging !== null) {\n    var node = serializeAws_restXmlTagging(input.Tagging, context).withName(\"Tagging\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.UserMetadata !== undefined && input.UserMetadata !== null) {\n    var nodes = serializeAws_restXmlUserMetadata(input.UserMetadata, context);\n    var containerNode_5 = new __XmlNode(\"UserMetadata\");\n    nodes.map(function (node) {\n      containerNode_5.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode_5);\n  }\n\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    var node = new __XmlNode(\"StorageClass\").addChildNode(new __XmlText(input.StorageClass)).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlScanRange = function (input, context) {\n  var bodyNode = new __XmlNode(\"ScanRange\");\n\n  if (input.Start !== undefined && input.Start !== null) {\n    var node = new __XmlNode(\"Start\").addChildNode(new __XmlText(String(input.Start))).withName(\"Start\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.End !== undefined && input.End !== null) {\n    var node = new __XmlNode(\"End\").addChildNode(new __XmlText(String(input.End))).withName(\"End\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlSelectParameters = function (input, context) {\n  var bodyNode = new __XmlNode(\"SelectParameters\");\n\n  if (input.InputSerialization !== undefined && input.InputSerialization !== null) {\n    var node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\"InputSerialization\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.ExpressionType !== undefined && input.ExpressionType !== null) {\n    var node = new __XmlNode(\"ExpressionType\").addChildNode(new __XmlText(input.ExpressionType)).withName(\"ExpressionType\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Expression !== undefined && input.Expression !== null) {\n    var node = new __XmlNode(\"Expression\").addChildNode(new __XmlText(input.Expression)).withName(\"Expression\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.OutputSerialization !== undefined && input.OutputSerialization !== null) {\n    var node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\"OutputSerialization\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlServerSideEncryptionByDefault = function (input, context) {\n  var bodyNode = new __XmlNode(\"ServerSideEncryptionByDefault\");\n\n  if (input.SSEAlgorithm !== undefined && input.SSEAlgorithm !== null) {\n    var node = new __XmlNode(\"ServerSideEncryption\").addChildNode(new __XmlText(input.SSEAlgorithm)).withName(\"SSEAlgorithm\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.KMSMasterKeyID !== undefined && input.KMSMasterKeyID !== null) {\n    var node = new __XmlNode(\"SSEKMSKeyId\").addChildNode(new __XmlText(input.KMSMasterKeyID)).withName(\"KMSMasterKeyID\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlServerSideEncryptionConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"ServerSideEncryptionConfiguration\");\n\n  if (input.Rules !== undefined && input.Rules !== null) {\n    var nodes = serializeAws_restXmlServerSideEncryptionRules(input.Rules, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlServerSideEncryptionRule = function (input, context) {\n  var bodyNode = new __XmlNode(\"ServerSideEncryptionRule\");\n\n  if (input.ApplyServerSideEncryptionByDefault !== undefined && input.ApplyServerSideEncryptionByDefault !== null) {\n    var node = serializeAws_restXmlServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault, context).withName(\"ApplyServerSideEncryptionByDefault\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.BucketKeyEnabled !== undefined && input.BucketKeyEnabled !== null) {\n    var node = new __XmlNode(\"BucketKeyEnabled\").addChildNode(new __XmlText(String(input.BucketKeyEnabled))).withName(\"BucketKeyEnabled\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlServerSideEncryptionRules = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlServerSideEncryptionRule(entry, context);\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlSourceSelectionCriteria = function (input, context) {\n  var bodyNode = new __XmlNode(\"SourceSelectionCriteria\");\n\n  if (input.SseKmsEncryptedObjects !== undefined && input.SseKmsEncryptedObjects !== null) {\n    var node = serializeAws_restXmlSseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName(\"SseKmsEncryptedObjects\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.ReplicaModifications !== undefined && input.ReplicaModifications !== null) {\n    var node = serializeAws_restXmlReplicaModifications(input.ReplicaModifications, context).withName(\"ReplicaModifications\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlSSEKMS = function (input, context) {\n  var bodyNode = new __XmlNode(\"SSE-KMS\");\n\n  if (input.KeyId !== undefined && input.KeyId !== null) {\n    var node = new __XmlNode(\"SSEKMSKeyId\").addChildNode(new __XmlText(input.KeyId)).withName(\"KeyId\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlSseKmsEncryptedObjects = function (input, context) {\n  var bodyNode = new __XmlNode(\"SseKmsEncryptedObjects\");\n\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"SseKmsEncryptedObjectsStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlSSES3 = function (input, context) {\n  var bodyNode = new __XmlNode(\"SSE-S3\");\n  return bodyNode;\n};\n\nvar serializeAws_restXmlStorageClassAnalysis = function (input, context) {\n  var bodyNode = new __XmlNode(\"StorageClassAnalysis\");\n\n  if (input.DataExport !== undefined && input.DataExport !== null) {\n    var node = serializeAws_restXmlStorageClassAnalysisDataExport(input.DataExport, context).withName(\"DataExport\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlStorageClassAnalysisDataExport = function (input, context) {\n  var bodyNode = new __XmlNode(\"StorageClassAnalysisDataExport\");\n\n  if (input.OutputSchemaVersion !== undefined && input.OutputSchemaVersion !== null) {\n    var node = new __XmlNode(\"StorageClassAnalysisSchemaVersion\").addChildNode(new __XmlText(input.OutputSchemaVersion)).withName(\"OutputSchemaVersion\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Destination !== undefined && input.Destination !== null) {\n    var node = serializeAws_restXmlAnalyticsExportDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlTag = function (input, context) {\n  var bodyNode = new __XmlNode(\"Tag\");\n\n  if (input.Key !== undefined && input.Key !== null) {\n    var node = new __XmlNode(\"ObjectKey\").addChildNode(new __XmlText(input.Key)).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Value !== undefined && input.Value !== null) {\n    var node = new __XmlNode(\"Value\").addChildNode(new __XmlText(input.Value)).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlTagging = function (input, context) {\n  var bodyNode = new __XmlNode(\"Tagging\");\n\n  if (input.TagSet !== undefined && input.TagSet !== null) {\n    var nodes = serializeAws_restXmlTagSet(input.TagSet, context);\n    var containerNode_6 = new __XmlNode(\"TagSet\");\n    nodes.map(function (node) {\n      containerNode_6.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode_6);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlTagSet = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlTag(entry, context);\n    return node.withName(\"Tag\");\n  });\n};\n\nvar serializeAws_restXmlTargetGrant = function (input, context) {\n  var bodyNode = new __XmlNode(\"TargetGrant\");\n\n  if (input.Grantee !== undefined && input.Grantee !== null) {\n    var node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Permission !== undefined && input.Permission !== null) {\n    var node = new __XmlNode(\"BucketLogsPermission\").addChildNode(new __XmlText(input.Permission)).withName(\"Permission\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlTargetGrants = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlTargetGrant(entry, context);\n    return node.withName(\"Grant\");\n  });\n};\n\nvar serializeAws_restXmlTiering = function (input, context) {\n  var bodyNode = new __XmlNode(\"Tiering\");\n\n  if (input.Days !== undefined && input.Days !== null) {\n    var node = new __XmlNode(\"IntelligentTieringDays\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.AccessTier !== undefined && input.AccessTier !== null) {\n    var node = new __XmlNode(\"IntelligentTieringAccessTier\").addChildNode(new __XmlText(input.AccessTier)).withName(\"AccessTier\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlTieringList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlTiering(entry, context);\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlTopicConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"TopicConfiguration\");\n\n  if (input.Id !== undefined && input.Id !== null) {\n    var node = new __XmlNode(\"NotificationId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.TopicArn !== undefined && input.TopicArn !== null) {\n    var node = new __XmlNode(\"TopicArn\").addChildNode(new __XmlText(input.TopicArn)).withName(\"Topic\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Events !== undefined && input.Events !== null) {\n    var nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map(function (node) {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n\n  if (input.Filter !== undefined && input.Filter !== null) {\n    var node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlTopicConfigurationList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlTopicConfiguration(entry, context);\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlTransition = function (input, context) {\n  var bodyNode = new __XmlNode(\"Transition\");\n\n  if (input.Date !== undefined && input.Date !== null) {\n    var node = new __XmlNode(\"Date\").addChildNode(new __XmlText(input.Date.toISOString().split(\".\")[0] + \"Z\")).withName(\"Date\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Days !== undefined && input.Days !== null) {\n    var node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    var node = new __XmlNode(\"TransitionStorageClass\").addChildNode(new __XmlText(input.StorageClass)).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlTransitionList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlTransition(entry, context);\n    return node.withName(\"member\");\n  });\n};\n\nvar serializeAws_restXmlUserMetadata = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    var node = serializeAws_restXmlMetadataEntry(entry, context);\n    return node.withName(\"MetadataEntry\");\n  });\n};\n\nvar serializeAws_restXmlVersioningConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"VersioningConfiguration\");\n\n  if (input.MFADelete !== undefined && input.MFADelete !== null) {\n    var node = new __XmlNode(\"MFADelete\").addChildNode(new __XmlText(input.MFADelete)).withName(\"MfaDelete\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.Status !== undefined && input.Status !== null) {\n    var node = new __XmlNode(\"BucketVersioningStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n\n  return bodyNode;\n};\n\nvar serializeAws_restXmlWebsiteConfiguration = function (input, context) {\n  var bodyNode = new __XmlNode(\"WebsiteConfiguration\");\n\n  if (input.ErrorDocument !== undefined && input.ErrorDocument !== null) {\n    var node = serializeAws_restXmlErrorDocument(input.ErrorDocument, context).withName(\"ErrorDocument\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.IndexDocument !== undefined && input.IndexDocument !== null) {\n    var node = serializeAws_restXmlIndexDocument(input.IndexDocument, context).withName(\"IndexDocument\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.RedirectAllRequestsTo !== undefined && input.RedirectAllRequestsTo !== null) {\n    var node = serializeAws_restXmlRedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName(\"RedirectAllRequestsTo\");\n    bodyNode.addChildNode(node);\n  }\n\n  if (input.RoutingRules !== undefined && input.RoutingRules !== null) {\n    var nodes = serializeAws_restXmlRoutingRules(input.RoutingRules, context);\n    var containerNode_7 = new __XmlNode(\"RoutingRules\");\n    nodes.map(function (node) {\n      containerNode_7.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode_7);\n  }\n\n  return bodyNode;\n};\n\nvar deserializeAws_restXmlAbortIncompleteMultipartUpload = function (output, context) {\n  var contents = {\n    DaysAfterInitiation: undefined\n  };\n\n  if (output[\"DaysAfterInitiation\"] !== undefined) {\n    contents.DaysAfterInitiation = parseInt(output[\"DaysAfterInitiation\"]);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlAccessControlTranslation = function (output, context) {\n  var contents = {\n    Owner: undefined\n  };\n\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = output[\"Owner\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlAllowedHeaders = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar deserializeAws_restXmlAllowedMethods = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar deserializeAws_restXmlAllowedOrigins = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar deserializeAws_restXmlAnalyticsAndOperator = function (output, context) {\n  var contents = {\n    Prefix: undefined,\n    Tags: undefined\n  };\n\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlAnalyticsConfiguration = function (output, context) {\n  var contents = {\n    Id: undefined,\n    Filter: undefined,\n    StorageClassAnalysis: undefined\n  };\n\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlAnalyticsFilter(output[\"Filter\"], context);\n  }\n\n  if (output[\"StorageClassAnalysis\"] !== undefined) {\n    contents.StorageClassAnalysis = deserializeAws_restXmlStorageClassAnalysis(output[\"StorageClassAnalysis\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlAnalyticsConfigurationList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlAnalyticsConfiguration(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlAnalyticsExportDestination = function (output, context) {\n  var contents = {\n    S3BucketDestination: undefined\n  };\n\n  if (output[\"S3BucketDestination\"] !== undefined) {\n    contents.S3BucketDestination = deserializeAws_restXmlAnalyticsS3BucketDestination(output[\"S3BucketDestination\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlAnalyticsFilter = function (output, context) {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"]\n    };\n  }\n\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context)\n    };\n  }\n\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlAnalyticsAndOperator(output[\"And\"], context)\n    };\n  }\n\n  return {\n    $unknown: Object.entries(output)[0]\n  };\n};\n\nvar deserializeAws_restXmlAnalyticsS3BucketDestination = function (output, context) {\n  var contents = {\n    Format: undefined,\n    BucketAccountId: undefined,\n    Bucket: undefined,\n    Prefix: undefined\n  };\n\n  if (output[\"Format\"] !== undefined) {\n    contents.Format = output[\"Format\"];\n  }\n\n  if (output[\"BucketAccountId\"] !== undefined) {\n    contents.BucketAccountId = output[\"BucketAccountId\"];\n  }\n\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = output[\"Bucket\"];\n  }\n\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlBucket = function (output, context) {\n  var contents = {\n    Name: undefined,\n    CreationDate: undefined\n  };\n\n  if (output[\"Name\"] !== undefined) {\n    contents.Name = output[\"Name\"];\n  }\n\n  if (output[\"CreationDate\"] !== undefined) {\n    contents.CreationDate = new Date(output[\"CreationDate\"]);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlBuckets = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlBucket(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlCommonPrefix = function (output, context) {\n  var contents = {\n    Prefix: undefined\n  };\n\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlCommonPrefixList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlCommonPrefix(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlCondition = function (output, context) {\n  var contents = {\n    HttpErrorCodeReturnedEquals: undefined,\n    KeyPrefixEquals: undefined\n  };\n\n  if (output[\"HttpErrorCodeReturnedEquals\"] !== undefined) {\n    contents.HttpErrorCodeReturnedEquals = output[\"HttpErrorCodeReturnedEquals\"];\n  }\n\n  if (output[\"KeyPrefixEquals\"] !== undefined) {\n    contents.KeyPrefixEquals = output[\"KeyPrefixEquals\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlCopyObjectResult = function (output, context) {\n  var contents = {\n    ETag: undefined,\n    LastModified: undefined\n  };\n\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlCopyPartResult = function (output, context) {\n  var contents = {\n    ETag: undefined,\n    LastModified: undefined\n  };\n\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlCORSRule = function (output, context) {\n  var contents = {\n    AllowedHeaders: undefined,\n    AllowedMethods: undefined,\n    AllowedOrigins: undefined,\n    ExposeHeaders: undefined,\n    MaxAgeSeconds: undefined\n  };\n\n  if (output.AllowedHeader === \"\") {\n    contents.AllowedHeaders = [];\n  }\n\n  if (output[\"AllowedHeader\"] !== undefined) {\n    contents.AllowedHeaders = deserializeAws_restXmlAllowedHeaders(__getArrayIfSingleItem(output[\"AllowedHeader\"]), context);\n  }\n\n  if (output.AllowedMethod === \"\") {\n    contents.AllowedMethods = [];\n  }\n\n  if (output[\"AllowedMethod\"] !== undefined) {\n    contents.AllowedMethods = deserializeAws_restXmlAllowedMethods(__getArrayIfSingleItem(output[\"AllowedMethod\"]), context);\n  }\n\n  if (output.AllowedOrigin === \"\") {\n    contents.AllowedOrigins = [];\n  }\n\n  if (output[\"AllowedOrigin\"] !== undefined) {\n    contents.AllowedOrigins = deserializeAws_restXmlAllowedOrigins(__getArrayIfSingleItem(output[\"AllowedOrigin\"]), context);\n  }\n\n  if (output.ExposeHeader === \"\") {\n    contents.ExposeHeaders = [];\n  }\n\n  if (output[\"ExposeHeader\"] !== undefined) {\n    contents.ExposeHeaders = deserializeAws_restXmlExposeHeaders(__getArrayIfSingleItem(output[\"ExposeHeader\"]), context);\n  }\n\n  if (output[\"MaxAgeSeconds\"] !== undefined) {\n    contents.MaxAgeSeconds = parseInt(output[\"MaxAgeSeconds\"]);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlCORSRules = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlCORSRule(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlDefaultRetention = function (output, context) {\n  var contents = {\n    Mode: undefined,\n    Days: undefined,\n    Years: undefined\n  };\n\n  if (output[\"Mode\"] !== undefined) {\n    contents.Mode = output[\"Mode\"];\n  }\n\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n\n  if (output[\"Years\"] !== undefined) {\n    contents.Years = parseInt(output[\"Years\"]);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlDeletedObject = function (output, context) {\n  var contents = {\n    Key: undefined,\n    VersionId: undefined,\n    DeleteMarker: undefined,\n    DeleteMarkerVersionId: undefined\n  };\n\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n\n  if (output[\"DeleteMarker\"] !== undefined) {\n    contents.DeleteMarker = output[\"DeleteMarker\"] == \"true\";\n  }\n\n  if (output[\"DeleteMarkerVersionId\"] !== undefined) {\n    contents.DeleteMarkerVersionId = output[\"DeleteMarkerVersionId\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlDeletedObjects = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlDeletedObject(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlDeleteMarkerEntry = function (output, context) {\n  var contents = {\n    Owner: undefined,\n    Key: undefined,\n    VersionId: undefined,\n    IsLatest: undefined,\n    LastModified: undefined\n  };\n\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n\n  if (output[\"IsLatest\"] !== undefined) {\n    contents.IsLatest = output[\"IsLatest\"] == \"true\";\n  }\n\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlDeleteMarkerReplication = function (output, context) {\n  var contents = {\n    Status: undefined\n  };\n\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlDeleteMarkers = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlDeleteMarkerEntry(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlDestination = function (output, context) {\n  var contents = {\n    Bucket: undefined,\n    Account: undefined,\n    StorageClass: undefined,\n    AccessControlTranslation: undefined,\n    EncryptionConfiguration: undefined,\n    ReplicationTime: undefined,\n    Metrics: undefined\n  };\n\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = output[\"Bucket\"];\n  }\n\n  if (output[\"Account\"] !== undefined) {\n    contents.Account = output[\"Account\"];\n  }\n\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n\n  if (output[\"AccessControlTranslation\"] !== undefined) {\n    contents.AccessControlTranslation = deserializeAws_restXmlAccessControlTranslation(output[\"AccessControlTranslation\"], context);\n  }\n\n  if (output[\"EncryptionConfiguration\"] !== undefined) {\n    contents.EncryptionConfiguration = deserializeAws_restXmlEncryptionConfiguration(output[\"EncryptionConfiguration\"], context);\n  }\n\n  if (output[\"ReplicationTime\"] !== undefined) {\n    contents.ReplicationTime = deserializeAws_restXmlReplicationTime(output[\"ReplicationTime\"], context);\n  }\n\n  if (output[\"Metrics\"] !== undefined) {\n    contents.Metrics = deserializeAws_restXmlMetrics(output[\"Metrics\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlEncryptionConfiguration = function (output, context) {\n  var contents = {\n    ReplicaKmsKeyID: undefined\n  };\n\n  if (output[\"ReplicaKmsKeyID\"] !== undefined) {\n    contents.ReplicaKmsKeyID = output[\"ReplicaKmsKeyID\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXml_Error = function (output, context) {\n  var contents = {\n    Key: undefined,\n    VersionId: undefined,\n    Code: undefined,\n    Message: undefined\n  };\n\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n\n  if (output[\"Code\"] !== undefined) {\n    contents.Code = output[\"Code\"];\n  }\n\n  if (output[\"Message\"] !== undefined) {\n    contents.Message = output[\"Message\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlErrorDocument = function (output, context) {\n  var contents = {\n    Key: undefined\n  };\n\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlErrors = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXml_Error(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlEventList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar deserializeAws_restXmlExistingObjectReplication = function (output, context) {\n  var contents = {\n    Status: undefined\n  };\n\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlExposeHeaders = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar deserializeAws_restXmlFilterRule = function (output, context) {\n  var contents = {\n    Name: undefined,\n    Value: undefined\n  };\n\n  if (output[\"Name\"] !== undefined) {\n    contents.Name = output[\"Name\"];\n  }\n\n  if (output[\"Value\"] !== undefined) {\n    contents.Value = output[\"Value\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlFilterRuleList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlFilterRule(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlGrant = function (output, context) {\n  var contents = {\n    Grantee: undefined,\n    Permission: undefined\n  };\n\n  if (output[\"Grantee\"] !== undefined) {\n    contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n  }\n\n  if (output[\"Permission\"] !== undefined) {\n    contents.Permission = output[\"Permission\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlGrantee = function (output, context) {\n  var contents = {\n    DisplayName: undefined,\n    EmailAddress: undefined,\n    ID: undefined,\n    URI: undefined,\n    Type: undefined\n  };\n\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = output[\"DisplayName\"];\n  }\n\n  if (output[\"EmailAddress\"] !== undefined) {\n    contents.EmailAddress = output[\"EmailAddress\"];\n  }\n\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n\n  if (output[\"URI\"] !== undefined) {\n    contents.URI = output[\"URI\"];\n  }\n\n  if (output[\"xsi:type\"] !== undefined) {\n    contents.Type = output[\"xsi:type\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlGrants = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlGrant(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlIndexDocument = function (output, context) {\n  var contents = {\n    Suffix: undefined\n  };\n\n  if (output[\"Suffix\"] !== undefined) {\n    contents.Suffix = output[\"Suffix\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlInitiator = function (output, context) {\n  var contents = {\n    ID: undefined,\n    DisplayName: undefined\n  };\n\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = output[\"DisplayName\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlIntelligentTieringAndOperator = function (output, context) {\n  var contents = {\n    Prefix: undefined,\n    Tags: undefined\n  };\n\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlIntelligentTieringConfiguration = function (output, context) {\n  var contents = {\n    Id: undefined,\n    Filter: undefined,\n    Status: undefined,\n    Tierings: undefined\n  };\n\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlIntelligentTieringFilter(output[\"Filter\"], context);\n  }\n\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n\n  if (output.Tiering === \"\") {\n    contents.Tierings = [];\n  }\n\n  if (output[\"Tiering\"] !== undefined) {\n    contents.Tierings = deserializeAws_restXmlTieringList(__getArrayIfSingleItem(output[\"Tiering\"]), context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlIntelligentTieringConfigurationList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlIntelligentTieringConfiguration(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlIntelligentTieringFilter = function (output, context) {\n  var contents = {\n    Prefix: undefined,\n    Tag: undefined,\n    And: undefined\n  };\n\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tag = deserializeAws_restXmlTag(output[\"Tag\"], context);\n  }\n\n  if (output[\"And\"] !== undefined) {\n    contents.And = deserializeAws_restXmlIntelligentTieringAndOperator(output[\"And\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlInventoryConfiguration = function (output, context) {\n  var contents = {\n    Destination: undefined,\n    IsEnabled: undefined,\n    Filter: undefined,\n    Id: undefined,\n    IncludedObjectVersions: undefined,\n    OptionalFields: undefined,\n    Schedule: undefined\n  };\n\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlInventoryDestination(output[\"Destination\"], context);\n  }\n\n  if (output[\"IsEnabled\"] !== undefined) {\n    contents.IsEnabled = output[\"IsEnabled\"] == \"true\";\n  }\n\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlInventoryFilter(output[\"Filter\"], context);\n  }\n\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n\n  if (output[\"IncludedObjectVersions\"] !== undefined) {\n    contents.IncludedObjectVersions = output[\"IncludedObjectVersions\"];\n  }\n\n  if (output.OptionalFields === \"\") {\n    contents.OptionalFields = [];\n  }\n\n  if (output[\"OptionalFields\"] !== undefined && output[\"OptionalFields\"][\"Field\"] !== undefined) {\n    contents.OptionalFields = deserializeAws_restXmlInventoryOptionalFields(__getArrayIfSingleItem(output[\"OptionalFields\"][\"Field\"]), context);\n  }\n\n  if (output[\"Schedule\"] !== undefined) {\n    contents.Schedule = deserializeAws_restXmlInventorySchedule(output[\"Schedule\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlInventoryConfigurationList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlInventoryConfiguration(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlInventoryDestination = function (output, context) {\n  var contents = {\n    S3BucketDestination: undefined\n  };\n\n  if (output[\"S3BucketDestination\"] !== undefined) {\n    contents.S3BucketDestination = deserializeAws_restXmlInventoryS3BucketDestination(output[\"S3BucketDestination\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlInventoryEncryption = function (output, context) {\n  var contents = {\n    SSES3: undefined,\n    SSEKMS: undefined\n  };\n\n  if (output[\"SSE-S3\"] !== undefined) {\n    contents.SSES3 = deserializeAws_restXmlSSES3(output[\"SSE-S3\"], context);\n  }\n\n  if (output[\"SSE-KMS\"] !== undefined) {\n    contents.SSEKMS = deserializeAws_restXmlSSEKMS(output[\"SSE-KMS\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlInventoryFilter = function (output, context) {\n  var contents = {\n    Prefix: undefined\n  };\n\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlInventoryOptionalFields = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar deserializeAws_restXmlInventoryS3BucketDestination = function (output, context) {\n  var contents = {\n    AccountId: undefined,\n    Bucket: undefined,\n    Format: undefined,\n    Prefix: undefined,\n    Encryption: undefined\n  };\n\n  if (output[\"AccountId\"] !== undefined) {\n    contents.AccountId = output[\"AccountId\"];\n  }\n\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = output[\"Bucket\"];\n  }\n\n  if (output[\"Format\"] !== undefined) {\n    contents.Format = output[\"Format\"];\n  }\n\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n\n  if (output[\"Encryption\"] !== undefined) {\n    contents.Encryption = deserializeAws_restXmlInventoryEncryption(output[\"Encryption\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlInventorySchedule = function (output, context) {\n  var contents = {\n    Frequency: undefined\n  };\n\n  if (output[\"Frequency\"] !== undefined) {\n    contents.Frequency = output[\"Frequency\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlLambdaFunctionConfiguration = function (output, context) {\n  var contents = {\n    Id: undefined,\n    LambdaFunctionArn: undefined,\n    Events: undefined,\n    Filter: undefined\n  };\n\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n\n  if (output[\"CloudFunction\"] !== undefined) {\n    contents.LambdaFunctionArn = output[\"CloudFunction\"];\n  }\n\n  if (output.Event === \"\") {\n    contents.Events = [];\n  }\n\n  if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlLambdaFunctionConfigurationList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlLifecycleExpiration = function (output, context) {\n  var contents = {\n    Date: undefined,\n    Days: undefined,\n    ExpiredObjectDeleteMarker: undefined\n  };\n\n  if (output[\"Date\"] !== undefined) {\n    contents.Date = new Date(output[\"Date\"]);\n  }\n\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n\n  if (output[\"ExpiredObjectDeleteMarker\"] !== undefined) {\n    contents.ExpiredObjectDeleteMarker = output[\"ExpiredObjectDeleteMarker\"] == \"true\";\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlLifecycleRule = function (output, context) {\n  var contents = {\n    Expiration: undefined,\n    ID: undefined,\n    Prefix: undefined,\n    Filter: undefined,\n    Status: undefined,\n    Transitions: undefined,\n    NoncurrentVersionTransitions: undefined,\n    NoncurrentVersionExpiration: undefined,\n    AbortIncompleteMultipartUpload: undefined\n  };\n\n  if (output[\"Expiration\"] !== undefined) {\n    contents.Expiration = deserializeAws_restXmlLifecycleExpiration(output[\"Expiration\"], context);\n  }\n\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlLifecycleRuleFilter(output[\"Filter\"], context);\n  }\n\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n\n  if (output.Transition === \"\") {\n    contents.Transitions = [];\n  }\n\n  if (output[\"Transition\"] !== undefined) {\n    contents.Transitions = deserializeAws_restXmlTransitionList(__getArrayIfSingleItem(output[\"Transition\"]), context);\n  }\n\n  if (output.NoncurrentVersionTransition === \"\") {\n    contents.NoncurrentVersionTransitions = [];\n  }\n\n  if (output[\"NoncurrentVersionTransition\"] !== undefined) {\n    contents.NoncurrentVersionTransitions = deserializeAws_restXmlNoncurrentVersionTransitionList(__getArrayIfSingleItem(output[\"NoncurrentVersionTransition\"]), context);\n  }\n\n  if (output[\"NoncurrentVersionExpiration\"] !== undefined) {\n    contents.NoncurrentVersionExpiration = deserializeAws_restXmlNoncurrentVersionExpiration(output[\"NoncurrentVersionExpiration\"], context);\n  }\n\n  if (output[\"AbortIncompleteMultipartUpload\"] !== undefined) {\n    contents.AbortIncompleteMultipartUpload = deserializeAws_restXmlAbortIncompleteMultipartUpload(output[\"AbortIncompleteMultipartUpload\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlLifecycleRuleAndOperator = function (output, context) {\n  var contents = {\n    Prefix: undefined,\n    Tags: undefined\n  };\n\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlLifecycleRuleFilter = function (output, context) {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"]\n    };\n  }\n\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context)\n    };\n  }\n\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlLifecycleRuleAndOperator(output[\"And\"], context)\n    };\n  }\n\n  return {\n    $unknown: Object.entries(output)[0]\n  };\n};\n\nvar deserializeAws_restXmlLifecycleRules = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlLifecycleRule(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlLoggingEnabled = function (output, context) {\n  var contents = {\n    TargetBucket: undefined,\n    TargetGrants: undefined,\n    TargetPrefix: undefined\n  };\n\n  if (output[\"TargetBucket\"] !== undefined) {\n    contents.TargetBucket = output[\"TargetBucket\"];\n  }\n\n  if (output.TargetGrants === \"\") {\n    contents.TargetGrants = [];\n  }\n\n  if (output[\"TargetGrants\"] !== undefined && output[\"TargetGrants\"][\"Grant\"] !== undefined) {\n    contents.TargetGrants = deserializeAws_restXmlTargetGrants(__getArrayIfSingleItem(output[\"TargetGrants\"][\"Grant\"]), context);\n  }\n\n  if (output[\"TargetPrefix\"] !== undefined) {\n    contents.TargetPrefix = output[\"TargetPrefix\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlMetrics = function (output, context) {\n  var contents = {\n    Status: undefined,\n    EventThreshold: undefined\n  };\n\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n\n  if (output[\"EventThreshold\"] !== undefined) {\n    contents.EventThreshold = deserializeAws_restXmlReplicationTimeValue(output[\"EventThreshold\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlMetricsAndOperator = function (output, context) {\n  var contents = {\n    Prefix: undefined,\n    Tags: undefined\n  };\n\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlMetricsConfiguration = function (output, context) {\n  var contents = {\n    Id: undefined,\n    Filter: undefined\n  };\n\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlMetricsFilter(output[\"Filter\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlMetricsConfigurationList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlMetricsConfiguration(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlMetricsFilter = function (output, context) {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"]\n    };\n  }\n\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context)\n    };\n  }\n\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlMetricsAndOperator(output[\"And\"], context)\n    };\n  }\n\n  return {\n    $unknown: Object.entries(output)[0]\n  };\n};\n\nvar deserializeAws_restXmlMultipartUpload = function (output, context) {\n  var contents = {\n    UploadId: undefined,\n    Key: undefined,\n    Initiated: undefined,\n    StorageClass: undefined,\n    Owner: undefined,\n    Initiator: undefined\n  };\n\n  if (output[\"UploadId\"] !== undefined) {\n    contents.UploadId = output[\"UploadId\"];\n  }\n\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n\n  if (output[\"Initiated\"] !== undefined) {\n    contents.Initiated = new Date(output[\"Initiated\"]);\n  }\n\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n\n  if (output[\"Initiator\"] !== undefined) {\n    contents.Initiator = deserializeAws_restXmlInitiator(output[\"Initiator\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlMultipartUploadList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlMultipartUpload(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlNoncurrentVersionExpiration = function (output, context) {\n  var contents = {\n    NoncurrentDays: undefined\n  };\n\n  if (output[\"NoncurrentDays\"] !== undefined) {\n    contents.NoncurrentDays = parseInt(output[\"NoncurrentDays\"]);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlNoncurrentVersionTransition = function (output, context) {\n  var contents = {\n    NoncurrentDays: undefined,\n    StorageClass: undefined\n  };\n\n  if (output[\"NoncurrentDays\"] !== undefined) {\n    contents.NoncurrentDays = parseInt(output[\"NoncurrentDays\"]);\n  }\n\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlNoncurrentVersionTransitionList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlNoncurrentVersionTransition(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlNotificationConfigurationFilter = function (output, context) {\n  var contents = {\n    Key: undefined\n  };\n\n  if (output[\"S3Key\"] !== undefined) {\n    contents.Key = deserializeAws_restXmlS3KeyFilter(output[\"S3Key\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXml_Object = function (output, context) {\n  var contents = {\n    Key: undefined,\n    LastModified: undefined,\n    ETag: undefined,\n    Size: undefined,\n    StorageClass: undefined,\n    Owner: undefined\n  };\n\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = parseInt(output[\"Size\"]);\n  }\n\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlObjectList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXml_Object(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlObjectLockConfiguration = function (output, context) {\n  var contents = {\n    ObjectLockEnabled: undefined,\n    Rule: undefined\n  };\n\n  if (output[\"ObjectLockEnabled\"] !== undefined) {\n    contents.ObjectLockEnabled = output[\"ObjectLockEnabled\"];\n  }\n\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rule = deserializeAws_restXmlObjectLockRule(output[\"Rule\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlObjectLockLegalHold = function (output, context) {\n  var contents = {\n    Status: undefined\n  };\n\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlObjectLockRetention = function (output, context) {\n  var contents = {\n    Mode: undefined,\n    RetainUntilDate: undefined\n  };\n\n  if (output[\"Mode\"] !== undefined) {\n    contents.Mode = output[\"Mode\"];\n  }\n\n  if (output[\"RetainUntilDate\"] !== undefined) {\n    contents.RetainUntilDate = new Date(output[\"RetainUntilDate\"]);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlObjectLockRule = function (output, context) {\n  var contents = {\n    DefaultRetention: undefined\n  };\n\n  if (output[\"DefaultRetention\"] !== undefined) {\n    contents.DefaultRetention = deserializeAws_restXmlDefaultRetention(output[\"DefaultRetention\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlObjectVersion = function (output, context) {\n  var contents = {\n    ETag: undefined,\n    Size: undefined,\n    StorageClass: undefined,\n    Key: undefined,\n    VersionId: undefined,\n    IsLatest: undefined,\n    LastModified: undefined,\n    Owner: undefined\n  };\n\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = parseInt(output[\"Size\"]);\n  }\n\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n\n  if (output[\"IsLatest\"] !== undefined) {\n    contents.IsLatest = output[\"IsLatest\"] == \"true\";\n  }\n\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlObjectVersionList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlObjectVersion(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlOwner = function (output, context) {\n  var contents = {\n    DisplayName: undefined,\n    ID: undefined\n  };\n\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = output[\"DisplayName\"];\n  }\n\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlOwnershipControls = function (output, context) {\n  var contents = {\n    Rules: undefined\n  };\n\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  }\n\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlOwnershipControlsRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlOwnershipControlsRule = function (output, context) {\n  var contents = {\n    ObjectOwnership: undefined\n  };\n\n  if (output[\"ObjectOwnership\"] !== undefined) {\n    contents.ObjectOwnership = output[\"ObjectOwnership\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlOwnershipControlsRules = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlOwnershipControlsRule(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlPart = function (output, context) {\n  var contents = {\n    PartNumber: undefined,\n    LastModified: undefined,\n    ETag: undefined,\n    Size: undefined\n  };\n\n  if (output[\"PartNumber\"] !== undefined) {\n    contents.PartNumber = parseInt(output[\"PartNumber\"]);\n  }\n\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = parseInt(output[\"Size\"]);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlParts = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlPart(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlPolicyStatus = function (output, context) {\n  var contents = {\n    IsPublic: undefined\n  };\n\n  if (output[\"IsPublic\"] !== undefined) {\n    contents.IsPublic = output[\"IsPublic\"] == \"true\";\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlPublicAccessBlockConfiguration = function (output, context) {\n  var contents = {\n    BlockPublicAcls: undefined,\n    IgnorePublicAcls: undefined,\n    BlockPublicPolicy: undefined,\n    RestrictPublicBuckets: undefined\n  };\n\n  if (output[\"BlockPublicAcls\"] !== undefined) {\n    contents.BlockPublicAcls = output[\"BlockPublicAcls\"] == \"true\";\n  }\n\n  if (output[\"IgnorePublicAcls\"] !== undefined) {\n    contents.IgnorePublicAcls = output[\"IgnorePublicAcls\"] == \"true\";\n  }\n\n  if (output[\"BlockPublicPolicy\"] !== undefined) {\n    contents.BlockPublicPolicy = output[\"BlockPublicPolicy\"] == \"true\";\n  }\n\n  if (output[\"RestrictPublicBuckets\"] !== undefined) {\n    contents.RestrictPublicBuckets = output[\"RestrictPublicBuckets\"] == \"true\";\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlQueueConfiguration = function (output, context) {\n  var contents = {\n    Id: undefined,\n    QueueArn: undefined,\n    Events: undefined,\n    Filter: undefined\n  };\n\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n\n  if (output[\"Queue\"] !== undefined) {\n    contents.QueueArn = output[\"Queue\"];\n  }\n\n  if (output.Event === \"\") {\n    contents.Events = [];\n  }\n\n  if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlQueueConfigurationList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlQueueConfiguration(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlRedirect = function (output, context) {\n  var contents = {\n    HostName: undefined,\n    HttpRedirectCode: undefined,\n    Protocol: undefined,\n    ReplaceKeyPrefixWith: undefined,\n    ReplaceKeyWith: undefined\n  };\n\n  if (output[\"HostName\"] !== undefined) {\n    contents.HostName = output[\"HostName\"];\n  }\n\n  if (output[\"HttpRedirectCode\"] !== undefined) {\n    contents.HttpRedirectCode = output[\"HttpRedirectCode\"];\n  }\n\n  if (output[\"Protocol\"] !== undefined) {\n    contents.Protocol = output[\"Protocol\"];\n  }\n\n  if (output[\"ReplaceKeyPrefixWith\"] !== undefined) {\n    contents.ReplaceKeyPrefixWith = output[\"ReplaceKeyPrefixWith\"];\n  }\n\n  if (output[\"ReplaceKeyWith\"] !== undefined) {\n    contents.ReplaceKeyWith = output[\"ReplaceKeyWith\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlRedirectAllRequestsTo = function (output, context) {\n  var contents = {\n    HostName: undefined,\n    Protocol: undefined\n  };\n\n  if (output[\"HostName\"] !== undefined) {\n    contents.HostName = output[\"HostName\"];\n  }\n\n  if (output[\"Protocol\"] !== undefined) {\n    contents.Protocol = output[\"Protocol\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlReplicaModifications = function (output, context) {\n  var contents = {\n    Status: undefined\n  };\n\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlReplicationConfiguration = function (output, context) {\n  var contents = {\n    Role: undefined,\n    Rules: undefined\n  };\n\n  if (output[\"Role\"] !== undefined) {\n    contents.Role = output[\"Role\"];\n  }\n\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  }\n\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlReplicationRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlReplicationRule = function (output, context) {\n  var contents = {\n    ID: undefined,\n    Priority: undefined,\n    Prefix: undefined,\n    Filter: undefined,\n    Status: undefined,\n    SourceSelectionCriteria: undefined,\n    ExistingObjectReplication: undefined,\n    Destination: undefined,\n    DeleteMarkerReplication: undefined\n  };\n\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n\n  if (output[\"Priority\"] !== undefined) {\n    contents.Priority = parseInt(output[\"Priority\"]);\n  }\n\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlReplicationRuleFilter(output[\"Filter\"], context);\n  }\n\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n\n  if (output[\"SourceSelectionCriteria\"] !== undefined) {\n    contents.SourceSelectionCriteria = deserializeAws_restXmlSourceSelectionCriteria(output[\"SourceSelectionCriteria\"], context);\n  }\n\n  if (output[\"ExistingObjectReplication\"] !== undefined) {\n    contents.ExistingObjectReplication = deserializeAws_restXmlExistingObjectReplication(output[\"ExistingObjectReplication\"], context);\n  }\n\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlDestination(output[\"Destination\"], context);\n  }\n\n  if (output[\"DeleteMarkerReplication\"] !== undefined) {\n    contents.DeleteMarkerReplication = deserializeAws_restXmlDeleteMarkerReplication(output[\"DeleteMarkerReplication\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlReplicationRuleAndOperator = function (output, context) {\n  var contents = {\n    Prefix: undefined,\n    Tags: undefined\n  };\n\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlReplicationRuleFilter = function (output, context) {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"]\n    };\n  }\n\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context)\n    };\n  }\n\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlReplicationRuleAndOperator(output[\"And\"], context)\n    };\n  }\n\n  return {\n    $unknown: Object.entries(output)[0]\n  };\n};\n\nvar deserializeAws_restXmlReplicationRules = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlReplicationRule(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlReplicationTime = function (output, context) {\n  var contents = {\n    Status: undefined,\n    Time: undefined\n  };\n\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n\n  if (output[\"Time\"] !== undefined) {\n    contents.Time = deserializeAws_restXmlReplicationTimeValue(output[\"Time\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlReplicationTimeValue = function (output, context) {\n  var contents = {\n    Minutes: undefined\n  };\n\n  if (output[\"Minutes\"] !== undefined) {\n    contents.Minutes = parseInt(output[\"Minutes\"]);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlRoutingRule = function (output, context) {\n  var contents = {\n    Condition: undefined,\n    Redirect: undefined\n  };\n\n  if (output[\"Condition\"] !== undefined) {\n    contents.Condition = deserializeAws_restXmlCondition(output[\"Condition\"], context);\n  }\n\n  if (output[\"Redirect\"] !== undefined) {\n    contents.Redirect = deserializeAws_restXmlRedirect(output[\"Redirect\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlRoutingRules = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlRoutingRule(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlS3KeyFilter = function (output, context) {\n  var contents = {\n    FilterRules: undefined\n  };\n\n  if (output.FilterRule === \"\") {\n    contents.FilterRules = [];\n  }\n\n  if (output[\"FilterRule\"] !== undefined) {\n    contents.FilterRules = deserializeAws_restXmlFilterRuleList(__getArrayIfSingleItem(output[\"FilterRule\"]), context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlServerSideEncryptionByDefault = function (output, context) {\n  var contents = {\n    SSEAlgorithm: undefined,\n    KMSMasterKeyID: undefined\n  };\n\n  if (output[\"SSEAlgorithm\"] !== undefined) {\n    contents.SSEAlgorithm = output[\"SSEAlgorithm\"];\n  }\n\n  if (output[\"KMSMasterKeyID\"] !== undefined) {\n    contents.KMSMasterKeyID = output[\"KMSMasterKeyID\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlServerSideEncryptionConfiguration = function (output, context) {\n  var contents = {\n    Rules: undefined\n  };\n\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  }\n\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlServerSideEncryptionRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlServerSideEncryptionRule = function (output, context) {\n  var contents = {\n    ApplyServerSideEncryptionByDefault: undefined,\n    BucketKeyEnabled: undefined\n  };\n\n  if (output[\"ApplyServerSideEncryptionByDefault\"] !== undefined) {\n    contents.ApplyServerSideEncryptionByDefault = deserializeAws_restXmlServerSideEncryptionByDefault(output[\"ApplyServerSideEncryptionByDefault\"], context);\n  }\n\n  if (output[\"BucketKeyEnabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output[\"BucketKeyEnabled\"] == \"true\";\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlServerSideEncryptionRules = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlServerSideEncryptionRule(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlSourceSelectionCriteria = function (output, context) {\n  var contents = {\n    SseKmsEncryptedObjects: undefined,\n    ReplicaModifications: undefined\n  };\n\n  if (output[\"SseKmsEncryptedObjects\"] !== undefined) {\n    contents.SseKmsEncryptedObjects = deserializeAws_restXmlSseKmsEncryptedObjects(output[\"SseKmsEncryptedObjects\"], context);\n  }\n\n  if (output[\"ReplicaModifications\"] !== undefined) {\n    contents.ReplicaModifications = deserializeAws_restXmlReplicaModifications(output[\"ReplicaModifications\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlSSEKMS = function (output, context) {\n  var contents = {\n    KeyId: undefined\n  };\n\n  if (output[\"KeyId\"] !== undefined) {\n    contents.KeyId = output[\"KeyId\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlSseKmsEncryptedObjects = function (output, context) {\n  var contents = {\n    Status: undefined\n  };\n\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlSSES3 = function (output, context) {\n  var contents = {};\n  return contents;\n};\n\nvar deserializeAws_restXmlStorageClassAnalysis = function (output, context) {\n  var contents = {\n    DataExport: undefined\n  };\n\n  if (output[\"DataExport\"] !== undefined) {\n    contents.DataExport = deserializeAws_restXmlStorageClassAnalysisDataExport(output[\"DataExport\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlStorageClassAnalysisDataExport = function (output, context) {\n  var contents = {\n    OutputSchemaVersion: undefined,\n    Destination: undefined\n  };\n\n  if (output[\"OutputSchemaVersion\"] !== undefined) {\n    contents.OutputSchemaVersion = output[\"OutputSchemaVersion\"];\n  }\n\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlAnalyticsExportDestination(output[\"Destination\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlTag = function (output, context) {\n  var contents = {\n    Key: undefined,\n    Value: undefined\n  };\n\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n\n  if (output[\"Value\"] !== undefined) {\n    contents.Value = output[\"Value\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlTagSet = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlTag(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlTargetGrant = function (output, context) {\n  var contents = {\n    Grantee: undefined,\n    Permission: undefined\n  };\n\n  if (output[\"Grantee\"] !== undefined) {\n    contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n  }\n\n  if (output[\"Permission\"] !== undefined) {\n    contents.Permission = output[\"Permission\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlTargetGrants = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlTargetGrant(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlTiering = function (output, context) {\n  var contents = {\n    Days: undefined,\n    AccessTier: undefined\n  };\n\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n\n  if (output[\"AccessTier\"] !== undefined) {\n    contents.AccessTier = output[\"AccessTier\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlTieringList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlTiering(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlTopicConfiguration = function (output, context) {\n  var contents = {\n    Id: undefined,\n    TopicArn: undefined,\n    Events: undefined,\n    Filter: undefined\n  };\n\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n\n  if (output[\"Topic\"] !== undefined) {\n    contents.TopicArn = output[\"Topic\"];\n  }\n\n  if (output.Event === \"\") {\n    contents.Events = [];\n  }\n\n  if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlTopicConfigurationList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlTopicConfiguration(entry, context);\n  });\n};\n\nvar deserializeAws_restXmlTransition = function (output, context) {\n  var contents = {\n    Date: undefined,\n    Days: undefined,\n    StorageClass: undefined\n  };\n\n  if (output[\"Date\"] !== undefined) {\n    contents.Date = new Date(output[\"Date\"]);\n  }\n\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restXmlTransitionList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restXmlTransition(entry, context);\n  });\n};\n\nvar deserializeMetadata = function (output) {\n  var _a;\n\n  return {\n    httpStatusCode: output.statusCode,\n    requestId: (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"]\n  };\n}; // Collect low-level response body stream to Uint8Array.\n\n\nvar collectBody = function (streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n}; // Encode Uint8Array data into string with utf-8.\n\n\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\n\nvar isSerializableHeaderValue = function (value) {\n  return value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n};\n\nvar decodeEscapedXML = function (str) {\n  return str.replace(/&amp;/g, \"&\").replace(/&apos;/g, \"'\").replace(/&quot;/g, '\"').replace(/&gt;/g, \">\").replace(/&lt;/g, \"<\");\n};\n\nvar parseBody = function (streamBody, context) {\n  return collectBodyString(streamBody, context).then(function (encoded) {\n    if (encoded.length) {\n      var parsedObj = xmlParse(encoded, {\n        attributeNamePrefix: \"\",\n        ignoreAttributes: false,\n        parseNodeValue: false,\n        tagValueProcessor: function (val, tagName) {\n          return decodeEscapedXML(val);\n        }\n      });\n      var textNodeName = \"#text\";\n      var key = Object.keys(parsedObj)[0];\n      var parsedObjToReturn = parsedObj[key];\n\n      if (parsedObjToReturn[textNodeName]) {\n        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n        delete parsedObjToReturn[textNodeName];\n      }\n\n      return __getValueFromTextNode(parsedObjToReturn);\n    }\n\n    return {};\n  });\n};\n\nvar loadRestXmlErrorCode = function (output, data) {\n  if (data.Code !== undefined) {\n    return data.Code;\n  }\n\n  if (output.statusCode == 404) {\n    return \"NotFound\";\n  }\n\n  return \"\";\n};","map":{"version":3,"mappings":";AAiPA,SAQEA,eARF,EAuDEC,mBAvDF,EA4DEC,aA5DF,EA0FEC,qBA1FF,QAmHO,oBAnHP;AA2IA,SAASC,WAAW,IAAIC,aAAxB,QAA6E,wBAA7E;AACA,SAEEC,eAAe,IAAIC,iBAFrB,EAGEC,0BAA0B,IAAIC,4BAHhC,EAIEC,oBAAoB,IAAIC,sBAJ1B,EAKEC,oBAAoB,IAAIC,sBAL1B,QAMO,wBANP;AAcA,SAASC,OAAO,IAAIC,SAApB,EAA+BC,OAAO,IAAIC,SAA1C,QAA2D,sBAA3D;AACA,SAASC,KAAK,IAAIC,QAAlB,QAAkC,iBAAlC;AAEA,OAAO,IAAMC,+CAA+C,GAAG,UAC7DC,KAD6D,EAE7DC,OAF6D,EAEtC;EAAA;;;;;;UAEjBC,OAAO,yBACPC,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAD1C,GAEPD,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAFjD,CAAP;UAMFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK;YACT,QAAQ;UADC,GAELlB,KAAK,CAACmB,QAAN,KAAmBX,SAAnB,IAAgC;YAAEY,QAAQ,EAAEpB,KAAK,CAACmB;UAAlB,CAF3B,CAAL;UAKyC;UAAA;UAAA,EAAMlB,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAvCuB;AAiDxB,CAnDM;AAqDP,OAAO,IAAMC,kDAAkD,GAAG,UAChE/B,KADgE,EAEhEC,OAFgE,EAEzC;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAF1C,GAGPD,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAHjD,CAAP;UAOFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK,gBACLlB,KAAK,CAACmB,QAAN,KAAmBX,SAAnB,IAAgC;YAAEY,QAAQ,EAAEpB,KAAK,CAACmB;UAAlB,CAD3B,CAAL;;UAKN,IAAInB,KAAK,CAACgC,eAAN,KAA0BxB,SAA9B,EAAyC;YACvCyB,QAAQ,GAAGC,4CAA4C,CAAClC,KAAK,CAACgC,eAAP,EAAwB/B,OAAxB,CAAvD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,MAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA9CuB;AAwDxB,CA1DM;AA4DP,OAAO,IAAMO,qCAAqC,GAAG,UACnDrC,KADmD,EAEnDC,OAFmD,EAE5B;EAAA;;;;;;UAEjBC,OAAO,6VACPC,yBAAyB,CAACH,KAAK,CAACsC,GAAP,CAAzB,IAAwC;YAAE,aAAatC,KAAK,CAACsC;UAArB,CADjC,GAEPnC,yBAAyB,CAACH,KAAK,CAACuC,YAAP,CAAzB,IAAiD;YAAE,iBAAiBvC,KAAK,CAACuC;UAAzB,CAF1C,GAGPpC,yBAAyB,CAACH,KAAK,CAACwC,kBAAP,CAAzB,IAAuD;YAAE,uBAAuBxC,KAAK,CAACwC;UAA/B,CAHhD,GAIPrC,yBAAyB,CAACH,KAAK,CAACyC,eAAP,CAAzB,IAAoD;YAAE,oBAAoBzC,KAAK,CAACyC;UAA5B,CAJ7C,GAKPtC,yBAAyB,CAACH,KAAK,CAAC0C,eAAP,CAAzB,IAAoD;YAAE,oBAAoB1C,KAAK,CAAC0C;UAA5B,CAL7C,GAMPvC,yBAAyB,CAACH,KAAK,CAAC2C,WAAP,CAAzB,IAAgD;YAAE,gBAAgB3C,KAAK,CAAC2C;UAAxB,CANzC,GAOPxC,yBAAyB,CAACH,KAAK,CAAC4C,UAAP,CAAzB,IAA+C;YAAE,qBAAqB5C,KAAK,CAAC4C;UAA7B,CAPxC,GAQPzC,yBAAyB,CAACH,KAAK,CAAC6C,iBAAP,CAAzB,IAAsD;YACxD,8BAA8B7C,KAAK,CAAC6C;UADoB,CAR/C,GAWP1C,yBAAyB,CAACH,KAAK,CAAC8C,yBAAP,CAAzB,IAA8D;YAChE,uCAAuC5D,iBAAiB,CAACc,KAAK,CAAC8C,yBAAP,CAAjB,CAAoDV,QAApD;UADyB,CAXvD,GAcPjC,yBAAyB,CAACH,KAAK,CAAC+C,qBAAP,CAAzB,IAA0D;YAC5D,mCAAmC/C,KAAK,CAAC+C;UADmB,CAdnD,GAiBP5C,yBAAyB,CAACH,KAAK,CAACgD,2BAAP,CAAzB,IAAgE;YAClE,yCAAyC9D,iBAAiB,CAACc,KAAK,CAACgD,2BAAP,CAAjB,CAAsDZ,QAAtD;UADyB,CAjBzD,GAoBPjC,yBAAyB,CAACH,KAAK,CAACiD,OAAP,CAAzB,IAA4C;YAAEC,OAAO,EAAEhE,iBAAiB,CAACc,KAAK,CAACiD,OAAP,CAAjB,CAAkCb,QAAlC;UAAX,CApBrC,GAqBPjC,yBAAyB,CAACH,KAAK,CAACmD,gBAAP,CAAzB,IAAqD;YAAE,4BAA4BnD,KAAK,CAACmD;UAApC,CArB9C,GAsBPhD,yBAAyB,CAACH,KAAK,CAACoD,SAAP,CAAzB,IAA8C;YAAE,oBAAoBpD,KAAK,CAACoD;UAA5B,CAtBvC,GAuBPjD,yBAAyB,CAACH,KAAK,CAACqD,YAAP,CAAzB,IAAiD;YAAE,wBAAwBrD,KAAK,CAACqD;UAAhC,CAvB1C,GAwBPlD,yBAAyB,CAACH,KAAK,CAACsD,aAAP,CAAzB,IAAkD;YAAE,yBAAyBtD,KAAK,CAACsD;UAAjC,CAxB3C,GAyBPnD,yBAAyB,CAACH,KAAK,CAACuD,iBAAP,CAAzB,IAAsD;YAAE,4BAA4BvD,KAAK,CAACuD;UAApC,CAzB/C,GA0BPpD,yBAAyB,CAACH,KAAK,CAACwD,gBAAP,CAAzB,IAAqD;YAAE,2BAA2BxD,KAAK,CAACwD;UAAnC,CA1B9C,GA2BPrD,yBAAyB,CAACH,KAAK,CAACyD,oBAAP,CAAzB,IAAyD;YAC3D,gCAAgCzD,KAAK,CAACyD;UADqB,CA3BlD,GA8BPtD,yBAAyB,CAACH,KAAK,CAAC0D,YAAP,CAAzB,IAAiD;YAAE,uBAAuB1D,KAAK,CAAC0D;UAA/B,CA9B1C,GA+BPvD,yBAAyB,CAACH,KAAK,CAAC2D,uBAAP,CAAzB,IAA4D;YAC9D,mCAAmC3D,KAAK,CAAC2D;UADqB,CA/BrD,GAkCPxD,yBAAyB,CAACH,KAAK,CAAC4D,oBAAP,CAAzB,IAAyD;YAC3D,mDAAmD5D,KAAK,CAAC4D;UADE,CAlClD,GAqCPzD,yBAAyB,CAACH,KAAK,CAAC6D,cAAP,CAAzB,IAAmD;YACrD,6CAA6C7D,KAAK,CAAC6D;UADE,CArC5C,GAwCP1D,yBAAyB,CAACH,KAAK,CAAC8D,iBAAP,CAAzB,IAAsD;YACxD,iDAAiD9D,KAAK,CAAC8D;UADC,CAxC/C,GA2CP3D,yBAAyB,CAACH,KAAK,CAAC+D,WAAP,CAAzB,IAAgD;YAClD,+CAA+C/D,KAAK,CAAC+D;UADH,CA3CzC,GA8CP5D,yBAAyB,CAACH,KAAK,CAACgE,uBAAP,CAAzB,IAA4D;YAC9D,wCAAwChE,KAAK,CAACgE;UADgB,CA9CrD,GAiDP7D,yBAAyB,CAACH,KAAK,CAACiE,gBAAP,CAAzB,IAAqD;YACvD,mDAAmDjE,KAAK,CAACiE,gBAAN,CAAwB7B,QAAxB;UADI,CAjD9C,GAoDPjC,yBAAyB,CAACH,KAAK,CAACkE,8BAAP,CAAzB,IAAmE;YACrE,+DAA+DlE,KAAK,CAACkE;UADA,CApD5D,GAuDP/D,yBAAyB,CAACH,KAAK,CAACmE,wBAAP,CAAzB,IAA6D;YAC/D,yDAAyDnE,KAAK,CAACmE;UADA,CAvDtD,GA0DPhE,yBAAyB,CAACH,KAAK,CAACoE,2BAAP,CAAzB,IAAgE;YAClE,6DAA6DpE,KAAK,CAACoE;UADD,CA1DzD,GA6DPjE,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CA7D1C,GA8DPD,yBAAyB,CAACH,KAAK,CAACqE,OAAP,CAAzB,IAA4C;YAAE,iBAAiBrE,KAAK,CAACqE;UAAzB,CA9DrC,GA+DPlE,yBAAyB,CAACH,KAAK,CAACsE,cAAP,CAAzB,IAAmD;YAAE,0BAA0BtE,KAAK,CAACsE;UAAlC,CA/D5C,GAgEPnE,yBAAyB,CAACH,KAAK,CAACuE,yBAAP,CAAzB,IAA8D;YAChE,uCAAuC,CACrCvE,KAAK,CAACuE,yBAAN,CAAiCC,WAAjC,GAA+C1D,KAA/C,CAAqD,GAArD,EAA0D,CAA1D,IAA+D,GAD1B,EAErCsB,QAFqC;UADyB,CAhEvD,GAqEPjC,yBAAyB,CAACH,KAAK,CAACyE,yBAAP,CAAzB,IAA8D;YAChE,gCAAgCzE,KAAK,CAACyE;UAD0B,CArEvD,GAwEPtE,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAxEjD,GA2EPF,yBAAyB,CAACH,KAAK,CAAC0E,yBAAP,CAAzB,IAA8D;YAChE,sCAAsC1E,KAAK,CAAC0E;UADoB,CA3EvD,GA8EP1E,KAAK,CAAC2E,QAAN,KAAmBnE,SAAnB,IACFoE,MAAM,CAACC,IAAP,CAAY7E,KAAK,CAAC2E,QAAlB,EAA4BG,MAA5B,CACE,UAACC,GAAD,EAAWC,MAAX,EAAyB;;;YAAK,6BACzBD,GADyB,IACtBzD,YACL,gBAAc0D,MAAM,CAACC,WAAP,EADT,IACkCjF,KAAK,CAAC2E,QAAN,CAAgBK,MAAhB,CADlC,EACyD1D,EAFnC;UAG5B,CAJJ,EAKE,EALF,CA/ES,CAAP;UAuFFhB,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB,QAAQ;UADS,CAAb;UAIyC;UAAA;UAAA,EAAMjB,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAvHuB;AAiIxB,CAnIM;AAqIP,OAAO,IAAMoD,uCAAuC,GAAG,UACrDlF,KADqD,EAErDC,OAFqD,EAE9B;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACsC,GAAP,CAAzB,IAAwC;YAAE,aAAatC,KAAK,CAACsC;UAArB,CAFjC,GAGPnC,yBAAyB,CAACH,KAAK,CAACmD,gBAAP,CAAzB,IAAqD;YAAE,4BAA4BnD,KAAK,CAACmD;UAApC,CAH9C,GAIPhD,yBAAyB,CAACH,KAAK,CAACoD,SAAP,CAAzB,IAA8C;YAAE,oBAAoBpD,KAAK,CAACoD;UAA5B,CAJvC,GAKPjD,yBAAyB,CAACH,KAAK,CAACqD,YAAP,CAAzB,IAAiD;YAAE,wBAAwBrD,KAAK,CAACqD;UAAhC,CAL1C,GAMPlD,yBAAyB,CAACH,KAAK,CAACmF,UAAP,CAAzB,IAA+C;YAAE,qBAAqBnF,KAAK,CAACmF;UAA7B,CANxC,GAOPhF,yBAAyB,CAACH,KAAK,CAACsD,aAAP,CAAzB,IAAkD;YAAE,yBAAyBtD,KAAK,CAACsD;UAAjC,CAP3C,GAQPnD,yBAAyB,CAACH,KAAK,CAACoF,0BAAP,CAAzB,IAA+D;YACjE,oCAAoCpF,KAAK,CAACoF,0BAAN,CAAkChD,QAAlC;UAD6B,CARxD,CAAP;UAYF9B,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UAGD,IAAIX,KAAK,CAACqF,yBAAN,KAAoC7E,SAAxC,EAAmD;YACjDyB,QAAQ,GAAGqD,6CAA6C,CAACtF,KAAK,CAACqF,yBAAP,EAAkCpF,OAAlC,CAAxD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBwB,IAAI;UAPmB,CAAlB,CAAP;;;GAjCuB;AA0CxB,CA5CM;AA8CP,OAAO,IAAMyD,gDAAgD,GAAG,UAC9DvF,KAD8D,EAE9DC,OAF8D,EAEvC;EAAA;;;;;;UAEjBC,OAAO,0PACPC,yBAAyB,CAACH,KAAK,CAACsC,GAAP,CAAzB,IAAwC;YAAE,aAAatC,KAAK,CAACsC;UAArB,CADjC,GAEPnC,yBAAyB,CAACH,KAAK,CAACuC,YAAP,CAAzB,IAAiD;YAAE,iBAAiBvC,KAAK,CAACuC;UAAzB,CAF1C,GAGPpC,yBAAyB,CAACH,KAAK,CAACwC,kBAAP,CAAzB,IAAuD;YAAE,uBAAuBxC,KAAK,CAACwC;UAA/B,CAHhD,GAIPrC,yBAAyB,CAACH,KAAK,CAACyC,eAAP,CAAzB,IAAoD;YAAE,oBAAoBzC,KAAK,CAACyC;UAA5B,CAJ7C,GAKPtC,yBAAyB,CAACH,KAAK,CAAC0C,eAAP,CAAzB,IAAoD;YAAE,oBAAoB1C,KAAK,CAAC0C;UAA5B,CAL7C,GAMPvC,yBAAyB,CAACH,KAAK,CAAC2C,WAAP,CAAzB,IAAgD;YAAE,gBAAgB3C,KAAK,CAAC2C;UAAxB,CANzC,GAOPxC,yBAAyB,CAACH,KAAK,CAACiD,OAAP,CAAzB,IAA4C;YAAEC,OAAO,EAAEhE,iBAAiB,CAACc,KAAK,CAACiD,OAAP,CAAjB,CAAkCb,QAAlC;UAAX,CAPrC,GAQPjC,yBAAyB,CAACH,KAAK,CAACmD,gBAAP,CAAzB,IAAqD;YAAE,4BAA4BnD,KAAK,CAACmD;UAApC,CAR9C,GASPhD,yBAAyB,CAACH,KAAK,CAACoD,SAAP,CAAzB,IAA8C;YAAE,oBAAoBpD,KAAK,CAACoD;UAA5B,CATvC,GAUPjD,yBAAyB,CAACH,KAAK,CAACqD,YAAP,CAAzB,IAAiD;YAAE,wBAAwBrD,KAAK,CAACqD;UAAhC,CAV1C,GAWPlD,yBAAyB,CAACH,KAAK,CAACsD,aAAP,CAAzB,IAAkD;YAAE,yBAAyBtD,KAAK,CAACsD;UAAjC,CAX3C,GAYPnD,yBAAyB,CAACH,KAAK,CAACyD,oBAAP,CAAzB,IAAyD;YAC3D,gCAAgCzD,KAAK,CAACyD;UADqB,CAZlD,GAePtD,yBAAyB,CAACH,KAAK,CAAC0D,YAAP,CAAzB,IAAiD;YAAE,uBAAuB1D,KAAK,CAAC0D;UAA/B,CAf1C,GAgBPvD,yBAAyB,CAACH,KAAK,CAAC2D,uBAAP,CAAzB,IAA4D;YAC9D,mCAAmC3D,KAAK,CAAC2D;UADqB,CAhBrD,GAmBPxD,yBAAyB,CAACH,KAAK,CAAC4D,oBAAP,CAAzB,IAAyD;YAC3D,mDAAmD5D,KAAK,CAAC4D;UADE,CAnBlD,GAsBPzD,yBAAyB,CAACH,KAAK,CAAC6D,cAAP,CAAzB,IAAmD;YACrD,6CAA6C7D,KAAK,CAAC6D;UADE,CAtB5C,GAyBP1D,yBAAyB,CAACH,KAAK,CAAC8D,iBAAP,CAAzB,IAAsD;YACxD,iDAAiD9D,KAAK,CAAC8D;UADC,CAzB/C,GA4BP3D,yBAAyB,CAACH,KAAK,CAAC+D,WAAP,CAAzB,IAAgD;YAClD,+CAA+C/D,KAAK,CAAC+D;UADH,CA5BzC,GA+BP5D,yBAAyB,CAACH,KAAK,CAACgE,uBAAP,CAAzB,IAA4D;YAC9D,wCAAwChE,KAAK,CAACgE;UADgB,CA/BrD,GAkCP7D,yBAAyB,CAACH,KAAK,CAACiE,gBAAP,CAAzB,IAAqD;YACvD,mDAAmDjE,KAAK,CAACiE,gBAAN,CAAwB7B,QAAxB;UADI,CAlC9C,GAqCPjC,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CArC1C,GAsCPD,yBAAyB,CAACH,KAAK,CAACqE,OAAP,CAAzB,IAA4C;YAAE,iBAAiBrE,KAAK,CAACqE;UAAzB,CAtCrC,GAuCPlE,yBAAyB,CAACH,KAAK,CAACsE,cAAP,CAAzB,IAAmD;YAAE,0BAA0BtE,KAAK,CAACsE;UAAlC,CAvC5C,GAwCPnE,yBAAyB,CAACH,KAAK,CAACuE,yBAAP,CAAzB,IAA8D;YAChE,uCAAuC,CACrCvE,KAAK,CAACuE,yBAAN,CAAiCC,WAAjC,GAA+C1D,KAA/C,CAAqD,GAArD,EAA0D,CAA1D,IAA+D,GAD1B,EAErCsB,QAFqC;UADyB,CAxCvD,GA6CPjC,yBAAyB,CAACH,KAAK,CAACyE,yBAAP,CAAzB,IAA8D;YAChE,gCAAgCzE,KAAK,CAACyE;UAD0B,CA7CvD,GAgDPtE,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAhDjD,GAmDPL,KAAK,CAAC2E,QAAN,KAAmBnE,SAAnB,IACFoE,MAAM,CAACC,IAAP,CAAY7E,KAAK,CAAC2E,QAAlB,EAA4BG,MAA5B,CACE,UAACC,GAAD,EAAWC,MAAX,EAAyB;;;YAAK,6BACzBD,GADyB,IACtBzD,YACL,gBAAc0D,MAAM,CAACC,WAAP,EADT,IACkCjF,KAAK,CAAC2E,QAAN,CAAgBK,MAAhB,CADlC,EACyD1D,EAFnC;UAG5B,CAJJ,EAKE,EALF,CApDS,CAAP;UA4DFhB,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBsE,OAAO,EAAE;UADQ,CAAb;UAIyC;UAAA;UAAA,EAAMvF,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,MAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA5FuB;AAsGxB,CAxGM;AA0GP,OAAO,IAAM2D,uCAAuC,GAAG,UACrDzF,KADqD,EAErDC,OAFqD,EAE9B;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UAE8C;UAAA;UAAA,EAAMV,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBwB,IAAI;UAPmB,CAAlB,CAAP;;;GAnBuB;AA4BxB,CA9BM;AAgCP,OAAO,IAAM4D,6DAA6D,GAAG,UAC3E1F,KAD2E,EAE3EC,OAF2E,EAEpD;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACTyE,SAAS,EAAE;UADF,GAEL3F,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0B;YAAEqF,EAAE,EAAE7F,KAAK,CAAC4F;UAAZ,CAFrB,CAAL;UAKyC;UAAA;UAAA,EAAM3F,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAvBuB;AAiCxB,CAnCM;AAqCP,OAAO,IAAMgE,2CAA2C,GAAG,UACzD9F,KADyD,EAEzDC,OAFyD,EAElC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB6E,IAAI,EAAE;UADW,CAAb;UAIyC;UAAA;UAAA,EAAM9F,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMkE,iDAAiD,GAAG,UAC/DhG,KAD+D,EAE/DC,OAF+D,EAExC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB+E,UAAU,EAAE;UADK,CAAb;UAIyC;UAAA;UAAA,EAAMhG,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMoE,sEAAsE,GAAG,UACpFlG,KADoF,EAEpFC,OAFoF,EAE7D;EAAA;;;;;;UAEjBC,OAAO,GAAQ,EAAf;UACFI,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACT,uBAAuB;UADd,GAELlB,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0B;YAAEqF,EAAE,EAAE7F,KAAK,CAAC4F;UAAZ,CAFrB,CAAL;UAKyC;UAAA;UAAA,EAAM3F,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAnBuB;AA6BxB,CA/BM;AAiCP,OAAO,IAAMqE,6DAA6D,GAAG,UAC3EnG,KAD2E,EAE3EC,OAF2E,EAEpD;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACTkF,SAAS,EAAE;UADF,GAELpG,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0B;YAAEqF,EAAE,EAAE7F,KAAK,CAAC4F;UAAZ,CAFrB,CAAL;UAKyC;UAAA;UAAA,EAAM3F,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAvBuB;AAiCxB,CAnCM;AAqCP,OAAO,IAAMuE,gDAAgD,GAAG,UAC9DrG,KAD8D,EAE9DC,OAF8D,EAEvC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBoF,SAAS,EAAE;UADM,CAAb;UAIyC;UAAA;UAAA,EAAMrG,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMyE,2DAA2D,GAAG,UACzEvG,KADyE,EAEzEC,OAFyE,EAElD;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACTsF,OAAO,EAAE;UADA,GAELxG,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0B;YAAEqF,EAAE,EAAE7F,KAAK,CAAC4F;UAAZ,CAFrB,CAAL;UAKyC;UAAA;UAAA,EAAM3F,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAvBuB;AAiCxB,CAnCM;AAqCP,OAAO,IAAM2E,wDAAwD,GAAG,UACtEzG,KADsE,EAEtEC,OAFsE,EAE/C;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBwF,iBAAiB,EAAE;UADF,CAAb;UAIyC;UAAA;UAAA,EAAMzG,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAM6E,6CAA6C,GAAG,UAC3D3G,KAD2D,EAE3DC,OAF2D,EAEpC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB0F,MAAM,EAAE;UADS,CAAb;UAIyC;UAAA;UAAA,EAAM3G,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAM+E,kDAAkD,GAAG,UAChE7G,KADgE,EAEhEC,OAFgE,EAEzC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB4F,WAAW,EAAE;UADI,CAAb;UAIyC;UAAA;UAAA,EAAM7G,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMiF,8CAA8C,GAAG,UAC5D/G,KAD4D,EAE5DC,OAF4D,EAErC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB8F,OAAO,EAAE;UADQ,CAAb;UAIyC;UAAA;UAAA,EAAM/G,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMmF,8CAA8C,GAAG,UAC5DjH,KAD4D,EAE5DC,OAF4D,EAErC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBgG,OAAO,EAAE;UADQ,CAAb;UAIyC;UAAA;UAAA,EAAMjH,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMqF,uCAAuC,GAAG,UACrDnH,KADqD,EAErDC,OAFqD,EAE9B;EAAA;;;;;;UAEjBC,OAAO,2CACPC,yBAAyB,CAACH,KAAK,CAACoH,GAAP,CAAzB,IAAwC;YAAE,aAAapH,KAAK,CAACoH;UAArB,CADjC,GAEPjH,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAF1C,GAGPD,yBAAyB,CAACH,KAAK,CAACqH,yBAAP,CAAzB,IAA8D;YAChE,qCAAqCrH,KAAK,CAACqH,yBAAN,CAAiCjF,QAAjC;UAD2B,CAHvD,GAMPjC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CANjD,CAAP;UAUFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK;YACT,QAAQ;UADC,GAELlB,KAAK,CAACsH,SAAN,KAAoB9G,SAApB,IAAiC;YAAE+G,SAAS,EAAEvH,KAAK,CAACsH;UAAnB,CAF5B,CAAL;UAKyC;UAAA;UAAA,EAAMrH,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA3CuB;AAqDxB,CAvDM;AAyDP,OAAO,IAAM0F,wCAAwC,GAAG,UACtDxH,KADsD,EAEtDC,OAFsD,EAE/B;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACoH,GAAP,CAAzB,IAAwC;YAAE,aAAapH,KAAK,CAACoH;UAArB,CAFjC,GAGPjH,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAH1C,GAIPD,yBAAyB,CAACH,KAAK,CAACqH,yBAAP,CAAzB,IAA8D;YAChE,qCAAqCrH,KAAK,CAACqH,yBAAN,CAAiCjF,QAAjC;UAD2B,CAJvD,GAOPjC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAPjD,CAAP;UAWFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBuG,MAAM,EAAE;UADS,CAAb;;UAKN,IAAIzH,KAAK,CAAC0H,MAAN,KAAiBlH,SAArB,EAAgC;YAC9ByB,QAAQ,GAAG0F,0BAA0B,CAAC3H,KAAK,CAAC0H,MAAP,EAAezH,OAAf,CAArC;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,MAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAnCuB;AA6CxB,CA/CM;AAiDP,OAAO,IAAM8F,8CAA8C,GAAG,UAC5D5H,KAD4D,EAE5DC,OAF4D,EAErC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK;YACT8F,OAAO,EAAE;UADA,GAELhH,KAAK,CAACsH,SAAN,KAAoB9G,SAApB,IAAiC;YAAE+G,SAAS,EAAEvH,KAAK,CAACsH;UAAnB,CAF5B,CAAL;UAKyC;UAAA;UAAA,EAAMrH,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtCuB;AAgDxB,CAlDM;AAoDP,OAAO,IAAM+F,kDAAkD,GAAG,UAChE7H,KADgE,EAEhEC,OAFgE,EAEzC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB4G,iBAAiB,EAAE;UADF,CAAb;UAIyC;UAAA;UAAA,EAAM7H,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,QAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMiG,2DAA2D,GAAG,UACzE/H,KADyE,EAEzEC,OAFyE,EAElD;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB8G,UAAU,EAAE;UADK,CAAb;UAIyC;UAAA;UAAA,EAAM/H,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMmG,uCAAuC,GAAG,UACrDjI,KADqD,EAErDC,OAFqD,EAE9B;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBgH,GAAG,EAAE;UADY,CAAb;UAIyC;UAAA;UAAA,EAAMjI,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMqG,0DAA0D,GAAG,UACxEnI,KADwE,EAExEC,OAFwE,EAEjD;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACTyE,SAAS,EAAE,EADF;YAET,QAAQ;UAFC,GAGL3F,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0B;YAAEqF,EAAE,EAAE7F,KAAK,CAAC4F;UAAZ,CAHrB,CAAL;UAMyC;UAAA;UAAA,EAAM3F,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAxBuB;AAkCxB,CApCM;AAsCP,OAAO,IAAMsG,wCAAwC,GAAG,UACtDpI,KADsD,EAEtDC,OAFsD,EAE/B;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB6E,IAAI,EAAE;UADW,CAAb;UAIyC;UAAA;UAAA,EAAM9F,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMuG,8CAA8C,GAAG,UAC5DrI,KAD4D,EAE5DC,OAF4D,EAErC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB+E,UAAU,EAAE;UADK,CAAb;UAIyC;UAAA;UAAA,EAAMhG,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMwG,mEAAmE,GAAG,UACjFtI,KADiF,EAEjFC,OAFiF,EAE1D;EAAA;;;;;;UAEjBC,OAAO,GAAQ,EAAf;UACFI,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACT,uBAAuB,EADd;YAET,QAAQ;UAFC,GAGLlB,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0B;YAAEqF,EAAE,EAAE7F,KAAK,CAAC4F;UAAZ,CAHrB,CAAL;UAMyC;UAAA;UAAA,EAAM3F,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GApBuB;AA8BxB,CAhCM;AAkCP,OAAO,IAAMyG,0DAA0D,GAAG,UACxEvI,KADwE,EAExEC,OAFwE,EAEjD;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACTkF,SAAS,EAAE,EADF;YAET,QAAQ;UAFC,GAGLpG,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0B;YAAEqF,EAAE,EAAE7F,KAAK,CAAC4F;UAAZ,CAHrB,CAAL;UAMyC;UAAA;UAAA,EAAM3F,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAxBuB;AAkCxB,CApCM;AAsCP,OAAO,IAAM0G,0DAA0D,GAAG,UACxExI,KADwE,EAExEC,OAFwE,EAEjD;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBoF,SAAS,EAAE;UADM,CAAb;UAIyC;UAAA;UAAA,EAAMrG,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAM2G,4CAA4C,GAAG,UAC1DzI,KAD0D,EAE1DC,OAF0D,EAEnC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBwH,QAAQ,EAAE;UADO,CAAb;UAIyC;UAAA;UAAA,EAAMzI,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAM6G,2CAA2C,GAAG,UACzD3I,KADyD,EAEzDC,OAFyD,EAElC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB0H,OAAO,EAAE;UADQ,CAAb;UAIyC;UAAA;UAAA,EAAM3I,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAM+G,wDAAwD,GAAG,UACtE7I,KADsE,EAEtEC,OAFsE,EAE/C;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACTsF,OAAO,EAAE,EADA;YAET,QAAQ;UAFC,GAGLxG,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0B;YAAEqF,EAAE,EAAE7F,KAAK,CAAC4F;UAAZ,CAHrB,CAAL;UAMyC;UAAA;UAAA,EAAM3F,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAxBuB;AAkCxB,CApCM;AAsCP,OAAO,IAAMgH,6DAA6D,GAAG,UAC3E9I,KAD2E,EAE3EC,OAF2E,EAEpD;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB6H,YAAY,EAAE;UADG,CAAb;UAIyC;UAAA;UAAA,EAAM9I,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMkH,qDAAqD,GAAG,UACnEhJ,KADmE,EAEnEC,OAFmE,EAE5C;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBwF,iBAAiB,EAAE;UADF,CAAb;UAIyC;UAAA;UAAA,EAAMzG,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMmH,0CAA0C,GAAG,UACxDjJ,KADwD,EAExDC,OAFwD,EAEjC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB0F,MAAM,EAAE;UADS,CAAb;UAIyC;UAAA;UAAA,EAAM3G,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMoH,gDAAgD,GAAG,UAC9DlJ,KAD8D,EAE9DC,OAF8D,EAEvC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBiI,YAAY,EAAE;UADG,CAAb;UAIyC;UAAA;UAAA,EAAMlJ,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMsH,+CAA+C,GAAG,UAC7DpJ,KAD6D,EAE7DC,OAF6D,EAEtC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB4F,WAAW,EAAE;UADI,CAAb;UAIyC;UAAA;UAAA,EAAM7G,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMuH,kDAAkD,GAAG,UAChErJ,KADgE,EAEhEC,OAFgE,EAEzC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBoI,cAAc,EAAE;UADC,CAAb;UAIyC;UAAA;UAAA,EAAMrJ,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMyH,2CAA2C,GAAG,UACzDvJ,KADyD,EAEzDC,OAFyD,EAElC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB8F,OAAO,EAAE;UADQ,CAAb;UAIyC;UAAA;UAAA,EAAM/G,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAM0H,8CAA8C,GAAG,UAC5DxJ,KAD4D,EAE5DC,OAF4D,EAErC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBuI,UAAU,EAAE;UADK,CAAb;UAIyC;UAAA;UAAA,EAAMxJ,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAM4H,2CAA2C,GAAG,UACzD1J,KADyD,EAEzDC,OAFyD,EAElC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBgG,OAAO,EAAE;UADQ,CAAb;UAIyC;UAAA;UAAA,EAAMjH,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAM6H,oCAAoC,GAAG,UAClD3J,KADkD,EAElDC,OAFkD,EAE3B;EAAA;;;;;;UAEjBC,OAAO,iGACPC,yBAAyB,CAACH,KAAK,CAAC4J,OAAP,CAAzB,IAA4C;YAAE,YAAY5J,KAAK,CAAC4J;UAApB,CADrC,GAEPzJ,yBAAyB,CAACH,KAAK,CAAC6J,eAAP,CAAzB,IAAoD;YACtD,qBAAqB3K,iBAAiB,CAACc,KAAK,CAAC6J,eAAP,CAAjB,CAA0CzH,QAA1C;UADiC,CAF7C,GAKPjC,yBAAyB,CAACH,KAAK,CAAC8J,WAAP,CAAzB,IAAgD;YAAE,iBAAiB9J,KAAK,CAAC8J;UAAzB,CALzC,GAMP3J,yBAAyB,CAACH,KAAK,CAAC+J,iBAAP,CAAzB,IAAsD;YACxD,uBAAuB7K,iBAAiB,CAACc,KAAK,CAAC+J,iBAAP,CAAjB,CAA4C3H,QAA5C;UADiC,CAN/C,GASPjC,yBAAyB,CAACH,KAAK,CAACgK,KAAP,CAAzB,IAA0C;YAAEC,KAAK,EAAEjK,KAAK,CAACgK;UAAf,CATnC,GAUP7J,yBAAyB,CAACH,KAAK,CAAC4D,oBAAP,CAAzB,IAAyD;YAC3D,mDAAmD5D,KAAK,CAAC4D;UADE,CAVlD,GAaPzD,yBAAyB,CAACH,KAAK,CAAC6D,cAAP,CAAzB,IAAmD;YACrD,6CAA6C7D,KAAK,CAAC6D;UADE,CAb5C,GAgBP1D,yBAAyB,CAACH,KAAK,CAAC8D,iBAAP,CAAzB,IAAsD;YACxD,iDAAiD9D,KAAK,CAAC8D;UADC,CAhB/C,GAmBP3D,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAnB1C,GAoBPD,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CApBjD,CAAP;UAwBFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK;YACT,QAAQ;UADC,GAELlB,KAAK,CAACkK,oBAAN,KAA+B1J,SAA/B,IAA4C;YAAE,0BAA0BR,KAAK,CAACkK;UAAlC,CAFvC,GAGLlK,KAAK,CAACmK,0BAAN,KAAqC3J,SAArC,IAAkD;YACpD,gCAAgCR,KAAK,CAACmK;UADc,CAH7C,GAMLnK,KAAK,CAACoK,uBAAN,KAAkC5J,SAAlC,IAA+C;YAAE,6BAA6BR,KAAK,CAACoK;UAArC,CAN1C,GAOLpK,KAAK,CAACqK,uBAAN,KAAkC7J,SAAlC,IAA+C;YAAE,6BAA6BR,KAAK,CAACqK;UAArC,CAP1C,GAQLrK,KAAK,CAACsK,mBAAN,KAA8B9J,SAA9B,IAA2C;YAAE,yBAAyBR,KAAK,CAACsK;UAAjC,CARtC,GASLtK,KAAK,CAACuK,eAAN,KAA0B/J,SAA1B,IAAuC;YACzC,oBAAoB,CAACR,KAAK,CAACuK,eAAN,CAAsB/F,WAAtB,GAAoC1D,KAApC,CAA0C,GAA1C,EAA+C,CAA/C,IAAoD,GAArD,EAA0DsB,QAA1D;UADqB,CATlC,GAYLpC,KAAK,CAACsH,SAAN,KAAoB9G,SAApB,IAAiC;YAAE+G,SAAS,EAAEvH,KAAK,CAACsH;UAAnB,CAZ5B,GAaLtH,KAAK,CAACwK,UAAN,KAAqBhK,SAArB,IAAkC;YAAEiK,UAAU,EAAEzK,KAAK,CAACwK,UAAN,CAAiBpI,QAAjB;UAAd,CAb7B,CAAL;UAgByC;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GApEuB;AA8ExB,CAhFM;AAkFP,OAAO,IAAM4I,uCAAuC,GAAG,UACrD1K,KADqD,EAErDC,OAFqD,EAE9B;EAAA;;;;;;UAEjBC,OAAO,yBACPC,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAD1C,GAEPD,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAFjD,CAAP;UAMFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK;YACTgH,GAAG,EAAE;UADI,GAELlI,KAAK,CAACsH,SAAN,KAAoB9G,SAApB,IAAiC;YAAE+G,SAAS,EAAEvH,KAAK,CAACsH;UAAnB,CAF5B,CAAL;UAKyC;UAAA;UAAA,EAAMrH,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAvCuB;AAiDxB,CAnDM;AAqDP,OAAO,IAAM6I,6CAA6C,GAAG,UAC3D3K,KAD2D,EAE3DC,OAF2D,EAEpC;EAAA;;;;;;UAEjBC,OAAO,yBACPC,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAD1C,GAEPD,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAFjD,CAAP;UAMFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK;YACT,cAAc;UADL,GAELlB,KAAK,CAACsH,SAAN,KAAoB9G,SAApB,IAAiC;YAAE+G,SAAS,EAAEvH,KAAK,CAACsH;UAAnB,CAF5B,CAAL;UAKyC;UAAA;UAAA,EAAMrH,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAvCuB;AAiDxB,CAnDM;AAqDP,OAAO,IAAM8I,qDAAqD,GAAG,UACnE5K,KADmE,EAEnEC,OAFmE,EAE5C;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB,eAAe;UADE,CAAb;UAIyC;UAAA;UAAA,EAAMjB,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAM+I,6CAA6C,GAAG,UAC3D7K,KAD2D,EAE3DC,OAF2D,EAEpC;EAAA;;;;;;UAEjBC,OAAO,yBACPC,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAD1C,GAEPD,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAFjD,CAAP;UAMFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK;YACT4J,SAAS,EAAE;UADF,GAEL9K,KAAK,CAACsH,SAAN,KAAoB9G,SAApB,IAAiC;YAAE+G,SAAS,EAAEvH,KAAK,CAACsH;UAAnB,CAF5B,CAAL;UAKyC;UAAA;UAAA,EAAMrH,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAvCuB;AAiDxB,CAnDM;AAqDP,OAAO,IAAMiJ,2CAA2C,GAAG,UACzD/K,KADyD,EAEzDC,OAFyD,EAElC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK;YACT8F,OAAO,EAAE;UADA,GAELhH,KAAK,CAACsH,SAAN,KAAoB9G,SAApB,IAAiC;YAAE+G,SAAS,EAAEvH,KAAK,CAACsH;UAAnB,CAF5B,CAAL;UAKyC;UAAA;UAAA,EAAMrH,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtCuB;AAgDxB,CAlDM;AAoDP,OAAO,IAAMkJ,2CAA2C,GAAG,UACzDhL,KADyD,EAEzDC,OAFyD,EAElC;EAAA;;;;;;UAEjBC,OAAO,yBACPC,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAD1C,GAEPD,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAFjD,CAAP;UAMFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB+J,OAAO,EAAE;UADQ,CAAb;UAIyC;UAAA;UAAA,EAAMhL,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtCuB;AAgDxB,CAlDM;AAoDP,OAAO,IAAMoJ,+CAA+C,GAAG,UAC7DlL,KAD6D,EAE7DC,OAF6D,EAEtC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB4G,iBAAiB,EAAE;UADF,CAAb;UAIyC;UAAA;UAAA,EAAM7H,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtBuB;AAgCxB,CAlCM;AAoCP,OAAO,IAAMqJ,qCAAqC,GAAG,UACnDnL,KADmD,EAEnDC,OAFmD,EAE5B;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UAE8C;UAAA;UAAA,EAAMV,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,MAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBwB,IAAI;UAPmB,CAAlB,CAAP;;;GAnBuB;AA4BxB,CA9BM;AAgCP,OAAO,IAAMsJ,qCAAqC,GAAG,UACnDpL,KADmD,EAEnDC,OAFmD,EAE5B;EAAA;;;;;;UAEjBC,OAAO,iGACPC,yBAAyB,CAACH,KAAK,CAAC4J,OAAP,CAAzB,IAA4C;YAAE,YAAY5J,KAAK,CAAC4J;UAApB,CADrC,GAEPzJ,yBAAyB,CAACH,KAAK,CAAC6J,eAAP,CAAzB,IAAoD;YACtD,qBAAqB3K,iBAAiB,CAACc,KAAK,CAAC6J,eAAP,CAAjB,CAA0CzH,QAA1C;UADiC,CAF7C,GAKPjC,yBAAyB,CAACH,KAAK,CAAC8J,WAAP,CAAzB,IAAgD;YAAE,iBAAiB9J,KAAK,CAAC8J;UAAzB,CALzC,GAMP3J,yBAAyB,CAACH,KAAK,CAAC+J,iBAAP,CAAzB,IAAsD;YACxD,uBAAuB7K,iBAAiB,CAACc,KAAK,CAAC+J,iBAAP,CAAjB,CAA4C3H,QAA5C;UADiC,CAN/C,GASPjC,yBAAyB,CAACH,KAAK,CAACgK,KAAP,CAAzB,IAA0C;YAAEC,KAAK,EAAEjK,KAAK,CAACgK;UAAf,CATnC,GAUP7J,yBAAyB,CAACH,KAAK,CAAC4D,oBAAP,CAAzB,IAAyD;YAC3D,mDAAmD5D,KAAK,CAAC4D;UADE,CAVlD,GAaPzD,yBAAyB,CAACH,KAAK,CAAC6D,cAAP,CAAzB,IAAmD;YACrD,6CAA6C7D,KAAK,CAAC6D;UADE,CAb5C,GAgBP1D,yBAAyB,CAACH,KAAK,CAAC8D,iBAAP,CAAzB,IAAsD;YACxD,iDAAiD9D,KAAK,CAAC8D;UADC,CAhB/C,GAmBP3D,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAnB1C,GAoBPD,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CApBjD,CAAP;UAwBFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK,yBACLlB,KAAK,CAACsH,SAAN,KAAoB9G,SAApB,IAAiC;YAAE+G,SAAS,EAAEvH,KAAK,CAACsH;UAAnB,CAD5B,GAELtH,KAAK,CAACwK,UAAN,KAAqBhK,SAArB,IAAkC;YAAEiK,UAAU,EAAEzK,KAAK,CAACwK,UAAN,CAAiBpI,QAAjB;UAAd,CAF7B,CAAL;UAKyC;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,MAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAzDuB;AAmExB,CArEM;AAuEP,OAAO,IAAMuJ,4DAA4D,GAAG,UAC1ErL,KAD0E,EAE1EC,OAF0E,EAEnD;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACTyE,SAAS,EAAE,EADF;YAET,QAAQ;UAFC,GAGL3F,KAAK,CAACsL,iBAAN,KAA4B9K,SAA5B,IAAyC;YAAE,sBAAsBR,KAAK,CAACsL;UAA9B,CAHpC,CAAL;UAMyC;UAAA;UAAA,EAAMrL,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAxBuB;AAkCxB,CApCM;AAsCP,OAAO,IAAMyJ,qEAAqE,GAAG,UACnFvL,KADmF,EAEnFC,OAFmF,EAE5D;EAAA;;;;;;UAEjBC,OAAO,GAAQ,EAAf;UACFI,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACT,uBAAuB,EADd;YAET,QAAQ;UAFC,GAGLlB,KAAK,CAACsL,iBAAN,KAA4B9K,SAA5B,IAAyC;YAAE,sBAAsBR,KAAK,CAACsL;UAA9B,CAHpC,CAAL;UAMyC;UAAA;UAAA,EAAMrL,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GApBuB;AA8BxB,CAhCM;AAkCP,OAAO,IAAM0J,4DAA4D,GAAG,UAC1ExL,KAD0E,EAE1EC,OAF0E,EAEnD;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACTkF,SAAS,EAAE,EADF;YAET,QAAQ;UAFC,GAGLpG,KAAK,CAACsL,iBAAN,KAA4B9K,SAA5B,IAAyC;YAAE,sBAAsBR,KAAK,CAACsL;UAA9B,CAHpC,CAAL;UAMyC;UAAA;UAAA,EAAMrL,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAxBuB;AAkCxB,CApCM;AAsCP,OAAO,IAAM2J,0DAA0D,GAAG,UACxEzL,KADwE,EAExEC,OAFwE,EAEjD;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACTsF,OAAO,EAAE,EADA;YAET,QAAQ;UAFC,GAGLxG,KAAK,CAACsL,iBAAN,KAA4B9K,SAA5B,IAAyC;YAAE,sBAAsBR,KAAK,CAACsL;UAA9B,CAHpC,CAAL;UAMyC;UAAA;UAAA,EAAMrL,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAxBuB;AAkCxB,CApCM;AAsCP,OAAO,IAAM4J,sCAAsC,GAAG,UACpD1L,KADoD,EAEpDC,OAFoD,EAE7B;EAAA;;;;;;UAEjBC,OAAO,GAAQ,EAAf;UACFI,YAAY,GAAG,GAAf;UAEJwB,IAAI,GAAG,EAAP;UAC+C;UAAA;UAAA,EAAM7B,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBwB,IAAI;UAPmB,CAAlB,CAAP;;;GAPuB;AAgBxB,CAlBM;AAoBP,OAAO,IAAM6J,+CAA+C,GAAG,UAC7D3L,KAD6D,EAE7DC,OAF6D,EAEtC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACTsE,OAAO,EAAE;UADA,GAELxF,KAAK,CAAC4L,SAAN,KAAoBpL,SAApB,IAAiC;YAAEqL,SAAS,EAAE7L,KAAK,CAAC4L;UAAnB,CAF5B,GAGL5L,KAAK,CAAC8L,YAAN,KAAuBtL,SAAvB,IAAoC;YAAE,iBAAiBR,KAAK,CAAC8L;UAAzB,CAH/B,GAIL9L,KAAK,CAAC+L,SAAN,KAAoBvL,SAApB,IAAiC;YAAE,cAAcR,KAAK,CAAC+L;UAAtB,CAJ5B,GAKL/L,KAAK,CAACgM,UAAN,KAAqBxL,SAArB,IAAkC;YAAE,eAAeR,KAAK,CAACgM,UAAN,CAAiB5J,QAAjB;UAAjB,CAL7B,GAMLpC,KAAK,CAACiM,MAAN,KAAiBzL,SAAjB,IAA8B;YAAE0L,MAAM,EAAElM,KAAK,CAACiM;UAAhB,CANzB,GAOLjM,KAAK,CAACmM,cAAN,KAAyB3L,SAAzB,IAAsC;YAAE,oBAAoBR,KAAK,CAACmM;UAA5B,CAPjC,CAAL;UAUyC;UAAA;UAAA,EAAMlM,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA5BuB;AAsCxB,CAxCM;AA0CP,OAAO,IAAMsK,sCAAsC,GAAG,UACpDpM,KADoD,EAEpDC,OAFoD,EAE7B;EAAA;;;;;;UAEjBC,OAAO,yBACPC,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAD1C,GAEPD,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAFjD,CAAP;UAMFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,oDACLlB,KAAK,CAAC4L,SAAN,KAAoBpL,SAApB,IAAiC;YAAEqL,SAAS,EAAE7L,KAAK,CAAC4L;UAAnB,CAD5B,GAEL5L,KAAK,CAAC8L,YAAN,KAAuBtL,SAAvB,IAAoC;YAAE,iBAAiBR,KAAK,CAAC8L;UAAzB,CAF/B,GAGL9L,KAAK,CAACqM,MAAN,KAAiB7L,SAAjB,IAA8B;YAAE8L,MAAM,EAAEtM,KAAK,CAACqM;UAAhB,CAHzB,GAILrM,KAAK,CAACuM,OAAN,KAAkB/L,SAAlB,IAA+B;YAAE,YAAYR,KAAK,CAACuM,OAAN,CAAcnK,QAAd;UAAd,CAJ1B,GAKLpC,KAAK,CAACiM,MAAN,KAAiBzL,SAAjB,IAA8B;YAAE0L,MAAM,EAAElM,KAAK,CAACiM;UAAhB,CALzB,CAAL;UAQyC;UAAA;UAAA,EAAMhM,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA3BuB;AAqCxB,CAvCM;AAyCP,OAAO,IAAM0K,wCAAwC,GAAG,UACtDxM,KADsD,EAEtDC,OAFsD,EAE/B;EAAA;;;;;;UAEjBC,OAAO,yBACPC,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAD1C,GAEPD,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAFjD,CAAP;UAMFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACT,aAAa;UADJ,GAELlB,KAAK,CAAC4L,SAAN,KAAoBpL,SAApB,IAAiC;YAAEqL,SAAS,EAAE7L,KAAK,CAAC4L;UAAnB,CAF5B,GAGL5L,KAAK,CAAC8L,YAAN,KAAuBtL,SAAvB,IAAoC;YAAE,iBAAiBR,KAAK,CAAC8L;UAAzB,CAH/B,GAIL9L,KAAK,CAACuM,OAAN,KAAkB/L,SAAlB,IAA+B;YAAE,YAAYR,KAAK,CAACuM,OAAN,CAAcnK,QAAd;UAAd,CAJ1B,GAKLpC,KAAK,CAACiM,MAAN,KAAiBzL,SAAjB,IAA8B;YAAE0L,MAAM,EAAElM,KAAK,CAACiM;UAAhB,CALzB,GAMLjM,KAAK,CAACsL,iBAAN,KAA4B9K,SAA5B,IAAyC;YAAE,sBAAsBR,KAAK,CAACsL;UAA9B,CANpC,GAOLtL,KAAK,CAACyM,UAAN,KAAqBjM,SAArB,IAAkC;YAAE,eAAeR,KAAK,CAACyM,UAAN,CAAiBrK,QAAjB;UAAjB,CAP7B,GAQLpC,KAAK,CAAC0M,UAAN,KAAqBlM,SAArB,IAAkC;YAAE,eAAeR,KAAK,CAAC0M;UAAvB,CAR7B,CAAL;UAWyC;UAAA;UAAA,EAAMzM,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA9BuB;AAwCxB,CA1CM;AA4CP,OAAO,IAAM6K,6CAA6C,GAAG,UAC3D3M,KAD2D,EAE3DC,OAF2D,EAEpC;EAAA;;;;;;UAEjBC,OAAO,gBACPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CADjD,CAAP;UAKFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACT0L,QAAQ,EAAE;UADD,GAEL5M,KAAK,CAAC4L,SAAN,KAAoBpL,SAApB,IAAiC;YAAEqL,SAAS,EAAE7L,KAAK,CAAC4L;UAAnB,CAF5B,GAGL5L,KAAK,CAAC8L,YAAN,KAAuBtL,SAAvB,IAAoC;YAAE,iBAAiBR,KAAK,CAAC8L;UAAzB,CAH/B,GAIL9L,KAAK,CAAC+L,SAAN,KAAoBvL,SAApB,IAAiC;YAAE,cAAcR,KAAK,CAAC+L;UAAtB,CAJ5B,GAKL/L,KAAK,CAACuM,OAAN,KAAkB/L,SAAlB,IAA+B;YAAE,YAAYR,KAAK,CAACuM,OAAN,CAAcnK,QAAd;UAAd,CAL1B,GAMLpC,KAAK,CAACiM,MAAN,KAAiBzL,SAAjB,IAA8B;YAAE0L,MAAM,EAAElM,KAAK,CAACiM;UAAhB,CANzB,GAOLjM,KAAK,CAAC6M,eAAN,KAA0BrM,SAA1B,IAAuC;YAAE,qBAAqBR,KAAK,CAAC6M;UAA7B,CAPlC,CAAL;UAUyC;UAAA;UAAA,EAAM5M,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA5BuB;AAsCxB,CAxCM;AA0CP,OAAO,IAAMgL,oCAAoC,GAAG,UAClD9M,KADkD,EAElDC,OAFkD,EAE3B;EAAA;;;;;;UAEjBC,OAAO,yBACPC,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAD1C,GAEPD,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAFjD,CAAP;UAMFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK;YACT,QAAQ;UADC,GAELlB,KAAK,CAAC+M,QAAN,KAAmBvM,SAAnB,IAAgC;YAAE,aAAaR,KAAK,CAAC+M,QAAN,CAAe3K,QAAf;UAAf,CAF3B,GAGLpC,KAAK,CAACgN,gBAAN,KAA2BxM,SAA3B,IAAwC;YAAE,sBAAsBR,KAAK,CAACgN;UAA9B,CAHnC,GAILhN,KAAK,CAACmB,QAAN,KAAmBX,SAAnB,IAAgC;YAAEY,QAAQ,EAAEpB,KAAK,CAACmB;UAAlB,CAJ3B,CAAL;UAOyC;UAAA;UAAA,EAAMlB,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAzCuB;AAmDxB,CArDM;AAuDP,OAAO,IAAMmL,2DAA2D,GAAG,UACzEjN,KADyE,EAEzEC,OAFyE,EAElD;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAFjD,CAAP;UAMFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB8G,UAAU,EAAE;UADK,CAAb;;UAKN,IAAIhI,KAAK,CAACkN,uBAAN,KAAkC1M,SAAtC,EAAiD;YAC/CyB,QAAQ,GAAGkL,2CAA2C,CAACnN,KAAK,CAACkN,uBAAP,EAAgCjN,OAAhC,CAAtD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA9BuB;AAwCxB,CA1CM;AA4CP,OAAO,IAAMsL,uCAAuC,GAAG,UACrDpN,KADqD,EAErDC,OAFqD,EAE9B;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACsC,GAAP,CAAzB,IAAwC;YAAE,aAAatC,KAAK,CAACsC;UAArB,CAFjC,GAGPnC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAHxC,GAIPlN,yBAAyB,CAACH,KAAK,CAACmD,gBAAP,CAAzB,IAAqD;YAAE,4BAA4BnD,KAAK,CAACmD;UAApC,CAJ9C,GAKPhD,yBAAyB,CAACH,KAAK,CAACoD,SAAP,CAAzB,IAA8C;YAAE,oBAAoBpD,KAAK,CAACoD;UAA5B,CALvC,GAMPjD,yBAAyB,CAACH,KAAK,CAACqD,YAAP,CAAzB,IAAiD;YAAE,wBAAwBrD,KAAK,CAACqD;UAAhC,CAN1C,GAOPlD,yBAAyB,CAACH,KAAK,CAACmF,UAAP,CAAzB,IAA+C;YAAE,qBAAqBnF,KAAK,CAACmF;UAA7B,CAPxC,GAQPhF,yBAAyB,CAACH,KAAK,CAACsD,aAAP,CAAzB,IAAkD;YAAE,yBAAyBtD,KAAK,CAACsD;UAAjC,CAR3C,GASPnD,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CATjD,CAAP;UAaFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBgH,GAAG,EAAE;UADY,CAAb;;UAKN,IAAIlI,KAAK,CAACsN,mBAAN,KAA8B9M,SAAlC,EAA6C;YAC3CyB,QAAQ,GAAGsL,uCAAuC,CAACvN,KAAK,CAACsN,mBAAP,EAA4BrN,OAA5B,CAAlD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GArCuB;AA+CxB,CAjDM;AAmDP,OAAO,IAAM0L,0DAA0D,GAAG,UACxExN,KADwE,EAExEC,OAFwE,EAEjD;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAFjD,CAAP;UAMFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACTyE,SAAS,EAAE;UADF,GAEL3F,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0B;YAAEqF,EAAE,EAAE7F,KAAK,CAAC4F;UAAZ,CAFrB,CAAL;;UAMN,IAAI5F,KAAK,CAACyN,sBAAN,KAAiCjN,SAArC,EAAgD;YAC9CyB,QAAQ,GAAGyL,0CAA0C,CAAC1N,KAAK,CAACyN,sBAAP,EAA+BxN,OAA/B,CAArD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA/BuB;AAyCxB,CA3CM;AA6CP,OAAO,IAAM6L,wCAAwC,GAAG,UACtD3N,KADsD,EAEtDC,OAFsD,EAE/B;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAFxC,GAGPlN,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAHjD,CAAP;UAOFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB6E,IAAI,EAAE;UADW,CAAb;;UAKN,IAAI/F,KAAK,CAAC4N,iBAAN,KAA4BpN,SAAhC,EAA2C;YACzCyB,QAAQ,GAAG4L,qCAAqC,CAAC7N,KAAK,CAAC4N,iBAAP,EAA0B3N,OAA1B,CAAhD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA/BuB;AAyCxB,CA3CM;AA6CP,OAAO,IAAMgM,8CAA8C,GAAG,UAC5D9N,KAD4D,EAE5DC,OAF4D,EAErC;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAFxC,GAGPlN,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAHjD,CAAP;UAOFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB+E,UAAU,EAAE;UADK,CAAb;;UAKN,IAAIjG,KAAK,CAAC+N,iCAAN,KAA4CvN,SAAhD,EAA2D;YACzDyB,QAAQ,GAAG+L,qDAAqD,CAAChO,KAAK,CAAC+N,iCAAP,EAA0C9N,OAA1C,CAAhE;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA/BuB;AAyCxB,CA3CM;AA6CP,OAAO,IAAMmM,mEAAmE,GAAG,UACjFjO,KADiF,EAEjFC,OAFiF,EAE1D;EAAA;;;;;;UAEjBC,OAAO,GAAQ;YACnB,gBAAgB;UADG,CAAf;UAGFI,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACT,uBAAuB;UADd,GAELlB,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0B;YAAEqF,EAAE,EAAE7F,KAAK,CAAC4F;UAAZ,CAFrB,CAAL;;UAMN,IAAI5F,KAAK,CAACkO,+BAAN,KAA0C1N,SAA9C,EAAyD;YACvDyB,QAAQ,GAAGkM,mDAAmD,CAACnO,KAAK,CAACkO,+BAAP,EAAwCjO,OAAxC,CAA9D;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA5BuB;AAsCxB,CAxCM;AA0CP,OAAO,IAAMsM,0DAA0D,GAAG,UACxEpO,KADwE,EAExEC,OAFwE,EAEjD;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAFjD,CAAP;UAMFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACTkF,SAAS,EAAE;UADF,GAELpG,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0B;YAAEqF,EAAE,EAAE7F,KAAK,CAAC4F;UAAZ,CAFrB,CAAL;;UAMN,IAAI5F,KAAK,CAACqO,sBAAN,KAAiC7N,SAArC,EAAgD;YAC9CyB,QAAQ,GAAGqM,0CAA0C,CAACtO,KAAK,CAACqO,sBAAP,EAA+BpO,OAA/B,CAArD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA/BuB;AAyCxB,CA3CM;AA6CP,OAAO,IAAMyM,0DAA0D,GAAG,UACxEvO,KADwE,EAExEC,OAFwE,EAEjD;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAFjD,CAAP;UAMFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBoF,SAAS,EAAE;UADM,CAAb;;UAKN,IAAItG,KAAK,CAACwO,sBAAN,KAAiChO,SAArC,EAAgD;YAC9CyB,QAAQ,GAAGwM,gDAAgD,CAACzO,KAAK,CAACwO,sBAAP,EAA+BvO,OAA/B,CAA3D;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA9BuB;AAwCxB,CA1CM;AA4CP,OAAO,IAAM4M,2CAA2C,GAAG,UACzD1O,KADyD,EAEzDC,OAFyD,EAElC;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAFxC,GAGPlN,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAHjD,CAAP;UAOFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB0H,OAAO,EAAE;UADQ,CAAb;;UAKN,IAAI5I,KAAK,CAAC2O,mBAAN,KAA8BnO,SAAlC,EAA6C;YAC3CyB,QAAQ,GAAG2M,uCAAuC,CAAC5O,KAAK,CAAC2O,mBAAP,EAA4B1O,OAA5B,CAAlD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA/BuB;AAyCxB,CA3CM;AA6CP,OAAO,IAAM+M,wDAAwD,GAAG,UACtE7O,KADsE,EAEtEC,OAFsE,EAE/C;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAFjD,CAAP;UAMFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK;YACTsF,OAAO,EAAE;UADA,GAELxG,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0B;YAAEqF,EAAE,EAAE7F,KAAK,CAAC4F;UAAZ,CAFrB,CAAL;;UAMN,IAAI5F,KAAK,CAAC8O,oBAAN,KAA+BtO,SAAnC,EAA8C;YAC5CyB,QAAQ,GAAG8M,wCAAwC,CAAC/O,KAAK,CAAC8O,oBAAP,EAA6B7O,OAA7B,CAAnD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA/BuB;AAyCxB,CA3CM;AA6CP,OAAO,IAAMkN,6DAA6D,GAAG,UAC3EhP,KAD2E,EAE3EC,OAF2E,EAEpD;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAFjD,CAAP;UAMFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB6H,YAAY,EAAE;UADG,CAAb;;UAKN,IAAI/I,KAAK,CAACiP,yBAAN,KAAoCzO,SAAxC,EAAmD;YACjDyB,QAAQ,GAAGiN,6CAA6C,CAAClP,KAAK,CAACiP,yBAAP,EAAkChP,OAAlC,CAAxD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA9BuB;AAwCxB,CA1CM;AA4CP,OAAO,IAAMqN,qDAAqD,GAAG,UACnEnP,KADmE,EAEnEC,OAFmE,EAE5C;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAFxC,GAGPlN,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAHjD,CAAP;UAOFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBwF,iBAAiB,EAAE;UADF,CAAb;;UAKN,IAAI1G,KAAK,CAACoP,iBAAN,KAA4B5O,SAAhC,EAA2C;YACzCyB,QAAQ,GAAGoN,qCAAqC,CAACrP,KAAK,CAACoP,iBAAP,EAA0BnP,OAA1B,CAAhD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA/BuB;AAyCxB,CA3CM;AA6CP,OAAO,IAAMwN,0CAA0C,GAAG,UACxDtP,KADwD,EAExDC,OAFwD,EAEjC;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAFxC,GAGPlN,yBAAyB,CAACH,KAAK,CAACuP,6BAAP,CAAzB,IAAkE;YACpE,2CAA2CvP,KAAK,CAACuP,6BAAN,CAAqCnN,QAArC;UADyB,CAH3D,GAMPjC,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CANjD,CAAP;UAUFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB0F,MAAM,EAAE;UADS,CAAb;;UAKN,IAAI5G,KAAK,CAACwP,MAAN,KAAiBhP,SAArB,EAAgC;YAC9ByB,QAAQ,GAAGjC,KAAK,CAACwP,MAAjB;YACA1N,IAAI,GAAGG,QAAP;UACD;;UAC8C;UAAA;UAAA,EAAMhC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAhCuB;AA0CxB,CA5CM;AA8CP,OAAO,IAAM2N,+CAA+C,GAAG,UAC7DzP,KAD6D,EAE7DC,OAF6D,EAEtC;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAFxC,GAGPlN,yBAAyB,CAACH,KAAK,CAAC0P,KAAP,CAAzB,IAA0C;YAAE,kCAAkC1P,KAAK,CAAC0P;UAA1C,CAHnC,GAIPvP,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAJjD,CAAP;UAQFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB4F,WAAW,EAAE;UADI,CAAb;;UAKN,IAAI9G,KAAK,CAAC2P,wBAAN,KAAmCnP,SAAvC,EAAkD;YAChDyB,QAAQ,GAAG2N,4CAA4C,CAAC5P,KAAK,CAAC2P,wBAAP,EAAiC1P,OAAjC,CAAvD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAhCuB;AA0CxB,CA5CM;AA8CP,OAAO,IAAM+N,kDAAkD,GAAG,UAChE7P,KADgE,EAEhEC,OAFgE,EAEzC;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAFxC,GAGPlN,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAHjD,CAAP;UAOFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBoI,cAAc,EAAE;UADC,CAAb;;UAKN,IAAItJ,KAAK,CAAC8P,2BAAN,KAAsCtP,SAA1C,EAAqD;YACnDyB,QAAQ,GAAG8N,+CAA+C,CAAC/P,KAAK,CAAC8P,2BAAP,EAAoC7P,OAApC,CAA1D;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA/BuB;AAyCxB,CA3CM;AA6CP,OAAO,IAAMkO,2CAA2C,GAAG,UACzDhQ,KADyD,EAEzDC,OAFyD,EAElC;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAFxC,GAGPlN,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAHjD,CAAP;UAOFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB8F,OAAO,EAAE;UADQ,CAAb;;UAKN,IAAIhH,KAAK,CAACqE,OAAN,KAAkB7D,SAAtB,EAAiC;YAC/ByB,QAAQ,GAAGgO,2BAA2B,CAACjQ,KAAK,CAACqE,OAAP,EAAgBpE,OAAhB,CAAtC;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA/BuB;AAyCxB,CA3CM;AA6CP,OAAO,IAAMoO,8CAA8C,GAAG,UAC5DlQ,KAD4D,EAE5DC,OAF4D,EAErC;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAFxC,GAGPlN,yBAAyB,CAACH,KAAK,CAACoH,GAAP,CAAzB,IAAwC;YAAE,aAAapH,KAAK,CAACoH;UAArB,CAHjC,GAIPjH,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAJjD,CAAP;UAQFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBuI,UAAU,EAAE;UADK,CAAb;;UAKN,IAAIzJ,KAAK,CAACmQ,uBAAN,KAAkC3P,SAAtC,EAAiD;YAC/CyB,QAAQ,GAAGmO,2CAA2C,CAACpQ,KAAK,CAACmQ,uBAAP,EAAgClQ,OAAhC,CAAtD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAhCuB;AA0CxB,CA5CM;AA8CP,OAAO,IAAMuO,2CAA2C,GAAG,UACzDrQ,KADyD,EAEzDC,OAFyD,EAElC;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAFxC,GAGPlN,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAHjD,CAAP;UAOFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjBgG,OAAO,EAAE;UADQ,CAAb;;UAKN,IAAIlH,KAAK,CAACsQ,oBAAN,KAA+B9P,SAAnC,EAA8C;YAC5CyB,QAAQ,GAAGsO,wCAAwC,CAACvQ,KAAK,CAACsQ,oBAAP,EAA6BrQ,OAA7B,CAAnD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA/BuB;AAyCxB,CA3CM;AA6CP,OAAO,IAAM0O,oCAAoC,GAAG,UAClDxQ,KADkD,EAElDC,OAFkD,EAE3B;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACsC,GAAP,CAAzB,IAAwC;YAAE,aAAatC,KAAK,CAACsC;UAArB,CAFjC,GAGPnC,yBAAyB,CAACH,KAAK,CAACuC,YAAP,CAAzB,IAAiD;YAAE,iBAAiBvC,KAAK,CAACuC;UAAzB,CAH1C,GAIPpC,yBAAyB,CAACH,KAAK,CAACwC,kBAAP,CAAzB,IAAuD;YAAE,uBAAuBxC,KAAK,CAACwC;UAA/B,CAJhD,GAKPrC,yBAAyB,CAACH,KAAK,CAACyC,eAAP,CAAzB,IAAoD;YAAE,oBAAoBzC,KAAK,CAACyC;UAA5B,CAL7C,GAMPtC,yBAAyB,CAACH,KAAK,CAAC0C,eAAP,CAAzB,IAAoD;YAAE,oBAAoB1C,KAAK,CAAC0C;UAA5B,CAN7C,GAOPvC,yBAAyB,CAACH,KAAK,CAACyQ,aAAP,CAAzB,IAAkD;YAAE,kBAAkBzQ,KAAK,CAACyQ,aAAN,CAAqBrO,QAArB;UAApB,CAP3C,GAQPjC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CARxC,GASPlN,yBAAyB,CAACH,KAAK,CAAC2C,WAAP,CAAzB,IAAgD;YAAE,gBAAgB3C,KAAK,CAAC2C;UAAxB,CATzC,GAUPxC,yBAAyB,CAACH,KAAK,CAACiD,OAAP,CAAzB,IAA4C;YAAEC,OAAO,EAAEhE,iBAAiB,CAACc,KAAK,CAACiD,OAAP,CAAjB,CAAkCb,QAAlC;UAAX,CAVrC,GAWPjC,yBAAyB,CAACH,KAAK,CAACmD,gBAAP,CAAzB,IAAqD;YAAE,4BAA4BnD,KAAK,CAACmD;UAApC,CAX9C,GAYPhD,yBAAyB,CAACH,KAAK,CAACoD,SAAP,CAAzB,IAA8C;YAAE,oBAAoBpD,KAAK,CAACoD;UAA5B,CAZvC,GAaPjD,yBAAyB,CAACH,KAAK,CAACqD,YAAP,CAAzB,IAAiD;YAAE,wBAAwBrD,KAAK,CAACqD;UAAhC,CAb1C,GAcPlD,yBAAyB,CAACH,KAAK,CAACsD,aAAP,CAAzB,IAAkD;YAAE,yBAAyBtD,KAAK,CAACsD;UAAjC,CAd3C,GAePnD,yBAAyB,CAACH,KAAK,CAACyD,oBAAP,CAAzB,IAAyD;YAC3D,gCAAgCzD,KAAK,CAACyD;UADqB,CAflD,GAkBPtD,yBAAyB,CAACH,KAAK,CAAC0D,YAAP,CAAzB,IAAiD;YAAE,uBAAuB1D,KAAK,CAAC0D;UAA/B,CAlB1C,GAmBPvD,yBAAyB,CAACH,KAAK,CAAC2D,uBAAP,CAAzB,IAA4D;YAC9D,mCAAmC3D,KAAK,CAAC2D;UADqB,CAnBrD,GAsBPxD,yBAAyB,CAACH,KAAK,CAAC4D,oBAAP,CAAzB,IAAyD;YAC3D,mDAAmD5D,KAAK,CAAC4D;UADE,CAtBlD,GAyBPzD,yBAAyB,CAACH,KAAK,CAAC6D,cAAP,CAAzB,IAAmD;YACrD,6CAA6C7D,KAAK,CAAC6D;UADE,CAzB5C,GA4BP1D,yBAAyB,CAACH,KAAK,CAAC8D,iBAAP,CAAzB,IAAsD;YACxD,iDAAiD9D,KAAK,CAAC8D;UADC,CA5B/C,GA+BP3D,yBAAyB,CAACH,KAAK,CAAC+D,WAAP,CAAzB,IAAgD;YAClD,+CAA+C/D,KAAK,CAAC+D;UADH,CA/BzC,GAkCP5D,yBAAyB,CAACH,KAAK,CAACgE,uBAAP,CAAzB,IAA4D;YAC9D,wCAAwChE,KAAK,CAACgE;UADgB,CAlCrD,GAqCP7D,yBAAyB,CAACH,KAAK,CAACiE,gBAAP,CAAzB,IAAqD;YACvD,mDAAmDjE,KAAK,CAACiE,gBAAN,CAAwB7B,QAAxB;UADI,CArC9C,GAwCPjC,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAxC1C,GAyCPD,yBAAyB,CAACH,KAAK,CAACqE,OAAP,CAAzB,IAA4C;YAAE,iBAAiBrE,KAAK,CAACqE;UAAzB,CAzCrC,GA0CPlE,yBAAyB,CAACH,KAAK,CAACsE,cAAP,CAAzB,IAAmD;YAAE,0BAA0BtE,KAAK,CAACsE;UAAlC,CA1C5C,GA2CPnE,yBAAyB,CAACH,KAAK,CAACuE,yBAAP,CAAzB,IAA8D;YAChE,uCAAuC,CACrCvE,KAAK,CAACuE,yBAAN,CAAiCC,WAAjC,GAA+C1D,KAA/C,CAAqD,GAArD,EAA0D,CAA1D,IAA+D,GAD1B,EAErCsB,QAFqC;UADyB,CA3CvD,GAgDPjC,yBAAyB,CAACH,KAAK,CAACyE,yBAAP,CAAzB,IAA8D;YAChE,gCAAgCzE,KAAK,CAACyE;UAD0B,CAhDvD,GAmDPtE,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAnDjD,GAsDPL,KAAK,CAAC2E,QAAN,KAAmBnE,SAAnB,IACFoE,MAAM,CAACC,IAAP,CAAY7E,KAAK,CAAC2E,QAAlB,EAA4BG,MAA5B,CACE,UAACC,GAAD,EAAWC,MAAX,EAAyB;;;YAAK,6BACzBD,GADyB,IACtBzD,YACL,gBAAc0D,MAAM,CAACC,WAAP,EADT,IACkCjF,KAAK,CAAC2E,QAAN,CAAgBK,MAAhB,CADlC,EACyD1D,EAFnC;UAG5B,CAJJ,EAKE,EALF,CAvDS,CAAP;UA+DFhB,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB,QAAQ;UADS,CAAb;;UAKN,IAAIlB,KAAK,CAAC0Q,IAAN,KAAelQ,SAAnB,EAA8B;YAC5ByB,QAAQ,GAAGjC,KAAK,CAAC0Q,IAAjB;YACA5O,IAAI,GAAGG,QAAP;UACD;;UAC8C;UAAA;UAAA,EAAMhC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GApGuB;AA8GxB,CAhHM;AAkHP,OAAO,IAAM6O,uCAAuC,GAAG,UACrD3Q,KADqD,EAErDC,OAFqD,EAE9B;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACsC,GAAP,CAAzB,IAAwC;YAAE,aAAatC,KAAK,CAACsC;UAArB,CAFjC,GAGPnC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAHxC,GAIPlN,yBAAyB,CAACH,KAAK,CAACmD,gBAAP,CAAzB,IAAqD;YAAE,4BAA4BnD,KAAK,CAACmD;UAApC,CAJ9C,GAKPhD,yBAAyB,CAACH,KAAK,CAACoD,SAAP,CAAzB,IAA8C;YAAE,oBAAoBpD,KAAK,CAACoD;UAA5B,CALvC,GAMPjD,yBAAyB,CAACH,KAAK,CAACqD,YAAP,CAAzB,IAAiD;YAAE,wBAAwBrD,KAAK,CAACqD;UAAhC,CAN1C,GAOPlD,yBAAyB,CAACH,KAAK,CAACmF,UAAP,CAAzB,IAA+C;YAAE,qBAAqBnF,KAAK,CAACmF;UAA7B,CAPxC,GAQPhF,yBAAyB,CAACH,KAAK,CAACsD,aAAP,CAAzB,IAAkD;YAAE,yBAAyBtD,KAAK,CAACsD;UAAjC,CAR3C,GASPnD,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAT1C,GAUPD,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAVjD,CAAP;UAcFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK;YACTgH,GAAG,EAAE;UADI,GAELlI,KAAK,CAACsH,SAAN,KAAoB9G,SAApB,IAAiC;YAAE+G,SAAS,EAAEvH,KAAK,CAACsH;UAAnB,CAF5B,CAAL;;UAMN,IAAItH,KAAK,CAACsN,mBAAN,KAA8B9M,SAAlC,EAA6C;YAC3CyB,QAAQ,GAAGsL,uCAAuC,CAACvN,KAAK,CAACsN,mBAAP,EAA4BrN,OAA5B,CAAlD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAtDuB;AAgExB,CAlEM;AAoEP,OAAO,IAAM8O,6CAA6C,GAAG,UAC3D5Q,KAD2D,EAE3DC,OAF2D,EAEpC;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAF1C,GAGPD,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAHxC,GAIPlN,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAJjD,CAAP;UAQFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK;YACT,cAAc;UADL,GAELlB,KAAK,CAACsH,SAAN,KAAoB9G,SAApB,IAAiC;YAAE+G,SAAS,EAAEvH,KAAK,CAACsH;UAAnB,CAF5B,CAAL;;UAMN,IAAItH,KAAK,CAAC6Q,SAAN,KAAoBrQ,SAAxB,EAAmC;YACjCyB,QAAQ,GAAG6O,uCAAuC,CAAC9Q,KAAK,CAAC6Q,SAAP,EAAkB5Q,OAAlB,CAAlD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAhDuB;AA0DxB,CA5DM;AA8DP,OAAO,IAAMiP,qDAAqD,GAAG,UACnE/Q,KADmE,EAEnEC,OAFmE,EAE5C;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAF1C,GAGPD,yBAAyB,CAACH,KAAK,CAAC0P,KAAP,CAAzB,IAA0C;YAAE,kCAAkC1P,KAAK,CAAC0P;UAA1C,CAHnC,GAIPvP,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAJxC,GAKPlN,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CALjD,CAAP;UASFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB,eAAe;UADE,CAAb;;UAKN,IAAIlB,KAAK,CAACgR,uBAAN,KAAkCxQ,SAAtC,EAAiD;YAC/CyB,QAAQ,GAAGgP,2CAA2C,CAACjR,KAAK,CAACgR,uBAAP,EAAgC/Q,OAAhC,CAAtD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAjCuB;AA2CxB,CA7CM;AA+CP,OAAO,IAAMoP,6CAA6C,GAAG,UAC3DlR,KAD2D,EAE3DC,OAF2D,EAEpC;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAF1C,GAGPD,yBAAyB,CAACH,KAAK,CAACqH,yBAAP,CAAzB,IAA8D;YAChE,qCAAqCrH,KAAK,CAACqH,yBAAN,CAAiCjF,QAAjC;UAD2B,CAHvD,GAMPjC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CANxC,GAOPlN,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAPjD,CAAP;UAWFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK;YACT4J,SAAS,EAAE;UADF,GAEL9K,KAAK,CAACsH,SAAN,KAAoB9G,SAApB,IAAiC;YAAE+G,SAAS,EAAEvH,KAAK,CAACsH;UAAnB,CAF5B,CAAL;;UAMN,IAAItH,KAAK,CAACmR,SAAN,KAAoB3Q,SAAxB,EAAmC;YACjCyB,QAAQ,GAAGmP,uCAAuC,CAACpR,KAAK,CAACmR,SAAP,EAAkBlR,OAAlB,CAAlD;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAnDuB;AA6DxB,CA/DM;AAiEP,OAAO,IAAMuP,2CAA2C,GAAG,UACzDrR,KADyD,EAEzDC,OAFyD,EAElC;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAFxC,GAGPlN,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAHjD,CAAP;UAOFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK;YACT8F,OAAO,EAAE;UADA,GAELhH,KAAK,CAACsH,SAAN,KAAoB9G,SAApB,IAAiC;YAAE+G,SAAS,EAAEvH,KAAK,CAACsH;UAAnB,CAF5B,CAAL;;UAMN,IAAItH,KAAK,CAACqE,OAAN,KAAkB7D,SAAtB,EAAiC;YAC/ByB,QAAQ,GAAGgO,2BAA2B,CAACjQ,KAAK,CAACqE,OAAP,EAAgBpE,OAAhB,CAAtC;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA/CuB;AAyDxB,CA3DM;AA6DP,OAAO,IAAMwP,+CAA+C,GAAG,UAC7DtR,KAD6D,EAE7DC,OAF6D,EAEtC;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAFxC,GAGPlN,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAHjD,CAAP;UAOFC,YAAY,GAAG,WAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB4G,iBAAiB,EAAE;UADF,CAAb;;UAKN,IAAI9H,KAAK,CAACuR,8BAAN,KAAyC/Q,SAA7C,EAAwD;YACtDyB,QAAQ,GAAGuP,kDAAkD,CAACxR,KAAK,CAACuR,8BAAP,EAAuCtR,OAAvC,CAA7D;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA/BuB;AAyCxB,CA3CM;AA6CP,OAAO,IAAM2P,wCAAwC,GAAG,UACtDzR,KADsD,EAEtDC,OAFsD,EAE/B;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAF1C,GAGPD,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAHjD,CAAP;UAOFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK;YACTwQ,OAAO,EAAE;UADA,GAEL1R,KAAK,CAACsH,SAAN,KAAoB9G,SAApB,IAAiC;YAAE+G,SAAS,EAAEvH,KAAK,CAACsH;UAAnB,CAF5B,CAAL;;UAMN,IAAItH,KAAK,CAAC2R,cAAN,KAAyBnR,SAA7B,EAAwC;YACtCyB,QAAQ,GAAG2P,kCAAkC,CAAC5R,KAAK,CAAC2R,cAAP,EAAuB1R,OAAvB,CAA7C;YACA6B,IAAI,GAAG,wCAAP;YACAG,QAAQ,CAACE,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;YACAL,IAAI,IAAIG,QAAQ,CAACG,QAAT,EAAR;UACD;;UAC8C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,MAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA/CuB;AAyDxB,CA3DM;AA6DP,OAAO,IAAM+P,8CAA8C,GAAG,UAC5D7R,KAD4D,EAE5DC,OAF4D,EAErC;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAAC4D,oBAAP,CAAzB,IAAyD;YAC3D,mDAAmD5D,KAAK,CAAC4D;UADE,CAFlD,GAKPzD,yBAAyB,CAACH,KAAK,CAAC6D,cAAP,CAAzB,IAAmD;YACrD,6CAA6C7D,KAAK,CAAC6D;UADE,CAL5C,GAQP1D,yBAAyB,CAACH,KAAK,CAAC8D,iBAAP,CAAzB,IAAsD;YACxD,iDAAiD9D,KAAK,CAAC8D;UADC,CAR/C,GAWP3D,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAXjD,CAAP;UAeFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK,GAAQ;YACjB4Q,MAAM,EAAE,EADS;YAEjB,eAAe;UAFE,CAAb;UAKNhQ,IAAI,GAAG,wCAAP;UACMiQ,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,4BAAd,CAAX;UACNqS,QAAQ,CAAC5P,YAAT,CAAsB,OAAtB,EAA+B,yCAA/B;;UACA,IAAInC,KAAK,CAACgS,UAAN,KAAqBxR,SAAzB,EAAoC;YAC5ByR,IAAI,GAAG,IAAIvS,SAAJ,CAAc,YAAd,EAA4BwS,YAA5B,CAAyC,IAAItS,SAAJ,CAAcI,KAAK,CAACgS,UAApB,CAAzC,EAA0EG,QAA1E,CAAmF,YAAnF,CAAP;YACNJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;UACD;;UACD,IAAIjS,KAAK,CAACoS,cAAN,KAAyB5R,SAA7B,EAAwC;YAChCyR,IAAI,GAAG,IAAIvS,SAAJ,CAAc,gBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACoS,cAApB,CADH,EAEVD,QAFU,CAED,gBAFC,CAAP;YAGNJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;UACD;;UACD,IAAIjS,KAAK,CAACqS,kBAAN,KAA6B7R,SAAjC,EAA4C;YACpCyR,IAAI,GAAGK,sCAAsC,CAACtS,KAAK,CAACqS,kBAAP,EAA2BpS,OAA3B,CAAtC,CAA0EkS,QAA1E,CACX,oBADW,CAAP;YAGNJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;UACD;;UACD,IAAIjS,KAAK,CAACuS,mBAAN,KAA8B/R,SAAlC,EAA6C;YACrCyR,IAAI,GAAGO,uCAAuC,CAACxS,KAAK,CAACuS,mBAAP,EAA4BtS,OAA5B,CAAvC,CAA4EkS,QAA5E,CACX,qBADW,CAAP;YAGNJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;UACD;;UACD,IAAIjS,KAAK,CAACyS,eAAN,KAA0BjS,SAA9B,EAAyC;YACjCyR,IAAI,GAAGS,mCAAmC,CAAC1S,KAAK,CAACyS,eAAP,EAAwBxS,OAAxB,CAAnC,CAAoEkS,QAApE,CAA6E,iBAA7E,CAAP;YACNJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;UACD;;UACD,IAAIjS,KAAK,CAAC2S,SAAN,KAAoBnS,SAAxB,EAAmC;YAC3ByR,IAAI,GAAGW,6BAA6B,CAAC5S,KAAK,CAAC2S,SAAP,EAAkB1S,OAAlB,CAA7B,CAAwDkS,QAAxD,CAAiE,WAAjE,CAAP;YACNJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;UACD;;UACDnQ,IAAI,IAAIiQ,QAAQ,CAAC3P,QAAT,EAAR;UAC+C;UAAA;UAAA,EAAMnC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,MAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAlFuB;AA4FxB,CA9FM;AAgGP,OAAO,IAAM+Q,qCAAqC,GAAG,UACnD7S,KADmD,EAEnDC,OAFmD,EAE5B;EAAA;;;;;;UAEjBC,OAAO;YACX,gBAAgB;UADL,GAEPC,yBAAyB,CAACH,KAAK,CAACyQ,aAAP,CAAzB,IAAkD;YAAE,kBAAkBzQ,KAAK,CAACyQ,aAAN,CAAqBrO,QAArB;UAApB,CAF3C,GAGPjC,yBAAyB,CAACH,KAAK,CAACqN,UAAP,CAAzB,IAA+C;YAAE,eAAerN,KAAK,CAACqN;UAAvB,CAHxC,GAIPlN,yBAAyB,CAACH,KAAK,CAAC4D,oBAAP,CAAzB,IAAyD;YAC3D,mDAAmD5D,KAAK,CAAC4D;UADE,CAJlD,GAOPzD,yBAAyB,CAACH,KAAK,CAAC6D,cAAP,CAAzB,IAAmD;YACrD,6CAA6C7D,KAAK,CAAC6D;UADE,CAP5C,GAUP1D,yBAAyB,CAACH,KAAK,CAAC8D,iBAAP,CAAzB,IAAsD;YACxD,iDAAiD9D,KAAK,CAAC8D;UADC,CAV/C,GAaP3D,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAb1C,GAcPD,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAdjD,CAAP;UAkBFC,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK;YACT,QAAQ;UADC,GAELlB,KAAK,CAACwK,UAAN,KAAqBhK,SAArB,IAAkC;YAAEiK,UAAU,EAAEzK,KAAK,CAACwK,UAAN,CAAiBpI,QAAjB;UAAd,CAF7B,GAGLpC,KAAK,CAACmB,QAAN,KAAmBX,SAAnB,IAAgC;YAAEY,QAAQ,EAAEpB,KAAK,CAACmB;UAAlB,CAH3B,CAAL;;UAON,IAAInB,KAAK,CAAC0Q,IAAN,KAAelQ,SAAnB,EAA8B;YAC5ByB,QAAQ,GAAGjC,KAAK,CAAC0Q,IAAjB;YACA5O,IAAI,GAAGG,QAAP;UACD;;UAC8C;UAAA;UAAA,EAAMhC,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GAzDuB;AAmExB,CArEM;AAuEP,OAAO,IAAMgR,yCAAyC,GAAG,UACvD9S,KADuD,EAEvDC,OAFuD,EAEhC;EAAA;;;;;;UAEjBC,OAAO,8IACPC,yBAAyB,CAACH,KAAK,CAAC4C,UAAP,CAAzB,IAA+C;YAAE,qBAAqB5C,KAAK,CAAC4C;UAA7B,CADxC,GAEPzC,yBAAyB,CAACH,KAAK,CAAC6C,iBAAP,CAAzB,IAAsD;YACxD,8BAA8B7C,KAAK,CAAC6C;UADoB,CAF/C,GAKP1C,yBAAyB,CAACH,KAAK,CAAC8C,yBAAP,CAAzB,IAA8D;YAChE,uCAAuC5D,iBAAiB,CAACc,KAAK,CAAC8C,yBAAP,CAAjB,CAAoDV,QAApD;UADyB,CALvD,GAQPjC,yBAAyB,CAACH,KAAK,CAAC+C,qBAAP,CAAzB,IAA0D;YAC5D,mCAAmC/C,KAAK,CAAC+C;UADmB,CARnD,GAWP5C,yBAAyB,CAACH,KAAK,CAACgD,2BAAP,CAAzB,IAAgE;YAClE,yCAAyC9D,iBAAiB,CAACc,KAAK,CAACgD,2BAAP,CAAjB,CAAsDZ,QAAtD;UADyB,CAXzD,GAcPjC,yBAAyB,CAACH,KAAK,CAAC+S,eAAP,CAAzB,IAAoD;YAAE,2BAA2B/S,KAAK,CAAC+S;UAAnC,CAd7C,GAeP5S,yBAAyB,CAACH,KAAK,CAAC4D,oBAAP,CAAzB,IAAyD;YAC3D,mDAAmD5D,KAAK,CAAC4D;UADE,CAflD,GAkBPzD,yBAAyB,CAACH,KAAK,CAAC6D,cAAP,CAAzB,IAAmD;YACrD,6CAA6C7D,KAAK,CAAC6D;UADE,CAlB5C,GAqBP1D,yBAAyB,CAACH,KAAK,CAAC8D,iBAAP,CAAzB,IAAsD;YACxD,iDAAiD9D,KAAK,CAAC8D;UADC,CArB/C,GAwBP3D,yBAAyB,CAACH,KAAK,CAACkE,8BAAP,CAAzB,IAAmE;YACrE,+DAA+DlE,KAAK,CAACkE;UADA,CAxB5D,GA2BP/D,yBAAyB,CAACH,KAAK,CAACmE,wBAAP,CAAzB,IAA6D;YAC/D,yDAAyDnE,KAAK,CAACmE;UADA,CA3BtD,GA8BPhE,yBAAyB,CAACH,KAAK,CAACoE,2BAAP,CAAzB,IAAgE;YAClE,6DAA6DpE,KAAK,CAACoE;UADD,CA9BzD,GAiCPjE,yBAAyB,CAACH,KAAK,CAACI,YAAP,CAAzB,IAAiD;YAAE,uBAAuBJ,KAAK,CAACI;UAA/B,CAjC1C,GAkCPD,yBAAyB,CAACH,KAAK,CAACK,mBAAP,CAAzB,IAAwD;YAC1D,+BAA+BL,KAAK,CAACK;UADqB,CAlCjD,GAqCPF,yBAAyB,CAACH,KAAK,CAAC0E,yBAAP,CAAzB,IAA8D;YAChE,sCAAsC1E,KAAK,CAAC0E;UADoB,CArCvD,CAAP;UAyCFpE,YAAY,GAAG,kBAAf;;UACJ,IAAIN,KAAK,CAACO,MAAN,KAAiBC,SAArB,EAAgC;YACxBC,UAAU,GAAWT,KAAK,CAACO,MAA3B;;YACN,IAAIE,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCxB,4BAA4B,CAACqB,UAAD,CAA7D,CAAf;UACD,CAND,MAMO;YACL,MAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;UACD;;UACD,IAAIX,KAAK,CAACa,GAAN,KAAcL,SAAlB,EAA6B;YACrBC,UAAU,GAAWT,KAAK,CAACa,GAA3B;;YACN,IAAIJ,UAAU,CAACC,MAAX,IAAqB,CAAzB,EAA4B;cAC1B,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;YACD;;YACDL,YAAY,GAAGA,YAAY,CAACM,OAAb,CACb,QADa,EAEbH,UAAU,CACPK,KADH,CACS,GADT,EAEGC,GAFH,CAEO,UAACC,OAAD,EAAQ;cAAK,mCAA4B,CAACA,OAAD,CAA5B;YAAqC,CAFzD,EAGGC,IAHH,CAGQ,GAHR,CAFa,CAAf;UAOD,CAZD,MAYO;YACL,MAAM,IAAIN,KAAJ,CAAU,8CAAV,CAAN;UACD;;UACKO,KAAK;YACT,QAAQ;UADC,GAELlB,KAAK,CAACwK,UAAN,KAAqBhK,SAArB,IAAkC;YAAEiK,UAAU,EAAEzK,KAAK,CAACwK,UAAN,CAAiBpI,QAAjB;UAAd,CAF7B,GAGLpC,KAAK,CAACmB,QAAN,KAAmBX,SAAnB,IAAgC;YAAEY,QAAQ,EAAEpB,KAAK,CAACmB;UAAlB,CAH3B,CAAL;UAMyC;UAAA;UAAA,EAAMlB,OAAO,CAACoB,QAAR,EAAN;;;UAAzCC,KAAyCC,SAAzC,EAAEC,QAAQ,cAAV,EAAYC,gBAAZ,EAAYC,QAAQ,mBAAG,OAAH,GAAUD,EAA9B,EAAgCE,IAAI,UAApC;UACN;UAAA;UAAA,EAAO,IAAI3C,aAAJ,CAAkB;YACvB0C,QAAQ,UADe;YAEvBF,QAAQ,UAFe;YAGvBG,IAAI,MAHmB;YAIvBC,MAAM,EAAE,KAJe;YAKvB1B,OAAO,SALgB;YAMvB2B,IAAI,EAAEvB,YANiB;YAOvBY,KAAK,OAPkB;YAQvBY,IAAI;UARmB,CAAlB,CAAP;;;GA3EuB;AAqFxB,CAvFM;AAyFP,OAAO,IAAMkR,iDAAiD,GAAG,UAC/DC,MAD+D,EAE/DhT,OAF+D,EAExC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOC,sDAAsD,CAACF,MAAD,EAAShT,OAAT,CAA7D;UACD;;UACKgC,QAAQ,GAAsC;YAClDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADoB;YAElDK,cAAc,EAAE9S;UAFkC,CAA9C;;UAIN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACD;UAAA;UAAA,EAAMqT,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAbuB;AAcxB,CAhBM;;AAkBP,IAAMkR,sDAAsD,GAAG,UAC7DF,MAD6D,EAE7DhT,OAF6D,EAEtC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBC,UAAMC,SAAN,EAA2CD,EAF3B,IAAZ;UAKFE,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;UACQL;;;iBACD;cAAA;cAAA;cAAA;;iBACA;cAAA;cAAA;cAAA;;;;;;;;;UAEG;UAAA;UAAA,EAAMuS,0CAA0C,CAACL,YAAD,EAAe1T,OAAf,CAAhD;;;UADNgU,QAAQ,6DACFJ,SADE,KACsE;YAC5EK,IAAI,EAAEJ,SADsE;YAE5EV,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAF8C,CADtE,EAAR;UAKA;UAAA;UAAA;;;UAEMkB,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;UACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;UACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;YACbD,IAAI,EAAE,KAAGJ,SADI;YAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;YAGbW,MAAM,EAAE,QAHK;YAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAJjB,CADJ,CAAX;;;;UAQEsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAhCuB;AAiCxB,CAnCD;;AAqCA,OAAO,IAAMW,oDAAoD,GAAG,UAClE3B,MADkE,EAElEhT,OAFkE,EAE3C;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO2B,yDAAyD,CAAC5B,MAAD,EAAShT,OAAT,CAAhE;UACD;;UACKgC,QAAQ,GAAyC;YACrDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADuB;YAErD1S,MAAM,EAAEC,SAF6C;YAGrDyD,gBAAgB,EAAEzD,SAHmC;YAIrDsU,IAAI,EAAEtU,SAJ+C;YAKrDuU,UAAU,EAAEvU,SALyC;YAMrDK,GAAG,EAAEL,SANgD;YAOrDwU,QAAQ,EAAExU,SAP2C;YAQrD8S,cAAc,EAAE9S,SARqC;YASrDuD,WAAW,EAAEvD,SATwC;YAUrDiD,oBAAoB,EAAEjD,SAV+B;YAWrD8G,SAAS,EAAE9G;UAX0C,CAAjD;;UAaN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;YACpDyB,QAAQ,CAAC8S,UAAT,GAAsB9B,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAAtB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,8BAAf,MAAmDM,SAAvD,EAAkE;YAChEyB,QAAQ,CAACwB,oBAAT,GAAgCwP,MAAM,CAAC/S,OAAP,CAAe,8BAAf,CAAhC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;YACpDyB,QAAQ,CAACqF,SAAT,GAAqB2L,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAArB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,6CAAf,MAAkEM,SAAtE,EAAiF;YAC/EyB,QAAQ,CAAC8B,WAAT,GAAuBkP,MAAM,CAAC/S,OAAP,CAAe,6CAAf,CAAvB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsEM,SAA1E,EAAqF;YACnFyB,QAAQ,CAACgC,gBAAT,GAA4BgP,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsE,MAAlG;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACiB;UAAA;UAAA,EAAMwT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC,QAAD,CAAJ,KAAmBzU,SAAvB,EAAkC;YAChCyB,QAAQ,CAAC1B,MAAT,GAAkB0U,IAAI,CAAC,QAAD,CAAtB;UACD;;UACD,IAAIA,IAAI,CAAC,MAAD,CAAJ,KAAiBzU,SAArB,EAAgC;YAC9ByB,QAAQ,CAAC6S,IAAT,GAAgBG,IAAI,CAAC,MAAD,CAApB;UACD;;UACD,IAAIA,IAAI,CAAC,KAAD,CAAJ,KAAgBzU,SAApB,EAA+B;YAC7ByB,QAAQ,CAACpB,GAAT,GAAeoU,IAAI,CAAC,KAAD,CAAnB;UACD;;UACD,IAAIA,IAAI,CAAC,UAAD,CAAJ,KAAqBzU,SAAzB,EAAoC;YAClCyB,QAAQ,CAAC+S,QAAT,GAAoBC,IAAI,CAAC,UAAD,CAAxB;UACD;;UACD;UAAA;UAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAjDuB;AAkDxB,CApDM;;AAsDP,IAAM4S,yDAAyD,GAAG,UAChE5B,MADgE,EAEhEhT,OAFgE,EAEzC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMiB,uCAAuC,GAAG,UACrDjC,MADqD,EAErDhT,OAFqD,EAE9B;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOiC,4CAA4C,CAAClC,MAAD,EAAShT,OAAT,CAAnD;UACD;;UACKgC,QAAQ,GAA4B;YACxCmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADU;YAExChP,gBAAgB,EAAEzD,SAFsB;YAGxC4U,gBAAgB,EAAE5U,SAHsB;YAIxC6U,mBAAmB,EAAE7U,SAJmB;YAKxCuU,UAAU,EAAEvU,SAL4B;YAMxC8S,cAAc,EAAE9S,SANwB;YAOxCoD,oBAAoB,EAAEpD,SAPkB;YAQxCsD,iBAAiB,EAAEtD,SARqB;YASxCwD,uBAAuB,EAAExD,SATe;YAUxCuD,WAAW,EAAEvD,SAV2B;YAWxCiD,oBAAoB,EAAEjD,SAXkB;YAYxC8G,SAAS,EAAE9G;UAZ6B,CAApC;;UAcN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;YACpDyB,QAAQ,CAAC8S,UAAT,GAAsB9B,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAAtB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,8BAAf,MAAmDM,SAAvD,EAAkE;YAChEyB,QAAQ,CAACoT,mBAAT,GAA+BpC,MAAM,CAAC/S,OAAP,CAAe,8BAAf,CAA/B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;YACpDyB,QAAQ,CAACqF,SAAT,GAAqB2L,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAArB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,8BAAf,MAAmDM,SAAvD,EAAkE;YAChEyB,QAAQ,CAACwB,oBAAT,GAAgCwP,MAAM,CAAC/S,OAAP,CAAe,8BAAf,CAAhC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsEM,SAA1E,EAAqF;YACnFyB,QAAQ,CAAC2B,oBAAT,GAAgCqP,MAAM,CAAC/S,OAAP,CAAe,iDAAf,CAAhC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,+CAAf,MAAoEM,SAAxE,EAAmF;YACjFyB,QAAQ,CAAC6B,iBAAT,GAA6BmP,MAAM,CAAC/S,OAAP,CAAe,+CAAf,CAA7B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,6CAAf,MAAkEM,SAAtE,EAAiF;YAC/EyB,QAAQ,CAAC8B,WAAT,GAAuBkP,MAAM,CAAC/S,OAAP,CAAe,6CAAf,CAAvB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,sCAAf,MAA2DM,SAA/D,EAA0E;YACxEyB,QAAQ,CAAC+B,uBAAT,GAAmCiP,MAAM,CAAC/S,OAAP,CAAe,sCAAf,CAAnC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsEM,SAA1E,EAAqF;YACnFyB,QAAQ,CAACgC,gBAAT,GAA4BgP,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsE,MAAlG;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACiB;UAAA;UAAA,EAAMwT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;UACNW,QAAQ,CAACmT,gBAAT,GAA4BE,sCAAsC,CAACL,IAAD,EAAOhV,OAAP,CAAlE;UACA;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAnDuB;AAoDxB,CAtDM;;AAwDP,IAAMkT,4CAA4C,GAAG,UACnDlC,MADmD,EAEnDhT,OAFmD,EAE5B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBC,UAAMC,SAAN,EAA2CD,EAF3B,IAAZ;UAKFE,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;UACQL;;;iBACD;cAAA;cAAA;cAAA;;iBACA;cAAA;cAAA;cAAA;;;;;;;;;UAEG;UAAA;UAAA,EAAM8T,wDAAwD,CAAC5B,YAAD,EAAe1T,OAAf,CAA9D;;;UADNgU,QAAQ,6DACFJ,SADE,KACoF;YAC1FK,IAAI,EAAEJ,SADoF;YAE1FV,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAF4D,CADpF,EAAR;UAKA;UAAA;UAAA;;;UAEMkB,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;UACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;UACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;YACbD,IAAI,EAAE,KAAGJ,SADI;YAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;YAGbW,MAAM,EAAE,QAHK;YAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAJjB,CADJ,CAAX;;;;UAQEsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAhCuB;AAiCxB,CAnCD;;AAqCA,OAAO,IAAMuB,yCAAyC,GAAG,UACvDvC,MADuD,EAEvDhT,OAFuD,EAEhC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOuC,8CAA8C,CAACxC,MAAD,EAAShT,OAAT,CAArD;UACD;;UACKgC,QAAQ,GAA8B;YAC1CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADY;YAE1C+B,QAAQ,EAAExU;UAFgC,CAAtC;;UAIN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,UAAf,MAA+BM,SAAnC,EAA8C;YAC5CyB,QAAQ,CAAC+S,QAAT,GAAoB/B,MAAM,CAAC/S,OAAP,CAAe,UAAf,CAApB;UACD;;UACD;UAAA;UAAA,EAAMqT,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAbuB;AAcxB,CAhBM;;AAkBP,IAAMwT,8CAA8C,GAAG,UACrDxC,MADqD,EAErDhT,OAFqD,EAE9B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBE,UAAM6B,SAAN,EAA2C7B,EAF3B,IAAZ;UAKFC,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;UACQL;;;iBACD;cAAA;cAAA;cAAA;;iBACA;cAAA;cAAA;cAAA;;iBAOA;cAAA;cAAA;cAAA;;iBACA;cAAA;cAAA;cAAA;;;;;;;;;UANG;UAAA;UAAA,EAAMkU,iDAAiD,CAAChC,YAAD,EAAe1T,OAAf,CAAvD;;;UADNgU,QAAQ,6DACFyB,SADE,KAC6E;YACnFxB,IAAI,EAAEJ,SAD6E;YAEnFV,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAFqD,CAD7E,EAAR;UAKA;UAAA;UAAA;;;;UAIM;UAAA;UAAA,EAAM2C,qDAAqD,CAACjC,YAAD,EAAe1T,OAAf,CAA3D;;;UADNgU,QAAQ,6DACFyB,SADE,KACiF;YACvFxB,IAAI,EAAEJ,SADiF;YAEvFV,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAFyD,CADjF,EAAR;UAKA;UAAA;UAAA;;;UAEMkB,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;UACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;UACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;YACbD,IAAI,EAAE,KAAGJ,SADI;YAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;YAGbW,MAAM,EAAE,QAHK;YAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAJjB,CADJ,CAAX;;;;UAQEsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxCuB;AAyCxB,CA3CD;;AA6CA,OAAO,IAAM4B,kDAAkD,GAAG,UAChE5C,MADgE,EAEhEhT,OAFgE,EAEzC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO4C,uDAAuD,CAAC7C,MAAD,EAAShT,OAAT,CAA9D;UACD;;UACKgC,QAAQ,GAAuC;YACnDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADqB;YAEnD8C,SAAS,EAAEvV,SAFwC;YAGnDwV,WAAW,EAAExV,SAHsC;YAInDD,MAAM,EAAEC,SAJ2C;YAKnDyD,gBAAgB,EAAEzD,SALiC;YAMnDK,GAAG,EAAEL,SAN8C;YAOnD8S,cAAc,EAAE9S,SAPmC;YAQnDoD,oBAAoB,EAAEpD,SAR6B;YASnDsD,iBAAiB,EAAEtD,SATgC;YAUnDwD,uBAAuB,EAAExD,SAV0B;YAWnDuD,WAAW,EAAEvD,SAXsC;YAYnDiD,oBAAoB,EAAEjD,SAZ6B;YAanDW,QAAQ,EAAEX;UAbyC,CAA/C;;UAeN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;YACpDyB,QAAQ,CAAC8T,SAAT,GAAqB,IAAIE,IAAJ,CAAShD,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAAT,CAArB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,qBAAf,MAA0CM,SAA9C,EAAyD;YACvDyB,QAAQ,CAAC+T,WAAT,GAAuB/C,MAAM,CAAC/S,OAAP,CAAe,qBAAf,CAAvB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,8BAAf,MAAmDM,SAAvD,EAAkE;YAChEyB,QAAQ,CAACwB,oBAAT,GAAgCwP,MAAM,CAAC/S,OAAP,CAAe,8BAAf,CAAhC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsEM,SAA1E,EAAqF;YACnFyB,QAAQ,CAAC2B,oBAAT,GAAgCqP,MAAM,CAAC/S,OAAP,CAAe,iDAAf,CAAhC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,+CAAf,MAAoEM,SAAxE,EAAmF;YACjFyB,QAAQ,CAAC6B,iBAAT,GAA6BmP,MAAM,CAAC/S,OAAP,CAAe,+CAAf,CAA7B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,6CAAf,MAAkEM,SAAtE,EAAiF;YAC/EyB,QAAQ,CAAC8B,WAAT,GAAuBkP,MAAM,CAAC/S,OAAP,CAAe,6CAAf,CAAvB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,sCAAf,MAA2DM,SAA/D,EAA0E;YACxEyB,QAAQ,CAAC+B,uBAAT,GAAmCiP,MAAM,CAAC/S,OAAP,CAAe,sCAAf,CAAnC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsEM,SAA1E,EAAqF;YACnFyB,QAAQ,CAACgC,gBAAT,GAA4BgP,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsE,MAAlG;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACiB;UAAA;UAAA,EAAMwT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC,QAAD,CAAJ,KAAmBzU,SAAvB,EAAkC;YAChCyB,QAAQ,CAAC1B,MAAT,GAAkB0U,IAAI,CAAC,QAAD,CAAtB;UACD;;UACD,IAAIA,IAAI,CAAC,KAAD,CAAJ,KAAgBzU,SAApB,EAA+B;YAC7ByB,QAAQ,CAACpB,GAAT,GAAeoU,IAAI,CAAC,KAAD,CAAnB;UACD;;UACD,IAAIA,IAAI,CAAC,UAAD,CAAJ,KAAqBzU,SAAzB,EAAoC;YAClCyB,QAAQ,CAACd,QAAT,GAAoB8T,IAAI,CAAC,UAAD,CAAxB;UACD;;UACD;UAAA;UAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAzDuB;AA0DxB,CA5DM;;AA8DP,IAAM6T,uDAAuD,GAAG,UAC9D7C,MAD8D,EAE9DhT,OAF8D,EAEvC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMiC,yCAAyC,GAAG,UACvDjD,MADuD,EAEvDhT,OAFuD,EAEhC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOiD,8CAA8C,CAAClD,MAAD,EAAShT,OAAT,CAArD;UACD;;UACKgC,QAAQ,GAA8B;YAC1CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADY,CAAtC;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMkU,8CAA8C,GAAG,UACrDlD,MADqD,EAErDhT,OAFqD,EAE9B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMmC,+DAA+D,GAAG,UAC7EnD,MAD6E,EAE7EhT,OAF6E,EAEtD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOmD,oEAAoE,CAACpD,MAAD,EAAShT,OAAT,CAA3E;UACD;;UACKgC,QAAQ,GAAoD;YAChEmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADkC,CAA5D;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMoU,oEAAoE,GAAG,UAC3EpD,MAD2E,EAE3EhT,OAF2E,EAEpD;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMqC,6CAA6C,GAAG,UAC3DrD,MAD2D,EAE3DhT,OAF2D,EAEpC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOqD,kDAAkD,CAACtD,MAAD,EAAShT,OAAT,CAAzD;UACD;;UACKgC,QAAQ,GAAkC;YAC9CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADgB,CAA1C;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMsU,kDAAkD,GAAG,UACzDtD,MADyD,EAEzDhT,OAFyD,EAElC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMuC,mDAAmD,GAAG,UACjEvD,MADiE,EAEjEhT,OAFiE,EAE1C;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOuD,wDAAwD,CAACxD,MAAD,EAAShT,OAAT,CAA/D;UACD;;UACKgC,QAAQ,GAAwC;YACpDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADsB,CAAhD;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMwU,wDAAwD,GAAG,UAC/DxD,MAD+D,EAE/DhT,OAF+D,EAExC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMyC,wEAAwE,GAAG,UACtFzD,MADsF,EAEtFhT,OAFsF,EAE/D;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOyD,6EAA6E,CAAC1D,MAAD,EAAShT,OAAT,CAApF;UACD;;UACKgC,QAAQ,GAA6D;YACzEmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAD2C,CAArE;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAM0U,6EAA6E,GAAG,UACpF1D,MADoF,EAEpFhT,OAFoF,EAE7D;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM2C,+DAA+D,GAAG,UAC7E3D,MAD6E,EAE7EhT,OAF6E,EAEtD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO2D,oEAAoE,CAAC5D,MAAD,EAAShT,OAAT,CAA3E;UACD;;UACKgC,QAAQ,GAAoD;YAChEmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADkC,CAA5D;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAM4U,oEAAoE,GAAG,UAC3E5D,MAD2E,EAE3EhT,OAF2E,EAEpD;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM6C,kDAAkD,GAAG,UAChE7D,MADgE,EAEhEhT,OAFgE,EAEzC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO6D,uDAAuD,CAAC9D,MAAD,EAAShT,OAAT,CAA9D;UACD;;UACKgC,QAAQ,GAAuC;YACnDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADqB,CAA/C;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAM8U,uDAAuD,GAAG,UAC9D9D,MAD8D,EAE9DhT,OAF8D,EAEvC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM+C,6DAA6D,GAAG,UAC3E/D,MAD2E,EAE3EhT,OAF2E,EAEpD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO+D,kEAAkE,CAAChE,MAAD,EAAShT,OAAT,CAAzE;UACD;;UACKgC,QAAQ,GAAkD;YAC9DmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADgC,CAA1D;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMgV,kEAAkE,GAAG,UACzEhE,MADyE,EAEzEhT,OAFyE,EAElD;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMiD,0DAA0D,GAAG,UACxEjE,MADwE,EAExEhT,OAFwE,EAEjD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOiE,+DAA+D,CAAClE,MAAD,EAAShT,OAAT,CAAtE;UACD;;UACKgC,QAAQ,GAA+C;YAC3DmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAD6B,CAAvD;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMkV,+DAA+D,GAAG,UACtElE,MADsE,EAEtEhT,OAFsE,EAE/C;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMmD,+CAA+C,GAAG,UAC7DnE,MAD6D,EAE7DhT,OAF6D,EAEtC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOmE,oDAAoD,CAACpE,MAAD,EAAShT,OAAT,CAA3D;UACD;;UACKgC,QAAQ,GAAoC;YAChDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADkB,CAA5C;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMoV,oDAAoD,GAAG,UAC3DpE,MAD2D,EAE3DhT,OAF2D,EAEpC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMqD,oDAAoD,GAAG,UAClErE,MADkE,EAElEhT,OAFkE,EAE3C;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOqE,yDAAyD,CAACtE,MAAD,EAAShT,OAAT,CAAhE;UACD;;UACKgC,QAAQ,GAAyC;YACrDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADuB,CAAjD;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMsV,yDAAyD,GAAG,UAChEtE,MADgE,EAEhEhT,OAFgE,EAEzC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMuD,gDAAgD,GAAG,UAC9DvE,MAD8D,EAE9DhT,OAF8D,EAEvC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOuE,qDAAqD,CAACxE,MAAD,EAAShT,OAAT,CAA5D;UACD;;UACKgC,QAAQ,GAAqC;YACjDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADmB,CAA7C;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMwV,qDAAqD,GAAG,UAC5DxE,MAD4D,EAE5DhT,OAF4D,EAErC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMyD,gDAAgD,GAAG,UAC9DzE,MAD8D,EAE9DhT,OAF8D,EAEvC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOyE,qDAAqD,CAAC1E,MAAD,EAAShT,OAAT,CAA5D;UACD;;UACKgC,QAAQ,GAAqC;YACjDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADmB,CAA7C;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAM0V,qDAAqD,GAAG,UAC5D1E,MAD4D,EAE5DhT,OAF4D,EAErC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM2D,yCAAyC,GAAG,UACvD3E,MADuD,EAEvDhT,OAFuD,EAEhC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO2E,8CAA8C,CAAC5E,MAAD,EAAShT,OAAT,CAArD;UACD;;UACKgC,QAAQ,GAA8B;YAC1CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADY;YAE1C6E,YAAY,EAAEtX,SAF4B;YAG1C8S,cAAc,EAAE9S,SAH0B;YAI1C8G,SAAS,EAAE9G;UAJ+B,CAAtC;;UAMN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,qBAAf,MAA0CM,SAA9C,EAAyD;YACvDyB,QAAQ,CAAC6V,YAAT,GAAwB7E,MAAM,CAAC/S,OAAP,CAAe,qBAAf,MAA0C,MAAlE;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;YACpDyB,QAAQ,CAACqF,SAAT,GAAqB2L,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAArB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACD;UAAA;UAAA,EAAMqT,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GArBuB;AAsBxB,CAxBM;;AA0BP,IAAM4V,8CAA8C,GAAG,UACrD5E,MADqD,EAErDhT,OAFqD,EAE9B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM8D,0CAA0C,GAAG,UACxD9E,MADwD,EAExDhT,OAFwD,EAEjC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO8E,+CAA+C,CAAC/E,MAAD,EAAShT,OAAT,CAAtD;UACD;;UACKgC,QAAQ,GAA+B;YAC3CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADa;YAE3CgF,OAAO,EAAEzX,SAFkC;YAG3C0X,MAAM,EAAE1X,SAHmC;YAI3C8S,cAAc,EAAE9S;UAJ2B,CAAvC;;UAMN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACiB;UAAA;UAAA,EAAMwT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAACgD,OAAL,KAAiB,EAArB,EAAyB;YACvBhW,QAAQ,CAACgW,OAAT,GAAmB,EAAnB;UACD;;UACD,IAAIhD,IAAI,CAAC,SAAD,CAAJ,KAAoBzU,SAAxB,EAAmC;YACjCyB,QAAQ,CAACgW,OAAT,GAAmBE,oCAAoC,CAAC7Y,sBAAsB,CAAC2V,IAAI,CAAC,SAAD,CAAL,CAAvB,EAA0ChV,OAA1C,CAAvD;UACD;;UACD,IAAIgV,IAAI,CAACtU,KAAL,KAAe,EAAnB,EAAuB;YACrBsB,QAAQ,CAACiW,MAAT,GAAkB,EAAlB;UACD;;UACD,IAAIjD,IAAI,CAAC,OAAD,CAAJ,KAAkBzU,SAAtB,EAAiC;YAC/ByB,QAAQ,CAACiW,MAAT,GAAkBE,4BAA4B,CAAC9Y,sBAAsB,CAAC2V,IAAI,CAAC,OAAD,CAAL,CAAvB,EAAwChV,OAAxC,CAA9C;UACD;;UACD;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GA3BuB;AA4BxB,CA9BM;;AAgCP,IAAM+V,+CAA+C,GAAG,UACtD/E,MADsD,EAEtDhT,OAFsD,EAE/B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMoE,gDAAgD,GAAG,UAC9DpF,MAD8D,EAE9DhT,OAF8D,EAEvC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOoF,qDAAqD,CAACrF,MAAD,EAAShT,OAAT,CAA5D;UACD;;UACKgC,QAAQ,GAAqC;YACjDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADmB;YAEjD3L,SAAS,EAAE9G;UAFsC,CAA7C;;UAIN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;YACpDyB,QAAQ,CAACqF,SAAT,GAAqB2L,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAArB;UACD;;UACD;UAAA;UAAA,EAAMqT,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAbuB;AAcxB,CAhBM;;AAkBP,IAAMqW,qDAAqD,GAAG,UAC5DrF,MAD4D,EAE5DhT,OAF4D,EAErC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMsE,oDAAoD,GAAG,UAClEtF,MADkE,EAElEhT,OAFkE,EAE3C;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOsF,yDAAyD,CAACvF,MAAD,EAAShT,OAAT,CAAhE;UACD;;UACKgC,QAAQ,GAAyC;YACrDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADuB,CAAjD;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMuW,yDAAyD,GAAG,UAChEvF,MADgE,EAEhEhT,OAFgE,EAEzC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMwE,6DAA6D,GAAG,UAC3ExF,MAD2E,EAE3EhT,OAF2E,EAEpD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOwF,kEAAkE,CAACzF,MAAD,EAAShT,OAAT,CAAzE;UACD;;UACKgC,QAAQ,GAAkD;YAC9DmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADgC;YAE9D0F,MAAM,EAAEnY;UAFsD,CAA1D;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC,QAAD,CAAJ,KAAmBzU,SAAvB,EAAkC;YAChCyB,QAAQ,CAAC0W,MAAT,GAAkB1D,IAAI,CAAC,QAAD,CAAtB;UACD;;UACD;UAAA;UAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAbuB;AAcxB,CAhBM;;AAkBP,IAAMyW,kEAAkE,GAAG,UACzEzF,MADyE,EAEzEhT,OAFyE,EAElD;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM2E,yCAAyC,GAAG,UACvD3F,MADuD,EAEvDhT,OAFuD,EAEhC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO2F,8CAA8C,CAAC5F,MAAD,EAAShT,OAAT,CAArD;UACD;;UACKgC,QAAQ,GAA8B;YAC1CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADY;YAE1C6F,MAAM,EAAEtY,SAFkC;YAG1CuY,KAAK,EAAEvY;UAHmC,CAAtC;UAKY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC+D,iBAAL,KAA2B,EAA/B,EAAmC;YACjC/W,QAAQ,CAAC6W,MAAT,GAAkB,EAAlB;UACD;;UACD,IAAI7D,IAAI,CAAC,mBAAD,CAAJ,KAA8BzU,SAA9B,IAA2CyU,IAAI,CAAC,mBAAD,CAAJ,CAA0B,OAA1B,MAAuCzU,SAAtF,EAAiG;YAC/FyB,QAAQ,CAAC6W,MAAT,GAAkBG,4BAA4B,CAAC3Z,sBAAsB,CAAC2V,IAAI,CAAC,mBAAD,CAAJ,CAA0B,OAA1B,CAAD,CAAvB,EAA6DhV,OAA7D,CAA9C;UACD;;UACD,IAAIgV,IAAI,CAAC,OAAD,CAAJ,KAAkBzU,SAAtB,EAAiC;YAC/ByB,QAAQ,CAAC8W,KAAT,GAAiBG,2BAA2B,CAACjE,IAAI,CAAC,OAAD,CAAL,EAAgBhV,OAAhB,CAA5C;UACD;;UACD;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GApBuB;AAqBxB,CAvBM;;AAyBP,IAAM4W,8CAA8C,GAAG,UACrD5F,MADqD,EAErDhT,OAFqD,EAE9B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMkF,4DAA4D,GAAG,UAC1ElG,MAD0E,EAE1EhT,OAF0E,EAEnD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOkG,iEAAiE,CAACnG,MAAD,EAAShT,OAAT,CAAxE;UACD;;UACKgC,QAAQ,GAAiD;YAC7DmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CAD+B;YAE7DxF,sBAAsB,EAAEjN;UAFqC,CAAzD;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;UACNW,QAAQ,CAACwL,sBAAT,GAAkC4L,4CAA4C,CAACpE,IAAD,EAAOhV,OAAP,CAA9E;UACA;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAXuB;AAYxB,CAdM;;AAgBP,IAAMmX,iEAAiE,GAAG,UACxEnG,MADwE,EAExEhT,OAFwE,EAEjD;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMqF,0CAA0C,GAAG,UACxDrG,MADwD,EAExDhT,OAFwD,EAEjC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOqG,+CAA+C,CAACtG,MAAD,EAAShT,OAAT,CAAtD;UACD;;UACKgC,QAAQ,GAA+B;YAC3CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADa;YAE3CuG,SAAS,EAAEhZ;UAFgC,CAAvC;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAACwE,QAAL,KAAkB,EAAtB,EAA0B;YACxBxX,QAAQ,CAACuX,SAAT,GAAqB,EAArB;UACD;;UACD,IAAIvE,IAAI,CAAC,UAAD,CAAJ,KAAqBzU,SAAzB,EAAoC;YAClCyB,QAAQ,CAACuX,SAAT,GAAqBE,+BAA+B,CAACpa,sBAAsB,CAAC2V,IAAI,CAAC,UAAD,CAAL,CAAvB,EAA2ChV,OAA3C,CAApD;UACD;;UACD;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAhBuB;AAiBxB,CAnBM;;AAqBP,IAAMsX,+CAA+C,GAAG,UACtDtG,MADsD,EAEtDhT,OAFsD,EAE/B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM0F,gDAAgD,GAAG,UAC9D1G,MAD8D,EAE9DhT,OAF8D,EAEvC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO0G,qDAAqD,CAAC3G,MAAD,EAAShT,OAAT,CAA5D;UACD;;UACKgC,QAAQ,GAAqC;YACjDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADmB;YAEjDlF,iCAAiC,EAAEvN;UAFc,CAA7C;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;UACNW,QAAQ,CAAC8L,iCAAT,GAA6C8L,uDAAuD,CAAC5E,IAAD,EAAOhV,OAAP,CAApG;UACA;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAXuB;AAYxB,CAdM;;AAgBP,IAAM2X,qDAAqD,GAAG,UAC5D3G,MAD4D,EAE5DhT,OAF4D,EAErC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM6F,qEAAqE,GAAG,UACnF7G,MADmF,EAEnFhT,OAFmF,EAE5D;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO6G,0EAA0E,CAAC9G,MAAD,EAAShT,OAAT,CAAjF;UACD;;UACKgC,QAAQ,GAA0D;YACtEmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADwC;YAEtE/E,+BAA+B,EAAE1N;UAFqC,CAAlE;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;UACNW,QAAQ,CAACiM,+BAAT,GAA2C8L,qDAAqD,CAAC/E,IAAD,EAAOhV,OAAP,CAAhG;UACA;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAXuB;AAYxB,CAdM;;AAgBP,IAAM8X,0EAA0E,GAAG,UACjF9G,MADiF,EAEjFhT,OAFiF,EAE1D;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMgG,4DAA4D,GAAG,UAC1EhH,MAD0E,EAE1EhT,OAF0E,EAEnD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOgH,iEAAiE,CAACjH,MAAD,EAAShT,OAAT,CAAxE;UACD;;UACKgC,QAAQ,GAAiD;YAC7DmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CAD+B;YAE7D5E,sBAAsB,EAAE7N;UAFqC,CAAzD;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;UACNW,QAAQ,CAACoM,sBAAT,GAAkC8L,4CAA4C,CAAClF,IAAD,EAAOhV,OAAP,CAA9E;UACA;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAXuB;AAYxB,CAdM;;AAgBP,IAAMiY,iEAAiE,GAAG,UACxEjH,MADwE,EAExEhT,OAFwE,EAEjD;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMmG,4DAA4D,GAAG,UAC1EnH,MAD0E,EAE1EhT,OAF0E,EAEnD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOmH,iEAAiE,CAACpH,MAAD,EAAShT,OAAT,CAAxE;UACD;;UACKgC,QAAQ,GAAiD;YAC7DmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CAD+B;YAE7DqH,KAAK,EAAE9Z;UAFsD,CAAzD;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAACsF,IAAL,KAAc,EAAlB,EAAsB;YACpBtY,QAAQ,CAACqY,KAAT,GAAiB,EAAjB;UACD;;UACD,IAAIrF,IAAI,CAAC,MAAD,CAAJ,KAAiBzU,SAArB,EAAgC;YAC9ByB,QAAQ,CAACqY,KAAT,GAAiBE,oCAAoC,CAAClb,sBAAsB,CAAC2V,IAAI,CAAC,MAAD,CAAL,CAAvB,EAAuChV,OAAvC,CAArD;UACD;;UACD;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAhBuB;AAiBxB,CAnBM;;AAqBP,IAAMoY,iEAAiE,GAAG,UACxEpH,MADwE,EAExEhT,OAFwE,EAEjD;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMwG,8CAA8C,GAAG,UAC5DxH,MAD4D,EAE5DhT,OAF4D,EAErC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOwH,mDAAmD,CAACzH,MAAD,EAAShT,OAAT,CAA1D;UACD;;UACKgC,QAAQ,GAAmC;YAC/CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADiB;YAE/C0H,kBAAkB,EAAEna;UAF2B,CAA3C;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC,oBAAD,CAAJ,KAA+BzU,SAAnC,EAA8C;YAC5CyB,QAAQ,CAAC0Y,kBAAT,GAA8B1F,IAAI,CAAC,oBAAD,CAAlC;UACD;;UACD;UAAA;UAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAbuB;AAcxB,CAhBM;;AAkBP,IAAMyY,mDAAmD,GAAG,UAC1DzH,MAD0D,EAE1DhT,OAF0D,EAEnC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM2G,6CAA6C,GAAG,UAC3D3H,MAD2D,EAE3DhT,OAF2D,EAEpC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO2H,kDAAkD,CAAC5H,MAAD,EAAShT,OAAT,CAAzD;UACD;;UACKgC,QAAQ,GAAkC;YAC9CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADgB;YAE9C6H,cAAc,EAAEta;UAF8B,CAA1C;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC,gBAAD,CAAJ,KAA2BzU,SAA/B,EAA0C;YACxCyB,QAAQ,CAAC6Y,cAAT,GAA0BC,oCAAoC,CAAC9F,IAAI,CAAC,gBAAD,CAAL,EAAyBhV,OAAzB,CAA9D;UACD;;UACD;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAbuB;AAcxB,CAhBM;;AAkBP,IAAM4Y,kDAAkD,GAAG,UACzD5H,MADyD,EAEzDhT,OAFyD,EAElC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM+G,0DAA0D,GAAG,UACxE/H,MADwE,EAExEhT,OAFwE,EAEjD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO+H,+DAA+D,CAAChI,MAAD,EAAShT,OAAT,CAAtE;UACD;;UACKgC,QAAQ,GAA+C;YAC3DmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CAD6B;YAE3DnE,oBAAoB,EAAEtO;UAFqC,CAAvD;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;UACNW,QAAQ,CAAC6M,oBAAT,GAAgCoM,0CAA0C,CAACjG,IAAD,EAAOhV,OAAP,CAA1E;UACA;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAXuB;AAYxB,CAdM;;AAgBP,IAAMgZ,+DAA+D,GAAG,UACtEhI,MADsE,EAEtEhT,OAFsE,EAE/C;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMkH,+DAA+D,GAAG,UAC7ElI,MAD6E,EAE7EhT,OAF6E,EAEtD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOkI,oEAAoE,CAACnI,MAAD,EAAShT,OAAT,CAA3E;UACD;;UACKgC,QAAQ,GAAoD;YAChEmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADkC;YAEhEoI,4BAA4B,EAAE7a,SAFkC;YAGhE8a,mBAAmB,EAAE9a,SAH2C;YAIhE+a,mBAAmB,EAAE/a;UAJ2C,CAA5D;UAMY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAACuG,0BAAL,KAAoC,EAAxC,EAA4C;YAC1CvZ,QAAQ,CAACoZ,4BAAT,GAAwC,EAAxC;UACD;;UACD,IAAIpG,IAAI,CAAC,4BAAD,CAAJ,KAAuCzU,SAA3C,EAAsD;YACpDyB,QAAQ,CAACoZ,4BAAT,GAAwCI,qDAAqD,CAC3Fnc,sBAAsB,CAAC2V,IAAI,CAAC,4BAAD,CAAL,CADqE,EAE3FhV,OAF2F,CAA7F;UAID;;UACD,IAAIgV,IAAI,CAACyG,kBAAL,KAA4B,EAAhC,EAAoC;YAClCzZ,QAAQ,CAACqZ,mBAAT,GAA+B,EAA/B;UACD;;UACD,IAAIrG,IAAI,CAAC,oBAAD,CAAJ,KAA+BzU,SAAnC,EAA8C;YAC5CyB,QAAQ,CAACqZ,mBAAT,GAA+BK,4CAA4C,CACzErc,sBAAsB,CAAC2V,IAAI,CAAC,oBAAD,CAAL,CADmD,EAEzEhV,OAFyE,CAA3E;UAID;;UACD,IAAIgV,IAAI,CAAC2G,kBAAL,KAA4B,EAAhC,EAAoC;YAClC3Z,QAAQ,CAACsZ,mBAAT,GAA+B,EAA/B;UACD;;UACD,IAAItG,IAAI,CAAC,oBAAD,CAAJ,KAA+BzU,SAAnC,EAA8C;YAC5CyB,QAAQ,CAACsZ,mBAAT,GAA+BM,4CAA4C,CACzEvc,sBAAsB,CAAC2V,IAAI,CAAC,oBAAD,CAAL,CADmD,EAEzEhV,OAFyE,CAA3E;UAID;;UACD;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAvCuB;AAwCxB,CA1CM;;AA4CP,IAAMmZ,oEAAoE,GAAG,UAC3EnI,MAD2E,EAE3EhT,OAF2E,EAEpD;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM6H,uDAAuD,GAAG,UACrE7I,MADqE,EAErEhT,OAFqE,EAE9C;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO6I,4DAA4D,CAAC9I,MAAD,EAAShT,OAAT,CAAnE;UACD;;UACKgC,QAAQ,GAA4C;YACxDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CAD0B;YAExD7D,iBAAiB,EAAE5O;UAFqC,CAApD;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;UACNW,QAAQ,CAACmN,iBAAT,GAA6B4M,uCAAuC,CAAC/G,IAAD,EAAOhV,OAAP,CAApE;UACA;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAXuB;AAYxB,CAdM;;AAgBP,IAAM8Z,4DAA4D,GAAG,UACnE9I,MADmE,EAEnEhT,OAFmE,EAE5C;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMgI,4CAA4C,GAAG,UAC1DhJ,MAD0D,EAE1DhT,OAF0D,EAEnC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOgJ,iDAAiD,CAACjJ,MAAD,EAAShT,OAAT,CAAxD;UACD;;UACKgC,QAAQ,GAAiC;YAC7CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADe;YAE7CzD,MAAM,EAAEhP;UAFqC,CAAzC;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC,QAAD,CAAJ,KAAmBzU,SAAvB,EAAkC;YAChCyB,QAAQ,CAACuN,MAAT,GAAkByF,IAAI,CAAC,QAAD,CAAtB;UACD;;UACD;UAAA;UAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAbuB;AAcxB,CAhBM;;AAkBP,IAAMia,iDAAiD,GAAG,UACxDjJ,MADwD,EAExDhT,OAFwD,EAEjC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMkI,kDAAkD,GAAG,UAChElJ,MADgE,EAEhEhT,OAFgE,EAEzC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOkJ,uDAAuD,CAACnJ,MAAD,EAAShT,OAAT,CAA9D;UACD;;UACKgC,QAAQ,GAAuC;YACnDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADqB;YAEnDoJ,YAAY,EAAE7b;UAFqC,CAA/C;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;UACNW,QAAQ,CAACoa,YAAT,GAAwBC,kCAAkC,CAACrH,IAAD,EAAOhV,OAAP,CAA1D;UACA;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAXuB;AAYxB,CAdM;;AAgBP,IAAMma,uDAAuD,GAAG,UAC9DnJ,MAD8D,EAE9DhT,OAF8D,EAEvC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMsI,iDAAiD,GAAG,UAC/DtJ,MAD+D,EAE/DhT,OAF+D,EAExC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOsJ,sDAAsD,CAACvJ,MAAD,EAAShT,OAAT,CAA7D;UACD;;UACKgC,QAAQ,GAAsC;YAClDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADoB;YAElDtD,wBAAwB,EAAEnP;UAFwB,CAA9C;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;UACNW,QAAQ,CAAC0N,wBAAT,GAAoC8M,8CAA8C,CAACxH,IAAD,EAAOhV,OAAP,CAAlF;UACA;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAXuB;AAYxB,CAdM;;AAgBP,IAAMua,sDAAsD,GAAG,UAC7DvJ,MAD6D,EAE7DhT,OAF6D,EAEtC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMyI,oDAAoD,GAAG,UAClEzJ,MADkE,EAElEhT,OAFkE,EAE3C;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOyJ,yDAAyD,CAAC1J,MAAD,EAAShT,OAAT,CAAhE;UACD;;UACKgC,QAAQ,GAAyC;YACrDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADuB;YAErD2J,KAAK,EAAEpc;UAF8C,CAAjD;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC,OAAD,CAAJ,KAAkBzU,SAAtB,EAAiC;YAC/ByB,QAAQ,CAAC2a,KAAT,GAAiB3H,IAAI,CAAC,OAAD,CAArB;UACD;;UACD;UAAA;UAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAbuB;AAcxB,CAhBM;;AAkBP,IAAM0a,yDAAyD,GAAG,UAChE1J,MADgE,EAEhEhT,OAFgE,EAEzC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM4I,6CAA6C,GAAG,UAC3D5J,MAD2D,EAE3DhT,OAF2D,EAEpC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO4J,kDAAkD,CAAC7J,MAAD,EAAShT,OAAT,CAAzD;UACD;;UACKgC,QAAQ,GAAkC;YAC9CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADgB;YAE9C8J,MAAM,EAAEvc;UAFsC,CAA1C;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC8H,MAAL,KAAgB,EAApB,EAAwB;YACtB9a,QAAQ,CAAC8a,MAAT,GAAkB,EAAlB;UACD;;UACD,IAAI9H,IAAI,CAAC,QAAD,CAAJ,KAAmBzU,SAAnB,IAAgCyU,IAAI,CAAC,QAAD,CAAJ,CAAe,KAAf,MAA0BzU,SAA9D,EAAyE;YACvEyB,QAAQ,CAAC8a,MAAT,GAAkBC,4BAA4B,CAAC1d,sBAAsB,CAAC2V,IAAI,CAAC,QAAD,CAAJ,CAAe,KAAf,CAAD,CAAvB,EAAgDhV,OAAhD,CAA9C;UACD;;UACD;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAhBuB;AAiBxB,CAnBM;;AAqBP,IAAM6a,kDAAkD,GAAG,UACzD7J,MADyD,EAEzDhT,OAFyD,EAElC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMgJ,gDAAgD,GAAG,UAC9DhK,MAD8D,EAE9DhT,OAF8D,EAEvC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOgK,qDAAqD,CAACjK,MAAD,EAAShT,OAAT,CAA5D;UACD;;UACKgC,QAAQ,GAAqC;YACjDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADmB;YAEjDkK,SAAS,EAAE3c,SAFsC;YAGjDmY,MAAM,EAAEnY;UAHyC,CAA7C;UAKY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC,WAAD,CAAJ,KAAsBzU,SAA1B,EAAqC;YACnCyB,QAAQ,CAACkb,SAAT,GAAqBlI,IAAI,CAAC,WAAD,CAAzB;UACD;;UACD,IAAIA,IAAI,CAAC,QAAD,CAAJ,KAAmBzU,SAAvB,EAAkC;YAChCyB,QAAQ,CAAC0W,MAAT,GAAkB1D,IAAI,CAAC,QAAD,CAAtB;UACD;;UACD;UAAA;UAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAjBuB;AAkBxB,CApBM;;AAsBP,IAAMib,qDAAqD,GAAG,UAC5DjK,MAD4D,EAE5DhT,OAF4D,EAErC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMmJ,6CAA6C,GAAG,UAC3DnK,MAD2D,EAE3DhT,OAF2D,EAEpC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOmK,kDAAkD,CAACpK,MAAD,EAAShT,OAAT,CAAzD;UACD;;UACKgC,QAAQ,GAAkC;YAC9CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADgB;YAE9CqK,aAAa,EAAE9c,SAF+B;YAG9C+c,aAAa,EAAE/c,SAH+B;YAI9Cgd,qBAAqB,EAAEhd,SAJuB;YAK9Cid,YAAY,EAAEjd;UALgC,CAA1C;UAOY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC,eAAD,CAAJ,KAA0BzU,SAA9B,EAAyC;YACvCyB,QAAQ,CAACqb,aAAT,GAAyBI,mCAAmC,CAACzI,IAAI,CAAC,eAAD,CAAL,EAAwBhV,OAAxB,CAA5D;UACD;;UACD,IAAIgV,IAAI,CAAC,eAAD,CAAJ,KAA0BzU,SAA9B,EAAyC;YACvCyB,QAAQ,CAACsb,aAAT,GAAyBI,mCAAmC,CAAC1I,IAAI,CAAC,eAAD,CAAL,EAAwBhV,OAAxB,CAA5D;UACD;;UACD,IAAIgV,IAAI,CAAC,uBAAD,CAAJ,KAAkCzU,SAAtC,EAAiD;YAC/CyB,QAAQ,CAACub,qBAAT,GAAiCI,2CAA2C,CAC1E3I,IAAI,CAAC,uBAAD,CADsE,EAE1EhV,OAF0E,CAA5E;UAID;;UACD,IAAIgV,IAAI,CAACwI,YAAL,KAAsB,EAA1B,EAA8B;YAC5Bxb,QAAQ,CAACwb,YAAT,GAAwB,EAAxB;UACD;;UACD,IAAIxI,IAAI,CAAC,cAAD,CAAJ,KAAyBzU,SAAzB,IAAsCyU,IAAI,CAAC,cAAD,CAAJ,CAAqB,aAArB,MAAwCzU,SAAlF,EAA6F;YAC3FyB,QAAQ,CAACwb,YAAT,GAAwBI,kCAAkC,CACxDve,sBAAsB,CAAC2V,IAAI,CAAC,cAAD,CAAJ,CAAqB,aAArB,CAAD,CADkC,EAExDhV,OAFwD,CAA1D;UAID;;UACD;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAlCuB;AAmCxB,CArCM;;AAuCP,IAAMob,kDAAkD,GAAG,UACzDpK,MADyD,EAEzDhT,OAFyD,EAElC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM6J,sCAAsC,GAAG,UACpD7K,MADoD,EAEpDhT,OAFoD,EAE7B;EAAA;;;MAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;QACzD;QAAA;QAAA,EAAO6K,2CAA2C,CAAC9K,MAAD,EAAShT,OAAT,CAAlD;MACD;;MACKgC,QAAQ,GAA2B;QACvCmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADS;QAEvC+K,YAAY,EAAExd,SAFyB;QAGvCkQ,IAAI,EAAElQ,SAHiC;QAIvCyD,gBAAgB,EAAEzD,SAJqB;QAKvC+B,YAAY,EAAE/B,SALyB;QAMvCgC,kBAAkB,EAAEhC,SANmB;QAOvCiC,eAAe,EAAEjC,SAPsB;QAQvCkC,eAAe,EAAElC,SARsB;QASvCiQ,aAAa,EAAEjQ,SATwB;QAUvCyd,YAAY,EAAEzd,SAVyB;QAWvCmC,WAAW,EAAEnC,SAX0B;QAYvCsX,YAAY,EAAEtX,SAZyB;QAavCsU,IAAI,EAAEtU,SAbiC;QAcvCuU,UAAU,EAAEvU,SAd2B;QAevCyC,OAAO,EAAEzC,SAf8B;QAgBvC0d,YAAY,EAAE1d,SAhByB;QAiBvCmE,QAAQ,EAAEnE,SAjB6B;QAkBvC2d,WAAW,EAAE3d,SAlB0B;QAmBvCiE,yBAAyB,EAAEjE,SAnBY;QAoBvC8D,cAAc,EAAE9D,SApBuB;QAqBvC+D,yBAAyB,EAAE/D,SArBY;QAsBvC4d,UAAU,EAAE5d,SAtB2B;QAuBvC6d,iBAAiB,EAAE7d,SAvBoB;QAwBvC8S,cAAc,EAAE9S,SAxBuB;QAyBvC8d,OAAO,EAAE9d,SAzB8B;QA0BvCoD,oBAAoB,EAAEpD,SA1BiB;QA2BvCsD,iBAAiB,EAAEtD,SA3BoB;QA4BvCuD,WAAW,EAAEvD,SA5B0B;QA6BvCiD,oBAAoB,EAAEjD,SA7BiB;QA8BvCkD,YAAY,EAAElD,SA9ByB;QA+BvC+d,QAAQ,EAAE/d,SA/B6B;QAgCvC8G,SAAS,EAAE9G,SAhC4B;QAiCvCmD,uBAAuB,EAAEnD;MAjCc,CAAnC;;MAmCN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,qBAAf,MAA0CM,SAA9C,EAAyD;QACvDyB,QAAQ,CAAC6V,YAAT,GAAwB7E,MAAM,CAAC/S,OAAP,CAAe,qBAAf,MAA0C,MAAlE;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,eAAf,MAAoCM,SAAxC,EAAmD;QACjDyB,QAAQ,CAAC+b,YAAT,GAAwB/K,MAAM,CAAC/S,OAAP,CAAe,eAAf,CAAxB;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;QACpDyB,QAAQ,CAAC8S,UAAT,GAAsB9B,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAAtB;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,eAAf,MAAoCM,SAAxC,EAAmD;QACjDyB,QAAQ,CAACqc,OAAT,GAAmBrL,MAAM,CAAC/S,OAAP,CAAe,eAAf,CAAnB;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,eAAf,MAAoCM,SAAxC,EAAmD;QACjDyB,QAAQ,CAACic,YAAT,GAAwB,IAAIjI,IAAJ,CAAShD,MAAM,CAAC/S,OAAP,CAAe,eAAf,CAAT,CAAxB;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,gBAAf,MAAqCM,SAAzC,EAAoD;QAClDyB,QAAQ,CAACwO,aAAT,GAAyB+N,QAAQ,CAACvL,MAAM,CAAC/S,OAAP,CAAe,gBAAf,CAAD,EAAmC,EAAnC,CAAjC;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,MAAf,MAA2BM,SAA/B,EAA0C;QACxCyB,QAAQ,CAAC6S,IAAT,GAAgB7B,MAAM,CAAC/S,OAAP,CAAe,MAAf,CAAhB;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,oBAAf,MAAyCM,SAA7C,EAAwD;QACtDyB,QAAQ,CAACkc,WAAT,GAAuBK,QAAQ,CAACvL,MAAM,CAAC/S,OAAP,CAAe,oBAAf,CAAD,EAAuC,EAAvC,CAA/B;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;QACpDyB,QAAQ,CAACqF,SAAT,GAAqB2L,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAArB;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,eAAf,MAAoCM,SAAxC,EAAmD;QACjDyB,QAAQ,CAACM,YAAT,GAAwB0Q,MAAM,CAAC/S,OAAP,CAAe,eAAf,CAAxB;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,qBAAf,MAA0CM,SAA9C,EAAyD;QACvDyB,QAAQ,CAACO,kBAAT,GAA8ByQ,MAAM,CAAC/S,OAAP,CAAe,qBAAf,CAA9B;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;QACpDyB,QAAQ,CAACQ,eAAT,GAA2BwQ,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAA3B;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;QACpDyB,QAAQ,CAACS,eAAT,GAA2BuQ,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAA3B;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,eAAf,MAAoCM,SAAxC,EAAmD;QACjDyB,QAAQ,CAACgc,YAAT,GAAwBhL,MAAM,CAAC/S,OAAP,CAAe,eAAf,CAAxB;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,cAAf,MAAmCM,SAAvC,EAAkD;QAChDyB,QAAQ,CAACU,WAAT,GAAuBsQ,MAAM,CAAC/S,OAAP,CAAe,cAAf,CAAvB;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,SAAf,MAA8BM,SAAlC,EAA6C;QAC3CyB,QAAQ,CAACgB,OAAT,GAAmB,IAAIgT,IAAJ,CAAShD,MAAM,CAAC/S,OAAP,CAAe,SAAf,CAAT,CAAnB;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iCAAf,MAAsDM,SAA1D,EAAqE;QACnEyB,QAAQ,CAAC0B,uBAAT,GAAmCsP,MAAM,CAAC/S,OAAP,CAAe,iCAAf,CAAnC;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,8BAAf,MAAmDM,SAAvD,EAAkE;QAChEyB,QAAQ,CAACwB,oBAAT,GAAgCwP,MAAM,CAAC/S,OAAP,CAAe,8BAAf,CAAhC;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsEM,SAA1E,EAAqF;QACnFyB,QAAQ,CAAC2B,oBAAT,GAAgCqP,MAAM,CAAC/S,OAAP,CAAe,iDAAf,CAAhC;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,+CAAf,MAAoEM,SAAxE,EAAmF;QACjFyB,QAAQ,CAAC6B,iBAAT,GAA6BmP,MAAM,CAAC/S,OAAP,CAAe,+CAAf,CAA7B;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,6CAAf,MAAkEM,SAAtE,EAAiF;QAC/EyB,QAAQ,CAAC8B,WAAT,GAAuBkP,MAAM,CAAC/S,OAAP,CAAe,6CAAf,CAAvB;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsEM,SAA1E,EAAqF;QACnFyB,QAAQ,CAACgC,gBAAT,GAA4BgP,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsE,MAAlG;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,qBAAf,MAA0CM,SAA9C,EAAyD;QACvDyB,QAAQ,CAACyB,YAAT,GAAwBuP,MAAM,CAAC/S,OAAP,CAAe,qBAAf,CAAxB;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;QACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,0BAAf,MAA+CM,SAAnD,EAA8D;QAC5DyB,QAAQ,CAACoc,iBAAT,GAA6BpL,MAAM,CAAC/S,OAAP,CAAe,0BAAf,CAA7B;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,sBAAf,MAA2CM,SAA/C,EAA0D;QACxDyB,QAAQ,CAACmc,UAAT,GAAsBI,QAAQ,CAACvL,MAAM,CAAC/S,OAAP,CAAe,sBAAf,CAAD,EAAyC,EAAzC,CAA9B;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,qBAAf,MAA0CM,SAA9C,EAAyD;QACvDyB,QAAQ,CAACsc,QAAT,GAAoBC,QAAQ,CAACvL,MAAM,CAAC/S,OAAP,CAAe,qBAAf,CAAD,EAAwC,EAAxC,CAA5B;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,wBAAf,MAA6CM,SAAjD,EAA4D;QAC1DyB,QAAQ,CAACqC,cAAT,GAA0B2O,MAAM,CAAC/S,OAAP,CAAe,wBAAf,CAA1B;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,qCAAf,MAA0DM,SAA9D,EAAyE;QACvEyB,QAAQ,CAACsC,yBAAT,GAAqC,IAAI0R,IAAJ,CAAShD,MAAM,CAAC/S,OAAP,CAAe,qCAAf,CAAT,CAArC;MACD;;MACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,8BAAf,MAAmDM,SAAvD,EAAkE;QAChEyB,QAAQ,CAACwC,yBAAT,GAAqCwO,MAAM,CAAC/S,OAAP,CAAe,8BAAf,CAArC;MACD;;MACD0E,MAAM,CAACC,IAAP,CAAYoO,MAAM,CAAC/S,OAAnB,EAA4Bue,OAA5B,CAAoC,UAACC,MAAD,EAAO;QACzC,IAAIzc,QAAQ,CAAC0C,QAAT,KAAsBnE,SAA1B,EAAqC;UACnCyB,QAAQ,CAAC0C,QAAT,GAAoB,EAApB;QACD;;QACD,IAAI+Z,MAAM,CAACC,UAAP,CAAkB,aAAlB,CAAJ,EAAsC;UACpC1c,QAAQ,CAAC0C,QAAT,CAAkB+Z,MAAM,CAACE,SAAP,CAAiB,EAAjB,CAAlB,IAA0C3L,MAAM,CAAC/S,OAAP,CAAewe,MAAf,CAA1C;QACD;MACF,CAPD;MAQMzJ,IAAI,GAAQhC,MAAM,CAACnR,IAAnB;MACNG,QAAQ,CAACyO,IAAT,GAAgBuE,IAAhB;MACA;MAAA;MAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;GA5IuB;AA6IxB,CA/IM;;AAiJP,IAAM8b,2CAA2C,GAAG,UAClD9K,MADkD,EAElDhT,OAFkD,EAE3B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBE,UAAM6B,SAAN,EAA2C7B,EAF3B,IAAZ;UAKFC,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;UACQL;;;iBACD;cAAA;cAAA;cAAA;;iBACA;cAAA;cAAA;cAAA;;iBAOA;cAAA;cAAA;cAAA;;iBACA;cAAA;cAAA;cAAA;;;;;;;;;UANG;UAAA;UAAA,EAAMod,gDAAgD,CAAClL,YAAD,EAAe1T,OAAf,CAAtD;;;UADNgU,QAAQ,6DACFyB,SADE,KAC4E;YAClFxB,IAAI,EAAEJ,SAD4E;YAElFV,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAFoD,CAD5E,EAAR;UAKA;UAAA;UAAA;;;;UAIM;UAAA;UAAA,EAAM6L,uCAAuC,CAACnL,YAAD,EAAe1T,OAAf,CAA7C;;;UADNgU,QAAQ,6DACFyB,SADE,KACmE;YACzExB,IAAI,EAAEJ,SADmE;YAEzEV,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAF2C,CADnE,EAAR;UAKA;UAAA;UAAA;;;UAEMkB,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;UACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;UACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;YACbD,IAAI,EAAE,KAAGJ,SADI;YAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;YAGbW,MAAM,EAAE,QAHK;YAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAJjB,CADJ,CAAX;;;;UAQEsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxCuB;AAyCxB,CA3CD;;AA6CA,OAAO,IAAM8K,yCAAyC,GAAG,UACvD9L,MADuD,EAEvDhT,OAFuD,EAEhC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO8L,8CAA8C,CAAC/L,MAAD,EAAShT,OAAT,CAArD;UACD;;UACKgC,QAAQ,GAA8B;YAC1CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADY;YAE1C6F,MAAM,EAAEtY,SAFkC;YAG1CuY,KAAK,EAAEvY,SAHmC;YAI1C8S,cAAc,EAAE9S;UAJ0B,CAAtC;;UAMN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACiB;UAAA;UAAA,EAAMwT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC+D,iBAAL,KAA2B,EAA/B,EAAmC;YACjC/W,QAAQ,CAAC6W,MAAT,GAAkB,EAAlB;UACD;;UACD,IAAI7D,IAAI,CAAC,mBAAD,CAAJ,KAA8BzU,SAA9B,IAA2CyU,IAAI,CAAC,mBAAD,CAAJ,CAA0B,OAA1B,MAAuCzU,SAAtF,EAAiG;YAC/FyB,QAAQ,CAAC6W,MAAT,GAAkBG,4BAA4B,CAAC3Z,sBAAsB,CAAC2V,IAAI,CAAC,mBAAD,CAAJ,CAA0B,OAA1B,CAAD,CAAvB,EAA6DhV,OAA7D,CAA9C;UACD;;UACD,IAAIgV,IAAI,CAAC,OAAD,CAAJ,KAAkBzU,SAAtB,EAAiC;YAC/ByB,QAAQ,CAAC8W,KAAT,GAAiBG,2BAA2B,CAACjE,IAAI,CAAC,OAAD,CAAL,EAAgBhV,OAAhB,CAA5C;UACD;;UACD;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAxBuB;AAyBxB,CA3BM;;AA6BP,IAAM+c,8CAA8C,GAAG,UACrD/L,MADqD,EAErDhT,OAFqD,EAE9B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBC,UAAMC,SAAN,EAA2CD,EAF3B,IAAZ;UAKFE,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;UACQL;;;iBACD;cAAA;cAAA;cAAA;;iBACA;cAAA;cAAA;cAAA;;;;;;;;;UAEG;UAAA;UAAA,EAAMqd,uCAAuC,CAACnL,YAAD,EAAe1T,OAAf,CAA7C;;;UADNgU,QAAQ,6DACFJ,SADE,KACmE;YACzEK,IAAI,EAAEJ,SADmE;YAEzEV,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAF2C,CADnE,EAAR;UAKA;UAAA;UAAA;;;UAEMkB,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;UACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;UACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;YACbD,IAAI,EAAE,KAAGJ,SADI;YAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;YAGbW,MAAM,EAAE,QAHK;YAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAJjB,CADJ,CAAX;;;;UAQEsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAhCuB;AAiCxB,CAnCD;;AAqCA,OAAO,IAAMgL,+CAA+C,GAAG,UAC7DhM,MAD6D,EAE7DhT,OAF6D,EAEtC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOgM,oDAAoD,CAACjM,MAAD,EAAShT,OAAT,CAA3D;UACD;;UACKgC,QAAQ,GAAoC;YAChDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADkB;YAEhDpC,SAAS,EAAErQ;UAFqC,CAA5C;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;UACNW,QAAQ,CAAC4O,SAAT,GAAqBsO,yCAAyC,CAAClK,IAAD,EAAOhV,OAAP,CAA9D;UACA;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAXuB;AAYxB,CAdM;;AAgBP,IAAMid,oDAAoD,GAAG,UAC3DjM,MAD2D,EAE3DhT,OAF2D,EAEpC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMmL,uDAAuD,GAAG,UACrEnM,MADqE,EAErEhT,OAFqE,EAE9C;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOmM,4DAA4D,CAACpM,MAAD,EAAShT,OAAT,CAAnE;UACD;;UACKgC,QAAQ,GAA4C;YACxDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CAD0B;YAExDjC,uBAAuB,EAAExQ;UAF+B,CAApD;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;UACNW,QAAQ,CAAC+O,uBAAT,GAAmCsO,6CAA6C,CAACrK,IAAD,EAAOhV,OAAP,CAAhF;UACA;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAXuB;AAYxB,CAdM;;AAgBP,IAAMod,4DAA4D,GAAG,UACnEpM,MADmE,EAEnEhT,OAFmE,EAE5C;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMsL,+CAA+C,GAAG,UAC7DtM,MAD6D,EAE7DhT,OAF6D,EAEtC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOsM,oDAAoD,CAACvM,MAAD,EAAShT,OAAT,CAA3D;UACD;;UACKgC,QAAQ,GAAoC;YAChDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADkB;YAEhD9B,SAAS,EAAE3Q;UAFqC,CAA5C;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;UACNW,QAAQ,CAACkP,SAAT,GAAqBsO,yCAAyC,CAACxK,IAAD,EAAOhV,OAAP,CAA9D;UACA;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAXuB;AAYxB,CAdM;;AAgBP,IAAMud,oDAAoD,GAAG,UAC3DvM,MAD2D,EAE3DhT,OAF2D,EAEpC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMyL,6CAA6C,GAAG,UAC3DzM,MAD2D,EAE3DhT,OAF2D,EAEpC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOyM,kDAAkD,CAAC1M,MAAD,EAAShT,OAAT,CAAzD;UACD;;UACKgC,QAAQ,GAAkC;YAC9CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADgB;YAE9C8J,MAAM,EAAEvc,SAFsC;YAG9C8G,SAAS,EAAE9G;UAHmC,CAA1C;;UAKN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;YACpDyB,QAAQ,CAACqF,SAAT,GAAqB2L,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAArB;UACD;;UACiB;UAAA;UAAA,EAAMwT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC8H,MAAL,KAAgB,EAApB,EAAwB;YACtB9a,QAAQ,CAAC8a,MAAT,GAAkB,EAAlB;UACD;;UACD,IAAI9H,IAAI,CAAC,QAAD,CAAJ,KAAmBzU,SAAnB,IAAgCyU,IAAI,CAAC,QAAD,CAAJ,CAAe,KAAf,MAA0BzU,SAA9D,EAAyE;YACvEyB,QAAQ,CAAC8a,MAAT,GAAkBC,4BAA4B,CAAC1d,sBAAsB,CAAC2V,IAAI,CAAC,QAAD,CAAJ,CAAe,KAAf,CAAD,CAAvB,EAAgDhV,OAAhD,CAA9C;UACD;;UACD;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GApBuB;AAqBxB,CAvBM;;AAyBP,IAAM0d,kDAAkD,GAAG,UACzD1M,MADyD,EAEzDhT,OAFyD,EAElC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM2L,6CAA6C,GAAG,UAC3D3M,MAD2D,EAE3DhT,OAF2D,EAEpC;EAAA;;;MAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;QACzD;QAAA;QAAA,EAAO2M,kDAAkD,CAAC5M,MAAD,EAAShT,OAAT,CAAzD;MACD;;MACKgC,QAAQ,GAAkC;QAC9CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADgB;QAE9CvC,IAAI,EAAElQ,SAFwC;QAG9C8S,cAAc,EAAE9S;MAH8B,CAA1C;;MAKN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;QACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;MACD;;MACK+U,IAAI,GAAQhC,MAAM,CAACnR,IAAnB;MACNG,QAAQ,CAACyO,IAAT,GAAgBuE,IAAhB;MACA;MAAA;MAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;GAfuB;AAgBxB,CAlBM;;AAoBP,IAAM4d,kDAAkD,GAAG,UACzD5M,MADyD,EAEzDhT,OAFyD,EAElC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM6L,iDAAiD,GAAG,UAC/D7M,MAD+D,EAE/DhT,OAF+D,EAExC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO6M,sDAAsD,CAAC9M,MAAD,EAAShT,OAAT,CAA7D;UACD;;UACKgC,QAAQ,GAAsC;YAClDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADoB;YAElD1B,8BAA8B,EAAE/Q;UAFkB,CAA9C;UAIY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;UACNW,QAAQ,CAACsP,8BAAT,GAA0CyO,oDAAoD,CAAC/K,IAAD,EAAOhV,OAAP,CAA9F;UACA;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAXuB;AAYxB,CAdM;;AAgBP,IAAM8d,sDAAsD,GAAG,UAC7D9M,MAD6D,EAE7DhT,OAF6D,EAEtC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMgM,uCAAuC,GAAG,UACrDhN,MADqD,EAErDhT,OAFqD,EAE9B;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOgN,4CAA4C,CAACjN,MAAD,EAAShT,OAAT,CAAnD;UACD;;UACKgC,QAAQ,GAA4B;YACxCmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADU,CAApC;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMie,4CAA4C,GAAG,UACnDjN,MADmD,EAEnDhT,OAFmD,EAE5B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBC,UAAMC,SAAN,EAA2CD,EAF3B,IAAZ;UAKFE,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;UACQL;;;iBACD;cAAA;cAAA;cAAA;;iBACA;cAAA;cAAA;cAAA;;;;;;;;;UAEG;UAAA;UAAA,EAAM0e,0CAA0C,CAACxM,YAAD,EAAe1T,OAAf,CAAhD;;;UADNgU,QAAQ,6DACFJ,SADE,KACsE;YAC5EK,IAAI,EAAEJ,SADsE;YAE5EV,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAF8C,CADtE,EAAR;UAKA;UAAA;UAAA;;;UAEMkB,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;UACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;UACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;YACbD,IAAI,EAAE,KAAGJ,SADI;YAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;YAGbW,MAAM,EAAE,QAHK;YAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAJjB,CADJ,CAAX;;;;UAQEsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAhCuB;AAiCxB,CAnCD;;AAqCA,OAAO,IAAMmM,uCAAuC,GAAG,UACrDnN,MADqD,EAErDhT,OAFqD,EAE9B;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOmN,4CAA4C,CAACpN,MAAD,EAAShT,OAAT,CAAnD;UACD;;UACKgC,QAAQ,GAA4B;YACxCmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADU;YAExC+K,YAAY,EAAExd,SAF0B;YAGxC8f,aAAa,EAAE9f,SAHyB;YAIxCyD,gBAAgB,EAAEzD,SAJsB;YAKxC+B,YAAY,EAAE/B,SAL0B;YAMxCgC,kBAAkB,EAAEhC,SANoB;YAOxCiC,eAAe,EAAEjC,SAPuB;YAQxCkC,eAAe,EAAElC,SARuB;YASxCiQ,aAAa,EAAEjQ,SATyB;YAUxCmC,WAAW,EAAEnC,SAV2B;YAWxCsX,YAAY,EAAEtX,SAX0B;YAYxCsU,IAAI,EAAEtU,SAZkC;YAaxCuU,UAAU,EAAEvU,SAb4B;YAcxCyC,OAAO,EAAEzC,SAd+B;YAexC0d,YAAY,EAAE1d,SAf0B;YAgBxCmE,QAAQ,EAAEnE,SAhB8B;YAiBxC2d,WAAW,EAAE3d,SAjB2B;YAkBxCiE,yBAAyB,EAAEjE,SAlBa;YAmBxC8D,cAAc,EAAE9D,SAnBwB;YAoBxC+D,yBAAyB,EAAE/D,SApBa;YAqBxC4d,UAAU,EAAE5d,SArB4B;YAsBxC6d,iBAAiB,EAAE7d,SAtBqB;YAuBxC8S,cAAc,EAAE9S,SAvBwB;YAwBxC8d,OAAO,EAAE9d,SAxB+B;YAyBxCoD,oBAAoB,EAAEpD,SAzBkB;YA0BxCsD,iBAAiB,EAAEtD,SA1BqB;YA2BxCuD,WAAW,EAAEvD,SA3B2B;YA4BxCiD,oBAAoB,EAAEjD,SA5BkB;YA6BxCkD,YAAY,EAAElD,SA7B0B;YA8BxC8G,SAAS,EAAE9G,SA9B6B;YA+BxCmD,uBAAuB,EAAEnD;UA/Be,CAApC;;UAiCN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,qBAAf,MAA0CM,SAA9C,EAAyD;YACvDyB,QAAQ,CAAC6V,YAAT,GAAwB7E,MAAM,CAAC/S,OAAP,CAAe,qBAAf,MAA0C,MAAlE;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,eAAf,MAAoCM,SAAxC,EAAmD;YACjDyB,QAAQ,CAAC+b,YAAT,GAAwB/K,MAAM,CAAC/S,OAAP,CAAe,eAAf,CAAxB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;YACpDyB,QAAQ,CAAC8S,UAAT,GAAsB9B,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAAtB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,eAAf,MAAoCM,SAAxC,EAAmD;YACjDyB,QAAQ,CAACqc,OAAT,GAAmBrL,MAAM,CAAC/S,OAAP,CAAe,eAAf,CAAnB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,sBAAf,MAA2CM,SAA/C,EAA0D;YACxDyB,QAAQ,CAACqe,aAAT,GAAyBrN,MAAM,CAAC/S,OAAP,CAAe,sBAAf,CAAzB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,eAAf,MAAoCM,SAAxC,EAAmD;YACjDyB,QAAQ,CAACic,YAAT,GAAwB,IAAIjI,IAAJ,CAAShD,MAAM,CAAC/S,OAAP,CAAe,eAAf,CAAT,CAAxB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,gBAAf,MAAqCM,SAAzC,EAAoD;YAClDyB,QAAQ,CAACwO,aAAT,GAAyB+N,QAAQ,CAACvL,MAAM,CAAC/S,OAAP,CAAe,gBAAf,CAAD,EAAmC,EAAnC,CAAjC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,MAAf,MAA2BM,SAA/B,EAA0C;YACxCyB,QAAQ,CAAC6S,IAAT,GAAgB7B,MAAM,CAAC/S,OAAP,CAAe,MAAf,CAAhB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,oBAAf,MAAyCM,SAA7C,EAAwD;YACtDyB,QAAQ,CAACkc,WAAT,GAAuBK,QAAQ,CAACvL,MAAM,CAAC/S,OAAP,CAAe,oBAAf,CAAD,EAAuC,EAAvC,CAA/B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;YACpDyB,QAAQ,CAACqF,SAAT,GAAqB2L,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAArB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,eAAf,MAAoCM,SAAxC,EAAmD;YACjDyB,QAAQ,CAACM,YAAT,GAAwB0Q,MAAM,CAAC/S,OAAP,CAAe,eAAf,CAAxB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,qBAAf,MAA0CM,SAA9C,EAAyD;YACvDyB,QAAQ,CAACO,kBAAT,GAA8ByQ,MAAM,CAAC/S,OAAP,CAAe,qBAAf,CAA9B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;YACpDyB,QAAQ,CAACQ,eAAT,GAA2BwQ,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAA3B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;YACpDyB,QAAQ,CAACS,eAAT,GAA2BuQ,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAA3B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,cAAf,MAAmCM,SAAvC,EAAkD;YAChDyB,QAAQ,CAACU,WAAT,GAAuBsQ,MAAM,CAAC/S,OAAP,CAAe,cAAf,CAAvB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,SAAf,MAA8BM,SAAlC,EAA6C;YAC3CyB,QAAQ,CAACgB,OAAT,GAAmB,IAAIgT,IAAJ,CAAShD,MAAM,CAAC/S,OAAP,CAAe,SAAf,CAAT,CAAnB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iCAAf,MAAsDM,SAA1D,EAAqE;YACnEyB,QAAQ,CAAC0B,uBAAT,GAAmCsP,MAAM,CAAC/S,OAAP,CAAe,iCAAf,CAAnC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,8BAAf,MAAmDM,SAAvD,EAAkE;YAChEyB,QAAQ,CAACwB,oBAAT,GAAgCwP,MAAM,CAAC/S,OAAP,CAAe,8BAAf,CAAhC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsEM,SAA1E,EAAqF;YACnFyB,QAAQ,CAAC2B,oBAAT,GAAgCqP,MAAM,CAAC/S,OAAP,CAAe,iDAAf,CAAhC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,+CAAf,MAAoEM,SAAxE,EAAmF;YACjFyB,QAAQ,CAAC6B,iBAAT,GAA6BmP,MAAM,CAAC/S,OAAP,CAAe,+CAAf,CAA7B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,6CAAf,MAAkEM,SAAtE,EAAiF;YAC/EyB,QAAQ,CAAC8B,WAAT,GAAuBkP,MAAM,CAAC/S,OAAP,CAAe,6CAAf,CAAvB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsEM,SAA1E,EAAqF;YACnFyB,QAAQ,CAACgC,gBAAT,GAA4BgP,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsE,MAAlG;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,qBAAf,MAA0CM,SAA9C,EAAyD;YACvDyB,QAAQ,CAACyB,YAAT,GAAwBuP,MAAM,CAAC/S,OAAP,CAAe,qBAAf,CAAxB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,0BAAf,MAA+CM,SAAnD,EAA8D;YAC5DyB,QAAQ,CAACoc,iBAAT,GAA6BpL,MAAM,CAAC/S,OAAP,CAAe,0BAAf,CAA7B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,sBAAf,MAA2CM,SAA/C,EAA0D;YACxDyB,QAAQ,CAACmc,UAAT,GAAsBI,QAAQ,CAACvL,MAAM,CAAC/S,OAAP,CAAe,sBAAf,CAAD,EAAyC,EAAzC,CAA9B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,wBAAf,MAA6CM,SAAjD,EAA4D;YAC1DyB,QAAQ,CAACqC,cAAT,GAA0B2O,MAAM,CAAC/S,OAAP,CAAe,wBAAf,CAA1B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,qCAAf,MAA0DM,SAA9D,EAAyE;YACvEyB,QAAQ,CAACsC,yBAAT,GAAqC,IAAI0R,IAAJ,CAAShD,MAAM,CAAC/S,OAAP,CAAe,qCAAf,CAAT,CAArC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,8BAAf,MAAmDM,SAAvD,EAAkE;YAChEyB,QAAQ,CAACwC,yBAAT,GAAqCwO,MAAM,CAAC/S,OAAP,CAAe,8BAAf,CAArC;UACD;;UACD0E,MAAM,CAACC,IAAP,CAAYoO,MAAM,CAAC/S,OAAnB,EAA4Bue,OAA5B,CAAoC,UAACC,MAAD,EAAO;YACzC,IAAIzc,QAAQ,CAAC0C,QAAT,KAAsBnE,SAA1B,EAAqC;cACnCyB,QAAQ,CAAC0C,QAAT,GAAoB,EAApB;YACD;;YACD,IAAI+Z,MAAM,CAACC,UAAP,CAAkB,aAAlB,CAAJ,EAAsC;cACpC1c,QAAQ,CAAC0C,QAAT,CAAkB+Z,MAAM,CAACE,SAAP,CAAiB,EAAjB,CAAlB,IAA0C3L,MAAM,CAAC/S,OAAP,CAAewe,MAAf,CAA1C;YACD;UACF,CAPD;UAQA;UAAA;UAAA,EAAMnL,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAtIuB;AAuIxB,CAzIM;;AA2IP,IAAMoe,4CAA4C,GAAG,UACnDpN,MADmD,EAEnDhT,OAFmD,EAE5B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBC,UAAMC,SAAN,EAA2CD,EAF3B,IAAZ;UAKFE,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;UACQL;;;iBACD;cAAA;cAAA;cAAA;;iBACA;cAAA;cAAA;cAAA;;;;;;;;;UAEG;UAAA;UAAA,EAAMqd,uCAAuC,CAACnL,YAAD,EAAe1T,OAAf,CAA7C;;;UADNgU,QAAQ,6DACFJ,SADE,KACmE;YACzEK,IAAI,EAAEJ,SADmE;YAEzEV,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAF2C,CADnE,EAAR;UAKA;UAAA;UAAA;;;UAEMkB,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;UACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;UACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;YACbD,IAAI,EAAE,KAAGJ,SADI;YAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;YAGbW,MAAM,EAAE,QAHK;YAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAJjB,CADJ,CAAX;;;;UAQEsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAhCuB;AAiCxB,CAnCD;;AAqCA,OAAO,IAAMsM,8DAA8D,GAAG,UAC5EtN,MAD4E,EAE5EhT,OAF4E,EAErD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOsN,mEAAmE,CAACvN,MAAD,EAAShT,OAAT,CAA1E;UACD;;UACKgC,QAAQ,GAAmD;YAC/DmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADiC;YAE/DwN,0BAA0B,EAAEjgB,SAFmC;YAG/D8K,iBAAiB,EAAE9K,SAH4C;YAI/DkgB,WAAW,EAAElgB,SAJkD;YAK/DmgB,qBAAqB,EAAEngB;UALwC,CAA3D;UAOY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAACxH,sBAAL,KAAgC,EAApC,EAAwC;YACtCxL,QAAQ,CAACwe,0BAAT,GAAsC,EAAtC;UACD;;UACD,IAAIxL,IAAI,CAAC,wBAAD,CAAJ,KAAmCzU,SAAvC,EAAkD;YAChDyB,QAAQ,CAACwe,0BAAT,GAAsCG,gDAAgD,CACpFthB,sBAAsB,CAAC2V,IAAI,CAAC,wBAAD,CAAL,CAD8D,EAEpFhV,OAFoF,CAAtF;UAID;;UACD,IAAIgV,IAAI,CAAC,mBAAD,CAAJ,KAA8BzU,SAAlC,EAA6C;YAC3CyB,QAAQ,CAACqJ,iBAAT,GAA6B2J,IAAI,CAAC,mBAAD,CAAjC;UACD;;UACD,IAAIA,IAAI,CAAC,aAAD,CAAJ,KAAwBzU,SAA5B,EAAuC;YACrCyB,QAAQ,CAACye,WAAT,GAAuBzL,IAAI,CAAC,aAAD,CAAJ,IAAuB,MAA9C;UACD;;UACD,IAAIA,IAAI,CAAC,uBAAD,CAAJ,KAAkCzU,SAAtC,EAAiD;YAC/CyB,QAAQ,CAAC0e,qBAAT,GAAiC1L,IAAI,CAAC,uBAAD,CAArC;UACD;;UACD;UAAA;UAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GA/BuB;AAgCxB,CAlCM;;AAoCP,IAAMue,mEAAmE,GAAG,UAC1EvN,MAD0E,EAE1EhT,OAF0E,EAEnD;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM4M,uEAAuE,GAAG,UACrF5N,MADqF,EAErFhT,OAFqF,EAE9D;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO4N,4EAA4E,CAAC7N,MAAD,EAAShT,OAAT,CAAnF;UACD;;UACKgC,QAAQ,GAA4D;YACxEmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CAD0C;YAExE3H,iBAAiB,EAAE9K,SAFqD;YAGxEugB,mCAAmC,EAAEvgB,SAHmC;YAIxEkgB,WAAW,EAAElgB,SAJ2D;YAKxEmgB,qBAAqB,EAAEngB;UALiD,CAApE;UAOY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC,mBAAD,CAAJ,KAA8BzU,SAAlC,EAA6C;YAC3CyB,QAAQ,CAACqJ,iBAAT,GAA6B2J,IAAI,CAAC,mBAAD,CAAjC;UACD;;UACD,IAAIA,IAAI,CAAC/G,+BAAL,KAAyC,EAA7C,EAAiD;YAC/CjM,QAAQ,CAAC8e,mCAAT,GAA+C,EAA/C;UACD;;UACD,IAAI9L,IAAI,CAAC,iCAAD,CAAJ,KAA4CzU,SAAhD,EAA2D;YACzDyB,QAAQ,CAAC8e,mCAAT,GAA+CC,yDAAyD,CACtG1hB,sBAAsB,CAAC2V,IAAI,CAAC,iCAAD,CAAL,CADgF,EAEtGhV,OAFsG,CAAxG;UAID;;UACD,IAAIgV,IAAI,CAAC,aAAD,CAAJ,KAAwBzU,SAA5B,EAAuC;YACrCyB,QAAQ,CAACye,WAAT,GAAuBzL,IAAI,CAAC,aAAD,CAAJ,IAAuB,MAA9C;UACD;;UACD,IAAIA,IAAI,CAAC,uBAAD,CAAJ,KAAkCzU,SAAtC,EAAiD;YAC/CyB,QAAQ,CAAC0e,qBAAT,GAAiC1L,IAAI,CAAC,uBAAD,CAArC;UACD;;UACD;UAAA;UAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GA/BuB;AAgCxB,CAlCM;;AAoCP,IAAM6e,4EAA4E,GAAG,UACnF7N,MADmF,EAEnFhT,OAFmF,EAE5D;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMgN,8DAA8D,GAAG,UAC5EhO,MAD4E,EAE5EhT,OAF4E,EAErD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOgO,mEAAmE,CAACjO,MAAD,EAAShT,OAAT,CAA1E;UACD;;UACKgC,QAAQ,GAAmD;YAC/DmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADiC;YAE/D3H,iBAAiB,EAAE9K,SAF4C;YAG/D2gB,0BAA0B,EAAE3gB,SAHmC;YAI/DkgB,WAAW,EAAElgB,SAJkD;YAK/DmgB,qBAAqB,EAAEngB;UALwC,CAA3D;UAOY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC,mBAAD,CAAJ,KAA8BzU,SAAlC,EAA6C;YAC3CyB,QAAQ,CAACqJ,iBAAT,GAA6B2J,IAAI,CAAC,mBAAD,CAAjC;UACD;;UACD,IAAIA,IAAI,CAAC5G,sBAAL,KAAgC,EAApC,EAAwC;YACtCpM,QAAQ,CAACkf,0BAAT,GAAsC,EAAtC;UACD;;UACD,IAAIlM,IAAI,CAAC,wBAAD,CAAJ,KAAmCzU,SAAvC,EAAkD;YAChDyB,QAAQ,CAACkf,0BAAT,GAAsCC,gDAAgD,CACpF9hB,sBAAsB,CAAC2V,IAAI,CAAC,wBAAD,CAAL,CAD8D,EAEpFhV,OAFoF,CAAtF;UAID;;UACD,IAAIgV,IAAI,CAAC,aAAD,CAAJ,KAAwBzU,SAA5B,EAAuC;YACrCyB,QAAQ,CAACye,WAAT,GAAuBzL,IAAI,CAAC,aAAD,CAAJ,IAAuB,MAA9C;UACD;;UACD,IAAIA,IAAI,CAAC,uBAAD,CAAJ,KAAkCzU,SAAtC,EAAiD;YAC/CyB,QAAQ,CAAC0e,qBAAT,GAAiC1L,IAAI,CAAC,uBAAD,CAArC;UACD;;UACD;UAAA;UAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GA/BuB;AAgCxB,CAlCM;;AAoCP,IAAMif,mEAAmE,GAAG,UAC1EjO,MAD0E,EAE1EhT,OAF0E,EAEnD;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMoN,4DAA4D,GAAG,UAC1EpO,MAD0E,EAE1EhT,OAF0E,EAEnD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOoO,iEAAiE,CAACrO,MAAD,EAAShT,OAAT,CAAxE;UACD;;UACKgC,QAAQ,GAAiD;YAC7DmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CAD+B;YAE7D3H,iBAAiB,EAAE9K,SAF0C;YAG7DkgB,WAAW,EAAElgB,SAHgD;YAI7D+gB,wBAAwB,EAAE/gB,SAJmC;YAK7DmgB,qBAAqB,EAAEngB;UALsC,CAAzD;UAOY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC,mBAAD,CAAJ,KAA8BzU,SAAlC,EAA6C;YAC3CyB,QAAQ,CAACqJ,iBAAT,GAA6B2J,IAAI,CAAC,mBAAD,CAAjC;UACD;;UACD,IAAIA,IAAI,CAAC,aAAD,CAAJ,KAAwBzU,SAA5B,EAAuC;YACrCyB,QAAQ,CAACye,WAAT,GAAuBzL,IAAI,CAAC,aAAD,CAAJ,IAAuB,MAA9C;UACD;;UACD,IAAIA,IAAI,CAACnG,oBAAL,KAA8B,EAAlC,EAAsC;YACpC7M,QAAQ,CAACsf,wBAAT,GAAoC,EAApC;UACD;;UACD,IAAItM,IAAI,CAAC,sBAAD,CAAJ,KAAiCzU,SAArC,EAAgD;YAC9CyB,QAAQ,CAACsf,wBAAT,GAAoCC,8CAA8C,CAChFliB,sBAAsB,CAAC2V,IAAI,CAAC,sBAAD,CAAL,CAD0D,EAEhFhV,OAFgF,CAAlF;UAID;;UACD,IAAIgV,IAAI,CAAC,uBAAD,CAAJ,KAAkCzU,SAAtC,EAAiD;YAC/CyB,QAAQ,CAAC0e,qBAAT,GAAiC1L,IAAI,CAAC,uBAAD,CAArC;UACD;;UACD;UAAA;UAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GA/BuB;AAgCxB,CAlCM;;AAoCP,IAAMqf,iEAAiE,GAAG,UACxErO,MADwE,EAExEhT,OAFwE,EAEjD;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMwN,wCAAwC,GAAG,UACtDxO,MADsD,EAEtDhT,OAFsD,EAE/B;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOwO,6CAA6C,CAACzO,MAAD,EAAShT,OAAT,CAApD;UACD;;UACKgC,QAAQ,GAA6B;YACzCmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADW;YAEzC0O,OAAO,EAAEnhB,SAFgC;YAGzCuY,KAAK,EAAEvY;UAHkC,CAArC;UAKY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC0M,OAAL,KAAiB,EAArB,EAAyB;YACvB1f,QAAQ,CAAC0f,OAAT,GAAmB,EAAnB;UACD;;UACD,IAAI1M,IAAI,CAAC,SAAD,CAAJ,KAAoBzU,SAApB,IAAiCyU,IAAI,CAAC,SAAD,CAAJ,CAAgB,QAAhB,MAA8BzU,SAAnE,EAA8E;YAC5EyB,QAAQ,CAAC0f,OAAT,GAAmBC,6BAA6B,CAACtiB,sBAAsB,CAAC2V,IAAI,CAAC,SAAD,CAAJ,CAAgB,QAAhB,CAAD,CAAvB,EAAoDhV,OAApD,CAAhD;UACD;;UACD,IAAIgV,IAAI,CAAC,OAAD,CAAJ,KAAkBzU,SAAtB,EAAiC;YAC/ByB,QAAQ,CAAC8W,KAAT,GAAiBG,2BAA2B,CAACjE,IAAI,CAAC,OAAD,CAAL,EAAgBhV,OAAhB,CAA5C;UACD;;UACD;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GApBuB;AAqBxB,CAvBM;;AAyBP,IAAMyf,6CAA6C,GAAG,UACpDzO,MADoD,EAEpDhT,OAFoD,EAE7B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM4N,iDAAiD,GAAG,UAC/D5O,MAD+D,EAE/DhT,OAF+D,EAExC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO4O,sDAAsD,CAAC7O,MAAD,EAAShT,OAAT,CAA7D;UACD;;UACKgC,QAAQ,GAAsC;YAClDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADoB;YAElD1S,MAAM,EAAEC,SAF0C;YAGlDuhB,cAAc,EAAEvhB,SAHkC;YAIlDoL,SAAS,EAAEpL,SAJuC;YAKlDsL,YAAY,EAAEtL,SALoC;YAMlDkgB,WAAW,EAAElgB,SANqC;YAOlDuL,SAAS,EAAEvL,SAPuC;YAQlDwL,UAAU,EAAExL,SARsC;YASlDwhB,aAAa,EAAExhB,SATmC;YAUlDyhB,kBAAkB,EAAEzhB,SAV8B;YAWlDyL,MAAM,EAAEzL,SAX0C;YAYlD2L,cAAc,EAAE3L,SAZkC;YAalD0hB,OAAO,EAAE1hB;UAbyC,CAA9C;UAeY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC,QAAD,CAAJ,KAAmBzU,SAAvB,EAAkC;YAChCyB,QAAQ,CAAC1B,MAAT,GAAkB0U,IAAI,CAAC,QAAD,CAAtB;UACD;;UACD,IAAIA,IAAI,CAAC8M,cAAL,KAAwB,EAA5B,EAAgC;YAC9B9f,QAAQ,CAAC8f,cAAT,GAA0B,EAA1B;UACD;;UACD,IAAI9M,IAAI,CAAC,gBAAD,CAAJ,KAA2BzU,SAA/B,EAA0C;YACxCyB,QAAQ,CAAC8f,cAAT,GAA0BI,sCAAsC,CAC9D7iB,sBAAsB,CAAC2V,IAAI,CAAC,gBAAD,CAAL,CADwC,EAE9DhV,OAF8D,CAAhE;UAID;;UACD,IAAIgV,IAAI,CAAC,WAAD,CAAJ,KAAsBzU,SAA1B,EAAqC;YACnCyB,QAAQ,CAAC2J,SAAT,GAAqBqJ,IAAI,CAAC,WAAD,CAAzB;UACD;;UACD,IAAIA,IAAI,CAAC,cAAD,CAAJ,KAAyBzU,SAA7B,EAAwC;YACtCyB,QAAQ,CAAC6J,YAAT,GAAwBmJ,IAAI,CAAC,cAAD,CAA5B;UACD;;UACD,IAAIA,IAAI,CAAC,aAAD,CAAJ,KAAwBzU,SAA5B,EAAuC;YACrCyB,QAAQ,CAACye,WAAT,GAAuBzL,IAAI,CAAC,aAAD,CAAJ,IAAuB,MAA9C;UACD;;UACD,IAAIA,IAAI,CAAC,WAAD,CAAJ,KAAsBzU,SAA1B,EAAqC;YACnCyB,QAAQ,CAAC8J,SAAT,GAAqBkJ,IAAI,CAAC,WAAD,CAAzB;UACD;;UACD,IAAIA,IAAI,CAAC,YAAD,CAAJ,KAAuBzU,SAA3B,EAAsC;YACpCyB,QAAQ,CAAC+J,UAAT,GAAsBwS,QAAQ,CAACvJ,IAAI,CAAC,YAAD,CAAL,CAA9B;UACD;;UACD,IAAIA,IAAI,CAAC,eAAD,CAAJ,KAA0BzU,SAA9B,EAAyC;YACvCyB,QAAQ,CAAC+f,aAAT,GAAyB/M,IAAI,CAAC,eAAD,CAA7B;UACD;;UACD,IAAIA,IAAI,CAAC,oBAAD,CAAJ,KAA+BzU,SAAnC,EAA8C;YAC5CyB,QAAQ,CAACggB,kBAAT,GAA8BhN,IAAI,CAAC,oBAAD,CAAlC;UACD;;UACD,IAAIA,IAAI,CAAC,QAAD,CAAJ,KAAmBzU,SAAvB,EAAkC;YAChCyB,QAAQ,CAACgK,MAAT,GAAkBgJ,IAAI,CAAC,QAAD,CAAtB;UACD;;UACD,IAAIA,IAAI,CAAC,gBAAD,CAAJ,KAA2BzU,SAA/B,EAA0C;YACxCyB,QAAQ,CAACkK,cAAT,GAA0B8I,IAAI,CAAC,gBAAD,CAA9B;UACD;;UACD,IAAIA,IAAI,CAACmN,MAAL,KAAgB,EAApB,EAAwB;YACtBngB,QAAQ,CAACigB,OAAT,GAAmB,EAAnB;UACD;;UACD,IAAIjN,IAAI,CAAC,QAAD,CAAJ,KAAmBzU,SAAvB,EAAkC;YAChCyB,QAAQ,CAACigB,OAAT,GAAmBG,yCAAyC,CAAC/iB,sBAAsB,CAAC2V,IAAI,CAAC,QAAD,CAAL,CAAvB,EAAyChV,OAAzC,CAA5D;UACD;;UACD;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAlEuB;AAmExB,CArEM;;AAuEP,IAAM6f,sDAAsD,GAAG,UAC7D7O,MAD6D,EAE7DhT,OAF6D,EAEtC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMqO,wCAAwC,GAAG,UACtDrP,MADsD,EAEtDhT,OAFsD,EAE/B;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOqP,6CAA6C,CAACtP,MAAD,EAAShT,OAAT,CAApD;UACD;;UACKgC,QAAQ,GAA6B;YACzCmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADW;YAEzC8O,cAAc,EAAEvhB,SAFyB;YAGzCgiB,QAAQ,EAAEhiB,SAH+B;YAIzCoL,SAAS,EAAEpL,SAJ8B;YAKzCsL,YAAY,EAAEtL,SAL2B;YAMzCkgB,WAAW,EAAElgB,SAN4B;YAOzC6L,MAAM,EAAE7L,SAPiC;YAQzC+L,OAAO,EAAE/L,SARgC;YASzCiiB,IAAI,EAAEjiB,SATmC;YAUzCkiB,UAAU,EAAEliB,SAV6B;YAWzCyL,MAAM,EAAEzL;UAXiC,CAArC;UAaY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC8M,cAAL,KAAwB,EAA5B,EAAgC;YAC9B9f,QAAQ,CAAC8f,cAAT,GAA0B,EAA1B;UACD;;UACD,IAAI9M,IAAI,CAAC,gBAAD,CAAJ,KAA2BzU,SAA/B,EAA0C;YACxCyB,QAAQ,CAAC8f,cAAT,GAA0BI,sCAAsC,CAC9D7iB,sBAAsB,CAAC2V,IAAI,CAAC,gBAAD,CAAL,CADwC,EAE9DhV,OAF8D,CAAhE;UAID;;UACD,IAAIgV,IAAI,CAACuN,QAAL,KAAkB,EAAtB,EAA0B;YACxBvgB,QAAQ,CAACugB,QAAT,GAAoB,EAApB;UACD;;UACD,IAAIvN,IAAI,CAAC,UAAD,CAAJ,KAAqBzU,SAAzB,EAAoC;YAClCyB,QAAQ,CAACugB,QAAT,GAAoBG,gCAAgC,CAACrjB,sBAAsB,CAAC2V,IAAI,CAAC,UAAD,CAAL,CAAvB,EAA2ChV,OAA3C,CAApD;UACD;;UACD,IAAIgV,IAAI,CAAC,WAAD,CAAJ,KAAsBzU,SAA1B,EAAqC;YACnCyB,QAAQ,CAAC2J,SAAT,GAAqBqJ,IAAI,CAAC,WAAD,CAAzB;UACD;;UACD,IAAIA,IAAI,CAAC,cAAD,CAAJ,KAAyBzU,SAA7B,EAAwC;YACtCyB,QAAQ,CAAC6J,YAAT,GAAwBmJ,IAAI,CAAC,cAAD,CAA5B;UACD;;UACD,IAAIA,IAAI,CAAC,aAAD,CAAJ,KAAwBzU,SAA5B,EAAuC;YACrCyB,QAAQ,CAACye,WAAT,GAAuBzL,IAAI,CAAC,aAAD,CAAJ,IAAuB,MAA9C;UACD;;UACD,IAAIA,IAAI,CAAC,QAAD,CAAJ,KAAmBzU,SAAvB,EAAkC;YAChCyB,QAAQ,CAACoK,MAAT,GAAkB4I,IAAI,CAAC,QAAD,CAAtB;UACD;;UACD,IAAIA,IAAI,CAAC,SAAD,CAAJ,KAAoBzU,SAAxB,EAAmC;YACjCyB,QAAQ,CAACsK,OAAT,GAAmBiS,QAAQ,CAACvJ,IAAI,CAAC,SAAD,CAAL,CAA3B;UACD;;UACD,IAAIA,IAAI,CAAC,MAAD,CAAJ,KAAiBzU,SAArB,EAAgC;YAC9ByB,QAAQ,CAACwgB,IAAT,GAAgBxN,IAAI,CAAC,MAAD,CAApB;UACD;;UACD,IAAIA,IAAI,CAAC,YAAD,CAAJ,KAAuBzU,SAA3B,EAAsC;YACpCyB,QAAQ,CAACygB,UAAT,GAAsBzN,IAAI,CAAC,YAAD,CAA1B;UACD;;UACD,IAAIA,IAAI,CAAC,QAAD,CAAJ,KAAmBzU,SAAvB,EAAkC;YAChCyB,QAAQ,CAACgK,MAAT,GAAkBgJ,IAAI,CAAC,QAAD,CAAtB;UACD;;UACD;UAAA;UAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GA1DuB;AA2DxB,CA7DM;;AA+DP,IAAMsgB,6CAA6C,GAAG,UACpDtP,MADoD,EAEpDhT,OAFoD,EAE7B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBC,UAAMC,SAAN,EAA2CD,EAF3B,IAAZ;UAKFE,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;UACQL;;;iBACD;cAAA;cAAA;cAAA;;iBACA;cAAA;cAAA;cAAA;;;;;;;;;UAEG;UAAA;UAAA,EAAM0e,0CAA0C,CAACxM,YAAD,EAAe1T,OAAf,CAAhD;;;UADNgU,QAAQ,6DACFJ,SADE,KACsE;YAC5EK,IAAI,EAAEJ,SADsE;YAE5EV,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAF8C,CADtE,EAAR;UAKA;UAAA;UAAA;;;UAEMkB,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;UACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;UACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;YACbD,IAAI,EAAE,KAAGJ,SADI;YAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;YAGbW,MAAM,EAAE,QAHK;YAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAJjB,CADJ,CAAX;;;;UAQEsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAhCuB;AAiCxB,CAnCD;;AAqCA,OAAO,IAAM2O,0CAA0C,GAAG,UACxD3P,MADwD,EAExDhT,OAFwD,EAEjC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO2P,+CAA+C,CAAC5P,MAAD,EAAShT,OAAT,CAAtD;UACD;;UACKgC,QAAQ,GAA+B;YAC3CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADa;YAE3C8O,cAAc,EAAEvhB,SAF2B;YAG3CgiB,QAAQ,EAAEhiB,SAHiC;YAI3C8K,iBAAiB,EAAE9K,SAJwB;YAK3CoL,SAAS,EAAEpL,SALgC;YAM3CsL,YAAY,EAAEtL,SAN6B;YAO3CkgB,WAAW,EAAElgB,SAP8B;YAQ3CsiB,QAAQ,EAAEtiB,SARiC;YAS3C+L,OAAO,EAAE/L,SATkC;YAU3CiiB,IAAI,EAAEjiB,SAVqC;YAW3CmgB,qBAAqB,EAAEngB,SAXoB;YAY3CyL,MAAM,EAAEzL,SAZmC;YAa3CkM,UAAU,EAAElM;UAb+B,CAAvC;UAeY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC8M,cAAL,KAAwB,EAA5B,EAAgC;YAC9B9f,QAAQ,CAAC8f,cAAT,GAA0B,EAA1B;UACD;;UACD,IAAI9M,IAAI,CAAC,gBAAD,CAAJ,KAA2BzU,SAA/B,EAA0C;YACxCyB,QAAQ,CAAC8f,cAAT,GAA0BI,sCAAsC,CAC9D7iB,sBAAsB,CAAC2V,IAAI,CAAC,gBAAD,CAAL,CADwC,EAE9DhV,OAF8D,CAAhE;UAID;;UACD,IAAIgV,IAAI,CAACuN,QAAL,KAAkB,EAAtB,EAA0B;YACxBvgB,QAAQ,CAACugB,QAAT,GAAoB,EAApB;UACD;;UACD,IAAIvN,IAAI,CAAC,UAAD,CAAJ,KAAqBzU,SAAzB,EAAoC;YAClCyB,QAAQ,CAACugB,QAAT,GAAoBG,gCAAgC,CAACrjB,sBAAsB,CAAC2V,IAAI,CAAC,UAAD,CAAL,CAAvB,EAA2ChV,OAA3C,CAApD;UACD;;UACD,IAAIgV,IAAI,CAAC,mBAAD,CAAJ,KAA8BzU,SAAlC,EAA6C;YAC3CyB,QAAQ,CAACqJ,iBAAT,GAA6B2J,IAAI,CAAC,mBAAD,CAAjC;UACD;;UACD,IAAIA,IAAI,CAAC,WAAD,CAAJ,KAAsBzU,SAA1B,EAAqC;YACnCyB,QAAQ,CAAC2J,SAAT,GAAqBqJ,IAAI,CAAC,WAAD,CAAzB;UACD;;UACD,IAAIA,IAAI,CAAC,cAAD,CAAJ,KAAyBzU,SAA7B,EAAwC;YACtCyB,QAAQ,CAAC6J,YAAT,GAAwBmJ,IAAI,CAAC,cAAD,CAA5B;UACD;;UACD,IAAIA,IAAI,CAAC,aAAD,CAAJ,KAAwBzU,SAA5B,EAAuC;YACrCyB,QAAQ,CAACye,WAAT,GAAuBzL,IAAI,CAAC,aAAD,CAAJ,IAAuB,MAA9C;UACD;;UACD,IAAIA,IAAI,CAAC,UAAD,CAAJ,KAAqBzU,SAAzB,EAAoC;YAClCyB,QAAQ,CAAC6gB,QAAT,GAAoBtE,QAAQ,CAACvJ,IAAI,CAAC,UAAD,CAAL,CAA5B;UACD;;UACD,IAAIA,IAAI,CAAC,SAAD,CAAJ,KAAoBzU,SAAxB,EAAmC;YACjCyB,QAAQ,CAACsK,OAAT,GAAmBiS,QAAQ,CAACvJ,IAAI,CAAC,SAAD,CAAL,CAA3B;UACD;;UACD,IAAIA,IAAI,CAAC,MAAD,CAAJ,KAAiBzU,SAArB,EAAgC;YAC9ByB,QAAQ,CAACwgB,IAAT,GAAgBxN,IAAI,CAAC,MAAD,CAApB;UACD;;UACD,IAAIA,IAAI,CAAC,uBAAD,CAAJ,KAAkCzU,SAAtC,EAAiD;YAC/CyB,QAAQ,CAAC0e,qBAAT,GAAiC1L,IAAI,CAAC,uBAAD,CAArC;UACD;;UACD,IAAIA,IAAI,CAAC,QAAD,CAAJ,KAAmBzU,SAAvB,EAAkC;YAChCyB,QAAQ,CAACgK,MAAT,GAAkBgJ,IAAI,CAAC,QAAD,CAAtB;UACD;;UACD,IAAIA,IAAI,CAAC,YAAD,CAAJ,KAAuBzU,SAA3B,EAAsC;YACpCyB,QAAQ,CAACyK,UAAT,GAAsBuI,IAAI,CAAC,YAAD,CAA1B;UACD;;UACD;UAAA;UAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAlEuB;AAmExB,CArEM;;AAuEP,IAAM4gB,+CAA+C,GAAG,UACtD5P,MADsD,EAEtDhT,OAFsD,EAE/B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBC,UAAMC,SAAN,EAA2CD,EAF3B,IAAZ;UAKFE,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;UACQL;;;iBACD;cAAA;cAAA;cAAA;;iBACA;cAAA;cAAA;cAAA;;;;;;;;;UAEG;UAAA;UAAA,EAAM0e,0CAA0C,CAACxM,YAAD,EAAe1T,OAAf,CAAhD;;;UADNgU,QAAQ,6DACFJ,SADE,KACsE;YAC5EK,IAAI,EAAEJ,SADsE;YAE5EV,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAF8C,CADtE,EAAR;UAKA;UAAA;UAAA;;;UAEMkB,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;UACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;UACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;YACbD,IAAI,EAAE,KAAGJ,SADI;YAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;YAGbW,MAAM,EAAE,QAHK;YAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAJjB,CADJ,CAAX;;;;UAQEsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAhCuB;AAiCxB,CAnCD;;AAqCA,OAAO,IAAM8O,+CAA+C,GAAG,UAC7D9P,MAD6D,EAE7DhT,OAF6D,EAEtC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO8P,oDAAoD,CAAC/P,MAAD,EAAShT,OAAT,CAA3D;UACD;;UACKgC,QAAQ,GAAoC;YAChDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADkB;YAEhD8O,cAAc,EAAEvhB,SAFgC;YAGhDyiB,aAAa,EAAEziB,SAHiC;YAIhDoL,SAAS,EAAEpL,SAJqC;YAKhDsL,YAAY,EAAEtL,SALkC;YAMhDkgB,WAAW,EAAElgB,SANmC;YAOhDuL,SAAS,EAAEvL,SAPqC;YAQhD+L,OAAO,EAAE/L,SARuC;YAShDiiB,IAAI,EAAEjiB,SAT0C;YAUhDwhB,aAAa,EAAExhB,SAViC;YAWhD0iB,mBAAmB,EAAE1iB,SAX2B;YAYhDyL,MAAM,EAAEzL,SAZwC;YAahDqM,eAAe,EAAErM,SAb+B;YAchD2iB,QAAQ,EAAE3iB;UAdsC,CAA5C;UAgBY;UAAA;UAAA,EAAMkT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC8M,cAAL,KAAwB,EAA5B,EAAgC;YAC9B9f,QAAQ,CAAC8f,cAAT,GAA0B,EAA1B;UACD;;UACD,IAAI9M,IAAI,CAAC,gBAAD,CAAJ,KAA2BzU,SAA/B,EAA0C;YACxCyB,QAAQ,CAAC8f,cAAT,GAA0BI,sCAAsC,CAC9D7iB,sBAAsB,CAAC2V,IAAI,CAAC,gBAAD,CAAL,CADwC,EAE9DhV,OAF8D,CAAhE;UAID;;UACD,IAAIgV,IAAI,CAAC6C,YAAL,KAAsB,EAA1B,EAA8B;YAC5B7V,QAAQ,CAACghB,aAAT,GAAyB,EAAzB;UACD;;UACD,IAAIhO,IAAI,CAAC,cAAD,CAAJ,KAAyBzU,SAA7B,EAAwC;YACtCyB,QAAQ,CAACghB,aAAT,GAAyBG,mCAAmC,CAAC9jB,sBAAsB,CAAC2V,IAAI,CAAC,cAAD,CAAL,CAAvB,EAA+ChV,OAA/C,CAA5D;UACD;;UACD,IAAIgV,IAAI,CAAC,WAAD,CAAJ,KAAsBzU,SAA1B,EAAqC;YACnCyB,QAAQ,CAAC2J,SAAT,GAAqBqJ,IAAI,CAAC,WAAD,CAAzB;UACD;;UACD,IAAIA,IAAI,CAAC,cAAD,CAAJ,KAAyBzU,SAA7B,EAAwC;YACtCyB,QAAQ,CAAC6J,YAAT,GAAwBmJ,IAAI,CAAC,cAAD,CAA5B;UACD;;UACD,IAAIA,IAAI,CAAC,aAAD,CAAJ,KAAwBzU,SAA5B,EAAuC;YACrCyB,QAAQ,CAACye,WAAT,GAAuBzL,IAAI,CAAC,aAAD,CAAJ,IAAuB,MAA9C;UACD;;UACD,IAAIA,IAAI,CAAC,WAAD,CAAJ,KAAsBzU,SAA1B,EAAqC;YACnCyB,QAAQ,CAAC8J,SAAT,GAAqBkJ,IAAI,CAAC,WAAD,CAAzB;UACD;;UACD,IAAIA,IAAI,CAAC,SAAD,CAAJ,KAAoBzU,SAAxB,EAAmC;YACjCyB,QAAQ,CAACsK,OAAT,GAAmBiS,QAAQ,CAACvJ,IAAI,CAAC,SAAD,CAAL,CAA3B;UACD;;UACD,IAAIA,IAAI,CAAC,MAAD,CAAJ,KAAiBzU,SAArB,EAAgC;YAC9ByB,QAAQ,CAACwgB,IAAT,GAAgBxN,IAAI,CAAC,MAAD,CAApB;UACD;;UACD,IAAIA,IAAI,CAAC,eAAD,CAAJ,KAA0BzU,SAA9B,EAAyC;YACvCyB,QAAQ,CAAC+f,aAAT,GAAyB/M,IAAI,CAAC,eAAD,CAA7B;UACD;;UACD,IAAIA,IAAI,CAAC,qBAAD,CAAJ,KAAgCzU,SAApC,EAA+C;YAC7CyB,QAAQ,CAACihB,mBAAT,GAA+BjO,IAAI,CAAC,qBAAD,CAAnC;UACD;;UACD,IAAIA,IAAI,CAAC,QAAD,CAAJ,KAAmBzU,SAAvB,EAAkC;YAChCyB,QAAQ,CAACgK,MAAT,GAAkBgJ,IAAI,CAAC,QAAD,CAAtB;UACD;;UACD,IAAIA,IAAI,CAAC,iBAAD,CAAJ,KAA4BzU,SAAhC,EAA2C;YACzCyB,QAAQ,CAAC4K,eAAT,GAA2BoI,IAAI,CAAC,iBAAD,CAA/B;UACD;;UACD,IAAIA,IAAI,CAACoO,OAAL,KAAiB,EAArB,EAAyB;YACvBphB,QAAQ,CAACkhB,QAAT,GAAoB,EAApB;UACD;;UACD,IAAIlO,IAAI,CAAC,SAAD,CAAJ,KAAoBzU,SAAxB,EAAmC;YACjCyB,QAAQ,CAACkhB,QAAT,GAAoBG,uCAAuC,CAAChkB,sBAAsB,CAAC2V,IAAI,CAAC,SAAD,CAAL,CAAvB,EAA0ChV,OAA1C,CAA3D;UACD;;UACD;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAzEuB;AA0ExB,CA5EM;;AA8EP,IAAM+gB,oDAAoD,GAAG,UAC3D/P,MAD2D,EAE3DhT,OAF2D,EAEpC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMsP,sCAAsC,GAAG,UACpDtQ,MADoD,EAEpDhT,OAFoD,EAE7B;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOsQ,2CAA2C,CAACvQ,MAAD,EAAShT,OAAT,CAAlD;UACD;;UACKgC,QAAQ,GAA2B;YACvCmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADS;YAEvC8C,SAAS,EAAEvV,SAF4B;YAGvCwV,WAAW,EAAExV,SAH0B;YAIvCD,MAAM,EAAEC,SAJ+B;YAKvCijB,SAAS,EAAEjjB,SAL4B;YAMvCkgB,WAAW,EAAElgB,SAN0B;YAOvCK,GAAG,EAAEL,SAPkC;YAQvCuM,QAAQ,EAAEvM,SAR6B;YASvCkjB,oBAAoB,EAAEljB,SATiB;YAUvCuY,KAAK,EAAEvY,SAVgC;YAWvCwM,gBAAgB,EAAExM,SAXqB;YAYvCmjB,KAAK,EAAEnjB,SAZgC;YAavC8S,cAAc,EAAE9S,SAbuB;YAcvCkD,YAAY,EAAElD,SAdyB;YAevCW,QAAQ,EAAEX;UAf6B,CAAnC;;UAiBN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;YACpDyB,QAAQ,CAAC8T,SAAT,GAAqB,IAAIE,IAAJ,CAAShD,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAAT,CAArB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,qBAAf,MAA0CM,SAA9C,EAAyD;YACvDyB,QAAQ,CAAC+T,WAAT,GAAuB/C,MAAM,CAAC/S,OAAP,CAAe,qBAAf,CAAvB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACiB;UAAA;UAAA,EAAMwT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;;UACN,IAAI2T,IAAI,CAAC,QAAD,CAAJ,KAAmBzU,SAAvB,EAAkC;YAChCyB,QAAQ,CAAC1B,MAAT,GAAkB0U,IAAI,CAAC,QAAD,CAAtB;UACD;;UACD,IAAIA,IAAI,CAAC,WAAD,CAAJ,KAAsBzU,SAA1B,EAAqC;YACnCyB,QAAQ,CAACwhB,SAAT,GAAqBG,+BAA+B,CAAC3O,IAAI,CAAC,WAAD,CAAL,EAAoBhV,OAApB,CAApD;UACD;;UACD,IAAIgV,IAAI,CAAC,aAAD,CAAJ,KAAwBzU,SAA5B,EAAuC;YACrCyB,QAAQ,CAACye,WAAT,GAAuBzL,IAAI,CAAC,aAAD,CAAJ,IAAuB,MAA9C;UACD;;UACD,IAAIA,IAAI,CAAC,KAAD,CAAJ,KAAgBzU,SAApB,EAA+B;YAC7ByB,QAAQ,CAACpB,GAAT,GAAeoU,IAAI,CAAC,KAAD,CAAnB;UACD;;UACD,IAAIA,IAAI,CAAC,UAAD,CAAJ,KAAqBzU,SAAzB,EAAoC;YAClCyB,QAAQ,CAAC8K,QAAT,GAAoByR,QAAQ,CAACvJ,IAAI,CAAC,UAAD,CAAL,CAA5B;UACD;;UACD,IAAIA,IAAI,CAAC,sBAAD,CAAJ,KAAiCzU,SAArC,EAAgD;YAC9CyB,QAAQ,CAACyhB,oBAAT,GAAgCzO,IAAI,CAAC,sBAAD,CAApC;UACD;;UACD,IAAIA,IAAI,CAAC,OAAD,CAAJ,KAAkBzU,SAAtB,EAAiC;YAC/ByB,QAAQ,CAAC8W,KAAT,GAAiBG,2BAA2B,CAACjE,IAAI,CAAC,OAAD,CAAL,EAAgBhV,OAAhB,CAA5C;UACD;;UACD,IAAIgV,IAAI,CAAC,kBAAD,CAAJ,KAA6BzU,SAAjC,EAA4C;YAC1CyB,QAAQ,CAAC+K,gBAAT,GAA4BiI,IAAI,CAAC,kBAAD,CAAhC;UACD;;UACD,IAAIA,IAAI,CAAC4O,IAAL,KAAc,EAAlB,EAAsB;YACpB5hB,QAAQ,CAAC0hB,KAAT,GAAiB,EAAjB;UACD;;UACD,IAAI1O,IAAI,CAAC,MAAD,CAAJ,KAAiBzU,SAArB,EAAgC;YAC9ByB,QAAQ,CAAC0hB,KAAT,GAAiBG,2BAA2B,CAACxkB,sBAAsB,CAAC2V,IAAI,CAAC,MAAD,CAAL,CAAvB,EAAuChV,OAAvC,CAA5C;UACD;;UACD,IAAIgV,IAAI,CAAC,cAAD,CAAJ,KAAyBzU,SAA7B,EAAwC;YACtCyB,QAAQ,CAACyB,YAAT,GAAwBuR,IAAI,CAAC,cAAD,CAA5B;UACD;;UACD,IAAIA,IAAI,CAAC,UAAD,CAAJ,KAAqBzU,SAAzB,EAAoC;YAClCyB,QAAQ,CAACd,QAAT,GAAoB8T,IAAI,CAAC,UAAD,CAAxB;UACD;;UACD;UAAA;UAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GApEuB;AAqExB,CAvEM;;AAyEP,IAAMuhB,2CAA2C,GAAG,UAClDvQ,MADkD,EAElDhT,OAFkD,EAE3B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM8P,6DAA6D,GAAG,UAC3E9Q,MAD2E,EAE3EhT,OAF2E,EAEpD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO8Q,kEAAkE,CAAC/Q,MAAD,EAAShT,OAAT,CAAzE;UACD;;UACKgC,QAAQ,GAAkD;YAC9DmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADgC,CAA1D;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAM+hB,kEAAkE,GAAG,UACzE/Q,MADyE,EAEzEhT,OAFyE,EAElD;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMgQ,yCAAyC,GAAG,UACvDhR,MADuD,EAEvDhT,OAFuD,EAEhC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOgR,8CAA8C,CAACjR,MAAD,EAAShT,OAAT,CAArD;UACD;;UACKgC,QAAQ,GAA8B;YAC1CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADY,CAAtC;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMiiB,8CAA8C,GAAG,UACrDjR,MADqD,EAErDhT,OAFqD,EAE9B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMkQ,4DAA4D,GAAG,UAC1ElR,MAD0E,EAE1EhT,OAF0E,EAEnD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOkR,iEAAiE,CAACnR,MAAD,EAAShT,OAAT,CAAxE;UACD;;UACKgC,QAAQ,GAAiD;YAC7DmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAD+B,CAAzD;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMmiB,iEAAiE,GAAG,UACxEnR,MADwE,EAExEhT,OAFwE,EAEjD;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMoQ,0CAA0C,GAAG,UACxDpR,MADwD,EAExDhT,OAFwD,EAEjC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOoR,+CAA+C,CAACrR,MAAD,EAAShT,OAAT,CAAtD;UACD;;UACKgC,QAAQ,GAA+B;YAC3CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADa,CAAvC;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMqiB,+CAA+C,GAAG,UACtDrR,MADsD,EAEtDhT,OAFsD,EAE/B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMsQ,gDAAgD,GAAG,UAC9DtR,MAD8D,EAE9DhT,OAF8D,EAEvC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOsR,qDAAqD,CAACvR,MAAD,EAAShT,OAAT,CAA5D;UACD;;UACKgC,QAAQ,GAAqC;YACjDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADmB,CAA7C;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMuiB,qDAAqD,GAAG,UAC5DvR,MAD4D,EAE5DhT,OAF4D,EAErC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMwQ,qEAAqE,GAAG,UACnFxR,MADmF,EAEnFhT,OAFmF,EAE5D;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOwR,0EAA0E,CAACzR,MAAD,EAAShT,OAAT,CAAjF;UACD;;UACKgC,QAAQ,GAA0D;YACtEmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADwC,CAAlE;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMyiB,0EAA0E,GAAG,UACjFzR,MADiF,EAEjFhT,OAFiF,EAE1D;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM0Q,4DAA4D,GAAG,UAC1E1R,MAD0E,EAE1EhT,OAF0E,EAEnD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO0R,iEAAiE,CAAC3R,MAAD,EAAShT,OAAT,CAAxE;UACD;;UACKgC,QAAQ,GAAiD;YAC7DmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAD+B,CAAzD;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAM2iB,iEAAiE,GAAG,UACxE3R,MADwE,EAExEhT,OAFwE,EAEjD;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM4Q,4DAA4D,GAAG,UAC1E5R,MAD0E,EAE1EhT,OAF0E,EAEnD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO4R,iEAAiE,CAAC7R,MAAD,EAAShT,OAAT,CAAxE;UACD;;UACKgC,QAAQ,GAAiD;YAC7DmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAD+B,CAAzD;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAM6iB,iEAAiE,GAAG,UACxE7R,MADwE,EAExEhT,OAFwE,EAEjD;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM8Q,6CAA6C,GAAG,UAC3D9R,MAD2D,EAE3DhT,OAF2D,EAEpC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO8R,kDAAkD,CAAC/R,MAAD,EAAShT,OAAT,CAAzD;UACD;;UACKgC,QAAQ,GAAkC;YAC9CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADgB,CAA1C;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAM+iB,kDAAkD,GAAG,UACzD/R,MADyD,EAEzDhT,OAFyD,EAElC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMgR,0DAA0D,GAAG,UACxEhS,MADwE,EAExEhT,OAFwE,EAEjD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOgS,+DAA+D,CAACjS,MAAD,EAAShT,OAAT,CAAtE;UACD;;UACKgC,QAAQ,GAA+C;YAC3DmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAD6B,CAAvD;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMijB,+DAA+D,GAAG,UACtEjS,MADsE,EAEtEhT,OAFsE,EAE/C;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMkR,+DAA+D,GAAG,UAC7ElS,MAD6E,EAE7EhT,OAF6E,EAEtD;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOkS,oEAAoE,CAACnS,MAAD,EAAShT,OAAT,CAA3E;UACD;;UACKgC,QAAQ,GAAoD;YAChEmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADkC,CAA5D;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMmjB,oEAAoE,GAAG,UAC3EnS,MAD2E,EAE3EhT,OAF2E,EAEpD;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMoR,uDAAuD,GAAG,UACrEpS,MADqE,EAErEhT,OAFqE,EAE9C;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOoS,4DAA4D,CAACrS,MAAD,EAAShT,OAAT,CAAnE;UACD;;UACKgC,QAAQ,GAA4C;YACxDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAD0B,CAApD;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMqjB,4DAA4D,GAAG,UACnErS,MADmE,EAEnEhT,OAFmE,EAE5C;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMsR,4CAA4C,GAAG,UAC1DtS,MAD0D,EAE1DhT,OAF0D,EAEnC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOsS,iDAAiD,CAACvS,MAAD,EAAShT,OAAT,CAAxD;UACD;;UACKgC,QAAQ,GAAiC;YAC7CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADe,CAAzC;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMujB,iDAAiD,GAAG,UACxDvS,MADwD,EAExDhT,OAFwD,EAEjC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMwR,iDAAiD,GAAG,UAC/DxS,MAD+D,EAE/DhT,OAF+D,EAExC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOwS,sDAAsD,CAACzS,MAAD,EAAShT,OAAT,CAA7D;UACD;;UACKgC,QAAQ,GAAsC;YAClDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADoB,CAA9C;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMyjB,sDAAsD,GAAG,UAC7DzS,MAD6D,EAE7DhT,OAF6D,EAEtC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM0R,oDAAoD,GAAG,UAClE1S,MADkE,EAElEhT,OAFkE,EAE3C;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO0S,yDAAyD,CAAC3S,MAAD,EAAShT,OAAT,CAAhE;UACD;;UACKgC,QAAQ,GAAyC;YACrDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADuB,CAAjD;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAM2jB,yDAAyD,GAAG,UAChE3S,MADgE,EAEhEhT,OAFgE,EAEzC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM4R,6CAA6C,GAAG,UAC3D5S,MAD2D,EAE3DhT,OAF2D,EAEpC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO4S,kDAAkD,CAAC7S,MAAD,EAAShT,OAAT,CAAzD;UACD;;UACKgC,QAAQ,GAAkC;YAC9CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADgB,CAA1C;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAM6jB,kDAAkD,GAAG,UACzD7S,MADyD,EAEzDhT,OAFyD,EAElC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM8R,gDAAgD,GAAG,UAC9D9S,MAD8D,EAE9DhT,OAF8D,EAEvC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO8S,qDAAqD,CAAC/S,MAAD,EAAShT,OAAT,CAA5D;UACD;;UACKgC,QAAQ,GAAqC;YACjDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADmB,CAA7C;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAM+jB,qDAAqD,GAAG,UAC5D/S,MAD4D,EAE5DhT,OAF4D,EAErC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMgS,6CAA6C,GAAG,UAC3DhT,MAD2D,EAE3DhT,OAF2D,EAEpC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOgT,kDAAkD,CAACjT,MAAD,EAAShT,OAAT,CAAzD;UACD;;UACKgC,QAAQ,GAAkC;YAC9CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADgB,CAA1C;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAMikB,kDAAkD,GAAG,UACzDjT,MADyD,EAEzDhT,OAFyD,EAElC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMkS,sCAAsC,GAAG,UACpDlT,MADoD,EAEpDhT,OAFoD,EAE7B;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOkT,2CAA2C,CAACnT,MAAD,EAAShT,OAAT,CAAlD;UACD;;UACKgC,QAAQ,GAA2B;YACvCmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADS;YAEvChP,gBAAgB,EAAEzD,SAFqB;YAGvCsU,IAAI,EAAEtU,SAHiC;YAIvCuU,UAAU,EAAEvU,SAJ2B;YAKvC8S,cAAc,EAAE9S,SALuB;YAMvCoD,oBAAoB,EAAEpD,SANiB;YAOvCsD,iBAAiB,EAAEtD,SAPoB;YAQvCwD,uBAAuB,EAAExD,SARc;YASvCuD,WAAW,EAAEvD,SAT0B;YAUvCiD,oBAAoB,EAAEjD,SAViB;YAWvC8G,SAAS,EAAE9G;UAX4B,CAAnC;;UAaN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;YACpDyB,QAAQ,CAAC8S,UAAT,GAAsB9B,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAAtB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,MAAf,MAA2BM,SAA/B,EAA0C;YACxCyB,QAAQ,CAAC6S,IAAT,GAAgB7B,MAAM,CAAC/S,OAAP,CAAe,MAAf,CAAhB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,8BAAf,MAAmDM,SAAvD,EAAkE;YAChEyB,QAAQ,CAACwB,oBAAT,GAAgCwP,MAAM,CAAC/S,OAAP,CAAe,8BAAf,CAAhC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;YACpDyB,QAAQ,CAACqF,SAAT,GAAqB2L,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAArB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsEM,SAA1E,EAAqF;YACnFyB,QAAQ,CAAC2B,oBAAT,GAAgCqP,MAAM,CAAC/S,OAAP,CAAe,iDAAf,CAAhC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,+CAAf,MAAoEM,SAAxE,EAAmF;YACjFyB,QAAQ,CAAC6B,iBAAT,GAA6BmP,MAAM,CAAC/S,OAAP,CAAe,+CAAf,CAA7B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,6CAAf,MAAkEM,SAAtE,EAAiF;YAC/EyB,QAAQ,CAAC8B,WAAT,GAAuBkP,MAAM,CAAC/S,OAAP,CAAe,6CAAf,CAAvB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,sCAAf,MAA2DM,SAA/D,EAA0E;YACxEyB,QAAQ,CAAC+B,uBAAT,GAAmCiP,MAAM,CAAC/S,OAAP,CAAe,sCAAf,CAAnC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsEM,SAA1E,EAAqF;YACnFyB,QAAQ,CAACgC,gBAAT,GAA4BgP,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsE,MAAlG;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACD;UAAA;UAAA,EAAMqT,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAjDuB;AAkDxB,CApDM;;AAsDP,IAAMmkB,2CAA2C,GAAG,UAClDnT,MADkD,EAElDhT,OAFkD,EAE3B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMoS,yCAAyC,GAAG,UACvDpT,MADuD,EAEvDhT,OAFuD,EAEhC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOoT,8CAA8C,CAACrT,MAAD,EAAShT,OAAT,CAArD;UACD;;UACKgC,QAAQ,GAA8B;YAC1CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADY;YAE1CK,cAAc,EAAE9S;UAF0B,CAAtC;;UAIN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACD;UAAA;UAAA,EAAMqT,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAbuB;AAcxB,CAhBM;;AAkBP,IAAMqkB,8CAA8C,GAAG,UACrDrT,MADqD,EAErDhT,OAFqD,EAE9B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBC,UAAMC,SAAN,EAA2CD,EAF3B,IAAZ;UAKFE,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;UACQL;;;iBACD;cAAA;cAAA;cAAA;;iBACA;cAAA;cAAA;cAAA;;;;;;;;;UAEG;UAAA;UAAA,EAAMqd,uCAAuC,CAACnL,YAAD,EAAe1T,OAAf,CAA7C;;;UADNgU,QAAQ,6DACFJ,SADE,KACmE;YACzEK,IAAI,EAAEJ,SADmE;YAEzEV,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAF2C,CADnE,EAAR;UAKA;UAAA;UAAA;;;UAEMkB,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;UACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;UACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;YACbD,IAAI,EAAE,KAAGJ,SADI;YAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;YAGbW,MAAM,EAAE,QAHK;YAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAJjB,CADJ,CAAX;;;;UAQEsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAhCuB;AAiCxB,CAnCD;;AAqCA,OAAO,IAAMsS,+CAA+C,GAAG,UAC7DtT,MAD6D,EAE7DhT,OAF6D,EAEtC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOsT,oDAAoD,CAACvT,MAAD,EAAShT,OAAT,CAA3D;UACD;;UACKgC,QAAQ,GAAoC;YAChDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADkB;YAEhDK,cAAc,EAAE9S;UAFgC,CAA5C;;UAIN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACD;UAAA;UAAA,EAAMqT,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAbuB;AAcxB,CAhBM;;AAkBP,IAAMukB,oDAAoD,GAAG,UAC3DvT,MAD2D,EAE3DhT,OAF2D,EAEpC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMwS,uDAAuD,GAAG,UACrExT,MADqE,EAErEhT,OAFqE,EAE9C;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOwT,4DAA4D,CAACzT,MAAD,EAAShT,OAAT,CAAnE;UACD;;UACKgC,QAAQ,GAA4C;YACxDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CAD0B;YAExDK,cAAc,EAAE9S;UAFwC,CAApD;;UAIN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACD;UAAA;UAAA,EAAMqT,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAbuB;AAcxB,CAhBM;;AAkBP,IAAMykB,4DAA4D,GAAG,UACnEzT,MADmE,EAEnEhT,OAFmE,EAE5C;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM0S,+CAA+C,GAAG,UAC7D1T,MAD6D,EAE7DhT,OAF6D,EAEtC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO0T,oDAAoD,CAAC3T,MAAD,EAAShT,OAAT,CAA3D;UACD;;UACKgC,QAAQ,GAAoC;YAChDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADkB;YAEhDK,cAAc,EAAE9S;UAFgC,CAA5C;;UAIN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACD;UAAA;UAAA,EAAMqT,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAbuB;AAcxB,CAhBM;;AAkBP,IAAM2kB,oDAAoD,GAAG,UAC3D3T,MAD2D,EAE3DhT,OAF2D,EAEpC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM4S,6CAA6C,GAAG,UAC3D5T,MAD2D,EAE3DhT,OAF2D,EAEpC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO4T,kDAAkD,CAAC7T,MAAD,EAAShT,OAAT,CAAzD;UACD;;UACKgC,QAAQ,GAAkC;YAC9CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADgB;YAE9C3L,SAAS,EAAE9G;UAFmC,CAA1C;;UAIN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,kBAAf,MAAuCM,SAA3C,EAAsD;YACpDyB,QAAQ,CAACqF,SAAT,GAAqB2L,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAArB;UACD;;UACD;UAAA;UAAA,EAAMqT,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAbuB;AAcxB,CAhBM;;AAkBP,IAAM6kB,kDAAkD,GAAG,UACzD7T,MADyD,EAEzDhT,OAFyD,EAElC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAM8S,iDAAiD,GAAG,UAC/D9T,MAD+D,EAE/DhT,OAF+D,EAExC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAO8T,sDAAsD,CAAC/T,MAAD,EAAShT,OAAT,CAA7D;UACD;;UACKgC,QAAQ,GAAsC;YAClDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UADoB,CAA9C;UAGN;UAAA;UAAA,EAAMM,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GATuB;AAUxB,CAZM;;AAcP,IAAM+kB,sDAAsD,GAAG,UAC7D/T,MAD6D,EAE7DhT,OAF6D,EAEtC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMgT,0CAA0C,GAAG,UACxDhU,MADwD,EAExDhT,OAFwD,EAEjC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOgU,+CAA+C,CAACjU,MAAD,EAAShT,OAAT,CAAtD;UACD;;UACKgC,QAAQ,GAA+B;YAC3CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADa;YAE3CK,cAAc,EAAE9S,SAF2B;YAG3C2mB,iBAAiB,EAAE3mB;UAHwB,CAAvC;;UAKN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,2BAAf,MAAgDM,SAApD,EAA+D;YAC7DyB,QAAQ,CAACklB,iBAAT,GAA6BlU,MAAM,CAAC/S,OAAP,CAAe,2BAAf,CAA7B;UACD;;UACD;UAAA;UAAA,EAAMqT,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAjBuB;AAkBxB,CApBM;;AAsBP,IAAMilB,+CAA+C,GAAG,UACtDjU,MADsD,EAEtDhT,OAFsD,EAE/B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBC,UAAMC,SAAN,EAA2CD,EAF3B,IAAZ;UAKFE,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;UACQL;;;iBACD;cAAA;cAAA;cAAA;;iBACA;cAAA;cAAA;cAAA;;;;;;;;;UAEG;UAAA;UAAA,EAAM2lB,4DAA4D,CAACzT,YAAD,EAAe1T,OAAf,CAAlE;;;UADNgU,QAAQ,6DACFJ,SADE,KACwF;YAC9FK,IAAI,EAAEJ,SADwF;YAE9FV,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAFgE,CADxF,EAAR;UAKA;UAAA;UAAA;;;UAEMkB,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;UACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;UACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;YACbD,IAAI,EAAE,KAAGJ,SADI;YAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;YAGbW,MAAM,EAAE,QAHK;YAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;UAJjB,CADJ,CAAX;;;;UAQEsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAhCuB;AAiCxB,CAnCD;;AAqCA,OAAO,IAAMoT,gDAAgD,GAAG,UAC9DpU,MAD8D,EAE9DhT,OAF8D,EAEX;EAAA;;;MAEnD,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;QACzD;QAAA;QAAA,EAAOoU,qDAAqD,CAACrU,MAAD,EAAShT,OAAT,CAA5D;MACD;;MACKgC,QAAQ,GAAqC;QACjDmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADmB;QAEjDsU,OAAO,EAAE/mB;MAFwC,CAA7C;MAIAyU,IAAI,GAAQhV,OAAO,CAACunB,qBAAR,CAA8BC,WAA9B,CAA0CxU,MAAM,CAACnR,IAAjD,EAAuD,UAAO4lB,KAAP,EAAY;QAAA;;;;;;;;gBAC7EC,SAAS,GAAG/iB,MAAM,CAACC,IAAP,CAAY6iB,KAAZ,EAAmB,CAAnB,CAAZ;gBACAE,YAAY,GAAGhjB,MAAM,CAACijB,OAAP,CAAeH,KAAK,CAACC,SAAD,CAAL,CAAiBznB,OAAhC,EAAyC4E,MAAzC,CAAgD,UAACgjB,YAAD,EAAeC,IAAf,EAAmB;kBACtFD,YAAY,CAACC,IAAI,CAAC,CAAD,CAAL,CAAZ,GAAwBA,IAAI,CAAC,CAAD,CAAJ,CAAQC,KAAhC;kBACA,OAAOF,YAAP;gBACD,CAHoB,EAGlB,EAHkB,CAAf;gBAIAG,YAAY,GAAG;kBACnB/nB,OAAO,EAAE0nB,YADU;kBAEnB9lB,IAAI,EAAE4lB,KAAK,CAACC,SAAD,CAAL,CAAiB7lB;gBAFJ,CAAf;gBAIAomB,WAAW,aACf5mB,GAACqmB,SAAD,IAAaM,YADE,KAAX;gBAGC;gBAAA;gBAAA,EAAME,0DAA0D,CAACD,WAAD,EAAcjoB,OAAd,CAAhE;;;gBAAP;gBAAA;gBAAA,EAAOwB,SAAP;;;SAbmF;MAcpF,CAdiB,CAAZ;MAeNQ,QAAQ,CAACslB,OAAT,GAAmBtS,IAAnB;MACA;MAAA;MAAA,EAAOzB,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;GAzBmD;AA0BpD,CA5BM;;AA8BP,IAAMqlB,qDAAqD,GAAG,UAC5DrU,MAD4D,EAE5DhT,OAF4D,EAErC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMmU,uCAAuC,GAAG,UACrDnV,MADqD,EAErDhT,OAFqD,EAE9B;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOmV,4CAA4C,CAACpV,MAAD,EAAShT,OAAT,CAAnD;UACD;;UACKgC,QAAQ,GAA4B;YACxCmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADU;YAExChP,gBAAgB,EAAEzD,SAFsB;YAGxCsU,IAAI,EAAEtU,SAHkC;YAIxC8S,cAAc,EAAE9S,SAJwB;YAKxCoD,oBAAoB,EAAEpD,SALkB;YAMxCsD,iBAAiB,EAAEtD,SANqB;YAOxCuD,WAAW,EAAEvD,SAP2B;YAQxCiD,oBAAoB,EAAEjD;UARkB,CAApC;;UAUN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,8BAAf,MAAmDM,SAAvD,EAAkE;YAChEyB,QAAQ,CAACwB,oBAAT,GAAgCwP,MAAM,CAAC/S,OAAP,CAAe,8BAAf,CAAhC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,MAAf,MAA2BM,SAA/B,EAA0C;YACxCyB,QAAQ,CAAC6S,IAAT,GAAgB7B,MAAM,CAAC/S,OAAP,CAAe,MAAf,CAAhB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsEM,SAA1E,EAAqF;YACnFyB,QAAQ,CAAC2B,oBAAT,GAAgCqP,MAAM,CAAC/S,OAAP,CAAe,iDAAf,CAAhC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,+CAAf,MAAoEM,SAAxE,EAAmF;YACjFyB,QAAQ,CAAC6B,iBAAT,GAA6BmP,MAAM,CAAC/S,OAAP,CAAe,+CAAf,CAA7B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,6CAAf,MAAkEM,SAAtE,EAAiF;YAC/EyB,QAAQ,CAAC8B,WAAT,GAAuBkP,MAAM,CAAC/S,OAAP,CAAe,6CAAf,CAAvB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsEM,SAA1E,EAAqF;YACnFyB,QAAQ,CAACgC,gBAAT,GAA4BgP,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsE,MAAlG;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACD;UAAA;UAAA,EAAMqT,WAAW,CAACN,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAjB;;;UAAAqB;;UACA;UAAA;UAAA,EAAOkS,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GArCuB;AAsCxB,CAxCM;;AA0CP,IAAMomB,4CAA4C,GAAG,UACnDpV,MADmD,EAEnDhT,OAFmD,EAE5B;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,OAAO,IAAMqU,2CAA2C,GAAG,UACzDrV,MADyD,EAEzDhT,OAFyD,EAElC;EAAA;;;;;UAEvB,IAAIgT,MAAM,CAACC,UAAP,KAAsB,GAAtB,IAA6BD,MAAM,CAACC,UAAP,IAAqB,GAAtD,EAA2D;YACzD;YAAA;YAAA,EAAOqV,gDAAgD,CAACtV,MAAD,EAAShT,OAAT,CAAvD;UACD;;UACKgC,QAAQ,GAAgC;YAC5CmR,SAAS,EAAEC,mBAAmB,CAACJ,MAAD,CADc;YAE5ChP,gBAAgB,EAAEzD,SAF0B;YAG5CgoB,cAAc,EAAEhoB,SAH4B;YAI5C6U,mBAAmB,EAAE7U,SAJuB;YAK5C8S,cAAc,EAAE9S,SAL4B;YAM5CoD,oBAAoB,EAAEpD,SANsB;YAO5CsD,iBAAiB,EAAEtD,SAPyB;YAQ5CuD,WAAW,EAAEvD,SAR+B;YAS5CiD,oBAAoB,EAAEjD;UATsB,CAAxC;;UAWN,IAAIyS,MAAM,CAAC/S,OAAP,CAAe,8BAAf,MAAmDM,SAAvD,EAAkE;YAChEyB,QAAQ,CAACoT,mBAAT,GAA+BpC,MAAM,CAAC/S,OAAP,CAAe,8BAAf,CAA/B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,8BAAf,MAAmDM,SAAvD,EAAkE;YAChEyB,QAAQ,CAACwB,oBAAT,GAAgCwP,MAAM,CAAC/S,OAAP,CAAe,8BAAf,CAAhC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsEM,SAA1E,EAAqF;YACnFyB,QAAQ,CAAC2B,oBAAT,GAAgCqP,MAAM,CAAC/S,OAAP,CAAe,iDAAf,CAAhC;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,+CAAf,MAAoEM,SAAxE,EAAmF;YACjFyB,QAAQ,CAAC6B,iBAAT,GAA6BmP,MAAM,CAAC/S,OAAP,CAAe,+CAAf,CAA7B;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,6CAAf,MAAkEM,SAAtE,EAAiF;YAC/EyB,QAAQ,CAAC8B,WAAT,GAAuBkP,MAAM,CAAC/S,OAAP,CAAe,6CAAf,CAAvB;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsEM,SAA1E,EAAqF;YACnFyB,QAAQ,CAACgC,gBAAT,GAA4BgP,MAAM,CAAC/S,OAAP,CAAe,iDAAf,MAAsE,MAAlG;UACD;;UACD,IAAI+S,MAAM,CAAC/S,OAAP,CAAe,uBAAf,MAA4CM,SAAhD,EAA2D;YACzDyB,QAAQ,CAACqR,cAAT,GAA0BL,MAAM,CAAC/S,OAAP,CAAe,uBAAf,CAA1B;UACD;;UACiB;UAAA;UAAA,EAAMwT,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAZgV,IAAI,GAAQ3T,SAAZ;UACNW,QAAQ,CAACumB,cAAT,GAA0BC,oCAAoC,CAACxT,IAAD,EAAOhV,OAAP,CAA9D;UACA;UAAA;UAAA,EAAOuT,OAAO,CAACC,OAAR,CAAgBxR,QAAhB,CAAP;;;GAvCuB;AAwCxB,CA1CM;;AA4CP,IAAMsmB,gDAAgD,GAAG,UACvDtV,MADuD,EAEvDhT,OAFuD,EAEhC;EAAA;;;;;;;;6BAGlBgT;;UACG;UAAA;UAAA,EAAMS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAFF0T,YAAY,sCAEhBlS,UAAMF,SAAN,EAA2CE,EAF3B,IAAZ;UAKFqS,SAAS,GAAW,cAApB;UACJA,SAAS,GAAGC,oBAAoB,CAACd,MAAD,EAASU,YAAY,CAAC7R,IAAtB,CAAhC;;UACA,QAAQgS,SAAR;YACE;cACQK,UAAU,GAAGR,YAAY,CAAC7R,IAA1B;cACNgS,SAAS,GAAGK,UAAU,CAACC,IAAX,IAAmBD,UAAU,CAACE,IAA9B,IAAsCP,SAAlD;cACAG,QAAQ,GAAGK,sBACNH,UADM,GACI;gBACbD,IAAI,EAAE,KAAGJ,SADI;gBAEbS,OAAO,EAAEJ,UAAU,CAACI,OAAX,IAAsBJ,UAAU,CAACK,OAAjC,IAA4CV,SAFxC;gBAGbW,MAAM,EAAE,QAHK;gBAIbrB,SAAS,EAAEC,mBAAmB,CAACJ,MAAD;cAJjB,CADJ,CAAX;UAJJ;;UAYMsB,OAAO,GAAGN,QAAQ,CAACM,OAAT,IAAoBN,QAAQ,CAACO,OAA7B,IAAwCV,SAAlD;UACNG,QAAQ,CAACM,OAAT,GAAmBA,OAAnB;UACA,OAAON,QAAQ,CAACO,OAAhB;UACA;UAAA;UAAA,EAAOhB,OAAO,CAACkB,MAAR,CAAe9P,MAAM,CAAC+P,MAAP,CAAc,IAAIhU,KAAJ,CAAU4T,OAAV,CAAd,EAAkCN,QAAlC,CAAf,CAAP;;;GAxBuB;AAyBxB,CA3BD;;AA6BA,IAAMkU,0DAA0D,GAAG,UACjElV,MADiE,EAEjEhT,OAFiE,EAE1C;EAAA;;;;;;gBAEnBgT,MAAM,CAAC,SAAD,CAAN,KAAsBzS,YAAtB;UAAA;UAAA;;UAES;UAAA;UAAA,EAAMkoB,wCAAwC,CAACzV,MAAM,CAAC,SAAD,CAAP,EAAoBhT,OAApB,CAA9C;;;UADX;UAAA;UAAA,GACEqB,aAASoU,SAAT,IADF;;;gBAIEzC,MAAM,CAAC,OAAD,CAAN,KAAoBzS,YAApB;UAAA;UAAA;;UAEO;UAAA;UAAA,EAAMmoB,sCAAsC,CAAC1V,MAAM,CAAC,OAAD,CAAP,EAAkBhT,OAAlB,CAA5C;;;UADT;UAAA;UAAA,GACEwB,WAAOiU,SAAP,IADF;;;gBAIEzC,MAAM,CAAC,UAAD,CAAN,KAAuBzS,YAAvB;UAAA;UAAA;;UAEU;UAAA;UAAA,EAAMooB,yCAAyC,CAAC3V,MAAM,CAAC,UAAD,CAAP,EAAqBhT,OAArB,CAA/C;;;UADZ;UAAA;UAAA,GACEsB,cAAUmU,SAAV,IADF;;;gBAIEzC,MAAM,CAAC,MAAD,CAAN,KAAmBzS,YAAnB;UAAA;UAAA;;UAEM;UAAA;UAAA,EAAMqoB,6CAA6C,CAAC5V,MAAM,CAAC,MAAD,CAAP,EAAiBhT,OAAjB,CAAnD;;;UADR;UAAA;UAAA,GACE2T,UAAM8B,SAAN,IADF;;;gBAIEzC,MAAM,CAAC,KAAD,CAAN,KAAkBzS,YAAlB;UAAA;UAAA;;UAEK;UAAA;UAAA,EAAMsoB,oCAAoC,CAAC7V,MAAM,CAAC,KAAD,CAAP,EAAgBhT,OAAhB,CAA1C;;;UADP;UAAA;UAAA,GACE4T,SAAK6B,SAAL,IADF;;;UAIF;UAAA;UAAA,EAAO;YAAEqT,QAAQ,EAAE9V;UAAZ,CAAP;;;GA3BuB;AA4BxB,CA9BD;;AA+BA,IAAM4V,6CAA6C,GAAG,UACpD5V,MADoD,EAEpDhT,OAFoD,EAE7B;EAAA;;;MAEnBgC,QAAQ,GAAsB,EAA9B;MACJ;MAAA;MAAA,EAAOA,QAAP;;GAHuB;AAIxB,CAND;;AAOA,IAAM6mB,oCAAoC,GAAG,UAAO7V,MAAP,EAAoBhT,OAApB,EAA2C;EAAA;;;MAClFgC,QAAQ,GAAa,EAArB;MACJ;MAAA;MAAA,EAAOA,QAAP;;GAFsF;AAGvF,CAHD;;AAIA,IAAM2mB,yCAAyC,GAAG,UAChD3V,MADgD,EAEhDhT,OAFgD,EAEzB;EAAA;;;;;;UAEnBgC,QAAQ,GAAkB,EAA1B;UACJX;UAAmB;UAAA;UAAA,EAAMoS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAnBqB,GAAS0nB,OAAT,GAAmBvnB,SAAnB;UACA;UAAA;UAAA,EAAOQ,QAAP;;;GAJuB;AAKxB,CAPD;;AAQA,IAAMymB,wCAAwC,GAAG,UAC/CzV,MAD+C,EAE/ChT,OAF+C,EAExB;EAAA;;;MAEnBgC,QAAQ,GAAiB,EAAzB;MACJA,QAAQ,CAACslB,OAAT,GAAmBtU,MAAM,CAACnR,IAA1B;MACA;MAAA;MAAA,EAAOG,QAAP;;GAJuB;AAKxB,CAPD;;AAQA,IAAM0mB,sCAAsC,GAAG,UAAO1V,MAAP,EAAoBhT,OAApB,EAA2C;EAAA;;;;;;UACpFgC,QAAQ,GAAe,EAAvB;UACJX;UAAmB;UAAA;UAAA,EAAMoS,SAAS,CAACT,MAAM,CAACnR,IAAR,EAAc7B,OAAd,CAAf;;;UAAnBqB,GAAS0nB,OAAT,GAAmBvnB,SAAnB;UACA;UAAA;UAAA,EAAOQ,QAAP;;;GAHwF;AAIzF,CAJD;;AAKA,IAAM0T,iDAAiD,GAAG,UACxDhC,YADwD,EAExD1T,OAFwD,EAEjC;EAAA;;;MAEjBgC,QAAQ,GAAwB;QACpCiS,IAAI,EAAE,qBAD8B;QAEpCO,MAAM,EAAE,QAF4B;QAGpCrB,SAAS,EAAEC,mBAAmB,CAACM,YAAD;MAHM,CAAhC;MAKAsB,IAAI,GAAQtB,YAAY,CAAC7R,IAAzB;MACN;MAAA;MAAA,EAAOG,QAAP;;GARuB;AASxB,CAXD;;AAaA,IAAM2T,qDAAqD,GAAG,UAC5DjC,YAD4D,EAE5D1T,OAF4D,EAErC;EAAA;;;MAEjBgC,QAAQ,GAA4B;QACxCiS,IAAI,EAAE,yBADkC;QAExCO,MAAM,EAAE,QAFgC;QAGxCrB,SAAS,EAAEC,mBAAmB,CAACM,YAAD;MAHU,CAApC;MAKAsB,IAAI,GAAQtB,YAAY,CAAC7R,IAAzB;MACN;MAAA;MAAA,EAAOG,QAAP;;GARuB;AASxB,CAXD;;AAaA,IAAM4c,gDAAgD,GAAG,UACvDlL,YADuD,EAEvD1T,OAFuD,EAEhC;EAAA;;;MAEjBgC,QAAQ,GAAuB;QACnCiS,IAAI,EAAE,oBAD6B;QAEnCO,MAAM,EAAE,QAF2B;QAGnCrB,SAAS,EAAEC,mBAAmB,CAACM,YAAD,CAHK;QAInCsV,UAAU,EAAEzoB,SAJuB;QAKnCkD,YAAY,EAAElD;MALqB,CAA/B;MAOAyU,IAAI,GAAQtB,YAAY,CAAC7R,IAAzB;;MACN,IAAImT,IAAI,CAAC,YAAD,CAAJ,KAAuBzU,SAA3B,EAAsC;QACpCyB,QAAQ,CAACgnB,UAAT,GAAsBhU,IAAI,CAAC,YAAD,CAA1B;MACD;;MACD,IAAIA,IAAI,CAAC,cAAD,CAAJ,KAAyBzU,SAA7B,EAAwC;QACtCyB,QAAQ,CAACyB,YAAT,GAAwBuR,IAAI,CAAC,cAAD,CAA5B;MACD;;MACD;MAAA;MAAA,EAAOhT,QAAP;;GAhBuB;AAiBxB,CAnBD;;AAqBA,IAAMke,0CAA0C,GAAG,UACjDxM,YADiD,EAEjD1T,OAFiD,EAE1B;EAAA;;;MAEjBgC,QAAQ,GAAiB;QAC7BiS,IAAI,EAAE,cADuB;QAE7BO,MAAM,EAAE,QAFqB;QAG7BrB,SAAS,EAAEC,mBAAmB,CAACM,YAAD;MAHD,CAAzB;MAKAsB,IAAI,GAAQtB,YAAY,CAAC7R,IAAzB;MACN;MAAA;MAAA,EAAOG,QAAP;;GARuB;AASxB,CAXD;;AAaA,IAAM6c,uCAAuC,GAAG,UAC9CnL,YAD8C,EAE9C1T,OAF8C,EAEvB;EAAA;;;MAEjBgC,QAAQ,GAAc;QAC1BiS,IAAI,EAAE,WADoB;QAE1BO,MAAM,EAAE,QAFkB;QAG1BrB,SAAS,EAAEC,mBAAmB,CAACM,YAAD;MAHJ,CAAtB;MAKAsB,IAAI,GAAQtB,YAAY,CAAC7R,IAAzB;MACN;MAAA;MAAA,EAAOG,QAAP;;GARuB;AASxB,CAXD;;AAaA,IAAM+R,0CAA0C,GAAG,UACjDL,YADiD,EAEjD1T,OAFiD,EAE1B;EAAA;;;MAEjBgC,QAAQ,GAAiB;QAC7BiS,IAAI,EAAE,cADuB;QAE7BO,MAAM,EAAE,QAFqB;QAG7BrB,SAAS,EAAEC,mBAAmB,CAACM,YAAD;MAHD,CAAzB;MAKAsB,IAAI,GAAQtB,YAAY,CAAC7R,IAAzB;MACN;MAAA;MAAA,EAAOG,QAAP;;GARuB;AASxB,CAXD;;AAaA,IAAMmlB,4DAA4D,GAAG,UACnEzT,YADmE,EAEnE1T,OAFmE,EAE5C;EAAA;;;MAEjBgC,QAAQ,GAAmC;QAC/CiS,IAAI,EAAE,gCADyC;QAE/CO,MAAM,EAAE,QAFuC;QAG/CrB,SAAS,EAAEC,mBAAmB,CAACM,YAAD;MAHiB,CAA3C;MAKAsB,IAAI,GAAQtB,YAAY,CAAC7R,IAAzB;MACN;MAAA;MAAA,EAAOG,QAAP;;GARuB;AASxB,CAXD;;AAaA,IAAMsT,wDAAwD,GAAG,UAC/D5B,YAD+D,EAE/D1T,OAF+D,EAExC;EAAA;;;MAEjBgC,QAAQ,GAA+B;QAC3CiS,IAAI,EAAE,4BADqC;QAE3CO,MAAM,EAAE,QAFmC;QAG3CrB,SAAS,EAAEC,mBAAmB,CAACM,YAAD;MAHa,CAAvC;MAKAsB,IAAI,GAAQtB,YAAY,CAAC7R,IAAzB;MACN;MAAA;MAAA,EAAOG,QAAP;;GARuB;AASxB,CAXD;;AAaA,IAAMinB,kDAAkD,GAAG,UACzDlpB,KADyD,EAEzDC,OAFyD,EAElC;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,gCAAd,CAAjB;;EACA,IAAIM,KAAK,CAACmpB,mBAAN,KAA8B3oB,SAA9B,IAA2CR,KAAK,CAACmpB,mBAAN,KAA8B,IAA7E,EAAmF;IACjF,IAAMlX,IAAI,GAAG,IAAIvS,SAAJ,CAAc,qBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAACmpB,mBAAP,CAApB,CADH,EAEVhX,QAFU,CAED,qBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAZD;;AAcA,IAAM5E,2CAA2C,GAAG,UAACnN,KAAD,EAAiCC,OAAjC,EAAwD;EAC1G,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,yBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC2Y,MAAN,KAAiBnY,SAAjB,IAA8BR,KAAK,CAAC2Y,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM1G,IAAI,GAAG,IAAIvS,SAAJ,CAAc,wBAAd,EAAwCwS,YAAxC,CAAqD,IAAItS,SAAJ,CAAcI,KAAK,CAAC2Y,MAApB,CAArD,EAAkFxG,QAAlF,CAA2F,QAA3F,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAPD;;AASA,IAAMxE,uCAAuC,GAAG,UAACvN,KAAD,EAA6BC,OAA7B,EAAoD;EAClG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,qBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC8Y,MAAN,KAAiBtY,SAAjB,IAA8BR,KAAK,CAAC8Y,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMuQ,KAAK,GAAGC,0BAA0B,CAACtpB,KAAK,CAAC8Y,MAAP,EAAe7Y,OAAf,CAAxC;IACA,IAAMspB,eAAa,GAAG,IAAI7pB,SAAJ,CAAc,mBAAd,CAAtB;IACA2pB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBsX,eAAa,CAACrX,YAAd,CAA2BD,IAA3B;IACD,CAFD;IAGAF,QAAQ,CAACG,YAAT,CAAsBqX,eAAtB;EACD;;EACD,IAAIvpB,KAAK,CAAC+Y,KAAN,KAAgBvY,SAAhB,IAA6BR,KAAK,CAAC+Y,KAAN,KAAgB,IAAjD,EAAuD;IACrD,IAAM9G,IAAI,GAAGuX,yBAAyB,CAACxpB,KAAK,CAAC+Y,KAAP,EAAc9Y,OAAd,CAAzB,CAAgDkS,QAAhD,CAAyD,OAAzD,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAfD;;AAiBA,IAAM0X,4CAA4C,GAAG,UACnDzpB,KADmD,EAEnDC,OAFmD,EAE5B;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,0BAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC+Y,KAAN,KAAgBvY,SAAhB,IAA6BR,KAAK,CAAC+Y,KAAN,KAAgB,IAAjD,EAAuD;IACrD,IAAM9G,IAAI,GAAG,IAAIvS,SAAJ,CAAc,eAAd,EAA+BwS,YAA/B,CAA4C,IAAItS,SAAJ,CAAcI,KAAK,CAAC+Y,KAApB,CAA5C,EAAwE5G,QAAxE,CAAiF,OAAjF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAVD;;AAYA,IAAM2X,kCAAkC,GAAG,UAAC1pB,KAAD,EAAkBC,OAAlB,EAAyC;EAClF,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAG,IAAIvS,SAAJ,CAAc,eAAd,EAA+BwS,YAA/B,CAA4C,IAAItS,SAAJ,CAAciqB,KAAd,CAA5C,CAAb;IACA,OAAO5X,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAM2X,kCAAkC,GAAG,UAAC9pB,KAAD,EAAkBC,OAAlB,EAAyC;EAClF,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAG,IAAIvS,SAAJ,CAAc,eAAd,EAA+BwS,YAA/B,CAA4C,IAAItS,SAAJ,CAAciqB,KAAd,CAA5C,CAAb;IACA,OAAO5X,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAM4X,kCAAkC,GAAG,UAAC/pB,KAAD,EAAkBC,OAAlB,EAAyC;EAClF,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAG,IAAIvS,SAAJ,CAAc,eAAd,EAA+BwS,YAA/B,CAA4C,IAAItS,SAAJ,CAAciqB,KAAd,CAA5C,CAAb;IACA,OAAO5X,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAM6X,wCAAwC,GAAG,UAAChqB,KAAD,EAA8BC,OAA9B,EAAqD;EACpG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,sBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACiM,MAAN,KAAiBzL,SAAjB,IAA8BR,KAAK,CAACiM,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMgG,IAAI,GAAG,IAAIvS,SAAJ,CAAc,QAAd,EAAwBwS,YAAxB,CAAqC,IAAItS,SAAJ,CAAcI,KAAK,CAACiM,MAApB,CAArC,EAAkEkG,QAAlE,CAA2E,QAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACiqB,IAAN,KAAezpB,SAAf,IAA4BR,KAAK,CAACiqB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAMZ,KAAK,GAAGa,0BAA0B,CAAClqB,KAAK,CAACiqB,IAAP,EAAahqB,OAAb,CAAxC;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,KAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,OAAOF,QAAP;AACD,CAdD;;AAgBA,IAAMrE,0CAA0C,GAAG,UAAC1N,KAAD,EAAgCC,OAAhC,EAAuD;EACxG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,wBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0BR,KAAK,CAAC4F,EAAN,KAAa,IAA3C,EAAiD;IAC/C,IAAMqM,IAAI,GAAG,IAAIvS,SAAJ,CAAc,aAAd,EAA6BwS,YAA7B,CAA0C,IAAItS,SAAJ,CAAcI,KAAK,CAAC4F,EAApB,CAA1C,EAAmEuM,QAAnE,CAA4E,IAA5E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACmqB,MAAN,KAAiB3pB,SAAjB,IAA8BR,KAAK,CAACmqB,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMlY,IAAI,GAAGmY,mCAAmC,CAACpqB,KAAK,CAACmqB,MAAP,EAAelqB,OAAf,CAAnC,CAA2DkS,QAA3D,CAAoE,QAApE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACqqB,oBAAN,KAA+B7pB,SAA/B,IAA4CR,KAAK,CAACqqB,oBAAN,KAA+B,IAA/E,EAAqF;IACnF,IAAMpY,IAAI,GAAGqY,wCAAwC,CAACtqB,KAAK,CAACqqB,oBAAP,EAA6BpqB,OAA7B,CAAxC,CAA8EkS,QAA9E,CACX,sBADW,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAjBD;;AAmBA,IAAMwY,8CAA8C,GAAG,UACrDvqB,KADqD,EAErDC,OAFqD,EAE9B;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,4BAAd,CAAjB;;EACA,IAAIM,KAAK,CAACwqB,mBAAN,KAA8BhqB,SAA9B,IAA2CR,KAAK,CAACwqB,mBAAN,KAA8B,IAA7E,EAAmF;IACjF,IAAMvY,IAAI,GAAGwY,gDAAgD,CAACzqB,KAAK,CAACwqB,mBAAP,EAA4BvqB,OAA5B,CAAhD,CAAqFkS,QAArF,CACX,qBADW,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAZD;;AAcA,IAAMqY,mCAAmC,GAAG,UAACpqB,KAAD,EAAyBC,OAAzB,EAAgD;EAC1F,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,iBAAd,CAAjB;EACAf,eAAe,CAAC+rB,KAAhB,CAAsB1qB,KAAtB,EAA6B;IAC3BiM,MAAM,EAAE,UAAC+b,KAAD,EAAM;MACZ,IAAM/V,IAAI,GAAG,IAAIvS,SAAJ,CAAc,QAAd,EAAwBwS,YAAxB,CAAqC,IAAItS,SAAJ,CAAcooB,KAAd,CAArC,EAA2D7V,QAA3D,CAAoE,QAApE,CAAb;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAJ0B;IAK3B0Y,GAAG,EAAE,UAAC3C,KAAD,EAAM;MACT,IAAM/V,IAAI,GAAG2Y,uBAAuB,CAAC5C,KAAD,EAAQ/nB,OAAR,CAAvB,CAAwCkS,QAAxC,CAAiD,KAAjD,CAAb;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAR0B;IAS3B4Y,GAAG,EAAE,UAAC7C,KAAD,EAAM;MACT,IAAM/V,IAAI,GAAG+X,wCAAwC,CAAChC,KAAD,EAAQ/nB,OAAR,CAAxC,CAAyDkS,QAAzD,CAAkE,KAAlE,CAAb;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAZ0B;IAa3B6Y,CAAC,EAAE,UAAC5W,IAAD,EAAe8T,KAAf,EAAyB;MAC1B,IAAI,EAAEA,KAAK,YAAYtoB,SAAjB,IAA8BsoB,KAAK,YAAYpoB,SAAjD,CAAJ,EAAiE;QAC/D,MAAM,IAAIe,KAAJ,CAAU,mDAAV,CAAN;MACD;;MACDoR,QAAQ,CAACG,YAAT,CAAsB,IAAIxS,SAAJ,CAAcwU,IAAd,EAAoBhC,YAApB,CAAiC8V,KAAjC,CAAtB;IACD;EAlB0B,CAA7B;EAoBA,OAAOjW,QAAP;AACD,CAvBD;;AAyBA,IAAM0Y,gDAAgD,GAAG,UACvDzqB,KADuD,EAEvDC,OAFuD,EAEhC;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,8BAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC+qB,MAAN,KAAiBvqB,SAAjB,IAA8BR,KAAK,CAAC+qB,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM9Y,IAAI,GAAG,IAAIvS,SAAJ,CAAc,6BAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAAC+qB,MAApB,CADH,EAEV5Y,QAFU,CAED,QAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACgrB,eAAN,KAA0BxqB,SAA1B,IAAuCR,KAAK,CAACgrB,eAAN,KAA0B,IAArE,EAA2E;IACzE,IAAM/Y,IAAI,GAAG,IAAIvS,SAAJ,CAAc,WAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACgrB,eAApB,CADH,EAEV7Y,QAFU,CAED,iBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACO,MAAN,KAAiBC,SAAjB,IAA8BR,KAAK,CAACO,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM0R,IAAI,GAAG,IAAIvS,SAAJ,CAAc,YAAd,EAA4BwS,YAA5B,CAAyC,IAAItS,SAAJ,CAAcI,KAAK,CAACO,MAApB,CAAzC,EAAsE4R,QAAtE,CAA+E,QAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACiM,MAAN,KAAiBzL,SAAjB,IAA8BR,KAAK,CAACiM,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMgG,IAAI,GAAG,IAAIvS,SAAJ,CAAc,QAAd,EAAwBwS,YAAxB,CAAqC,IAAItS,SAAJ,CAAcI,KAAK,CAACiM,MAApB,CAArC,EAAkEkG,QAAlE,CAA2E,QAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CA1BD;;AA4BA,IAAMtD,gDAAgD,GAAG,UACvDzO,KADuD,EAEvDC,OAFuD,EAEhC;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,8BAAd,CAAjB;;EACA,IAAIM,KAAK,CAACsa,KAAN,KAAgB9Z,SAAhB,IAA6BR,KAAK,CAACsa,KAAN,KAAgB,IAAjD,EAAuD;IACrD,IAAM+O,KAAK,GAAG4B,kCAAkC,CAACjrB,KAAK,CAACsa,KAAP,EAAcra,OAAd,CAAhD;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,MAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,OAAOF,QAAP;AACD,CAbD;;AAeA,IAAMnD,uCAAuC,GAAG,UAAC5O,KAAD,EAA6BC,OAA7B,EAAoD;EAClG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,qBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC8a,cAAN,KAAyBta,SAAzB,IAAsCR,KAAK,CAAC8a,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAM7I,IAAI,GAAGiZ,kCAAkC,CAAClrB,KAAK,CAAC8a,cAAP,EAAuB7a,OAAvB,CAAlC,CAAkEkS,QAAlE,CAA2E,gBAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAPD;;AASA,IAAM7P,4CAA4C,GAAG,UACnDlC,KADmD,EAEnDC,OAFmD,EAE5B;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,0BAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC2jB,KAAN,KAAgBnjB,SAAhB,IAA6BR,KAAK,CAAC2jB,KAAN,KAAgB,IAAjD,EAAuD;IACrD,IAAM0F,KAAK,GAAG8B,qCAAqC,CAACnrB,KAAK,CAAC2jB,KAAP,EAAc1jB,OAAd,CAAnD;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,MAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,OAAOF,QAAP;AACD,CAbD;;AAeA,IAAMqZ,iCAAiC,GAAG,UAACprB,KAAD,EAAuBC,OAAvB,EAA8C;EACtF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,eAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC8U,IAAN,KAAetU,SAAf,IAA4BR,KAAK,CAAC8U,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAM7C,IAAI,GAAG,IAAIvS,SAAJ,CAAc,MAAd,EAAsBwS,YAAtB,CAAmC,IAAItS,SAAJ,CAAcI,KAAK,CAAC8U,IAApB,CAAnC,EAA8D3C,QAA9D,CAAuE,MAAvE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACwK,UAAN,KAAqBhK,SAArB,IAAkCR,KAAK,CAACwK,UAAN,KAAqB,IAA3D,EAAiE;IAC/D,IAAMyH,IAAI,GAAG,IAAIvS,SAAJ,CAAc,YAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAACwK,UAAP,CAApB,CADH,EAEV2H,QAFU,CAED,YAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAbD;;AAeA,IAAMoZ,qCAAqC,GAAG,UAACnrB,KAAD,EAAyBC,OAAzB,EAAgD;EAC5F,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAGmZ,iCAAiC,CAACvB,KAAD,EAAQ5pB,OAAR,CAA9C;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAMkZ,6BAA6B,GAAG,UAACrrB,KAAD,EAAmBC,OAAnB,EAA0C;EAC9E,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,WAAd,CAAjB;;EACA,IAAIM,KAAK,CAACsrB,2BAAN,KAAsC9qB,SAAtC,IAAmDR,KAAK,CAACsrB,2BAAN,KAAsC,IAA7F,EAAmG;IACjG,IAAMrZ,IAAI,GAAG,IAAIvS,SAAJ,CAAc,6BAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACsrB,2BAApB,CADH,EAEVnZ,QAFU,CAED,6BAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACurB,eAAN,KAA0B/qB,SAA1B,IAAuCR,KAAK,CAACurB,eAAN,KAA0B,IAArE,EAA2E;IACzE,IAAMtZ,IAAI,GAAG,IAAIvS,SAAJ,CAAc,iBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACurB,eAApB,CADH,EAEVpZ,QAFU,CAED,iBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAfD;;AAiBA,IAAMlE,qCAAqC,GAAG,UAAC7N,KAAD,EAA2BC,OAA3B,EAAkD;EAC9F,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,mBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACwZ,SAAN,KAAoBhZ,SAApB,IAAiCR,KAAK,CAACwZ,SAAN,KAAoB,IAAzD,EAA+D;IAC7D,IAAM6P,KAAK,GAAGmC,6BAA6B,CAACxrB,KAAK,CAACwZ,SAAP,EAAkBvZ,OAAlB,CAA3C;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,UAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,OAAOF,QAAP;AACD,CAVD;;AAYA,IAAM0Z,4BAA4B,GAAG,UAACzrB,KAAD,EAAkBC,OAAlB,EAAyC;EAC5E,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,UAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC0rB,cAAN,KAAyBlrB,SAAzB,IAAsCR,KAAK,CAAC0rB,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAMrC,KAAK,GAAGK,kCAAkC,CAAC1pB,KAAK,CAAC0rB,cAAP,EAAuBzrB,OAAvB,CAAhD;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,eAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,IAAIjS,KAAK,CAAC2rB,cAAN,KAAyBnrB,SAAzB,IAAsCR,KAAK,CAAC2rB,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAMtC,KAAK,GAAGS,kCAAkC,CAAC9pB,KAAK,CAAC2rB,cAAP,EAAuB1rB,OAAvB,CAAhD;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,eAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,IAAIjS,KAAK,CAAC4rB,cAAN,KAAyBprB,SAAzB,IAAsCR,KAAK,CAAC4rB,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAMvC,KAAK,GAAGU,kCAAkC,CAAC/pB,KAAK,CAAC4rB,cAAP,EAAuB3rB,OAAvB,CAAhD;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,eAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,IAAIjS,KAAK,CAAC6rB,aAAN,KAAwBrrB,SAAxB,IAAqCR,KAAK,CAAC6rB,aAAN,KAAwB,IAAjE,EAAuE;IACrE,IAAMxC,KAAK,GAAGyC,iCAAiC,CAAC9rB,KAAK,CAAC6rB,aAAP,EAAsB5rB,OAAtB,CAA/C;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,cAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,IAAIjS,KAAK,CAAC+rB,aAAN,KAAwBvrB,SAAxB,IAAqCR,KAAK,CAAC+rB,aAAN,KAAwB,IAAjE,EAAuE;IACrE,IAAM9Z,IAAI,GAAG,IAAIvS,SAAJ,CAAc,eAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAAC+rB,aAAP,CAApB,CADH,EAEV5Z,QAFU,CAED,eAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CArCD;;AAuCA,IAAMyZ,6BAA6B,GAAG,UAACxrB,KAAD,EAAoBC,OAApB,EAA2C;EAC/E,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAGwZ,4BAA4B,CAAC5B,KAAD,EAAQ5pB,OAAR,CAAzC;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAM7M,6CAA6C,GAAG,UACpDtF,KADoD,EAEpDC,OAFoD,EAE7B;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,2BAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC2a,kBAAN,KAA6Bna,SAA7B,IAA0CR,KAAK,CAAC2a,kBAAN,KAA6B,IAA3E,EAAiF;IAC/E,IAAM1I,IAAI,GAAG,IAAIvS,SAAJ,CAAc,0BAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAAC2a,kBAApB,CADH,EAEVxI,QAFU,CAED,oBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAZD;;AAcA,IAAMia,4BAA4B,GAAG,UAAChsB,KAAD,EAAkBC,OAAlB,EAAyC;EAC5E,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,UAAd,CAAjB;;EACA,IAAIM,KAAK,CAACisB,cAAN,KAAyBzrB,SAAzB,IAAsCR,KAAK,CAACisB,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAMha,IAAI,GAAG,IAAIvS,SAAJ,CAAc,gBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACisB,cAApB,CADH,EAEV9Z,QAFU,CAED,gBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACksB,QAAN,KAAmB1rB,SAAnB,IAAgCR,KAAK,CAACksB,QAAN,KAAmB,IAAvD,EAA6D;IAC3D,IAAMja,IAAI,GAAG,IAAIvS,SAAJ,CAAc,UAAd,EAA0BwS,YAA1B,CAAuC,IAAItS,SAAJ,CAAcI,KAAK,CAACksB,QAApB,CAAvC,EAAsE/Z,QAAtE,CAA+E,UAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACmsB,oBAAN,KAA+B3rB,SAA/B,IAA4CR,KAAK,CAACmsB,oBAAN,KAA+B,IAA/E,EAAqF;IACnF,IAAMla,IAAI,GAAG,IAAIvS,SAAJ,CAAc,sBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACmsB,oBAApB,CADH,EAEVha,QAFU,CAED,sBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACosB,eAAN,KAA0B5rB,SAA1B,IAAuCR,KAAK,CAACosB,eAAN,KAA0B,IAArE,EAA2E;IACzE,IAAMna,IAAI,GAAG,IAAIvS,SAAJ,CAAc,iBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACosB,eAApB,CADH,EAEVja,QAFU,CAED,iBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACqsB,cAAN,KAAyB7rB,SAAzB,IAAsCR,KAAK,CAACqsB,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAMpa,IAAI,GAAG,IAAIvS,SAAJ,CAAc,gBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACqsB,cAApB,CADH,EAEVla,QAFU,CAED,gBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACssB,cAAN,KAAyB9rB,SAAzB,IAAsCR,KAAK,CAACssB,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAMra,IAAI,GAAG,IAAIvS,SAAJ,CAAc,gBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACssB,cAApB,CADH,EAEVna,QAFU,CAED,gBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACusB,0BAAN,KAAqC/rB,SAArC,IAAkDR,KAAK,CAACusB,0BAAN,KAAqC,IAA3F,EAAiG;IAC/F,IAAMta,IAAI,GAAG,IAAIvS,SAAJ,CAAc,4BAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAACusB,0BAAP,CAApB,CADH,EAEVpa,QAFU,CAED,4BAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CA3CD;;AA6CA,IAAMya,6BAA6B,GAAG,UAACxsB,KAAD,EAAmBC,OAAnB,EAA0C;EAC9E,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,WAAd,CAAjB;;EACA,IAAIM,KAAK,CAACysB,WAAN,KAAsBjsB,SAAtB,IAAmCR,KAAK,CAACysB,WAAN,KAAsB,IAA7D,EAAmE;IACjE,IAAMxa,IAAI,GAAG,IAAIvS,SAAJ,CAAc,aAAd,EAA6BwS,YAA7B,CAA0C,IAAItS,SAAJ,CAAcI,KAAK,CAACysB,WAApB,CAA1C,EAA4Eta,QAA5E,CAAqF,aAArF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACmsB,oBAAN,KAA+B3rB,SAA/B,IAA4CR,KAAK,CAACmsB,oBAAN,KAA+B,IAA/E,EAAqF;IACnF,IAAMla,IAAI,GAAG,IAAIvS,SAAJ,CAAc,sBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACmsB,oBAApB,CADH,EAEVha,QAFU,CAED,sBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACosB,eAAN,KAA0B5rB,SAA1B,IAAuCR,KAAK,CAACosB,eAAN,KAA0B,IAArE,EAA2E;IACzE,IAAMna,IAAI,GAAG,IAAIvS,SAAJ,CAAc,iBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACosB,eAApB,CADH,EAEVja,QAFU,CAED,iBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACqsB,cAAN,KAAyB7rB,SAAzB,IAAsCR,KAAK,CAACqsB,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAMpa,IAAI,GAAG,IAAIvS,SAAJ,CAAc,gBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACqsB,cAApB,CADH,EAEVla,QAFU,CAED,gBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACssB,cAAN,KAAyB9rB,SAAzB,IAAsCR,KAAK,CAACssB,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAMra,IAAI,GAAG,IAAIvS,SAAJ,CAAc,gBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACssB,cAApB,CADH,EAEVna,QAFU,CAED,gBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CA/BD;;AAiCA,IAAM2a,oCAAoC,GAAG,UAAC1sB,KAAD,EAA0BC,OAA1B,EAAiD;EAC5F,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,kBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC2sB,IAAN,KAAensB,SAAf,IAA4BR,KAAK,CAAC2sB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAM1a,IAAI,GAAG,IAAIvS,SAAJ,CAAc,yBAAd,EAAyCwS,YAAzC,CAAsD,IAAItS,SAAJ,CAAcI,KAAK,CAAC2sB,IAApB,CAAtD,EAAiFxa,QAAjF,CAA0F,MAA1F,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC4sB,IAAN,KAAepsB,SAAf,IAA4BR,KAAK,CAAC4sB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAM3a,IAAI,GAAG,IAAIvS,SAAJ,CAAc,MAAd,EAAsBwS,YAAtB,CAAmC,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAAC4sB,IAAP,CAApB,CAAnC,EAAsEza,QAAtE,CAA+E,MAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC6sB,KAAN,KAAgBrsB,SAAhB,IAA6BR,KAAK,CAAC6sB,KAAN,KAAgB,IAAjD,EAAuD;IACrD,IAAM5a,IAAI,GAAG,IAAIvS,SAAJ,CAAc,OAAd,EAAuBwS,YAAvB,CAAoC,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAAC6sB,KAAP,CAApB,CAApC,EAAwE1a,QAAxE,CAAiF,OAAjF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAfD;;AAiBA,IAAMpK,0BAA0B,GAAG,UAAC3H,KAAD,EAAgBC,OAAhB,EAAuC;EACxE,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,QAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC8sB,OAAN,KAAkBtsB,SAAlB,IAA+BR,KAAK,CAAC8sB,OAAN,KAAkB,IAArD,EAA2D;IACzD,IAAMzD,KAAK,GAAG0D,wCAAwC,CAAC/sB,KAAK,CAAC8sB,OAAP,EAAgB7sB,OAAhB,CAAtD;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,IAAIjS,KAAK,CAACgtB,KAAN,KAAgBxsB,SAAhB,IAA6BR,KAAK,CAACgtB,KAAN,KAAgB,IAAjD,EAAuD;IACrD,IAAM/a,IAAI,GAAG,IAAIvS,SAAJ,CAAc,OAAd,EAAuBwS,YAAvB,CAAoC,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAACgtB,KAAP,CAApB,CAApC,EAAwE7a,QAAxE,CAAiF,OAAjF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAdD;;AAgBA,IAAMkb,2CAA2C,GAAG,UAACjtB,KAAD,EAAiCC,OAAjC,EAAwD;EAC1G,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,yBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC2Y,MAAN,KAAiBnY,SAAjB,IAA8BR,KAAK,CAAC2Y,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM1G,IAAI,GAAG,IAAIvS,SAAJ,CAAc,+BAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAAC2Y,MAApB,CADH,EAEVxG,QAFU,CAED,QAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CATD;;AAWA,IAAMmb,+BAA+B,GAAG,UAACltB,KAAD,EAAqBC,OAArB,EAA4C;EAClF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,aAAd,CAAjB;;EACA,IAAIM,KAAK,CAACO,MAAN,KAAiBC,SAAjB,IAA8BR,KAAK,CAACO,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM0R,IAAI,GAAG,IAAIvS,SAAJ,CAAc,YAAd,EAA4BwS,YAA5B,CAAyC,IAAItS,SAAJ,CAAcI,KAAK,CAACO,MAApB,CAAzC,EAAsE4R,QAAtE,CAA+E,QAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACmtB,OAAN,KAAkB3sB,SAAlB,IAA+BR,KAAK,CAACmtB,OAAN,KAAkB,IAArD,EAA2D;IACzD,IAAMlb,IAAI,GAAG,IAAIvS,SAAJ,CAAc,WAAd,EAA2BwS,YAA3B,CAAwC,IAAItS,SAAJ,CAAcI,KAAK,CAACmtB,OAApB,CAAxC,EAAsEhb,QAAtE,CAA+E,SAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC0D,YAAN,KAAuBlD,SAAvB,IAAoCR,KAAK,CAAC0D,YAAN,KAAuB,IAA/D,EAAqE;IACnE,IAAMuO,IAAI,GAAG,IAAIvS,SAAJ,CAAc,cAAd,EAA8BwS,YAA9B,CAA2C,IAAItS,SAAJ,CAAcI,KAAK,CAAC0D,YAApB,CAA3C,EAA8EyO,QAA9E,CAAuF,cAAvF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACotB,wBAAN,KAAmC5sB,SAAnC,IAAgDR,KAAK,CAACotB,wBAAN,KAAmC,IAAvF,EAA6F;IAC3F,IAAMnb,IAAI,GAAGwX,4CAA4C,CAACzpB,KAAK,CAACotB,wBAAP,EAAiCntB,OAAjC,CAA5C,CAAsFkS,QAAtF,CACX,0BADW,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACqtB,uBAAN,KAAkC7sB,SAAlC,IAA+CR,KAAK,CAACqtB,uBAAN,KAAkC,IAArF,EAA2F;IACzF,IAAMpb,IAAI,GAAGqb,2CAA2C,CAACttB,KAAK,CAACqtB,uBAAP,EAAgCptB,OAAhC,CAA3C,CAAoFkS,QAApF,CACX,yBADW,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACutB,eAAN,KAA0B/sB,SAA1B,IAAuCR,KAAK,CAACutB,eAAN,KAA0B,IAArE,EAA2E;IACzE,IAAMtb,IAAI,GAAGub,mCAAmC,CAACxtB,KAAK,CAACutB,eAAP,EAAwBttB,OAAxB,CAAnC,CAAoEkS,QAApE,CAA6E,iBAA7E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACytB,OAAN,KAAkBjtB,SAAlB,IAA+BR,KAAK,CAACytB,OAAN,KAAkB,IAArD,EAA2D;IACzD,IAAMxb,IAAI,GAAGyb,2BAA2B,CAAC1tB,KAAK,CAACytB,OAAP,EAAgBxtB,OAAhB,CAA3B,CAAoDkS,QAApD,CAA6D,SAA7D,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAnCD;;AAqCA,IAAM4b,8BAA8B,GAAG,UAAC3tB,KAAD,EAAoBC,OAApB,EAA2C;EAChF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,YAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC4tB,cAAN,KAAyBptB,SAAzB,IAAsCR,KAAK,CAAC4tB,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAM3b,IAAI,GAAG,IAAIvS,SAAJ,CAAc,sBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAAC4tB,cAApB,CADH,EAEVzb,QAFU,CAED,gBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC6tB,QAAN,KAAmBrtB,SAAnB,IAAgCR,KAAK,CAAC6tB,QAAN,KAAmB,IAAvD,EAA6D;IAC3D,IAAM5b,IAAI,GAAG,IAAIvS,SAAJ,CAAc,aAAd,EAA6BwS,YAA7B,CAA0C,IAAItS,SAAJ,CAAcI,KAAK,CAAC6tB,QAApB,CAA1C,EAAyE1b,QAAzE,CAAkF,UAAlF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC8tB,UAAN,KAAqBttB,SAArB,IAAkCR,KAAK,CAAC8tB,UAAN,KAAqB,IAA3D,EAAiE;IAC/D,IAAM7b,IAAI,GAAG,IAAIvS,SAAJ,CAAc,YAAd,EAA4BwS,YAA5B,CAAyC,IAAItS,SAAJ,CAAcI,KAAK,CAAC8tB,UAApB,CAAzC,EAA0E3b,QAA1E,CAAmF,YAAnF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAjBD;;AAmBA,IAAMub,2CAA2C,GAAG,UAACttB,KAAD,EAAiCC,OAAjC,EAAwD;EAC1G,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,yBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC+tB,eAAN,KAA0BvtB,SAA1B,IAAuCR,KAAK,CAAC+tB,eAAN,KAA0B,IAArE,EAA2E;IACzE,IAAM9b,IAAI,GAAG,IAAIvS,SAAJ,CAAc,iBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAAC+tB,eAApB,CADH,EAEV5b,QAFU,CAED,iBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CATD;;AAWA,IAAMic,iCAAiC,GAAG,UAAChuB,KAAD,EAAuBC,OAAvB,EAA8C;EACtF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,eAAd,CAAjB;;EACA,IAAIM,KAAK,CAACa,GAAN,KAAcL,SAAd,IAA2BR,KAAK,CAACa,GAAN,KAAc,IAA7C,EAAmD;IACjD,IAAMoR,IAAI,GAAG,IAAIvS,SAAJ,CAAc,WAAd,EAA2BwS,YAA3B,CAAwC,IAAItS,SAAJ,CAAcI,KAAK,CAACa,GAApB,CAAxC,EAAkEsR,QAAlE,CAA2E,KAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAPD;;AASA,IAAMkc,6BAA6B,GAAG,UAACjuB,KAAD,EAA4BC,OAA5B,EAAmD;EACvF,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAG,IAAIvS,SAAJ,CAAc,OAAd,EAAuBwS,YAAvB,CAAoC,IAAItS,SAAJ,CAAciqB,KAAd,CAApC,CAAb;IACA,OAAO5X,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAM+b,6CAA6C,GAAG,UACpDluB,KADoD,EAEpDC,OAFoD,EAE7B;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,2BAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC2Y,MAAN,KAAiBnY,SAAjB,IAA8BR,KAAK,CAAC2Y,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM1G,IAAI,GAAG,IAAIvS,SAAJ,CAAc,iCAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAAC2Y,MAApB,CADH,EAEVxG,QAFU,CAED,QAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAZD;;AAcA,IAAM+Z,iCAAiC,GAAG,UAAC9rB,KAAD,EAAkBC,OAAlB,EAAyC;EACjF,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAG,IAAIvS,SAAJ,CAAc,cAAd,EAA8BwS,YAA9B,CAA2C,IAAItS,SAAJ,CAAciqB,KAAd,CAA3C,CAAb;IACA,OAAO5X,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAMgc,8BAA8B,GAAG,UAACnuB,KAAD,EAAoBC,OAApB,EAA2C;EAChF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,YAAd,CAAjB;;EACA,IAAIM,KAAK,CAACyiB,IAAN,KAAejiB,SAAf,IAA4BR,KAAK,CAACyiB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAMxQ,IAAI,GAAG,IAAIvS,SAAJ,CAAc,gBAAd,EAAgCwS,YAAhC,CAA6C,IAAItS,SAAJ,CAAcI,KAAK,CAACyiB,IAApB,CAA7C,EAAwEtQ,QAAxE,CAAiF,MAAjF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACouB,KAAN,KAAgB5tB,SAAhB,IAA6BR,KAAK,CAACouB,KAAN,KAAgB,IAAjD,EAAuD;IACrD,IAAMnc,IAAI,GAAG,IAAIvS,SAAJ,CAAc,iBAAd,EAAiCwS,YAAjC,CAA8C,IAAItS,SAAJ,CAAcI,KAAK,CAACouB,KAApB,CAA9C,EAA0Ejc,QAA1E,CAAmF,OAAnF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAXD;;AAaA,IAAMsc,kCAAkC,GAAG,UAACruB,KAAD,EAAsBC,OAAtB,EAA6C;EACtF,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAGkc,8BAA8B,CAACtE,KAAD,EAAQ5pB,OAAR,CAA3C;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAMmc,wCAAwC,GAAG,UAACtuB,KAAD,EAA8BC,OAA9B,EAAqD;EACpG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,sBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACuuB,IAAN,KAAe/tB,SAAf,IAA4BR,KAAK,CAACuuB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAMtc,IAAI,GAAG,IAAIvS,SAAJ,CAAc,MAAd,EAAsBwS,YAAtB,CAAmC,IAAItS,SAAJ,CAAcI,KAAK,CAACuuB,IAApB,CAAnC,EAA8Dpc,QAA9D,CAAuE,MAAvE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAPD;;AASA,IAAMyc,yBAAyB,GAAG,UAACxuB,KAAD,EAAeC,OAAf,EAAsC;EACtE,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,OAAd,CAAjB;;EACA,IAAIM,KAAK,CAACyuB,OAAN,KAAkBjuB,SAAlB,IAA+BR,KAAK,CAACyuB,OAAN,KAAkB,IAArD,EAA2D;IACzD,IAAMxc,IAAI,GAAGyc,2BAA2B,CAAC1uB,KAAK,CAACyuB,OAAP,EAAgBxuB,OAAhB,CAA3B,CAAoDkS,QAApD,CAA6D,SAA7D,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC2uB,UAAN,KAAqBnuB,SAArB,IAAkCR,KAAK,CAAC2uB,UAAN,KAAqB,IAA3D,EAAiE;IAC/D,IAAM1c,IAAI,GAAG,IAAIvS,SAAJ,CAAc,YAAd,EAA4BwS,YAA5B,CAAyC,IAAItS,SAAJ,CAAcI,KAAK,CAAC2uB,UAApB,CAAzC,EAA0Exc,QAA1E,CAAmF,YAAnF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAXD;;AAaA,IAAM2c,2BAA2B,GAAG,UAAC1uB,KAAD,EAAiBC,OAAjB,EAAwC;EAC1E,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,SAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC4uB,WAAN,KAAsBpuB,SAAtB,IAAmCR,KAAK,CAAC4uB,WAAN,KAAsB,IAA7D,EAAmE;IACjE,IAAM3c,IAAI,GAAG,IAAIvS,SAAJ,CAAc,aAAd,EAA6BwS,YAA7B,CAA0C,IAAItS,SAAJ,CAAcI,KAAK,CAAC4uB,WAApB,CAA1C,EAA4Ezc,QAA5E,CAAqF,aAArF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC6uB,YAAN,KAAuBruB,SAAvB,IAAoCR,KAAK,CAAC6uB,YAAN,KAAuB,IAA/D,EAAqE;IACnE,IAAM5c,IAAI,GAAG,IAAIvS,SAAJ,CAAc,cAAd,EAA8BwS,YAA9B,CAA2C,IAAItS,SAAJ,CAAcI,KAAK,CAAC6uB,YAApB,CAA3C,EAA8E1c,QAA9E,CAAuF,cAAvF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC8uB,EAAN,KAAatuB,SAAb,IAA0BR,KAAK,CAAC8uB,EAAN,KAAa,IAA3C,EAAiD;IAC/C,IAAM7c,IAAI,GAAG,IAAIvS,SAAJ,CAAc,IAAd,EAAoBwS,YAApB,CAAiC,IAAItS,SAAJ,CAAcI,KAAK,CAAC8uB,EAApB,CAAjC,EAA0D3c,QAA1D,CAAmE,IAAnE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC+uB,GAAN,KAAcvuB,SAAd,IAA2BR,KAAK,CAAC+uB,GAAN,KAAc,IAA7C,EAAmD;IACjD,IAAM9c,IAAI,GAAG,IAAIvS,SAAJ,CAAc,KAAd,EAAqBwS,YAArB,CAAkC,IAAItS,SAAJ,CAAcI,KAAK,CAAC+uB,GAApB,CAAlC,EAA4D5c,QAA5D,CAAqE,KAArE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACgvB,IAAN,KAAexuB,SAAf,IAA4BR,KAAK,CAACgvB,IAAN,KAAe,IAA/C,EAAqD;IACnDjd,QAAQ,CAAC5P,YAAT,CAAsB,UAAtB,EAAkCnC,KAAK,CAACgvB,IAAxC;EACD;;EACD,OAAOjd,QAAP;AACD,CAtBD;;AAwBA,IAAMuX,0BAA0B,GAAG,UAACtpB,KAAD,EAAiBC,OAAjB,EAAwC;EACzE,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAGuc,yBAAyB,CAAC3E,KAAD,EAAQ5pB,OAAR,CAAtC;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,OAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAM8c,iCAAiC,GAAG,UAACjvB,KAAD,EAAuBC,OAAvB,EAA8C;EACtF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,eAAd,CAAjB;;EACA,IAAIM,KAAK,CAACkvB,MAAN,KAAiB1uB,SAAjB,IAA8BR,KAAK,CAACkvB,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMjd,IAAI,GAAG,IAAIvS,SAAJ,CAAc,QAAd,EAAwBwS,YAAxB,CAAqC,IAAItS,SAAJ,CAAcI,KAAK,CAACkvB,MAApB,CAArC,EAAkE/c,QAAlE,CAA2E,QAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAPD;;AASA,IAAMO,sCAAsC,GAAG,UAACtS,KAAD,EAA4BC,OAA5B,EAAmD;EAChG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,oBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACmvB,GAAN,KAAc3uB,SAAd,IAA2BR,KAAK,CAACmvB,GAAN,KAAc,IAA7C,EAAmD;IACjD,IAAMld,IAAI,GAAG+Z,4BAA4B,CAAChsB,KAAK,CAACmvB,GAAP,EAAYlvB,OAAZ,CAA5B,CAAiDkS,QAAjD,CAA0D,KAA1D,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACovB,eAAN,KAA0B5uB,SAA1B,IAAuCR,KAAK,CAACovB,eAAN,KAA0B,IAArE,EAA2E;IACzE,IAAMnd,IAAI,GAAG,IAAIvS,SAAJ,CAAc,iBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACovB,eAApB,CADH,EAEVjd,QAFU,CAED,iBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACqvB,IAAN,KAAe7uB,SAAf,IAA4BR,KAAK,CAACqvB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAMpd,IAAI,GAAGqd,6BAA6B,CAACtvB,KAAK,CAACqvB,IAAP,EAAapvB,OAAb,CAA7B,CAAmDkS,QAAnD,CAA4D,MAA5D,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACuvB,OAAN,KAAkB/uB,SAAlB,IAA+BR,KAAK,CAACuvB,OAAN,KAAkB,IAArD,EAA2D;IACzD,IAAMtd,IAAI,GAAGud,gCAAgC,CAACxvB,KAAK,CAACuvB,OAAP,EAAgBtvB,OAAhB,CAAhC,CAAyDkS,QAAzD,CAAkE,SAAlE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CArBD;;AAuBA,IAAM0d,iDAAiD,GAAG,UACxDzvB,KADwD,EAExDC,OAFwD,EAEjC;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,+BAAd,CAAjB;;EACA,IAAIM,KAAK,CAACiM,MAAN,KAAiBzL,SAAjB,IAA8BR,KAAK,CAACiM,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMgG,IAAI,GAAG,IAAIvS,SAAJ,CAAc,QAAd,EAAwBwS,YAAxB,CAAqC,IAAItS,SAAJ,CAAcI,KAAK,CAACiM,MAApB,CAArC,EAAkEkG,QAAlE,CAA2E,QAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACiqB,IAAN,KAAezpB,SAAf,IAA4BR,KAAK,CAACiqB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAMZ,KAAK,GAAGa,0BAA0B,CAAClqB,KAAK,CAACiqB,IAAP,EAAahqB,OAAb,CAAxC;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,KAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,OAAOF,QAAP;AACD,CAjBD;;AAmBA,IAAM5D,mDAAmD,GAAG,UAC1DnO,KAD0D,EAE1DC,OAF0D,EAEnC;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,iCAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0BR,KAAK,CAAC4F,EAAN,KAAa,IAA3C,EAAiD;IAC/C,IAAMqM,IAAI,GAAG,IAAIvS,SAAJ,CAAc,sBAAd,EAAsCwS,YAAtC,CAAmD,IAAItS,SAAJ,CAAcI,KAAK,CAAC4F,EAApB,CAAnD,EAA4EuM,QAA5E,CAAqF,IAArF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACmqB,MAAN,KAAiB3pB,SAAjB,IAA8BR,KAAK,CAACmqB,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMlY,IAAI,GAAGyd,4CAA4C,CAAC1vB,KAAK,CAACmqB,MAAP,EAAelqB,OAAf,CAA5C,CAAoEkS,QAApE,CAA6E,QAA7E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC2Y,MAAN,KAAiBnY,SAAjB,IAA8BR,KAAK,CAAC2Y,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM1G,IAAI,GAAG,IAAIvS,SAAJ,CAAc,0BAAd,EAA0CwS,YAA1C,CAAuD,IAAItS,SAAJ,CAAcI,KAAK,CAAC2Y,MAApB,CAAvD,EAAoFxG,QAApF,CAA6F,QAA7F,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC2vB,QAAN,KAAmBnvB,SAAnB,IAAgCR,KAAK,CAAC2vB,QAAN,KAAmB,IAAvD,EAA6D;IAC3D,IAAMtG,KAAK,GAAGuG,+BAA+B,CAAC5vB,KAAK,CAAC2vB,QAAP,EAAiB1vB,OAAjB,CAA7C;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,SAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,OAAOF,QAAP;AACD,CAzBD;;AA2BA,IAAM2d,4CAA4C,GAAG,UACnD1vB,KADmD,EAEnDC,OAFmD,EAE5B;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,0BAAd,CAAjB;;EACA,IAAIM,KAAK,CAACiM,MAAN,KAAiBzL,SAAjB,IAA8BR,KAAK,CAACiM,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMgG,IAAI,GAAG,IAAIvS,SAAJ,CAAc,QAAd,EAAwBwS,YAAxB,CAAqC,IAAItS,SAAJ,CAAcI,KAAK,CAACiM,MAApB,CAArC,EAAkEkG,QAAlE,CAA2E,QAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC2qB,GAAN,KAAcnqB,SAAd,IAA2BR,KAAK,CAAC2qB,GAAN,KAAc,IAA7C,EAAmD;IACjD,IAAM1Y,IAAI,GAAG2Y,uBAAuB,CAAC5qB,KAAK,CAAC2qB,GAAP,EAAY1qB,OAAZ,CAAvB,CAA4CkS,QAA5C,CAAqD,KAArD,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC6qB,GAAN,KAAcrqB,SAAd,IAA2BR,KAAK,CAAC6qB,GAAN,KAAc,IAA7C,EAAmD;IACjD,IAAM5Y,IAAI,GAAGwd,iDAAiD,CAACzvB,KAAK,CAAC6qB,GAAP,EAAY5qB,OAAZ,CAAjD,CAAsEkS,QAAtE,CAA+E,KAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAlBD;;AAoBA,IAAMzD,0CAA0C,GAAG,UAACtO,KAAD,EAAgCC,OAAhC,EAAuD;EACxG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,wBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC6vB,WAAN,KAAsBrvB,SAAtB,IAAmCR,KAAK,CAAC6vB,WAAN,KAAsB,IAA7D,EAAmE;IACjE,IAAM5d,IAAI,GAAG6d,wCAAwC,CAAC9vB,KAAK,CAAC6vB,WAAP,EAAoB5vB,OAApB,CAAxC,CAAqEkS,QAArE,CAA8E,aAA9E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC+vB,SAAN,KAAoBvvB,SAApB,IAAiCR,KAAK,CAAC+vB,SAAN,KAAoB,IAAzD,EAA+D;IAC7D,IAAM9d,IAAI,GAAG,IAAIvS,SAAJ,CAAc,WAAd,EAA2BwS,YAA3B,CAAwC,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAAC+vB,SAAP,CAApB,CAAxC,EAAgF5d,QAAhF,CAAyF,WAAzF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACmqB,MAAN,KAAiB3pB,SAAjB,IAA8BR,KAAK,CAACmqB,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMlY,IAAI,GAAG+d,mCAAmC,CAAChwB,KAAK,CAACmqB,MAAP,EAAelqB,OAAf,CAAnC,CAA2DkS,QAA3D,CAAoE,QAApE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0BR,KAAK,CAAC4F,EAAN,KAAa,IAA3C,EAAiD;IAC/C,IAAMqM,IAAI,GAAG,IAAIvS,SAAJ,CAAc,aAAd,EAA6BwS,YAA7B,CAA0C,IAAItS,SAAJ,CAAcI,KAAK,CAAC4F,EAApB,CAA1C,EAAmEuM,QAAnE,CAA4E,IAA5E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACiwB,sBAAN,KAAiCzvB,SAAjC,IAA8CR,KAAK,CAACiwB,sBAAN,KAAiC,IAAnF,EAAyF;IACvF,IAAMhe,IAAI,GAAG,IAAIvS,SAAJ,CAAc,iCAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACiwB,sBAApB,CADH,EAEV9d,QAFU,CAED,wBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACkwB,cAAN,KAAyB1vB,SAAzB,IAAsCR,KAAK,CAACkwB,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAM7G,KAAK,GAAG8G,2CAA2C,CAACnwB,KAAK,CAACkwB,cAAP,EAAuBjwB,OAAvB,CAAzD;IACA,IAAMmwB,eAAa,GAAG,IAAI1wB,SAAJ,CAAc,gBAAd,CAAtB;IACA2pB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBme,eAAa,CAACle,YAAd,CAA2BD,IAA3B;IACD,CAFD;IAGAF,QAAQ,CAACG,YAAT,CAAsBke,eAAtB;EACD;;EACD,IAAIpwB,KAAK,CAACqwB,QAAN,KAAmB7vB,SAAnB,IAAgCR,KAAK,CAACqwB,QAAN,KAAmB,IAAvD,EAA6D;IAC3D,IAAMpe,IAAI,GAAGqe,qCAAqC,CAACtwB,KAAK,CAACqwB,QAAP,EAAiBpwB,OAAjB,CAArC,CAA+DkS,QAA/D,CAAwE,UAAxE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CArCD;;AAuCA,IAAM+d,wCAAwC,GAAG,UAAC9vB,KAAD,EAA8BC,OAA9B,EAAqD;EACpG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,sBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACwqB,mBAAN,KAA8BhqB,SAA9B,IAA2CR,KAAK,CAACwqB,mBAAN,KAA8B,IAA7E,EAAmF;IACjF,IAAMvY,IAAI,GAAGse,gDAAgD,CAACvwB,KAAK,CAACwqB,mBAAP,EAA4BvqB,OAA5B,CAAhD,CAAqFkS,QAArF,CACX,qBADW,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CATD;;AAWA,IAAMye,uCAAuC,GAAG,UAACxwB,KAAD,EAA6BC,OAA7B,EAAoD;EAClG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,qBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACywB,KAAN,KAAgBjwB,SAAhB,IAA6BR,KAAK,CAACywB,KAAN,KAAgB,IAAjD,EAAuD;IACrD,IAAMxe,IAAI,GAAGye,yBAAyB,CAAC1wB,KAAK,CAACywB,KAAP,EAAcxwB,OAAd,CAAzB,CAAgDkS,QAAhD,CAAyD,QAAzD,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC2wB,MAAN,KAAiBnwB,SAAjB,IAA8BR,KAAK,CAAC2wB,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM1e,IAAI,GAAG2e,0BAA0B,CAAC5wB,KAAK,CAAC2wB,MAAP,EAAe1wB,OAAf,CAA1B,CAAkDkS,QAAlD,CAA2D,SAA3D,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAXD;;AAaA,IAAMie,mCAAmC,GAAG,UAAChwB,KAAD,EAAyBC,OAAzB,EAAgD;EAC1F,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,iBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACiM,MAAN,KAAiBzL,SAAjB,IAA8BR,KAAK,CAACiM,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMgG,IAAI,GAAG,IAAIvS,SAAJ,CAAc,QAAd,EAAwBwS,YAAxB,CAAqC,IAAItS,SAAJ,CAAcI,KAAK,CAACiM,MAApB,CAArC,EAAkEkG,QAAlE,CAA2E,QAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAPD;;AASA,IAAMoe,2CAA2C,GAAG,UAClDnwB,KADkD,EAElDC,OAFkD,EAE3B;EAEvB,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAG,IAAIvS,SAAJ,CAAc,wBAAd,EAAwCwS,YAAxC,CAAqD,IAAItS,SAAJ,CAAciqB,KAAd,CAArD,CAAb;IACA,OAAO5X,IAAI,CAACE,QAAL,CAAc,OAAd,CAAP;EACD,CARI,CAAP;AASD,CAbD;;AAeA,IAAMoe,gDAAgD,GAAG,UACvDvwB,KADuD,EAEvDC,OAFuD,EAEhC;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,8BAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC6wB,SAAN,KAAoBrwB,SAApB,IAAiCR,KAAK,CAAC6wB,SAAN,KAAoB,IAAzD,EAA+D;IAC7D,IAAM5e,IAAI,GAAG,IAAIvS,SAAJ,CAAc,WAAd,EAA2BwS,YAA3B,CAAwC,IAAItS,SAAJ,CAAcI,KAAK,CAAC6wB,SAApB,CAAxC,EAAwE1e,QAAxE,CAAiF,WAAjF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACO,MAAN,KAAiBC,SAAjB,IAA8BR,KAAK,CAACO,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM0R,IAAI,GAAG,IAAIvS,SAAJ,CAAc,YAAd,EAA4BwS,YAA5B,CAAyC,IAAItS,SAAJ,CAAcI,KAAK,CAACO,MAApB,CAAzC,EAAsE4R,QAAtE,CAA+E,QAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC+qB,MAAN,KAAiBvqB,SAAjB,IAA8BR,KAAK,CAAC+qB,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM9Y,IAAI,GAAG,IAAIvS,SAAJ,CAAc,iBAAd,EAAiCwS,YAAjC,CAA8C,IAAItS,SAAJ,CAAcI,KAAK,CAAC+qB,MAApB,CAA9C,EAA2E5Y,QAA3E,CAAoF,QAApF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACiM,MAAN,KAAiBzL,SAAjB,IAA8BR,KAAK,CAACiM,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMgG,IAAI,GAAG,IAAIvS,SAAJ,CAAc,QAAd,EAAwBwS,YAAxB,CAAqC,IAAItS,SAAJ,CAAcI,KAAK,CAACiM,MAApB,CAArC,EAAkEkG,QAAlE,CAA2E,QAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC8wB,UAAN,KAAqBtwB,SAArB,IAAkCR,KAAK,CAAC8wB,UAAN,KAAqB,IAA3D,EAAiE;IAC/D,IAAM7e,IAAI,GAAGue,uCAAuC,CAACxwB,KAAK,CAAC8wB,UAAP,EAAmB7wB,OAAnB,CAAvC,CAAmEkS,QAAnE,CAA4E,YAA5E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CA1BD;;AA4BA,IAAMue,qCAAqC,GAAG,UAACtwB,KAAD,EAA2BC,OAA3B,EAAkD;EAC9F,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,mBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC+wB,SAAN,KAAoBvwB,SAApB,IAAiCR,KAAK,CAAC+wB,SAAN,KAAoB,IAAzD,EAA+D;IAC7D,IAAM9e,IAAI,GAAG,IAAIvS,SAAJ,CAAc,oBAAd,EAAoCwS,YAApC,CAAiD,IAAItS,SAAJ,CAAcI,KAAK,CAAC+wB,SAApB,CAAjD,EAAiF5e,QAAjF,CAA0F,WAA1F,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAPD;;AASA,IAAMud,6BAA6B,GAAG,UAACtvB,KAAD,EAAmBC,OAAnB,EAA0C;EAC9E,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,WAAd,CAAjB;;EACA,IAAIM,KAAK,CAACgvB,IAAN,KAAexuB,SAAf,IAA4BR,KAAK,CAACgvB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAM/c,IAAI,GAAG,IAAIvS,SAAJ,CAAc,UAAd,EAA0BwS,YAA1B,CAAuC,IAAItS,SAAJ,CAAcI,KAAK,CAACgvB,IAApB,CAAvC,EAAkE7c,QAAlE,CAA2E,MAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAPD;;AASA,IAAMif,8BAA8B,GAAG,UAAChxB,KAAD,EAAoBC,OAApB,EAA2C;EAChF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,YAAd,CAAjB;;EACA,IAAIM,KAAK,CAACosB,eAAN,KAA0B5rB,SAA1B,IAAuCR,KAAK,CAACosB,eAAN,KAA0B,IAArE,EAA2E;IACzE,IAAMna,IAAI,GAAG,IAAIvS,SAAJ,CAAc,iBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACosB,eAApB,CADH,EAEVja,QAFU,CAED,iBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CATD;;AAWA,IAAMkf,+CAA+C,GAAG,UACtDjxB,KADsD,EAEtDC,OAFsD,EAE/B;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,6BAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0BR,KAAK,CAAC4F,EAAN,KAAa,IAA3C,EAAiD;IAC/C,IAAMqM,IAAI,GAAG,IAAIvS,SAAJ,CAAc,gBAAd,EAAgCwS,YAAhC,CAA6C,IAAItS,SAAJ,CAAcI,KAAK,CAAC4F,EAApB,CAA7C,EAAsEuM,QAAtE,CAA+E,IAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACkxB,iBAAN,KAA4B1wB,SAA5B,IAAyCR,KAAK,CAACkxB,iBAAN,KAA4B,IAAzE,EAA+E;IAC7E,IAAMjf,IAAI,GAAG,IAAIvS,SAAJ,CAAc,mBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACkxB,iBAApB,CADH,EAEV/e,QAFU,CAED,eAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACmxB,MAAN,KAAiB3wB,SAAjB,IAA8BR,KAAK,CAACmxB,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM9H,KAAK,GAAG4E,6BAA6B,CAACjuB,KAAK,CAACmxB,MAAP,EAAelxB,OAAf,CAA3C;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,OAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,IAAIjS,KAAK,CAACmqB,MAAN,KAAiB3pB,SAAjB,IAA8BR,KAAK,CAACmqB,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMlY,IAAI,GAAGmf,mDAAmD,CAACpxB,KAAK,CAACmqB,MAAP,EAAelqB,OAAf,CAAnD,CAA2EkS,QAA3E,CAAoF,QAApF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CA3BD;;AA6BA,IAAMsf,mDAAmD,GAAG,UAC1DrxB,KAD0D,EAE1DC,OAF0D,EAEnC;EAEvB,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAGgf,+CAA+C,CAACpH,KAAD,EAAQ5pB,OAAR,CAA5D;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAbD;;AAeA,IAAMmf,uCAAuC,GAAG,UAACtxB,KAAD,EAA6BC,OAA7B,EAAoD;EAClG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,qBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACiW,IAAN,KAAezV,SAAf,IAA4BR,KAAK,CAACiW,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAMhE,IAAI,GAAG,IAAIvS,SAAJ,CAAc,MAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACiW,IAAN,CAAWzR,WAAX,GAAyB1D,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,IAAyC,GAAvD,CADH,EAEVqR,QAFU,CAED,MAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC4sB,IAAN,KAAepsB,SAAf,IAA4BR,KAAK,CAAC4sB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAM3a,IAAI,GAAG,IAAIvS,SAAJ,CAAc,MAAd,EAAsBwS,YAAtB,CAAmC,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAAC4sB,IAAP,CAApB,CAAnC,EAAsEza,QAAtE,CAA+E,MAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACuxB,yBAAN,KAAoC/wB,SAApC,IAAiDR,KAAK,CAACuxB,yBAAN,KAAoC,IAAzF,EAA+F;IAC7F,IAAMtf,IAAI,GAAG,IAAIvS,SAAJ,CAAc,2BAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAACuxB,yBAAP,CAApB,CADH,EAEVpf,QAFU,CAED,2BAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAnBD;;AAqBA,IAAMyf,iCAAiC,GAAG,UAACxxB,KAAD,EAAuBC,OAAvB,EAA8C;EACtF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,eAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC+U,UAAN,KAAqBvU,SAArB,IAAkCR,KAAK,CAAC+U,UAAN,KAAqB,IAA3D,EAAiE;IAC/D,IAAM9C,IAAI,GAAGqf,uCAAuC,CAACtxB,KAAK,CAAC+U,UAAP,EAAmB9U,OAAnB,CAAvC,CAAmEkS,QAAnE,CAA4E,YAA5E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC8uB,EAAN,KAAatuB,SAAb,IAA0BR,KAAK,CAAC8uB,EAAN,KAAa,IAA3C,EAAiD;IAC/C,IAAM7c,IAAI,GAAG,IAAIvS,SAAJ,CAAc,IAAd,EAAoBwS,YAApB,CAAiC,IAAItS,SAAJ,CAAcI,KAAK,CAAC8uB,EAApB,CAAjC,EAA0D3c,QAA1D,CAAmE,IAAnE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACiM,MAAN,KAAiBzL,SAAjB,IAA8BR,KAAK,CAACiM,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMgG,IAAI,GAAG,IAAIvS,SAAJ,CAAc,QAAd,EAAwBwS,YAAxB,CAAqC,IAAItS,SAAJ,CAAcI,KAAK,CAACiM,MAApB,CAArC,EAAkEkG,QAAlE,CAA2E,QAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACmqB,MAAN,KAAiB3pB,SAAjB,IAA8BR,KAAK,CAACmqB,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMlY,IAAI,GAAGwf,uCAAuC,CAACzxB,KAAK,CAACmqB,MAAP,EAAelqB,OAAf,CAAvC,CAA+DkS,QAA/D,CAAwE,QAAxE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC2Y,MAAN,KAAiBnY,SAAjB,IAA8BR,KAAK,CAAC2Y,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM1G,IAAI,GAAG,IAAIvS,SAAJ,CAAc,kBAAd,EAAkCwS,YAAlC,CAA+C,IAAItS,SAAJ,CAAcI,KAAK,CAAC2Y,MAApB,CAA/C,EAA4ExG,QAA5E,CAAqF,QAArF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC0xB,WAAN,KAAsBlxB,SAAtB,IAAmCR,KAAK,CAAC0xB,WAAN,KAAsB,IAA7D,EAAmE;IACjE,IAAMrI,KAAK,GAAGsI,kCAAkC,CAAC3xB,KAAK,CAAC0xB,WAAP,EAAoBzxB,OAApB,CAAhD;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,YAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,IAAIjS,KAAK,CAAC4xB,4BAAN,KAAuCpxB,SAAvC,IAAoDR,KAAK,CAAC4xB,4BAAN,KAAuC,IAA/F,EAAqG;IACnG,IAAMvI,KAAK,GAAGwI,mDAAmD,CAAC7xB,KAAK,CAAC4xB,4BAAP,EAAqC3xB,OAArC,CAAjE;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,6BAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,IAAIjS,KAAK,CAAC8xB,2BAAN,KAAsCtxB,SAAtC,IAAmDR,KAAK,CAAC8xB,2BAAN,KAAsC,IAA7F,EAAmG;IACjG,IAAM7f,IAAI,GAAG8f,+CAA+C,CAAC/xB,KAAK,CAAC8xB,2BAAP,EAAoC7xB,OAApC,CAA/C,CAA4FkS,QAA5F,CACX,6BADW,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACgyB,8BAAN,KAAyCxxB,SAAzC,IAAsDR,KAAK,CAACgyB,8BAAN,KAAyC,IAAnG,EAAyG;IACvG,IAAM/f,IAAI,GAAGiX,kDAAkD,CAC7DlpB,KAAK,CAACgyB,8BADuD,EAE7D/xB,OAF6D,CAAlD,CAGXkS,QAHW,CAGF,gCAHE,CAAb;IAIAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAlDD;;AAoDA,IAAMkgB,4CAA4C,GAAG,UACnDjyB,KADmD,EAEnDC,OAFmD,EAE5B;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,0BAAd,CAAjB;;EACA,IAAIM,KAAK,CAACiM,MAAN,KAAiBzL,SAAjB,IAA8BR,KAAK,CAACiM,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMgG,IAAI,GAAG,IAAIvS,SAAJ,CAAc,QAAd,EAAwBwS,YAAxB,CAAqC,IAAItS,SAAJ,CAAcI,KAAK,CAACiM,MAApB,CAArC,EAAkEkG,QAAlE,CAA2E,QAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACiqB,IAAN,KAAezpB,SAAf,IAA4BR,KAAK,CAACiqB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAMZ,KAAK,GAAGa,0BAA0B,CAAClqB,KAAK,CAACiqB,IAAP,EAAahqB,OAAb,CAAxC;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,KAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,OAAOF,QAAP;AACD,CAjBD;;AAmBA,IAAM0f,uCAAuC,GAAG,UAACzxB,KAAD,EAA6BC,OAA7B,EAAoD;EAClG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,qBAAd,CAAjB;EACAd,mBAAmB,CAAC8rB,KAApB,CAA0B1qB,KAA1B,EAAiC;IAC/BiM,MAAM,EAAE,UAAC+b,KAAD,EAAM;MACZ,IAAM/V,IAAI,GAAG,IAAIvS,SAAJ,CAAc,QAAd,EAAwBwS,YAAxB,CAAqC,IAAItS,SAAJ,CAAcooB,KAAd,CAArC,EAA2D7V,QAA3D,CAAoE,QAApE,CAAb;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAJ8B;IAK/B0Y,GAAG,EAAE,UAAC3C,KAAD,EAAM;MACT,IAAM/V,IAAI,GAAG2Y,uBAAuB,CAAC5C,KAAD,EAAQ/nB,OAAR,CAAvB,CAAwCkS,QAAxC,CAAiD,KAAjD,CAAb;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAR8B;IAS/B4Y,GAAG,EAAE,UAAC7C,KAAD,EAAM;MACT,IAAM/V,IAAI,GAAGggB,4CAA4C,CAACjK,KAAD,EAAQ/nB,OAAR,CAA5C,CAA6DkS,QAA7D,CAAsE,KAAtE,CAAb;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAZ8B;IAa/B6Y,CAAC,EAAE,UAAC5W,IAAD,EAAe8T,KAAf,EAAyB;MAC1B,IAAI,EAAEA,KAAK,YAAYtoB,SAAjB,IAA8BsoB,KAAK,YAAYpoB,SAAjD,CAAJ,EAAiE;QAC/D,MAAM,IAAIe,KAAJ,CAAU,mDAAV,CAAN;MACD;;MACDoR,QAAQ,CAACG,YAAT,CAAsB,IAAIxS,SAAJ,CAAcwU,IAAd,EAAoBhC,YAApB,CAAiC8V,KAAjC,CAAtB;IACD;EAlB8B,CAAjC;EAoBA,OAAOjW,QAAP;AACD,CAvBD;;AAyBA,IAAMkZ,kCAAkC,GAAG,UAACjrB,KAAD,EAAyBC,OAAzB,EAAgD;EACzF,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAGuf,iCAAiC,CAAC3H,KAAD,EAAQ5pB,OAAR,CAA9C;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAM+Y,kCAAkC,GAAG,UAAClrB,KAAD,EAAwBC,OAAxB,EAA+C;EACxF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,gBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACkyB,YAAN,KAAuB1xB,SAAvB,IAAoCR,KAAK,CAACkyB,YAAN,KAAuB,IAA/D,EAAqE;IACnE,IAAMjgB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,cAAd,EAA8BwS,YAA9B,CAA2C,IAAItS,SAAJ,CAAcI,KAAK,CAACkyB,YAApB,CAA3C,EAA8E/f,QAA9E,CAAuF,cAAvF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACmyB,YAAN,KAAuB3xB,SAAvB,IAAoCR,KAAK,CAACmyB,YAAN,KAAuB,IAA/D,EAAqE;IACnE,IAAM9I,KAAK,GAAG+I,gCAAgC,CAACpyB,KAAK,CAACmyB,YAAP,EAAqBlyB,OAArB,CAA9C;IACA,IAAMoyB,eAAa,GAAG,IAAI3yB,SAAJ,CAAc,cAAd,CAAtB;IACA2pB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBogB,eAAa,CAACngB,YAAd,CAA2BD,IAA3B;IACD,CAFD;IAGAF,QAAQ,CAACG,YAAT,CAAsBmgB,eAAtB;EACD;;EACD,IAAIryB,KAAK,CAACsyB,YAAN,KAAuB9xB,SAAvB,IAAoCR,KAAK,CAACsyB,YAAN,KAAuB,IAA/D,EAAqE;IACnE,IAAMrgB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,cAAd,EAA8BwS,YAA9B,CAA2C,IAAItS,SAAJ,CAAcI,KAAK,CAACsyB,YAApB,CAA3C,EAA8EngB,QAA9E,CAAuF,cAAvF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAnBD;;AAqBA,IAAMwgB,iCAAiC,GAAG,UAACvyB,KAAD,EAAuBC,OAAvB,EAA8C;EACtF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,eAAd,CAAjB;;EACA,IAAIM,KAAK,CAACyiB,IAAN,KAAejiB,SAAf,IAA4BR,KAAK,CAACyiB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAMxQ,IAAI,GAAG,IAAIvS,SAAJ,CAAc,aAAd,EAA6BwS,YAA7B,CAA0C,IAAItS,SAAJ,CAAcI,KAAK,CAACyiB,IAApB,CAA1C,EAAqEtQ,QAArE,CAA8E,MAA9E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACouB,KAAN,KAAgB5tB,SAAhB,IAA6BR,KAAK,CAACouB,KAAN,KAAgB,IAAjD,EAAuD;IACrD,IAAMnc,IAAI,GAAG,IAAIvS,SAAJ,CAAc,eAAd,EAA+BwS,YAA/B,CAA4C,IAAItS,SAAJ,CAAcI,KAAK,CAACouB,KAApB,CAA5C,EAAwEjc,QAAxE,CAAiF,OAAjF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAXD;;AAaA,IAAM2b,2BAA2B,GAAG,UAAC1tB,KAAD,EAAiBC,OAAjB,EAAwC;EAC1E,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,SAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC2Y,MAAN,KAAiBnY,SAAjB,IAA8BR,KAAK,CAAC2Y,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM1G,IAAI,GAAG,IAAIvS,SAAJ,CAAc,eAAd,EAA+BwS,YAA/B,CAA4C,IAAItS,SAAJ,CAAcI,KAAK,CAAC2Y,MAApB,CAA5C,EAAyExG,QAAzE,CAAkF,QAAlF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACwyB,cAAN,KAAyBhyB,SAAzB,IAAsCR,KAAK,CAACwyB,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAMvgB,IAAI,GAAGwgB,wCAAwC,CAACzyB,KAAK,CAACwyB,cAAP,EAAuBvyB,OAAvB,CAAxC,CAAwEkS,QAAxE,CAAiF,gBAAjF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAXD;;AAaA,IAAM2gB,sCAAsC,GAAG,UAAC1yB,KAAD,EAA4BC,OAA5B,EAAmD;EAChG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,oBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACiM,MAAN,KAAiBzL,SAAjB,IAA8BR,KAAK,CAACiM,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMgG,IAAI,GAAG,IAAIvS,SAAJ,CAAc,QAAd,EAAwBwS,YAAxB,CAAqC,IAAItS,SAAJ,CAAcI,KAAK,CAACiM,MAApB,CAArC,EAAkEkG,QAAlE,CAA2E,QAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACiqB,IAAN,KAAezpB,SAAf,IAA4BR,KAAK,CAACiqB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAMZ,KAAK,GAAGa,0BAA0B,CAAClqB,KAAK,CAACiqB,IAAP,EAAahqB,OAAb,CAAxC;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,KAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,OAAOF,QAAP;AACD,CAdD;;AAgBA,IAAMhD,wCAAwC,GAAG,UAAC/O,KAAD,EAA8BC,OAA9B,EAAqD;EACpG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,sBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0BR,KAAK,CAAC4F,EAAN,KAAa,IAA3C,EAAiD;IAC/C,IAAMqM,IAAI,GAAG,IAAIvS,SAAJ,CAAc,WAAd,EAA2BwS,YAA3B,CAAwC,IAAItS,SAAJ,CAAcI,KAAK,CAAC4F,EAApB,CAAxC,EAAiEuM,QAAjE,CAA0E,IAA1E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACmqB,MAAN,KAAiB3pB,SAAjB,IAA8BR,KAAK,CAACmqB,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMlY,IAAI,GAAG0gB,iCAAiC,CAAC3yB,KAAK,CAACmqB,MAAP,EAAelqB,OAAf,CAAjC,CAAyDkS,QAAzD,CAAkE,QAAlE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAXD;;AAaA,IAAM4gB,iCAAiC,GAAG,UAAC3yB,KAAD,EAAuBC,OAAvB,EAA8C;EACtF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,eAAd,CAAjB;EACAb,aAAa,CAAC6rB,KAAd,CAAoB1qB,KAApB,EAA2B;IACzBiM,MAAM,EAAE,UAAC+b,KAAD,EAAM;MACZ,IAAM/V,IAAI,GAAG,IAAIvS,SAAJ,CAAc,QAAd,EAAwBwS,YAAxB,CAAqC,IAAItS,SAAJ,CAAcooB,KAAd,CAArC,EAA2D7V,QAA3D,CAAoE,QAApE,CAAb;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAJwB;IAKzB0Y,GAAG,EAAE,UAAC3C,KAAD,EAAM;MACT,IAAM/V,IAAI,GAAG2Y,uBAAuB,CAAC5C,KAAD,EAAQ/nB,OAAR,CAAvB,CAAwCkS,QAAxC,CAAiD,KAAjD,CAAb;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CARwB;IASzB4Y,GAAG,EAAE,UAAC7C,KAAD,EAAM;MACT,IAAM/V,IAAI,GAAGygB,sCAAsC,CAAC1K,KAAD,EAAQ/nB,OAAR,CAAtC,CAAuDkS,QAAvD,CAAgE,KAAhE,CAAb;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAZwB;IAazB6Y,CAAC,EAAE,UAAC5W,IAAD,EAAe8T,KAAf,EAAyB;MAC1B,IAAI,EAAEA,KAAK,YAAYtoB,SAAjB,IAA8BsoB,KAAK,YAAYpoB,SAAjD,CAAJ,EAAiE;QAC/D,MAAM,IAAIe,KAAJ,CAAU,mDAAV,CAAN;MACD;;MACDoR,QAAQ,CAACG,YAAT,CAAsB,IAAIxS,SAAJ,CAAcwU,IAAd,EAAoBhC,YAApB,CAAiC8V,KAAjC,CAAtB;IACD;EAlBwB,CAA3B;EAoBA,OAAOjW,QAAP;AACD,CAvBD;;AAyBA,IAAMggB,+CAA+C,GAAG,UACtD/xB,KADsD,EAEtDC,OAFsD,EAE/B;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,6BAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC4yB,cAAN,KAAyBpyB,SAAzB,IAAsCR,KAAK,CAAC4yB,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAM3gB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,MAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAAC4yB,cAAP,CAApB,CADH,EAEVzgB,QAFU,CAED,gBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAZD;;AAcA,IAAM8gB,+CAA+C,GAAG,UACtD7yB,KADsD,EAEtDC,OAFsD,EAE/B;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,6BAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC4yB,cAAN,KAAyBpyB,SAAzB,IAAsCR,KAAK,CAAC4yB,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAM3gB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,MAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAAC4yB,cAAP,CAApB,CADH,EAEVzgB,QAFU,CAED,gBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC0D,YAAN,KAAuBlD,SAAvB,IAAoCR,KAAK,CAAC0D,YAAN,KAAuB,IAA/D,EAAqE;IACnE,IAAMuO,IAAI,GAAG,IAAIvS,SAAJ,CAAc,wBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAAC0D,YAApB,CADH,EAEVyO,QAFU,CAED,cAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAlBD;;AAoBA,IAAM8f,mDAAmD,GAAG,UAC1D7xB,KAD0D,EAE1DC,OAF0D,EAEnC;EAEvB,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAG4gB,+CAA+C,CAAChJ,KAAD,EAAQ5pB,OAAR,CAA5D;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAbD;;AAeA,IAAMjD,6CAA6C,GAAG,UACpDlP,KADoD,EAEpDC,OAFoD,EAE7B;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,2BAAd,CAAjB;;EACA,IAAIM,KAAK,CAACub,mBAAN,KAA8B/a,SAA9B,IAA2CR,KAAK,CAACub,mBAAN,KAA8B,IAA7E,EAAmF;IACjF,IAAM8N,KAAK,GAAGyJ,0CAA0C,CAAC9yB,KAAK,CAACub,mBAAP,EAA4Btb,OAA5B,CAAxD;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,oBAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,IAAIjS,KAAK,CAACsb,mBAAN,KAA8B9a,SAA9B,IAA2CR,KAAK,CAACsb,mBAAN,KAA8B,IAA7E,EAAmF;IACjF,IAAM+N,KAAK,GAAG0J,0CAA0C,CAAC/yB,KAAK,CAACsb,mBAAP,EAA4Brb,OAA5B,CAAxD;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,oBAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,IAAIjS,KAAK,CAACqb,4BAAN,KAAuC7a,SAAvC,IAAoDR,KAAK,CAACqb,4BAAN,KAAuC,IAA/F,EAAqG;IACnG,IAAMgO,KAAK,GAAGgI,mDAAmD,CAACrxB,KAAK,CAACqb,4BAAP,EAAqCpb,OAArC,CAAjE;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,4BAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,OAAOF,QAAP;AACD,CA3BD;;AA6BA,IAAMqf,mDAAmD,GAAG,UAC1DpxB,KAD0D,EAE1DC,OAF0D,EAEnC;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,iCAAd,CAAjB;;EACA,IAAIM,KAAK,CAACa,GAAN,KAAcL,SAAd,IAA2BR,KAAK,CAACa,GAAN,KAAc,IAA7C,EAAmD;IACjD,IAAMoR,IAAI,GAAG+gB,+BAA+B,CAAChzB,KAAK,CAACa,GAAP,EAAYZ,OAAZ,CAA/B,CAAoDkS,QAApD,CAA6D,OAA7D,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAVD;;AAYA,IAAMkhB,oCAAoC,GAAG,UAACjzB,KAAD,EAA0BC,OAA1B,EAAiD;EAC5F,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,kBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACa,GAAN,KAAcL,SAAd,IAA2BR,KAAK,CAACa,GAAN,KAAc,IAA7C,EAAmD;IACjD,IAAMoR,IAAI,GAAG,IAAIvS,SAAJ,CAAc,WAAd,EAA2BwS,YAA3B,CAAwC,IAAItS,SAAJ,CAAcI,KAAK,CAACa,GAApB,CAAxC,EAAkEsR,QAAlE,CAA2E,KAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACsH,SAAN,KAAoB9G,SAApB,IAAiCR,KAAK,CAACsH,SAAN,KAAoB,IAAzD,EAA+D;IAC7D,IAAM2K,IAAI,GAAG,IAAIvS,SAAJ,CAAc,iBAAd,EAAiCwS,YAAjC,CAA8C,IAAItS,SAAJ,CAAcI,KAAK,CAACsH,SAApB,CAA9C,EAA8E6K,QAA9E,CAAuF,WAAvF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAXD;;AAaA,IAAMgb,wCAAwC,GAAG,UAAC/sB,KAAD,EAA4BC,OAA5B,EAAmD;EAClG,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAGghB,oCAAoC,CAACpJ,KAAD,EAAQ5pB,OAAR,CAAjD;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAMlB,2CAA2C,GAAG,UAACjR,KAAD,EAAiCC,OAAjC,EAAwD;EAC1G,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,yBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACkzB,iBAAN,KAA4B1yB,SAA5B,IAAyCR,KAAK,CAACkzB,iBAAN,KAA4B,IAAzE,EAA+E;IAC7E,IAAMjhB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,mBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACkzB,iBAApB,CADH,EAEV/gB,QAFU,CAED,mBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACua,IAAN,KAAe/Z,SAAf,IAA4BR,KAAK,CAACua,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAMtI,IAAI,GAAGkhB,kCAAkC,CAACnzB,KAAK,CAACua,IAAP,EAAata,OAAb,CAAlC,CAAwDkS,QAAxD,CAAiE,MAAjE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAbD;;AAeA,IAAMjB,uCAAuC,GAAG,UAAC9Q,KAAD,EAA6BC,OAA7B,EAAoD;EAClG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,qBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC2Y,MAAN,KAAiBnY,SAAjB,IAA8BR,KAAK,CAAC2Y,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM1G,IAAI,GAAG,IAAIvS,SAAJ,CAAc,2BAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAAC2Y,MAApB,CADH,EAEVxG,QAFU,CAED,QAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CATD;;AAWA,IAAMX,uCAAuC,GAAG,UAACpR,KAAD,EAA6BC,OAA7B,EAAoD;EAClG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,qBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC2sB,IAAN,KAAensB,SAAf,IAA4BR,KAAK,CAAC2sB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAM1a,IAAI,GAAG,IAAIvS,SAAJ,CAAc,yBAAd,EAAyCwS,YAAzC,CAAsD,IAAItS,SAAJ,CAAcI,KAAK,CAAC2sB,IAApB,CAAtD,EAAiFxa,QAAjF,CAA0F,MAA1F,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACozB,eAAN,KAA0B5yB,SAA1B,IAAuCR,KAAK,CAACozB,eAAN,KAA0B,IAArE,EAA2E;IACzE,IAAMnhB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,MAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACozB,eAAN,CAAsB5uB,WAAtB,GAAoC1D,KAApC,CAA0C,GAA1C,EAA+C,CAA/C,IAAoD,GAAlE,CADH,EAEVqR,QAFU,CAED,iBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAbD;;AAeA,IAAMohB,kCAAkC,GAAG,UAACnzB,KAAD,EAAwBC,OAAxB,EAA+C;EACxF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,gBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACqzB,gBAAN,KAA2B7yB,SAA3B,IAAwCR,KAAK,CAACqzB,gBAAN,KAA2B,IAAvE,EAA6E;IAC3E,IAAMphB,IAAI,GAAGya,oCAAoC,CAAC1sB,KAAK,CAACqzB,gBAAP,EAAyBpzB,OAAzB,CAApC,CAAsEkS,QAAtE,CAA+E,kBAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAPD;;AASA,IAAMuhB,kCAAkC,GAAG,UAACtzB,KAAD,EAAwBC,OAAxB,EAA+C;EACxF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,gBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACuzB,EAAN,KAAa/yB,SAAb,IAA0BR,KAAK,CAACuzB,EAAN,KAAa,IAA3C,EAAiD;IAC/C,IAAMthB,IAAI,GAAGuhB,8BAA8B,CAACxzB,KAAK,CAACuzB,EAAP,EAAWtzB,OAAX,CAA9B,CAAkDkS,QAAlD,CAA2D,IAA3D,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAPD;;AASA,IAAMS,uCAAuC,GAAG,UAACxS,KAAD,EAA6BC,OAA7B,EAAoD;EAClG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,qBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACmvB,GAAN,KAAc3uB,SAAd,IAA2BR,KAAK,CAACmvB,GAAN,KAAc,IAA7C,EAAmD;IACjD,IAAMld,IAAI,GAAGua,6BAA6B,CAACxsB,KAAK,CAACmvB,GAAP,EAAYlvB,OAAZ,CAA7B,CAAkDkS,QAAlD,CAA2D,KAA3D,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACqvB,IAAN,KAAe7uB,SAAf,IAA4BR,KAAK,CAACqvB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAMpd,IAAI,GAAG+e,8BAA8B,CAAChxB,KAAK,CAACqvB,IAAP,EAAapvB,OAAb,CAA9B,CAAoDkS,QAApD,CAA6D,MAA7D,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAXD;;AAaA,IAAMyX,yBAAyB,GAAG,UAACxpB,KAAD,EAAeC,OAAf,EAAsC;EACtE,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,OAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC4uB,WAAN,KAAsBpuB,SAAtB,IAAmCR,KAAK,CAAC4uB,WAAN,KAAsB,IAA7D,EAAmE;IACjE,IAAM3c,IAAI,GAAG,IAAIvS,SAAJ,CAAc,aAAd,EAA6BwS,YAA7B,CAA0C,IAAItS,SAAJ,CAAcI,KAAK,CAAC4uB,WAApB,CAA1C,EAA4Ezc,QAA5E,CAAqF,aAArF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC8uB,EAAN,KAAatuB,SAAb,IAA0BR,KAAK,CAAC8uB,EAAN,KAAa,IAA3C,EAAiD;IAC/C,IAAM7c,IAAI,GAAG,IAAIvS,SAAJ,CAAc,IAAd,EAAoBwS,YAApB,CAAiC,IAAItS,SAAJ,CAAcI,KAAK,CAAC8uB,EAApB,CAAjC,EAA0D3c,QAA1D,CAAmE,IAAnE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAXD;;AAaA,IAAM1C,qCAAqC,GAAG,UAACrP,KAAD,EAA2BC,OAA3B,EAAkD;EAC9F,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,mBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACsa,KAAN,KAAgB9Z,SAAhB,IAA6BR,KAAK,CAACsa,KAAN,KAAgB,IAAjD,EAAuD;IACrD,IAAM+O,KAAK,GAAGoK,0CAA0C,CAACzzB,KAAK,CAACsa,KAAP,EAAcra,OAAd,CAAxD;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,MAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,OAAOF,QAAP;AACD,CAVD;;AAYA,IAAM2hB,yCAAyC,GAAG,UAAC1zB,KAAD,EAA+BC,OAA/B,EAAsD;EACtG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,uBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC2zB,eAAN,KAA0BnzB,SAA1B,IAAuCR,KAAK,CAAC2zB,eAAN,KAA0B,IAArE,EAA2E;IACzE,IAAM1hB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,iBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAAC2zB,eAApB,CADH,EAEVxhB,QAFU,CAED,iBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CATD;;AAWA,IAAM0hB,0CAA0C,GAAG,UAACzzB,KAAD,EAAiCC,OAAjC,EAAwD;EACzG,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAGyhB,yCAAyC,CAAC7J,KAAD,EAAQ5pB,OAAR,CAAtD;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAMqd,gCAAgC,GAAG,UAACxvB,KAAD,EAAsBC,OAAtB,EAA6C;EACpF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,cAAd,CAAjB;EACA,OAAOqS,QAAP;AACD,CAHD;;AAKA,IAAMP,kDAAkD,GAAG,UACzDxR,KADyD,EAEzDC,OAFyD,EAElC;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,gCAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC4zB,eAAN,KAA0BpzB,SAA1B,IAAuCR,KAAK,CAAC4zB,eAAN,KAA0B,IAArE,EAA2E;IACzE,IAAM3hB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,SAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAAC4zB,eAAP,CAApB,CADH,EAEVzhB,QAFU,CAED,iBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC6zB,gBAAN,KAA2BrzB,SAA3B,IAAwCR,KAAK,CAAC6zB,gBAAN,KAA2B,IAAvE,EAA6E;IAC3E,IAAM5hB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,SAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAAC6zB,gBAAP,CAApB,CADH,EAEV1hB,QAFU,CAED,kBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC8zB,iBAAN,KAA4BtzB,SAA5B,IAAyCR,KAAK,CAAC8zB,iBAAN,KAA4B,IAAzE,EAA+E;IAC7E,IAAM7hB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,SAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAAC8zB,iBAAP,CAApB,CADH,EAEV3hB,QAFU,CAED,mBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC+zB,qBAAN,KAAgCvzB,SAAhC,IAA6CR,KAAK,CAAC+zB,qBAAN,KAAgC,IAAjF,EAAuF;IACrF,IAAM9hB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,SAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAAC+zB,qBAAP,CAApB,CADH,EAEV5hB,QAFU,CAED,uBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CA9BD;;AAgCA,IAAMiiB,sCAAsC,GAAG,UAACh0B,KAAD,EAA4BC,OAA5B,EAAmD;EAChG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,oBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0BR,KAAK,CAAC4F,EAAN,KAAa,IAA3C,EAAiD;IAC/C,IAAMqM,IAAI,GAAG,IAAIvS,SAAJ,CAAc,gBAAd,EAAgCwS,YAAhC,CAA6C,IAAItS,SAAJ,CAAcI,KAAK,CAAC4F,EAApB,CAA7C,EAAsEuM,QAAtE,CAA+E,IAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACi0B,QAAN,KAAmBzzB,SAAnB,IAAgCR,KAAK,CAACi0B,QAAN,KAAmB,IAAvD,EAA6D;IAC3D,IAAMhiB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,UAAd,EAA0BwS,YAA1B,CAAuC,IAAItS,SAAJ,CAAcI,KAAK,CAACi0B,QAApB,CAAvC,EAAsE9hB,QAAtE,CAA+E,OAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACmxB,MAAN,KAAiB3wB,SAAjB,IAA8BR,KAAK,CAACmxB,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM9H,KAAK,GAAG4E,6BAA6B,CAACjuB,KAAK,CAACmxB,MAAP,EAAelxB,OAAf,CAA3C;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,OAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,IAAIjS,KAAK,CAACmqB,MAAN,KAAiB3pB,SAAjB,IAA8BR,KAAK,CAACmqB,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMlY,IAAI,GAAGmf,mDAAmD,CAACpxB,KAAK,CAACmqB,MAAP,EAAelqB,OAAf,CAAnD,CAA2EkS,QAA3E,CAAoF,QAApF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAtBD;;AAwBA,IAAMghB,0CAA0C,GAAG,UAAC/yB,KAAD,EAA8BC,OAA9B,EAAqD;EACtG,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAG+hB,sCAAsC,CAACnK,KAAD,EAAQ5pB,OAAR,CAAnD;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAM+hB,4BAA4B,GAAG,UAACl0B,KAAD,EAAkBC,OAAlB,EAAyC;EAC5E,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,UAAd,CAAjB;;EACA,IAAIM,KAAK,CAACm0B,QAAN,KAAmB3zB,SAAnB,IAAgCR,KAAK,CAACm0B,QAAN,KAAmB,IAAvD,EAA6D;IAC3D,IAAMliB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,UAAd,EAA0BwS,YAA1B,CAAuC,IAAItS,SAAJ,CAAcI,KAAK,CAACm0B,QAApB,CAAvC,EAAsEhiB,QAAtE,CAA+E,UAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACo0B,gBAAN,KAA2B5zB,SAA3B,IAAwCR,KAAK,CAACo0B,gBAAN,KAA2B,IAAvE,EAA6E;IAC3E,IAAMniB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,kBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACo0B,gBAApB,CADH,EAEVjiB,QAFU,CAED,kBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACq0B,QAAN,KAAmB7zB,SAAnB,IAAgCR,KAAK,CAACq0B,QAAN,KAAmB,IAAvD,EAA6D;IAC3D,IAAMpiB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,UAAd,EAA0BwS,YAA1B,CAAuC,IAAItS,SAAJ,CAAcI,KAAK,CAACq0B,QAApB,CAAvC,EAAsEliB,QAAtE,CAA+E,UAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACs0B,oBAAN,KAA+B9zB,SAA/B,IAA4CR,KAAK,CAACs0B,oBAAN,KAA+B,IAA/E,EAAqF;IACnF,IAAMriB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,sBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACs0B,oBAApB,CADH,EAEVniB,QAFU,CAED,sBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACu0B,cAAN,KAAyB/zB,SAAzB,IAAsCR,KAAK,CAACu0B,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAMtiB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,gBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACu0B,cAApB,CADH,EAEVpiB,QAFU,CAED,gBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CA7BD;;AA+BA,IAAMyiB,yCAAyC,GAAG,UAACx0B,KAAD,EAA+BC,OAA/B,EAAsD;EACtG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,uBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACm0B,QAAN,KAAmB3zB,SAAnB,IAAgCR,KAAK,CAACm0B,QAAN,KAAmB,IAAvD,EAA6D;IAC3D,IAAMliB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,UAAd,EAA0BwS,YAA1B,CAAuC,IAAItS,SAAJ,CAAcI,KAAK,CAACm0B,QAApB,CAAvC,EAAsEhiB,QAAtE,CAA+E,UAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACq0B,QAAN,KAAmB7zB,SAAnB,IAAgCR,KAAK,CAACq0B,QAAN,KAAmB,IAAvD,EAA6D;IAC3D,IAAMpiB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,UAAd,EAA0BwS,YAA1B,CAAuC,IAAItS,SAAJ,CAAcI,KAAK,CAACq0B,QAApB,CAAvC,EAAsEliB,QAAtE,CAA+E,UAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAXD;;AAaA,IAAM0iB,wCAAwC,GAAG,UAACz0B,KAAD,EAA8BC,OAA9B,EAAqD;EACpG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,sBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC2Y,MAAN,KAAiBnY,SAAjB,IAA8BR,KAAK,CAAC2Y,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM1G,IAAI,GAAG,IAAIvS,SAAJ,CAAc,4BAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAAC2Y,MAApB,CADH,EAEVxG,QAFU,CAED,QAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CATD;;AAWA,IAAMnC,4CAA4C,GAAG,UACnD5P,KADmD,EAEnDC,OAFmD,EAE5B;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,0BAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC00B,IAAN,KAAel0B,SAAf,IAA4BR,KAAK,CAAC00B,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAMziB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,MAAd,EAAsBwS,YAAtB,CAAmC,IAAItS,SAAJ,CAAcI,KAAK,CAAC00B,IAApB,CAAnC,EAA8DviB,QAA9D,CAAuE,MAAvE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACsa,KAAN,KAAgB9Z,SAAhB,IAA6BR,KAAK,CAACsa,KAAN,KAAgB,IAAjD,EAAuD;IACrD,IAAM+O,KAAK,GAAGsL,oCAAoC,CAAC30B,KAAK,CAACsa,KAAP,EAAcra,OAAd,CAAlD;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,MAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,OAAOF,QAAP;AACD,CAjBD;;AAmBA,IAAM6iB,mCAAmC,GAAG,UAAC50B,KAAD,EAAyBC,OAAzB,EAAgD;EAC1F,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,iBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC8uB,EAAN,KAAatuB,SAAb,IAA0BR,KAAK,CAAC8uB,EAAN,KAAa,IAA3C,EAAiD;IAC/C,IAAM7c,IAAI,GAAG,IAAIvS,SAAJ,CAAc,IAAd,EAAoBwS,YAApB,CAAiC,IAAItS,SAAJ,CAAcI,KAAK,CAAC8uB,EAApB,CAAjC,EAA0D3c,QAA1D,CAAmE,IAAnE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC60B,QAAN,KAAmBr0B,SAAnB,IAAgCR,KAAK,CAAC60B,QAAN,KAAmB,IAAvD,EAA6D;IAC3D,IAAM5iB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,UAAd,EAA0BwS,YAA1B,CAAuC,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAAC60B,QAAP,CAApB,CAAvC,EAA8E1iB,QAA9E,CAAuF,UAAvF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACiM,MAAN,KAAiBzL,SAAjB,IAA8BR,KAAK,CAACiM,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMgG,IAAI,GAAG,IAAIvS,SAAJ,CAAc,QAAd,EAAwBwS,YAAxB,CAAqC,IAAItS,SAAJ,CAAcI,KAAK,CAACiM,MAApB,CAArC,EAAkEkG,QAAlE,CAA2E,QAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACmqB,MAAN,KAAiB3pB,SAAjB,IAA8BR,KAAK,CAACmqB,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMlY,IAAI,GAAG6iB,yCAAyC,CAAC90B,KAAK,CAACmqB,MAAP,EAAelqB,OAAf,CAAzC,CAAiEkS,QAAjE,CAA0E,QAA1E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC2Y,MAAN,KAAiBnY,SAAjB,IAA8BR,KAAK,CAAC2Y,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM1G,IAAI,GAAG,IAAIvS,SAAJ,CAAc,uBAAd,EAAuCwS,YAAvC,CAAoD,IAAItS,SAAJ,CAAcI,KAAK,CAAC2Y,MAApB,CAApD,EAAiFxG,QAAjF,CAA0F,QAA1F,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC+0B,uBAAN,KAAkCv0B,SAAlC,IAA+CR,KAAK,CAAC+0B,uBAAN,KAAkC,IAArF,EAA2F;IACzF,IAAM9iB,IAAI,GAAG+iB,2CAA2C,CAACh1B,KAAK,CAAC+0B,uBAAP,EAAgC90B,OAAhC,CAA3C,CAAoFkS,QAApF,CACX,yBADW,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACi1B,yBAAN,KAAoCz0B,SAApC,IAAiDR,KAAK,CAACi1B,yBAAN,KAAoC,IAAzF,EAA+F;IAC7F,IAAMhjB,IAAI,GAAGic,6CAA6C,CAACluB,KAAK,CAACi1B,yBAAP,EAAkCh1B,OAAlC,CAA7C,CAAwFkS,QAAxF,CACX,2BADW,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC6vB,WAAN,KAAsBrvB,SAAtB,IAAmCR,KAAK,CAAC6vB,WAAN,KAAsB,IAA7D,EAAmE;IACjE,IAAM5d,IAAI,GAAGib,+BAA+B,CAACltB,KAAK,CAAC6vB,WAAP,EAAoB5vB,OAApB,CAA/B,CAA4DkS,QAA5D,CAAqE,aAArE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACk1B,uBAAN,KAAkC10B,SAAlC,IAA+CR,KAAK,CAACk1B,uBAAN,KAAkC,IAArF,EAA2F;IACzF,IAAMjjB,IAAI,GAAGgb,2CAA2C,CAACjtB,KAAK,CAACk1B,uBAAP,EAAgCj1B,OAAhC,CAA3C,CAAoFkS,QAApF,CACX,yBADW,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CA7CD;;AA+CA,IAAMojB,8CAA8C,GAAG,UACrDn1B,KADqD,EAErDC,OAFqD,EAE9B;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,4BAAd,CAAjB;;EACA,IAAIM,KAAK,CAACiM,MAAN,KAAiBzL,SAAjB,IAA8BR,KAAK,CAACiM,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMgG,IAAI,GAAG,IAAIvS,SAAJ,CAAc,QAAd,EAAwBwS,YAAxB,CAAqC,IAAItS,SAAJ,CAAcI,KAAK,CAACiM,MAApB,CAArC,EAAkEkG,QAAlE,CAA2E,QAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACiqB,IAAN,KAAezpB,SAAf,IAA4BR,KAAK,CAACiqB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAMZ,KAAK,GAAGa,0BAA0B,CAAClqB,KAAK,CAACiqB,IAAP,EAAahqB,OAAb,CAAxC;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,KAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,OAAOF,QAAP;AACD,CAjBD;;AAmBA,IAAM+iB,yCAAyC,GAAG,UAAC90B,KAAD,EAA+BC,OAA/B,EAAsD;EACtG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,uBAAd,CAAjB;EACAZ,qBAAqB,CAAC4rB,KAAtB,CAA4B1qB,KAA5B,EAAmC;IACjCiM,MAAM,EAAE,UAAC+b,KAAD,EAAM;MACZ,IAAM/V,IAAI,GAAG,IAAIvS,SAAJ,CAAc,QAAd,EAAwBwS,YAAxB,CAAqC,IAAItS,SAAJ,CAAcooB,KAAd,CAArC,EAA2D7V,QAA3D,CAAoE,QAApE,CAAb;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAJgC;IAKjC0Y,GAAG,EAAE,UAAC3C,KAAD,EAAM;MACT,IAAM/V,IAAI,GAAG2Y,uBAAuB,CAAC5C,KAAD,EAAQ/nB,OAAR,CAAvB,CAAwCkS,QAAxC,CAAiD,KAAjD,CAAb;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CARgC;IASjC4Y,GAAG,EAAE,UAAC7C,KAAD,EAAM;MACT,IAAM/V,IAAI,GAAGkjB,8CAA8C,CAACnN,KAAD,EAAQ/nB,OAAR,CAA9C,CAA+DkS,QAA/D,CAAwE,KAAxE,CAAb;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAZgC;IAajC6Y,CAAC,EAAE,UAAC5W,IAAD,EAAe8T,KAAf,EAAyB;MAC1B,IAAI,EAAEA,KAAK,YAAYtoB,SAAjB,IAA8BsoB,KAAK,YAAYpoB,SAAjD,CAAJ,EAAiE;QAC/D,MAAM,IAAIe,KAAJ,CAAU,mDAAV,CAAN;MACD;;MACDoR,QAAQ,CAACG,YAAT,CAAsB,IAAIxS,SAAJ,CAAcwU,IAAd,EAAoBhC,YAApB,CAAiC8V,KAAjC,CAAtB;IACD;EAlBgC,CAAnC;EAoBA,OAAOjW,QAAP;AACD,CAvBD;;AAyBA,IAAM4iB,oCAAoC,GAAG,UAAC30B,KAAD,EAA2BC,OAA3B,EAAkD;EAC7F,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAG2iB,mCAAmC,CAAC/K,KAAD,EAAQ5pB,OAAR,CAAhD;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAMqb,mCAAmC,GAAG,UAACxtB,KAAD,EAAyBC,OAAzB,EAAgD;EAC1F,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,iBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC2Y,MAAN,KAAiBnY,SAAjB,IAA8BR,KAAK,CAAC2Y,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM1G,IAAI,GAAG,IAAIvS,SAAJ,CAAc,uBAAd,EAAuCwS,YAAvC,CAAoD,IAAItS,SAAJ,CAAcI,KAAK,CAAC2Y,MAApB,CAApD,EAAiFxG,QAAjF,CAA0F,QAA1F,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACo1B,IAAN,KAAe50B,SAAf,IAA4BR,KAAK,CAACo1B,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAMnjB,IAAI,GAAGwgB,wCAAwC,CAACzyB,KAAK,CAACo1B,IAAP,EAAan1B,OAAb,CAAxC,CAA8DkS,QAA9D,CAAuE,MAAvE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAXD;;AAaA,IAAM0gB,wCAAwC,GAAG,UAACzyB,KAAD,EAA8BC,OAA9B,EAAqD;EACpG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,sBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACq1B,OAAN,KAAkB70B,SAAlB,IAA+BR,KAAK,CAACq1B,OAAN,KAAkB,IAArD,EAA2D;IACzD,IAAMpjB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,SAAd,EAAyBwS,YAAzB,CAAsC,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAACq1B,OAAP,CAApB,CAAtC,EAA4EljB,QAA5E,CAAqF,SAArF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAPD;;AASA,IAAMhC,+CAA+C,GAAG,UACtD/P,KADsD,EAEtDC,OAFsD,EAE/B;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,6BAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC4c,KAAN,KAAgBpc,SAAhB,IAA6BR,KAAK,CAAC4c,KAAN,KAAgB,IAAjD,EAAuD;IACrD,IAAM3K,IAAI,GAAG,IAAIvS,SAAJ,CAAc,OAAd,EAAuBwS,YAAvB,CAAoC,IAAItS,SAAJ,CAAcI,KAAK,CAAC4c,KAApB,CAApC,EAAgEzK,QAAhE,CAAyE,OAAzE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAVD;;AAYA,IAAMW,mCAAmC,GAAG,UAAC1S,KAAD,EAAyBC,OAAzB,EAAgD;EAC1F,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,iBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACs1B,OAAN,KAAkB90B,SAAlB,IAA+BR,KAAK,CAACs1B,OAAN,KAAkB,IAArD,EAA2D;IACzD,IAAMrjB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,uBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAACs1B,OAAP,CAApB,CADH,EAEVnjB,QAFU,CAED,SAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CATD;;AAWA,IAAMH,kCAAkC,GAAG,UAAC5R,KAAD,EAAwBC,OAAxB,EAA+C;EACxF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,gBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC4sB,IAAN,KAAepsB,SAAf,IAA4BR,KAAK,CAAC4sB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAM3a,IAAI,GAAG,IAAIvS,SAAJ,CAAc,MAAd,EAAsBwS,YAAtB,CAAmC,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAAC4sB,IAAP,CAApB,CAAnC,EAAsEza,QAAtE,CAA+E,MAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACu1B,oBAAN,KAA+B/0B,SAA/B,IAA4CR,KAAK,CAACu1B,oBAAN,KAA+B,IAA/E,EAAqF;IACnF,IAAMtjB,IAAI,GAAGqc,wCAAwC,CAACtuB,KAAK,CAACu1B,oBAAP,EAA6Bt1B,OAA7B,CAAxC,CAA8EkS,QAA9E,CACX,sBADW,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACgvB,IAAN,KAAexuB,SAAf,IAA4BR,KAAK,CAACgvB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAM/c,IAAI,GAAG,IAAIvS,SAAJ,CAAc,oBAAd,EAAoCwS,YAApC,CAAiD,IAAItS,SAAJ,CAAcI,KAAK,CAACgvB,IAApB,CAAjD,EAA4E7c,QAA5E,CAAqF,MAArF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACuuB,IAAN,KAAe/tB,SAAf,IAA4BR,KAAK,CAACuuB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAMtc,IAAI,GAAG,IAAIvS,SAAJ,CAAc,MAAd,EAAsBwS,YAAtB,CAAmC,IAAItS,SAAJ,CAAcI,KAAK,CAACuuB,IAApB,CAAnC,EAA8Dpc,QAA9D,CAAuE,MAAvE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACw1B,WAAN,KAAsBh1B,SAAtB,IAAmCR,KAAK,CAACw1B,WAAN,KAAsB,IAA7D,EAAmE;IACjE,IAAMvjB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,aAAd,EAA6BwS,YAA7B,CAA0C,IAAItS,SAAJ,CAAcI,KAAK,CAACw1B,WAApB,CAA1C,EAA4ErjB,QAA5E,CAAqF,aAArF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACy1B,gBAAN,KAA2Bj1B,SAA3B,IAAwCR,KAAK,CAACy1B,gBAAN,KAA2B,IAAvE,EAA6E;IAC3E,IAAMxjB,IAAI,GAAGyjB,oCAAoC,CAAC11B,KAAK,CAACy1B,gBAAP,EAAyBx1B,OAAzB,CAApC,CAAsEkS,QAAtE,CAA+E,kBAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC21B,cAAN,KAAyBn1B,SAAzB,IAAsCR,KAAK,CAAC21B,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAM1jB,IAAI,GAAGqhB,kCAAkC,CAACtzB,KAAK,CAAC21B,cAAP,EAAuB11B,OAAvB,CAAlC,CAAkEkS,QAAlE,CAA2E,gBAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAjCD;;AAmCA,IAAM6jB,+BAA+B,GAAG,UAAC51B,KAAD,EAAqBC,OAArB,EAA4C;EAClF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,aAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC61B,SAAN,KAAoBr1B,SAApB,IAAiCR,KAAK,CAAC61B,SAAN,KAAoB,IAAzD,EAA+D;IAC7D,IAAM5jB,IAAI,GAAGoZ,6BAA6B,CAACrrB,KAAK,CAAC61B,SAAP,EAAkB51B,OAAlB,CAA7B,CAAwDkS,QAAxD,CAAiE,WAAjE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC81B,QAAN,KAAmBt1B,SAAnB,IAAgCR,KAAK,CAAC81B,QAAN,KAAmB,IAAvD,EAA6D;IAC3D,IAAM7jB,IAAI,GAAGiiB,4BAA4B,CAACl0B,KAAK,CAAC81B,QAAP,EAAiB71B,OAAjB,CAA5B,CAAsDkS,QAAtD,CAA+D,UAA/D,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAXD;;AAaA,IAAMgkB,gCAAgC,GAAG,UAAC/1B,KAAD,EAAuBC,OAAvB,EAA8C;EACrF,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAG2jB,+BAA+B,CAAC/L,KAAD,EAAQ5pB,OAAR,CAA5C;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,aAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAM6gB,+BAA+B,GAAG,UAAChzB,KAAD,EAAqBC,OAArB,EAA4C;EAClF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,aAAd,CAAjB;;EACA,IAAIM,KAAK,CAACg2B,WAAN,KAAsBx1B,SAAtB,IAAmCR,KAAK,CAACg2B,WAAN,KAAsB,IAA7D,EAAmE;IACjE,IAAM3M,KAAK,GAAGgF,kCAAkC,CAACruB,KAAK,CAACg2B,WAAP,EAAoB/1B,OAApB,CAAhD;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,YAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,OAAOF,QAAP;AACD,CAVD;;AAYA,IAAMyhB,8BAA8B,GAAG,UAACxzB,KAAD,EAAoBC,OAApB,EAA2C;EAChF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,YAAd,CAAjB;;EACA,IAAIM,KAAK,CAACi2B,UAAN,KAAqBz1B,SAArB,IAAkCR,KAAK,CAACi2B,UAAN,KAAqB,IAA3D,EAAiE;IAC/D,IAAMhkB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,YAAd,EAA4BwS,YAA5B,CAAyC,IAAItS,SAAJ,CAAcI,KAAK,CAACi2B,UAApB,CAAzC,EAA0E9jB,QAA1E,CAAmF,YAAnF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACiM,MAAN,KAAiBzL,SAAjB,IAA8BR,KAAK,CAACiM,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMgG,IAAI,GAAG,IAAIvS,SAAJ,CAAc,gBAAd,EAAgCwS,YAAhC,CAA6C,IAAItS,SAAJ,CAAcI,KAAK,CAACiM,MAApB,CAA7C,EAA0EkG,QAA1E,CAAmF,QAAnF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC8wB,UAAN,KAAqBtwB,SAArB,IAAkCR,KAAK,CAAC8wB,UAAN,KAAqB,IAA3D,EAAiE;IAC/D,IAAM7e,IAAI,GAAG0b,8BAA8B,CAAC3tB,KAAK,CAAC8wB,UAAP,EAAmB7wB,OAAnB,CAA9B,CAA0DkS,QAA1D,CAAmE,YAAnE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACk2B,SAAN,KAAoB11B,SAApB,IAAiCR,KAAK,CAACk2B,SAAN,KAAoB,IAAzD,EAA+D;IAC7D,IAAMjkB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,iBAAd,EAAiCwS,YAAjC,CAA8C,IAAItS,SAAJ,CAAcI,KAAK,CAACk2B,SAApB,CAA9C,EAA8E/jB,QAA9E,CAAuF,WAAvF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACgZ,iBAAN,KAA4BxY,SAA5B,IAAyCR,KAAK,CAACgZ,iBAAN,KAA4B,IAAzE,EAA+E;IAC7E,IAAMqQ,KAAK,GAAGC,0BAA0B,CAACtpB,KAAK,CAACgZ,iBAAP,EAA0B/Y,OAA1B,CAAxC;IACA,IAAMk2B,eAAa,GAAG,IAAIz2B,SAAJ,CAAc,mBAAd,CAAtB;IACA2pB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBkkB,eAAa,CAACjkB,YAAd,CAA2BD,IAA3B;IACD,CAFD;IAGAF,QAAQ,CAACG,YAAT,CAAsBikB,eAAtB;EACD;;EACD,IAAIn2B,KAAK,CAACqE,OAAN,KAAkB7D,SAAlB,IAA+BR,KAAK,CAACqE,OAAN,KAAkB,IAArD,EAA2D;IACzD,IAAM4N,IAAI,GAAGhC,2BAA2B,CAACjQ,KAAK,CAACqE,OAAP,EAAgBpE,OAAhB,CAA3B,CAAoDkS,QAApD,CAA6D,SAA7D,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACo2B,YAAN,KAAuB51B,SAAvB,IAAoCR,KAAK,CAACo2B,YAAN,KAAuB,IAA/D,EAAqE;IACnE,IAAM/M,KAAK,GAAGgN,gCAAgC,CAACr2B,KAAK,CAACo2B,YAAP,EAAqBn2B,OAArB,CAA9C;IACA,IAAMq2B,eAAa,GAAG,IAAI52B,SAAJ,CAAc,cAAd,CAAtB;IACA2pB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBqkB,eAAa,CAACpkB,YAAd,CAA2BD,IAA3B;IACD,CAFD;IAGAF,QAAQ,CAACG,YAAT,CAAsBokB,eAAtB;EACD;;EACD,IAAIt2B,KAAK,CAAC0D,YAAN,KAAuBlD,SAAvB,IAAoCR,KAAK,CAAC0D,YAAN,KAAuB,IAA/D,EAAqE;IACnE,IAAMuO,IAAI,GAAG,IAAIvS,SAAJ,CAAc,cAAd,EAA8BwS,YAA9B,CAA2C,IAAItS,SAAJ,CAAcI,KAAK,CAAC0D,YAApB,CAA3C,EAA8EyO,QAA9E,CAAuF,cAAvF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CA3CD;;AA6CA,IAAMa,6BAA6B,GAAG,UAAC5S,KAAD,EAAmBC,OAAnB,EAA0C;EAC9E,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,WAAd,CAAjB;;EACA,IAAIM,KAAK,CAACu2B,KAAN,KAAgB/1B,SAAhB,IAA6BR,KAAK,CAACu2B,KAAN,KAAgB,IAAjD,EAAuD;IACrD,IAAMtkB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,OAAd,EAAuBwS,YAAvB,CAAoC,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAACu2B,KAAP,CAApB,CAApC,EAAwEpkB,QAAxE,CAAiF,OAAjF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACw2B,GAAN,KAAch2B,SAAd,IAA2BR,KAAK,CAACw2B,GAAN,KAAc,IAA7C,EAAmD;IACjD,IAAMvkB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,KAAd,EAAqBwS,YAArB,CAAkC,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAACw2B,GAAP,CAApB,CAAlC,EAAoErkB,QAApE,CAA6E,KAA7E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAXD;;AAaA,IAAM2jB,oCAAoC,GAAG,UAAC11B,KAAD,EAA0BC,OAA1B,EAAiD;EAC5F,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,kBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACqS,kBAAN,KAA6B7R,SAA7B,IAA0CR,KAAK,CAACqS,kBAAN,KAA6B,IAA3E,EAAiF;IAC/E,IAAMJ,IAAI,GAAGK,sCAAsC,CAACtS,KAAK,CAACqS,kBAAP,EAA2BpS,OAA3B,CAAtC,CAA0EkS,QAA1E,CACX,oBADW,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACoS,cAAN,KAAyB5R,SAAzB,IAAsCR,KAAK,CAACoS,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAMH,IAAI,GAAG,IAAIvS,SAAJ,CAAc,gBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACoS,cAApB,CADH,EAEVD,QAFU,CAED,gBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACgS,UAAN,KAAqBxR,SAArB,IAAkCR,KAAK,CAACgS,UAAN,KAAqB,IAA3D,EAAiE;IAC/D,IAAMC,IAAI,GAAG,IAAIvS,SAAJ,CAAc,YAAd,EAA4BwS,YAA5B,CAAyC,IAAItS,SAAJ,CAAcI,KAAK,CAACgS,UAApB,CAAzC,EAA0EG,QAA1E,CAAmF,YAAnF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACuS,mBAAN,KAA8B/R,SAA9B,IAA2CR,KAAK,CAACuS,mBAAN,KAA8B,IAA7E,EAAmF;IACjF,IAAMN,IAAI,GAAGO,uCAAuC,CAACxS,KAAK,CAACuS,mBAAP,EAA4BtS,OAA5B,CAAvC,CAA4EkS,QAA5E,CACX,qBADW,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAzBD;;AA2BA,IAAM0kB,iDAAiD,GAAG,UACxDz2B,KADwD,EAExDC,OAFwD,EAEjC;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,+BAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC02B,YAAN,KAAuBl2B,SAAvB,IAAoCR,KAAK,CAAC02B,YAAN,KAAuB,IAA/D,EAAqE;IACnE,IAAMzkB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,sBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAAC02B,YAApB,CADH,EAEVvkB,QAFU,CAED,cAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC22B,cAAN,KAAyBn2B,SAAzB,IAAsCR,KAAK,CAAC22B,cAAN,KAAyB,IAAnE,EAAyE;IACvE,IAAM1kB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,aAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAAC22B,cAApB,CADH,EAEVxkB,QAFU,CAED,gBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAlBD;;AAoBA,IAAM/D,qDAAqD,GAAG,UAC5DhO,KAD4D,EAE5DC,OAF4D,EAErC;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,mCAAd,CAAjB;;EACA,IAAIM,KAAK,CAACsa,KAAN,KAAgB9Z,SAAhB,IAA6BR,KAAK,CAACsa,KAAN,KAAgB,IAAjD,EAAuD;IACrD,IAAM+O,KAAK,GAAGuN,6CAA6C,CAAC52B,KAAK,CAACsa,KAAP,EAAcra,OAAd,CAA3D;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,MAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,OAAOF,QAAP;AACD,CAbD;;AAeA,IAAM8kB,4CAA4C,GAAG,UACnD72B,KADmD,EAEnDC,OAFmD,EAE5B;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,0BAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC82B,kCAAN,KAA6Ct2B,SAA7C,IAA0DR,KAAK,CAAC82B,kCAAN,KAA6C,IAA3G,EAAiH;IAC/G,IAAM7kB,IAAI,GAAGwkB,iDAAiD,CAC5Dz2B,KAAK,CAAC82B,kCADsD,EAE5D72B,OAF4D,CAAjD,CAGXkS,QAHW,CAGF,oCAHE,CAAb;IAIAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACiE,gBAAN,KAA2BzD,SAA3B,IAAwCR,KAAK,CAACiE,gBAAN,KAA2B,IAAvE,EAA6E;IAC3E,IAAMgO,IAAI,GAAG,IAAIvS,SAAJ,CAAc,kBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAACiE,gBAAP,CAApB,CADH,EAEVkO,QAFU,CAED,kBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAnBD;;AAqBA,IAAM6kB,6CAA6C,GAAG,UACpD52B,KADoD,EAEpDC,OAFoD,EAE7B;EAEvB,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAG4kB,4CAA4C,CAAChN,KAAD,EAAQ5pB,OAAR,CAAzD;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAbD;;AAeA,IAAM6iB,2CAA2C,GAAG,UAACh1B,KAAD,EAAiCC,OAAjC,EAAwD;EAC1G,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,yBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC+2B,sBAAN,KAAiCv2B,SAAjC,IAA8CR,KAAK,CAAC+2B,sBAAN,KAAiC,IAAnF,EAAyF;IACvF,IAAM9kB,IAAI,GAAG+kB,0CAA0C,CAACh3B,KAAK,CAAC+2B,sBAAP,EAA+B92B,OAA/B,CAA1C,CAAkFkS,QAAlF,CACX,wBADW,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACi3B,oBAAN,KAA+Bz2B,SAA/B,IAA4CR,KAAK,CAACi3B,oBAAN,KAA+B,IAA/E,EAAqF;IACnF,IAAMhlB,IAAI,GAAGwiB,wCAAwC,CAACz0B,KAAK,CAACi3B,oBAAP,EAA6Bh3B,OAA7B,CAAxC,CAA8EkS,QAA9E,CACX,sBADW,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAfD;;AAiBA,IAAM6e,0BAA0B,GAAG,UAAC5wB,KAAD,EAAgBC,OAAhB,EAAuC;EACxE,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,SAAd,CAAjB;;EACA,IAAIM,KAAK,CAACk3B,KAAN,KAAgB12B,SAAhB,IAA6BR,KAAK,CAACk3B,KAAN,KAAgB,IAAjD,EAAuD;IACrD,IAAMjlB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,aAAd,EAA6BwS,YAA7B,CAA0C,IAAItS,SAAJ,CAAcI,KAAK,CAACk3B,KAApB,CAA1C,EAAsE/kB,QAAtE,CAA+E,OAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAPD;;AASA,IAAMilB,0CAA0C,GAAG,UAACh3B,KAAD,EAAgCC,OAAhC,EAAuD;EACxG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,wBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC2Y,MAAN,KAAiBnY,SAAjB,IAA8BR,KAAK,CAAC2Y,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM1G,IAAI,GAAG,IAAIvS,SAAJ,CAAc,8BAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAAC2Y,MAApB,CADH,EAEVxG,QAFU,CAED,QAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CATD;;AAWA,IAAM2e,yBAAyB,GAAG,UAAC1wB,KAAD,EAAeC,OAAf,EAAsC;EACtE,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,QAAd,CAAjB;EACA,OAAOqS,QAAP;AACD,CAHD;;AAKA,IAAMuY,wCAAwC,GAAG,UAACtqB,KAAD,EAA8BC,OAA9B,EAAqD;EACpG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,sBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACm3B,UAAN,KAAqB32B,SAArB,IAAkCR,KAAK,CAACm3B,UAAN,KAAqB,IAA3D,EAAiE;IAC/D,IAAMllB,IAAI,GAAGmlB,kDAAkD,CAACp3B,KAAK,CAACm3B,UAAP,EAAmBl3B,OAAnB,CAAlD,CAA8EkS,QAA9E,CAAuF,YAAvF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAPD;;AASA,IAAMqlB,kDAAkD,GAAG,UACzDp3B,KADyD,EAEzDC,OAFyD,EAElC;EAEvB,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,gCAAd,CAAjB;;EACA,IAAIM,KAAK,CAACq3B,mBAAN,KAA8B72B,SAA9B,IAA2CR,KAAK,CAACq3B,mBAAN,KAA8B,IAA7E,EAAmF;IACjF,IAAMplB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,mCAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACq3B,mBAApB,CADH,EAEVllB,QAFU,CAED,qBAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC6vB,WAAN,KAAsBrvB,SAAtB,IAAmCR,KAAK,CAAC6vB,WAAN,KAAsB,IAA7D,EAAmE;IACjE,IAAM5d,IAAI,GAAGsY,8CAA8C,CAACvqB,KAAK,CAAC6vB,WAAP,EAAoB5vB,OAApB,CAA9C,CAA2EkS,QAA3E,CAAoF,aAApF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAhBD;;AAkBA,IAAM6Y,uBAAuB,GAAG,UAAC5qB,KAAD,EAAaC,OAAb,EAAoC;EAClE,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,KAAd,CAAjB;;EACA,IAAIM,KAAK,CAACa,GAAN,KAAcL,SAAd,IAA2BR,KAAK,CAACa,GAAN,KAAc,IAA7C,EAAmD;IACjD,IAAMoR,IAAI,GAAG,IAAIvS,SAAJ,CAAc,WAAd,EAA2BwS,YAA3B,CAAwC,IAAItS,SAAJ,CAAcI,KAAK,CAACa,GAApB,CAAxC,EAAkEsR,QAAlE,CAA2E,KAA3E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACouB,KAAN,KAAgB5tB,SAAhB,IAA6BR,KAAK,CAACouB,KAAN,KAAgB,IAAjD,EAAuD;IACrD,IAAMnc,IAAI,GAAG,IAAIvS,SAAJ,CAAc,OAAd,EAAuBwS,YAAvB,CAAoC,IAAItS,SAAJ,CAAcI,KAAK,CAACouB,KAApB,CAApC,EAAgEjc,QAAhE,CAAyE,OAAzE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAXD;;AAaA,IAAM9B,2BAA2B,GAAG,UAACjQ,KAAD,EAAiBC,OAAjB,EAAwC;EAC1E,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,SAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC+c,MAAN,KAAiBvc,SAAjB,IAA8BR,KAAK,CAAC+c,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMsM,KAAK,GAAGa,0BAA0B,CAAClqB,KAAK,CAAC+c,MAAP,EAAe9c,OAAf,CAAxC;IACA,IAAMq3B,eAAa,GAAG,IAAI53B,SAAJ,CAAc,QAAd,CAAtB;IACA2pB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBqlB,eAAa,CAACplB,YAAd,CAA2BD,IAA3B;IACD,CAFD;IAGAF,QAAQ,CAACG,YAAT,CAAsBolB,eAAtB;EACD;;EACD,OAAOvlB,QAAP;AACD,CAXD;;AAaA,IAAMmY,0BAA0B,GAAG,UAAClqB,KAAD,EAAeC,OAAf,EAAsC;EACvE,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAG2Y,uBAAuB,CAACf,KAAD,EAAQ5pB,OAAR,CAApC;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,KAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAMolB,+BAA+B,GAAG,UAACv3B,KAAD,EAAqBC,OAArB,EAA4C;EAClF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,aAAd,CAAjB;;EACA,IAAIM,KAAK,CAACyuB,OAAN,KAAkBjuB,SAAlB,IAA+BR,KAAK,CAACyuB,OAAN,KAAkB,IAArD,EAA2D;IACzD,IAAMxc,IAAI,GAAGyc,2BAA2B,CAAC1uB,KAAK,CAACyuB,OAAP,EAAgBxuB,OAAhB,CAA3B,CAAoDkS,QAApD,CAA6D,SAA7D,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC2uB,UAAN,KAAqBnuB,SAArB,IAAkCR,KAAK,CAAC2uB,UAAN,KAAqB,IAA3D,EAAiE;IAC/D,IAAM1c,IAAI,GAAG,IAAIvS,SAAJ,CAAc,sBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAAC2uB,UAApB,CADH,EAEVxc,QAFU,CAED,YAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAbD;;AAeA,IAAMqgB,gCAAgC,GAAG,UAACpyB,KAAD,EAAuBC,OAAvB,EAA8C;EACrF,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAGslB,+BAA+B,CAAC1N,KAAD,EAAQ5pB,OAAR,CAA5C;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,OAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAMqlB,2BAA2B,GAAG,UAACx3B,KAAD,EAAiBC,OAAjB,EAAwC;EAC1E,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,SAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC4sB,IAAN,KAAepsB,SAAf,IAA4BR,KAAK,CAAC4sB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAM3a,IAAI,GAAG,IAAIvS,SAAJ,CAAc,wBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAAC4sB,IAAP,CAApB,CADH,EAEVza,QAFU,CAED,MAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACipB,UAAN,KAAqBzoB,SAArB,IAAkCR,KAAK,CAACipB,UAAN,KAAqB,IAA3D,EAAiE;IAC/D,IAAMhX,IAAI,GAAG,IAAIvS,SAAJ,CAAc,8BAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACipB,UAApB,CADH,EAEV9W,QAFU,CAED,YAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAfD;;AAiBA,IAAM6d,+BAA+B,GAAG,UAAC5vB,KAAD,EAAmBC,OAAnB,EAA0C;EAChF,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAGulB,2BAA2B,CAAC3N,KAAD,EAAQ5pB,OAAR,CAAxC;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAMslB,sCAAsC,GAAG,UAACz3B,KAAD,EAA4BC,OAA5B,EAAmD;EAChG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,oBAAd,CAAjB;;EACA,IAAIM,KAAK,CAAC4F,EAAN,KAAapF,SAAb,IAA0BR,KAAK,CAAC4F,EAAN,KAAa,IAA3C,EAAiD;IAC/C,IAAMqM,IAAI,GAAG,IAAIvS,SAAJ,CAAc,gBAAd,EAAgCwS,YAAhC,CAA6C,IAAItS,SAAJ,CAAcI,KAAK,CAAC4F,EAApB,CAA7C,EAAsEuM,QAAtE,CAA+E,IAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC03B,QAAN,KAAmBl3B,SAAnB,IAAgCR,KAAK,CAAC03B,QAAN,KAAmB,IAAvD,EAA6D;IAC3D,IAAMzlB,IAAI,GAAG,IAAIvS,SAAJ,CAAc,UAAd,EAA0BwS,YAA1B,CAAuC,IAAItS,SAAJ,CAAcI,KAAK,CAAC03B,QAApB,CAAvC,EAAsEvlB,QAAtE,CAA+E,OAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACmxB,MAAN,KAAiB3wB,SAAjB,IAA8BR,KAAK,CAACmxB,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM9H,KAAK,GAAG4E,6BAA6B,CAACjuB,KAAK,CAACmxB,MAAP,EAAelxB,OAAf,CAA3C;IACAopB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClBA,IAAI,GAAGA,IAAI,CAACE,QAAL,CAAc,OAAd,CAAP;MACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;IACD,CAHD;EAID;;EACD,IAAIjS,KAAK,CAACmqB,MAAN,KAAiB3pB,SAAjB,IAA8BR,KAAK,CAACmqB,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAMlY,IAAI,GAAGmf,mDAAmD,CAACpxB,KAAK,CAACmqB,MAAP,EAAelqB,OAAf,CAAnD,CAA2EkS,QAA3E,CAAoF,QAApF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAtBD;;AAwBA,IAAM+gB,0CAA0C,GAAG,UAAC9yB,KAAD,EAA8BC,OAA9B,EAAqD;EACtG,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAGwlB,sCAAsC,CAAC5N,KAAD,EAAQ5pB,OAAR,CAAnD;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAMwlB,8BAA8B,GAAG,UAAC33B,KAAD,EAAoBC,OAApB,EAA2C;EAChF,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,YAAd,CAAjB;;EACA,IAAIM,KAAK,CAACiW,IAAN,KAAezV,SAAf,IAA4BR,KAAK,CAACiW,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAMhE,IAAI,GAAG,IAAIvS,SAAJ,CAAc,MAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAACiW,IAAN,CAAWzR,WAAX,GAAyB1D,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,IAAyC,GAAvD,CADH,EAEVqR,QAFU,CAED,MAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC4sB,IAAN,KAAepsB,SAAf,IAA4BR,KAAK,CAAC4sB,IAAN,KAAe,IAA/C,EAAqD;IACnD,IAAM3a,IAAI,GAAG,IAAIvS,SAAJ,CAAc,MAAd,EAAsBwS,YAAtB,CAAmC,IAAItS,SAAJ,CAAcwpB,MAAM,CAACppB,KAAK,CAAC4sB,IAAP,CAApB,CAAnC,EAAsEza,QAAtE,CAA+E,MAA/E,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC0D,YAAN,KAAuBlD,SAAvB,IAAoCR,KAAK,CAAC0D,YAAN,KAAuB,IAA/D,EAAqE;IACnE,IAAMuO,IAAI,GAAG,IAAIvS,SAAJ,CAAc,wBAAd,EACVwS,YADU,CACG,IAAItS,SAAJ,CAAcI,KAAK,CAAC0D,YAApB,CADH,EAEVyO,QAFU,CAED,cAFC,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAnBD;;AAqBA,IAAM4f,kCAAkC,GAAG,UAAC3xB,KAAD,EAAsBC,OAAtB,EAA6C;EACtF,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAG0lB,8BAA8B,CAAC9N,KAAD,EAAQ5pB,OAAR,CAA3C;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,QAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAMkkB,gCAAgC,GAAG,UAACr2B,KAAD,EAAyBC,OAAzB,EAAgD;EACvF,OAAOD,KAAK,CACT2pB,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAM;IACT,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,IAAM5X,IAAI,GAAGsgB,iCAAiC,CAAC1I,KAAD,EAAQ5pB,OAAR,CAA9C;IACA,OAAOgS,IAAI,CAACE,QAAL,CAAc,eAAd,CAAP;EACD,CARI,CAAP;AASD,CAVD;;AAYA,IAAM/B,2CAA2C,GAAG,UAACpQ,KAAD,EAAiCC,OAAjC,EAAwD;EAC1G,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,yBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACmd,SAAN,KAAoB3c,SAApB,IAAiCR,KAAK,CAACmd,SAAN,KAAoB,IAAzD,EAA+D;IAC7D,IAAMlL,IAAI,GAAG,IAAIvS,SAAJ,CAAc,WAAd,EAA2BwS,YAA3B,CAAwC,IAAItS,SAAJ,CAAcI,KAAK,CAACmd,SAApB,CAAxC,EAAwEhL,QAAxE,CAAiF,WAAjF,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAAC2Y,MAAN,KAAiBnY,SAAjB,IAA8BR,KAAK,CAAC2Y,MAAN,KAAiB,IAAnD,EAAyD;IACvD,IAAM1G,IAAI,GAAG,IAAIvS,SAAJ,CAAc,wBAAd,EAAwCwS,YAAxC,CAAqD,IAAItS,SAAJ,CAAcI,KAAK,CAAC2Y,MAApB,CAArD,EAAkFxG,QAAlF,CAA2F,QAA3F,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,OAAOF,QAAP;AACD,CAXD;;AAaA,IAAMxB,wCAAwC,GAAG,UAACvQ,KAAD,EAA8BC,OAA9B,EAAqD;EACpG,IAAM8R,QAAQ,GAAG,IAAIrS,SAAJ,CAAc,sBAAd,CAAjB;;EACA,IAAIM,KAAK,CAACsd,aAAN,KAAwB9c,SAAxB,IAAqCR,KAAK,CAACsd,aAAN,KAAwB,IAAjE,EAAuE;IACrE,IAAMrL,IAAI,GAAG+b,iCAAiC,CAAChuB,KAAK,CAACsd,aAAP,EAAsBrd,OAAtB,CAAjC,CAAgEkS,QAAhE,CAAyE,eAAzE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACud,aAAN,KAAwB/c,SAAxB,IAAqCR,KAAK,CAACud,aAAN,KAAwB,IAAjE,EAAuE;IACrE,IAAMtL,IAAI,GAAGgd,iCAAiC,CAACjvB,KAAK,CAACud,aAAP,EAAsBtd,OAAtB,CAAjC,CAAgEkS,QAAhE,CAAyE,eAAzE,CAAb;IACAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACwd,qBAAN,KAAgChd,SAAhC,IAA6CR,KAAK,CAACwd,qBAAN,KAAgC,IAAjF,EAAuF;IACrF,IAAMvL,IAAI,GAAGuiB,yCAAyC,CAACx0B,KAAK,CAACwd,qBAAP,EAA8Bvd,OAA9B,CAAzC,CAAgFkS,QAAhF,CACX,uBADW,CAAb;IAGAJ,QAAQ,CAACG,YAAT,CAAsBD,IAAtB;EACD;;EACD,IAAIjS,KAAK,CAACyd,YAAN,KAAuBjd,SAAvB,IAAoCR,KAAK,CAACyd,YAAN,KAAuB,IAA/D,EAAqE;IACnE,IAAM4L,KAAK,GAAG0M,gCAAgC,CAAC/1B,KAAK,CAACyd,YAAP,EAAqBxd,OAArB,CAA9C;IACA,IAAM23B,eAAa,GAAG,IAAIl4B,SAAJ,CAAc,cAAd,CAAtB;IACA2pB,KAAK,CAACtoB,GAAN,CAAU,UAACkR,IAAD,EAAU;MAClB2lB,eAAa,CAAC1lB,YAAd,CAA2BD,IAA3B;IACD,CAFD;IAGAF,QAAQ,CAACG,YAAT,CAAsB0lB,eAAtB;EACD;;EACD,OAAO7lB,QAAP;AACD,CAzBD;;AA2BA,IAAM8lB,oDAAoD,GAAG,UAC3D5kB,MAD2D,EAE3DhT,OAF2D,EAEpC;EAEvB,IAAIgC,QAAQ,GAAQ;IAClBknB,mBAAmB,EAAE3oB;EADH,CAApB;;EAGA,IAAIyS,MAAM,CAAC,qBAAD,CAAN,KAAkCzS,SAAtC,EAAiD;IAC/CyB,QAAQ,CAACknB,mBAAT,GAA+B3K,QAAQ,CAACvL,MAAM,CAAC,qBAAD,CAAP,CAAvC;EACD;;EACD,OAAOhR,QAAP;AACD,CAXD;;AAaA,IAAM61B,8CAA8C,GAAG,UACrD7kB,MADqD,EAErDhT,OAFqD,EAE9B;EAEvB,IAAIgC,QAAQ,GAAQ;IAClB8W,KAAK,EAAEvY;EADW,CAApB;;EAGA,IAAIyS,MAAM,CAAC,OAAD,CAAN,KAAoBzS,SAAxB,EAAmC;IACjCyB,QAAQ,CAAC8W,KAAT,GAAiB9F,MAAM,CAAC,OAAD,CAAvB;EACD;;EACD,OAAOhR,QAAP;AACD,CAXD;;AAaA,IAAM81B,oCAAoC,GAAG,UAAC9kB,MAAD,EAAchT,OAAd,EAAqC;EAChF,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOA,KAAP;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMmO,oCAAoC,GAAG,UAAC/kB,MAAD,EAAchT,OAAd,EAAqC;EAChF,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOA,KAAP;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMoO,oCAAoC,GAAG,UAAChlB,MAAD,EAAchT,OAAd,EAAqC;EAChF,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOA,KAAP;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMqO,0CAA0C,GAAG,UAACjlB,MAAD,EAAchT,OAAd,EAAqC;EACtF,IAAIgC,QAAQ,GAAQ;IAClBgK,MAAM,EAAEzL,SADU;IAElBypB,IAAI,EAAEzpB;EAFY,CAApB;;EAIA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACgK,MAAT,GAAkBgH,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC0X,GAAP,KAAe,EAAnB,EAAuB;IACrB1oB,QAAQ,CAACgoB,IAAT,GAAgB,EAAhB;EACD;;EACD,IAAIhX,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/ByB,QAAQ,CAACgoB,IAAT,GAAgBjN,4BAA4B,CAAC1d,sBAAsB,CAAC2T,MAAM,CAAC,KAAD,CAAP,CAAvB,EAAwChT,OAAxC,CAA5C;EACD;;EACD,OAAOgC,QAAP;AACD,CAfD;;AAiBA,IAAMoX,4CAA4C,GAAG,UAACpG,MAAD,EAAchT,OAAd,EAAqC;EACxF,IAAIgC,QAAQ,GAAQ;IAClB2D,EAAE,EAAEpF,SADc;IAElB2pB,MAAM,EAAE3pB,SAFU;IAGlB6pB,oBAAoB,EAAE7pB;EAHJ,CAApB;;EAKA,IAAIyS,MAAM,CAAC,IAAD,CAAN,KAAiBzS,SAArB,EAAgC;IAC9ByB,QAAQ,CAAC2D,EAAT,GAAcqN,MAAM,CAAC,IAAD,CAApB;EACD;;EACD,IAAIA,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACkoB,MAAT,GAAkBgO,qCAAqC,CAACllB,MAAM,CAAC,QAAD,CAAP,EAAmBhT,OAAnB,CAAvD;EACD;;EACD,IAAIgT,MAAM,CAAC,sBAAD,CAAN,KAAmCzS,SAAvC,EAAkD;IAChDyB,QAAQ,CAACooB,oBAAT,GAAgC+N,0CAA0C,CAACnlB,MAAM,CAAC,sBAAD,CAAP,EAAiChT,OAAjC,CAA1E;EACD;;EACD,OAAOgC,QAAP;AACD,CAhBD;;AAkBA,IAAM2e,gDAAgD,GAAG,UACvD3N,MADuD,EAEvDhT,OAFuD,EAEhC;EAEvB,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOxQ,4CAA4C,CAACwQ,KAAD,EAAQ5pB,OAAR,CAAnD;EACD,CAPI,CAAP;AAQD,CAZD;;AAcA,IAAMo4B,gDAAgD,GAAG,UACvDplB,MADuD,EAEvDhT,OAFuD,EAEhC;EAEvB,IAAIgC,QAAQ,GAAQ;IAClBuoB,mBAAmB,EAAEhqB;EADH,CAApB;;EAGA,IAAIyS,MAAM,CAAC,qBAAD,CAAN,KAAkCzS,SAAtC,EAAiD;IAC/CyB,QAAQ,CAACuoB,mBAAT,GAA+B8N,kDAAkD,CAC/ErlB,MAAM,CAAC,qBAAD,CADyE,EAE/EhT,OAF+E,CAAjF;EAID;;EACD,OAAOgC,QAAP;AACD,CAdD;;AAgBA,IAAMk2B,qCAAqC,GAAG,UAACllB,MAAD,EAAchT,OAAd,EAAqC;EACjF,IAAIgT,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClC,OAAO;MACLyL,MAAM,EAAEgH,MAAM,CAAC,QAAD;IADT,CAAP;EAGD;;EACD,IAAIA,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/B,OAAO;MACLmqB,GAAG,EAAE4N,yBAAyB,CAACtlB,MAAM,CAAC,KAAD,CAAP,EAAgBhT,OAAhB;IADzB,CAAP;EAGD;;EACD,IAAIgT,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/B,OAAO;MACLqqB,GAAG,EAAEqN,0CAA0C,CAACjlB,MAAM,CAAC,KAAD,CAAP,EAAgBhT,OAAhB;IAD1C,CAAP;EAGD;;EACD,OAAO;IAAE8oB,QAAQ,EAAEnkB,MAAM,CAACijB,OAAP,CAAe5U,MAAf,EAAuB,CAAvB;EAAZ,CAAP;AACD,CAjBD;;AAmBA,IAAMqlB,kDAAkD,GAAG,UACzDrlB,MADyD,EAEzDhT,OAFyD,EAElC;EAEvB,IAAIgC,QAAQ,GAAQ;IAClB8oB,MAAM,EAAEvqB,SADU;IAElBwqB,eAAe,EAAExqB,SAFC;IAGlBD,MAAM,EAAEC,SAHU;IAIlByL,MAAM,EAAEzL;EAJU,CAApB;;EAMA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAAC8oB,MAAT,GAAkB9X,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,iBAAD,CAAN,KAA8BzS,SAAlC,EAA6C;IAC3CyB,QAAQ,CAAC+oB,eAAT,GAA2B/X,MAAM,CAAC,iBAAD,CAAjC;EACD;;EACD,IAAIA,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAAC1B,MAAT,GAAkB0S,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACgK,MAAT,GAAkBgH,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,OAAOhR,QAAP;AACD,CAvBD;;AAyBA,IAAMu2B,4BAA4B,GAAG,UAACvlB,MAAD,EAAchT,OAAd,EAAqC;EACxE,IAAIgC,QAAQ,GAAQ;IAClBwgB,IAAI,EAAEjiB,SADY;IAElBi4B,YAAY,EAAEj4B;EAFI,CAApB;;EAIA,IAAIyS,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAACwgB,IAAT,GAAgBxP,MAAM,CAAC,MAAD,CAAtB;EACD;;EACD,IAAIA,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAACw2B,YAAT,GAAwB,IAAIxiB,IAAJ,CAAShD,MAAM,CAAC,cAAD,CAAf,CAAxB;EACD;;EACD,OAAOhR,QAAP;AACD,CAZD;;AAcA,IAAM2f,6BAA6B,GAAG,UAAC3O,MAAD,EAAchT,OAAd,EAAqC;EACzE,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAO2O,4BAA4B,CAAC3O,KAAD,EAAQ5pB,OAAR,CAAnC;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMy4B,kCAAkC,GAAG,UAACzlB,MAAD,EAAchT,OAAd,EAAqC;EAC9E,IAAIgC,QAAQ,GAAQ;IAClBgK,MAAM,EAAEzL;EADU,CAApB;;EAGA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACgK,MAAT,GAAkBgH,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,OAAOhR,QAAP;AACD,CARD;;AAUA,IAAMkgB,sCAAsC,GAAG,UAAClP,MAAD,EAAchT,OAAd,EAAqC;EAClF,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAO6O,kCAAkC,CAAC7O,KAAD,EAAQ5pB,OAAR,CAAzC;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAM04B,+BAA+B,GAAG,UAAC1lB,MAAD,EAAchT,OAAd,EAAqC;EAC3E,IAAIgC,QAAQ,GAAQ;IAClBqpB,2BAA2B,EAAE9qB,SADX;IAElB+qB,eAAe,EAAE/qB;EAFC,CAApB;;EAIA,IAAIyS,MAAM,CAAC,6BAAD,CAAN,KAA0CzS,SAA9C,EAAyD;IACvDyB,QAAQ,CAACqpB,2BAAT,GAAuCrY,MAAM,CAAC,6BAAD,CAA7C;EACD;;EACD,IAAIA,MAAM,CAAC,iBAAD,CAAN,KAA8BzS,SAAlC,EAA6C;IAC3CyB,QAAQ,CAACspB,eAAT,GAA2BtY,MAAM,CAAC,iBAAD,CAAjC;EACD;;EACD,OAAOhR,QAAP;AACD,CAZD;;AAcA,IAAMqT,sCAAsC,GAAG,UAACrC,MAAD,EAAchT,OAAd,EAAqC;EAClF,IAAIgC,QAAQ,GAAQ;IAClB6S,IAAI,EAAEtU,SADY;IAElB0d,YAAY,EAAE1d;EAFI,CAApB;;EAIA,IAAIyS,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAAC6S,IAAT,GAAgB7B,MAAM,CAAC,MAAD,CAAtB;EACD;;EACD,IAAIA,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAACic,YAAT,GAAwB,IAAIjI,IAAJ,CAAShD,MAAM,CAAC,cAAD,CAAf,CAAxB;EACD;;EACD,OAAOhR,QAAP;AACD,CAZD;;AAcA,IAAMwmB,oCAAoC,GAAG,UAACxV,MAAD,EAAchT,OAAd,EAAqC;EAChF,IAAIgC,QAAQ,GAAQ;IAClB6S,IAAI,EAAEtU,SADY;IAElB0d,YAAY,EAAE1d;EAFI,CAApB;;EAIA,IAAIyS,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAAC6S,IAAT,GAAgB7B,MAAM,CAAC,MAAD,CAAtB;EACD;;EACD,IAAIA,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAACic,YAAT,GAAwB,IAAIjI,IAAJ,CAAShD,MAAM,CAAC,cAAD,CAAf,CAAxB;EACD;;EACD,OAAOhR,QAAP;AACD,CAZD;;AAcA,IAAM22B,8BAA8B,GAAG,UAAC3lB,MAAD,EAAchT,OAAd,EAAqC;EAC1E,IAAIgC,QAAQ,GAAQ;IAClBypB,cAAc,EAAElrB,SADE;IAElBmrB,cAAc,EAAEnrB,SAFE;IAGlBorB,cAAc,EAAEprB,SAHE;IAIlBqrB,aAAa,EAAErrB,SAJG;IAKlBurB,aAAa,EAAEvrB;EALG,CAApB;;EAOA,IAAIyS,MAAM,CAAC4lB,aAAP,KAAyB,EAA7B,EAAiC;IAC/B52B,QAAQ,CAACypB,cAAT,GAA0B,EAA1B;EACD;;EACD,IAAIzY,MAAM,CAAC,eAAD,CAAN,KAA4BzS,SAAhC,EAA2C;IACzCyB,QAAQ,CAACypB,cAAT,GAA0BqM,oCAAoC,CAC5Dz4B,sBAAsB,CAAC2T,MAAM,CAAC,eAAD,CAAP,CADsC,EAE5DhT,OAF4D,CAA9D;EAID;;EACD,IAAIgT,MAAM,CAAC6lB,aAAP,KAAyB,EAA7B,EAAiC;IAC/B72B,QAAQ,CAAC0pB,cAAT,GAA0B,EAA1B;EACD;;EACD,IAAI1Y,MAAM,CAAC,eAAD,CAAN,KAA4BzS,SAAhC,EAA2C;IACzCyB,QAAQ,CAAC0pB,cAAT,GAA0BqM,oCAAoC,CAC5D14B,sBAAsB,CAAC2T,MAAM,CAAC,eAAD,CAAP,CADsC,EAE5DhT,OAF4D,CAA9D;EAID;;EACD,IAAIgT,MAAM,CAAC8lB,aAAP,KAAyB,EAA7B,EAAiC;IAC/B92B,QAAQ,CAAC2pB,cAAT,GAA0B,EAA1B;EACD;;EACD,IAAI3Y,MAAM,CAAC,eAAD,CAAN,KAA4BzS,SAAhC,EAA2C;IACzCyB,QAAQ,CAAC2pB,cAAT,GAA0BqM,oCAAoC,CAC5D34B,sBAAsB,CAAC2T,MAAM,CAAC,eAAD,CAAP,CADsC,EAE5DhT,OAF4D,CAA9D;EAID;;EACD,IAAIgT,MAAM,CAAC+lB,YAAP,KAAwB,EAA5B,EAAgC;IAC9B/2B,QAAQ,CAAC4pB,aAAT,GAAyB,EAAzB;EACD;;EACD,IAAI5Y,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAAC4pB,aAAT,GAAyBoN,mCAAmC,CAC1D35B,sBAAsB,CAAC2T,MAAM,CAAC,cAAD,CAAP,CADoC,EAE1DhT,OAF0D,CAA5D;EAID;;EACD,IAAIgT,MAAM,CAAC,eAAD,CAAN,KAA4BzS,SAAhC,EAA2C;IACzCyB,QAAQ,CAAC8pB,aAAT,GAAyBvN,QAAQ,CAACvL,MAAM,CAAC,eAAD,CAAP,CAAjC;EACD;;EACD,OAAOhR,QAAP;AACD,CAhDD;;AAkDA,IAAMyX,+BAA+B,GAAG,UAACzG,MAAD,EAAchT,OAAd,EAAqC;EAC3E,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAO+O,8BAA8B,CAAC/O,KAAD,EAAQ5pB,OAAR,CAArC;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMi5B,sCAAsC,GAAG,UAACjmB,MAAD,EAAchT,OAAd,EAAqC;EAClF,IAAIgC,QAAQ,GAAQ;IAClB0qB,IAAI,EAAEnsB,SADY;IAElBosB,IAAI,EAAEpsB,SAFY;IAGlBqsB,KAAK,EAAErsB;EAHW,CAApB;;EAKA,IAAIyS,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAAC0qB,IAAT,GAAgB1Z,MAAM,CAAC,MAAD,CAAtB;EACD;;EACD,IAAIA,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAAC2qB,IAAT,GAAgBpO,QAAQ,CAACvL,MAAM,CAAC,MAAD,CAAP,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,OAAD,CAAN,KAAoBzS,SAAxB,EAAmC;IACjCyB,QAAQ,CAAC4qB,KAAT,GAAiBrO,QAAQ,CAACvL,MAAM,CAAC,OAAD,CAAP,CAAzB;EACD;;EACD,OAAOhR,QAAP;AACD,CAhBD;;AAkBA,IAAMk3B,mCAAmC,GAAG,UAAClmB,MAAD,EAAchT,OAAd,EAAqC;EAC/E,IAAIgC,QAAQ,GAAQ;IAClBpB,GAAG,EAAEL,SADa;IAElB8G,SAAS,EAAE9G,SAFO;IAGlBsX,YAAY,EAAEtX,SAHI;IAIlB44B,qBAAqB,EAAE54B;EAJL,CAApB;;EAMA,IAAIyS,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/ByB,QAAQ,CAACpB,GAAT,GAAeoS,MAAM,CAAC,KAAD,CAArB;EACD;;EACD,IAAIA,MAAM,CAAC,WAAD,CAAN,KAAwBzS,SAA5B,EAAuC;IACrCyB,QAAQ,CAACqF,SAAT,GAAqB2L,MAAM,CAAC,WAAD,CAA3B;EACD;;EACD,IAAIA,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAAC6V,YAAT,GAAwB7E,MAAM,CAAC,cAAD,CAAN,IAA0B,MAAlD;EACD;;EACD,IAAIA,MAAM,CAAC,uBAAD,CAAN,KAAoCzS,SAAxC,EAAmD;IACjDyB,QAAQ,CAACm3B,qBAAT,GAAiCnmB,MAAM,CAAC,uBAAD,CAAvC;EACD;;EACD,OAAOhR,QAAP;AACD,CApBD;;AAsBA,IAAMkW,oCAAoC,GAAG,UAAClF,MAAD,EAAchT,OAAd,EAAqC;EAChF,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOsP,mCAAmC,CAACtP,KAAD,EAAQ5pB,OAAR,CAA1C;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMo5B,uCAAuC,GAAG,UAACpmB,MAAD,EAAchT,OAAd,EAAqC;EACnF,IAAIgC,QAAQ,GAAQ;IAClB8W,KAAK,EAAEvY,SADW;IAElBK,GAAG,EAAEL,SAFa;IAGlB8G,SAAS,EAAE9G,SAHO;IAIlB84B,QAAQ,EAAE94B,SAJQ;IAKlB0d,YAAY,EAAE1d;EALI,CAApB;;EAOA,IAAIyS,MAAM,CAAC,OAAD,CAAN,KAAoBzS,SAAxB,EAAmC;IACjCyB,QAAQ,CAAC8W,KAAT,GAAiBG,2BAA2B,CAACjG,MAAM,CAAC,OAAD,CAAP,EAAkBhT,OAAlB,CAA5C;EACD;;EACD,IAAIgT,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/ByB,QAAQ,CAACpB,GAAT,GAAeoS,MAAM,CAAC,KAAD,CAArB;EACD;;EACD,IAAIA,MAAM,CAAC,WAAD,CAAN,KAAwBzS,SAA5B,EAAuC;IACrCyB,QAAQ,CAACqF,SAAT,GAAqB2L,MAAM,CAAC,WAAD,CAA3B;EACD;;EACD,IAAIA,MAAM,CAAC,UAAD,CAAN,KAAuBzS,SAA3B,EAAsC;IACpCyB,QAAQ,CAACq3B,QAAT,GAAoBrmB,MAAM,CAAC,UAAD,CAAN,IAAsB,MAA1C;EACD;;EACD,IAAIA,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAACic,YAAT,GAAwB,IAAIjI,IAAJ,CAAShD,MAAM,CAAC,cAAD,CAAf,CAAxB;EACD;;EACD,OAAOhR,QAAP;AACD,CAxBD;;AA0BA,IAAMs3B,6CAA6C,GAAG,UACpDtmB,MADoD,EAEpDhT,OAFoD,EAE7B;EAEvB,IAAIgC,QAAQ,GAAQ;IAClB0W,MAAM,EAAEnY;EADU,CAApB;;EAGA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAAC0W,MAAT,GAAkB1F,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,OAAOhR,QAAP;AACD,CAXD;;AAaA,IAAMmhB,mCAAmC,GAAG,UAACnQ,MAAD,EAAchT,OAAd,EAAqC;EAC/E,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOwP,uCAAuC,CAACxP,KAAD,EAAQ5pB,OAAR,CAA9C;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMu5B,iCAAiC,GAAG,UAACvmB,MAAD,EAAchT,OAAd,EAAqC;EAC7E,IAAIgC,QAAQ,GAAQ;IAClB1B,MAAM,EAAEC,SADU;IAElB2sB,OAAO,EAAE3sB,SAFS;IAGlBkD,YAAY,EAAElD,SAHI;IAIlB4sB,wBAAwB,EAAE5sB,SAJR;IAKlB6sB,uBAAuB,EAAE7sB,SALP;IAMlB+sB,eAAe,EAAE/sB,SANC;IAOlBitB,OAAO,EAAEjtB;EAPS,CAApB;;EASA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAAC1B,MAAT,GAAkB0S,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,SAAD,CAAN,KAAsBzS,SAA1B,EAAqC;IACnCyB,QAAQ,CAACkrB,OAAT,GAAmBla,MAAM,CAAC,SAAD,CAAzB;EACD;;EACD,IAAIA,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAACyB,YAAT,GAAwBuP,MAAM,CAAC,cAAD,CAA9B;EACD;;EACD,IAAIA,MAAM,CAAC,0BAAD,CAAN,KAAuCzS,SAA3C,EAAsD;IACpDyB,QAAQ,CAACmrB,wBAAT,GAAoC0K,8CAA8C,CAChF7kB,MAAM,CAAC,0BAAD,CAD0E,EAEhFhT,OAFgF,CAAlF;EAID;;EACD,IAAIgT,MAAM,CAAC,yBAAD,CAAN,KAAsCzS,SAA1C,EAAqD;IACnDyB,QAAQ,CAACorB,uBAAT,GAAmCoM,6CAA6C,CAC9ExmB,MAAM,CAAC,yBAAD,CADwE,EAE9EhT,OAF8E,CAAhF;EAID;;EACD,IAAIgT,MAAM,CAAC,iBAAD,CAAN,KAA8BzS,SAAlC,EAA6C;IAC3CyB,QAAQ,CAACsrB,eAAT,GAA2BmM,qCAAqC,CAACzmB,MAAM,CAAC,iBAAD,CAAP,EAA4BhT,OAA5B,CAAhE;EACD;;EACD,IAAIgT,MAAM,CAAC,SAAD,CAAN,KAAsBzS,SAA1B,EAAqC;IACnCyB,QAAQ,CAACwrB,OAAT,GAAmBkM,6BAA6B,CAAC1mB,MAAM,CAAC,SAAD,CAAP,EAAoBhT,OAApB,CAAhD;EACD;;EACD,OAAOgC,QAAP;AACD,CAtCD;;AAwCA,IAAMw3B,6CAA6C,GAAG,UACpDxmB,MADoD,EAEpDhT,OAFoD,EAE7B;EAEvB,IAAIgC,QAAQ,GAAQ;IAClB8rB,eAAe,EAAEvtB;EADC,CAApB;;EAGA,IAAIyS,MAAM,CAAC,iBAAD,CAAN,KAA8BzS,SAAlC,EAA6C;IAC3CyB,QAAQ,CAAC8rB,eAAT,GAA2B9a,MAAM,CAAC,iBAAD,CAAjC;EACD;;EACD,OAAOhR,QAAP;AACD,CAXD;;AAaA,IAAM23B,4BAA4B,GAAG,UAAC3mB,MAAD,EAAchT,OAAd,EAAqC;EACxE,IAAIgC,QAAQ,GAAQ;IAClBpB,GAAG,EAAEL,SADa;IAElB8G,SAAS,EAAE9G,SAFO;IAGlB6T,IAAI,EAAE7T,SAHY;IAIlBgU,OAAO,EAAEhU;EAJS,CAApB;;EAMA,IAAIyS,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/ByB,QAAQ,CAACpB,GAAT,GAAeoS,MAAM,CAAC,KAAD,CAArB;EACD;;EACD,IAAIA,MAAM,CAAC,WAAD,CAAN,KAAwBzS,SAA5B,EAAuC;IACrCyB,QAAQ,CAACqF,SAAT,GAAqB2L,MAAM,CAAC,WAAD,CAA3B;EACD;;EACD,IAAIA,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAACoS,IAAT,GAAgBpB,MAAM,CAAC,MAAD,CAAtB;EACD;;EACD,IAAIA,MAAM,CAAC,SAAD,CAAN,KAAsBzS,SAA1B,EAAqC;IACnCyB,QAAQ,CAACuS,OAAT,GAAmBvB,MAAM,CAAC,SAAD,CAAzB;EACD;;EACD,OAAOhR,QAAP;AACD,CApBD;;AAsBA,IAAMyb,mCAAmC,GAAG,UAACzK,MAAD,EAAchT,OAAd,EAAqC;EAC/E,IAAIgC,QAAQ,GAAQ;IAClBpB,GAAG,EAAEL;EADa,CAApB;;EAGA,IAAIyS,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/ByB,QAAQ,CAACpB,GAAT,GAAeoS,MAAM,CAAC,KAAD,CAArB;EACD;;EACD,OAAOhR,QAAP;AACD,CARD;;AAUA,IAAMmW,4BAA4B,GAAG,UAACnF,MAAD,EAAchT,OAAd,EAAqC;EACxE,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAO+P,4BAA4B,CAAC/P,KAAD,EAAQ5pB,OAAR,CAAnC;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAM45B,+BAA+B,GAAG,UAAC5mB,MAAD,EAAchT,OAAd,EAAqC;EAC3E,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOA,KAAP;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMiQ,+CAA+C,GAAG,UACtD7mB,MADsD,EAEtDhT,OAFsD,EAE/B;EAEvB,IAAIgC,QAAQ,GAAQ;IAClB0W,MAAM,EAAEnY;EADU,CAApB;;EAGA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAAC0W,MAAT,GAAkB1F,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,OAAOhR,QAAP;AACD,CAXD;;AAaA,IAAMg3B,mCAAmC,GAAG,UAAChmB,MAAD,EAAchT,OAAd,EAAqC;EAC/E,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOA,KAAP;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMkQ,gCAAgC,GAAG,UAAC9mB,MAAD,EAAchT,OAAd,EAAqC;EAC5E,IAAIgC,QAAQ,GAAQ;IAClBwgB,IAAI,EAAEjiB,SADY;IAElB4tB,KAAK,EAAE5tB;EAFW,CAApB;;EAIA,IAAIyS,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAACwgB,IAAT,GAAgBxP,MAAM,CAAC,MAAD,CAAtB;EACD;;EACD,IAAIA,MAAM,CAAC,OAAD,CAAN,KAAoBzS,SAAxB,EAAmC;IACjCyB,QAAQ,CAACmsB,KAAT,GAAiBnb,MAAM,CAAC,OAAD,CAAvB;EACD;;EACD,OAAOhR,QAAP;AACD,CAZD;;AAcA,IAAM+3B,oCAAoC,GAAG,UAAC/mB,MAAD,EAAchT,OAAd,EAAqC;EAChF,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOkQ,gCAAgC,CAAClQ,KAAD,EAAQ5pB,OAAR,CAAvC;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMg6B,2BAA2B,GAAG,UAAChnB,MAAD,EAAchT,OAAd,EAAqC;EACvE,IAAIgC,QAAQ,GAAQ;IAClBwsB,OAAO,EAAEjuB,SADS;IAElBmuB,UAAU,EAAEnuB;EAFM,CAApB;;EAIA,IAAIyS,MAAM,CAAC,SAAD,CAAN,KAAsBzS,SAA1B,EAAqC;IACnCyB,QAAQ,CAACwsB,OAAT,GAAmByL,6BAA6B,CAACjnB,MAAM,CAAC,SAAD,CAAP,EAAoBhT,OAApB,CAAhD;EACD;;EACD,IAAIgT,MAAM,CAAC,YAAD,CAAN,KAAyBzS,SAA7B,EAAwC;IACtCyB,QAAQ,CAAC0sB,UAAT,GAAsB1b,MAAM,CAAC,YAAD,CAA5B;EACD;;EACD,OAAOhR,QAAP;AACD,CAZD;;AAcA,IAAMi4B,6BAA6B,GAAG,UAACjnB,MAAD,EAAchT,OAAd,EAAqC;EACzE,IAAIgC,QAAQ,GAAQ;IAClB2sB,WAAW,EAAEpuB,SADK;IAElBquB,YAAY,EAAEruB,SAFI;IAGlBsuB,EAAE,EAAEtuB,SAHc;IAIlBuuB,GAAG,EAAEvuB,SAJa;IAKlBwuB,IAAI,EAAExuB;EALY,CAApB;;EAOA,IAAIyS,MAAM,CAAC,aAAD,CAAN,KAA0BzS,SAA9B,EAAyC;IACvCyB,QAAQ,CAAC2sB,WAAT,GAAuB3b,MAAM,CAAC,aAAD,CAA7B;EACD;;EACD,IAAIA,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAAC4sB,YAAT,GAAwB5b,MAAM,CAAC,cAAD,CAA9B;EACD;;EACD,IAAIA,MAAM,CAAC,IAAD,CAAN,KAAiBzS,SAArB,EAAgC;IAC9ByB,QAAQ,CAAC6sB,EAAT,GAAc7b,MAAM,CAAC,IAAD,CAApB;EACD;;EACD,IAAIA,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/ByB,QAAQ,CAAC8sB,GAAT,GAAe9b,MAAM,CAAC,KAAD,CAArB;EACD;;EACD,IAAIA,MAAM,CAAC,UAAD,CAAN,KAAuBzS,SAA3B,EAAsC;IACpCyB,QAAQ,CAAC+sB,IAAT,GAAgB/b,MAAM,CAAC,UAAD,CAAtB;EACD;;EACD,OAAOhR,QAAP;AACD,CAxBD;;AA0BA,IAAMgX,4BAA4B,GAAG,UAAChG,MAAD,EAAchT,OAAd,EAAqC;EACxE,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOoQ,2BAA2B,CAACpQ,KAAD,EAAQ5pB,OAAR,CAAlC;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAM0d,mCAAmC,GAAG,UAAC1K,MAAD,EAAchT,OAAd,EAAqC;EAC/E,IAAIgC,QAAQ,GAAQ;IAClBitB,MAAM,EAAE1uB;EADU,CAApB;;EAGA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACitB,MAAT,GAAkBjc,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,OAAOhR,QAAP;AACD,CARD;;AAUA,IAAM2hB,+BAA+B,GAAG,UAAC3Q,MAAD,EAAchT,OAAd,EAAqC;EAC3E,IAAIgC,QAAQ,GAAQ;IAClB6sB,EAAE,EAAEtuB,SADc;IAElBouB,WAAW,EAAEpuB;EAFK,CAApB;;EAIA,IAAIyS,MAAM,CAAC,IAAD,CAAN,KAAiBzS,SAArB,EAAgC;IAC9ByB,QAAQ,CAAC6sB,EAAT,GAAc7b,MAAM,CAAC,IAAD,CAApB;EACD;;EACD,IAAIA,MAAM,CAAC,aAAD,CAAN,KAA0BzS,SAA9B,EAAyC;IACvCyB,QAAQ,CAAC2sB,WAAT,GAAuB3b,MAAM,CAAC,aAAD,CAA7B;EACD;;EACD,OAAOhR,QAAP;AACD,CAZD;;AAcA,IAAMk4B,mDAAmD,GAAG,UAC1DlnB,MAD0D,EAE1DhT,OAF0D,EAEnC;EAEvB,IAAIgC,QAAQ,GAAQ;IAClBgK,MAAM,EAAEzL,SADU;IAElBypB,IAAI,EAAEzpB;EAFY,CAApB;;EAIA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACgK,MAAT,GAAkBgH,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC0X,GAAP,KAAe,EAAnB,EAAuB;IACrB1oB,QAAQ,CAACgoB,IAAT,GAAgB,EAAhB;EACD;;EACD,IAAIhX,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/ByB,QAAQ,CAACgoB,IAAT,GAAgBjN,4BAA4B,CAAC1d,sBAAsB,CAAC2T,MAAM,CAAC,KAAD,CAAP,CAAvB,EAAwChT,OAAxC,CAA5C;EACD;;EACD,OAAOgC,QAAP;AACD,CAlBD;;AAoBA,IAAM+X,qDAAqD,GAAG,UAC5D/G,MAD4D,EAE5DhT,OAF4D,EAErC;EAEvB,IAAIgC,QAAQ,GAAQ;IAClB2D,EAAE,EAAEpF,SADc;IAElB2pB,MAAM,EAAE3pB,SAFU;IAGlBmY,MAAM,EAAEnY,SAHU;IAIlBmvB,QAAQ,EAAEnvB;EAJQ,CAApB;;EAMA,IAAIyS,MAAM,CAAC,IAAD,CAAN,KAAiBzS,SAArB,EAAgC;IAC9ByB,QAAQ,CAAC2D,EAAT,GAAcqN,MAAM,CAAC,IAAD,CAApB;EACD;;EACD,IAAIA,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACkoB,MAAT,GAAkBiQ,8CAA8C,CAACnnB,MAAM,CAAC,QAAD,CAAP,EAAmBhT,OAAnB,CAAhE;EACD;;EACD,IAAIgT,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAAC0W,MAAT,GAAkB1F,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAConB,OAAP,KAAmB,EAAvB,EAA2B;IACzBp4B,QAAQ,CAAC0tB,QAAT,GAAoB,EAApB;EACD;;EACD,IAAI1c,MAAM,CAAC,SAAD,CAAN,KAAsBzS,SAA1B,EAAqC;IACnCyB,QAAQ,CAAC0tB,QAAT,GAAoB2K,iCAAiC,CAACh7B,sBAAsB,CAAC2T,MAAM,CAAC,SAAD,CAAP,CAAvB,EAA4ChT,OAA5C,CAArD;EACD;;EACD,OAAOgC,QAAP;AACD,CA1BD;;AA4BA,IAAM+e,yDAAyD,GAAG,UAChE/N,MADgE,EAEhEhT,OAFgE,EAEzC;EAEvB,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAO7P,qDAAqD,CAAC6P,KAAD,EAAQ5pB,OAAR,CAA5D;EACD,CAPI,CAAP;AAQD,CAZD;;AAcA,IAAMm6B,8CAA8C,GAAG,UACrDnnB,MADqD,EAErDhT,OAFqD,EAE9B;EAEvB,IAAIgC,QAAQ,GAAQ;IAClBgK,MAAM,EAAEzL,SADU;IAElBmqB,GAAG,EAAEnqB,SAFa;IAGlBqqB,GAAG,EAAErqB;EAHa,CAApB;;EAKA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACgK,MAAT,GAAkBgH,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/ByB,QAAQ,CAAC0oB,GAAT,GAAe4N,yBAAyB,CAACtlB,MAAM,CAAC,KAAD,CAAP,EAAgBhT,OAAhB,CAAxC;EACD;;EACD,IAAIgT,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/ByB,QAAQ,CAAC4oB,GAAT,GAAesP,mDAAmD,CAAClnB,MAAM,CAAC,KAAD,CAAP,EAAgBhT,OAAhB,CAAlE;EACD;;EACD,OAAOgC,QAAP;AACD,CAnBD;;AAqBA,IAAMkY,4CAA4C,GAAG,UAAClH,MAAD,EAAchT,OAAd,EAAqC;EACxF,IAAIgC,QAAQ,GAAQ;IAClB4tB,WAAW,EAAErvB,SADK;IAElBuvB,SAAS,EAAEvvB,SAFO;IAGlB2pB,MAAM,EAAE3pB,SAHU;IAIlBoF,EAAE,EAAEpF,SAJc;IAKlByvB,sBAAsB,EAAEzvB,SALN;IAMlB0vB,cAAc,EAAE1vB,SANE;IAOlB6vB,QAAQ,EAAE7vB;EAPQ,CAApB;;EASA,IAAIyS,MAAM,CAAC,aAAD,CAAN,KAA0BzS,SAA9B,EAAyC;IACvCyB,QAAQ,CAAC4tB,WAAT,GAAuB0K,0CAA0C,CAACtnB,MAAM,CAAC,aAAD,CAAP,EAAwBhT,OAAxB,CAAjE;EACD;;EACD,IAAIgT,MAAM,CAAC,WAAD,CAAN,KAAwBzS,SAA5B,EAAuC;IACrCyB,QAAQ,CAAC8tB,SAAT,GAAqB9c,MAAM,CAAC,WAAD,CAAN,IAAuB,MAA5C;EACD;;EACD,IAAIA,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACkoB,MAAT,GAAkBqQ,qCAAqC,CAACvnB,MAAM,CAAC,QAAD,CAAP,EAAmBhT,OAAnB,CAAvD;EACD;;EACD,IAAIgT,MAAM,CAAC,IAAD,CAAN,KAAiBzS,SAArB,EAAgC;IAC9ByB,QAAQ,CAAC2D,EAAT,GAAcqN,MAAM,CAAC,IAAD,CAApB;EACD;;EACD,IAAIA,MAAM,CAAC,wBAAD,CAAN,KAAqCzS,SAAzC,EAAoD;IAClDyB,QAAQ,CAACguB,sBAAT,GAAkChd,MAAM,CAAC,wBAAD,CAAxC;EACD;;EACD,IAAIA,MAAM,CAACid,cAAP,KAA0B,EAA9B,EAAkC;IAChCjuB,QAAQ,CAACiuB,cAAT,GAA0B,EAA1B;EACD;;EACD,IAAIjd,MAAM,CAAC,gBAAD,CAAN,KAA6BzS,SAA7B,IAA0CyS,MAAM,CAAC,gBAAD,CAAN,CAAyB,OAAzB,MAAsCzS,SAApF,EAA+F;IAC7FyB,QAAQ,CAACiuB,cAAT,GAA0BuK,6CAA6C,CACrEn7B,sBAAsB,CAAC2T,MAAM,CAAC,gBAAD,CAAN,CAAyB,OAAzB,CAAD,CAD+C,EAErEhT,OAFqE,CAAvE;EAID;;EACD,IAAIgT,MAAM,CAAC,UAAD,CAAN,KAAuBzS,SAA3B,EAAsC;IACpCyB,QAAQ,CAACouB,QAAT,GAAoBqK,uCAAuC,CAACznB,MAAM,CAAC,UAAD,CAAP,EAAqBhT,OAArB,CAA3D;EACD;;EACD,OAAOgC,QAAP;AACD,CAtCD;;AAwCA,IAAMmf,gDAAgD,GAAG,UACvDnO,MADuD,EAEvDhT,OAFuD,EAEhC;EAEvB,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAO1P,4CAA4C,CAAC0P,KAAD,EAAQ5pB,OAAR,CAAnD;EACD,CAPI,CAAP;AAQD,CAZD;;AAcA,IAAMs6B,0CAA0C,GAAG,UAACtnB,MAAD,EAAchT,OAAd,EAAqC;EACtF,IAAIgC,QAAQ,GAAQ;IAClBuoB,mBAAmB,EAAEhqB;EADH,CAApB;;EAGA,IAAIyS,MAAM,CAAC,qBAAD,CAAN,KAAkCzS,SAAtC,EAAiD;IAC/CyB,QAAQ,CAACuoB,mBAAT,GAA+BmQ,kDAAkD,CAC/E1nB,MAAM,CAAC,qBAAD,CADyE,EAE/EhT,OAF+E,CAAjF;EAID;;EACD,OAAOgC,QAAP;AACD,CAXD;;AAaA,IAAM24B,yCAAyC,GAAG,UAAC3nB,MAAD,EAAchT,OAAd,EAAqC;EACrF,IAAIgC,QAAQ,GAAQ;IAClBwuB,KAAK,EAAEjwB,SADW;IAElBmwB,MAAM,EAAEnwB;EAFU,CAApB;;EAIA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACwuB,KAAT,GAAiBoK,2BAA2B,CAAC5nB,MAAM,CAAC,QAAD,CAAP,EAAmBhT,OAAnB,CAA5C;EACD;;EACD,IAAIgT,MAAM,CAAC,SAAD,CAAN,KAAsBzS,SAA1B,EAAqC;IACnCyB,QAAQ,CAAC0uB,MAAT,GAAkBmK,4BAA4B,CAAC7nB,MAAM,CAAC,SAAD,CAAP,EAAoBhT,OAApB,CAA9C;EACD;;EACD,OAAOgC,QAAP;AACD,CAZD;;AAcA,IAAMu4B,qCAAqC,GAAG,UAACvnB,MAAD,EAAchT,OAAd,EAAqC;EACjF,IAAIgC,QAAQ,GAAQ;IAClBgK,MAAM,EAAEzL;EADU,CAApB;;EAGA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACgK,MAAT,GAAkBgH,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,OAAOhR,QAAP;AACD,CARD;;AAUA,IAAMw4B,6CAA6C,GAAG,UACpDxnB,MADoD,EAEpDhT,OAFoD,EAE7B;EAEvB,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOA,KAAP;EACD,CAPI,CAAP;AAQD,CAZD;;AAcA,IAAM8Q,kDAAkD,GAAG,UACzD1nB,MADyD,EAEzDhT,OAFyD,EAElC;EAEvB,IAAIgC,QAAQ,GAAQ;IAClB4uB,SAAS,EAAErwB,SADO;IAElBD,MAAM,EAAEC,SAFU;IAGlBuqB,MAAM,EAAEvqB,SAHU;IAIlByL,MAAM,EAAEzL,SAJU;IAKlBswB,UAAU,EAAEtwB;EALM,CAApB;;EAOA,IAAIyS,MAAM,CAAC,WAAD,CAAN,KAAwBzS,SAA5B,EAAuC;IACrCyB,QAAQ,CAAC4uB,SAAT,GAAqB5d,MAAM,CAAC,WAAD,CAA3B;EACD;;EACD,IAAIA,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAAC1B,MAAT,GAAkB0S,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAAC8oB,MAAT,GAAkB9X,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACgK,MAAT,GAAkBgH,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,YAAD,CAAN,KAAyBzS,SAA7B,EAAwC;IACtCyB,QAAQ,CAAC6uB,UAAT,GAAsB8J,yCAAyC,CAAC3nB,MAAM,CAAC,YAAD,CAAP,EAAuBhT,OAAvB,CAA/D;EACD;;EACD,OAAOgC,QAAP;AACD,CA3BD;;AA6BA,IAAMy4B,uCAAuC,GAAG,UAACznB,MAAD,EAAchT,OAAd,EAAqC;EACnF,IAAIgC,QAAQ,GAAQ;IAClB8uB,SAAS,EAAEvwB;EADO,CAApB;;EAGA,IAAIyS,MAAM,CAAC,WAAD,CAAN,KAAwBzS,SAA5B,EAAuC;IACrCyB,QAAQ,CAAC8uB,SAAT,GAAqB9d,MAAM,CAAC,WAAD,CAA3B;EACD;;EACD,OAAOhR,QAAP;AACD,CARD;;AAUA,IAAM84B,iDAAiD,GAAG,UACxD9nB,MADwD,EAExDhT,OAFwD,EAEjC;EAEvB,IAAIgC,QAAQ,GAAQ;IAClB2D,EAAE,EAAEpF,SADc;IAElB0wB,iBAAiB,EAAE1wB,SAFD;IAGlB2wB,MAAM,EAAE3wB,SAHU;IAIlB2pB,MAAM,EAAE3pB;EAJU,CAApB;;EAMA,IAAIyS,MAAM,CAAC,IAAD,CAAN,KAAiBzS,SAArB,EAAgC;IAC9ByB,QAAQ,CAAC2D,EAAT,GAAcqN,MAAM,CAAC,IAAD,CAApB;EACD;;EACD,IAAIA,MAAM,CAAC,eAAD,CAAN,KAA4BzS,SAAhC,EAA2C;IACzCyB,QAAQ,CAACivB,iBAAT,GAA6Bje,MAAM,CAAC,eAAD,CAAnC;EACD;;EACD,IAAIA,MAAM,CAAC+nB,KAAP,KAAiB,EAArB,EAAyB;IACvB/4B,QAAQ,CAACkvB,MAAT,GAAkB,EAAlB;EACD;;EACD,IAAIle,MAAM,CAAC,OAAD,CAAN,KAAoBzS,SAAxB,EAAmC;IACjCyB,QAAQ,CAACkvB,MAAT,GAAkB0I,+BAA+B,CAACv6B,sBAAsB,CAAC2T,MAAM,CAAC,OAAD,CAAP,CAAvB,EAA0ChT,OAA1C,CAAjD;EACD;;EACD,IAAIgT,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACkoB,MAAT,GAAkB8Q,qDAAqD,CAAChoB,MAAM,CAAC,QAAD,CAAP,EAAmBhT,OAAnB,CAAvE;EACD;;EACD,OAAOgC,QAAP;AACD,CA1BD;;AA4BA,IAAMwZ,qDAAqD,GAAG,UAC5DxI,MAD4D,EAE5DhT,OAF4D,EAErC;EAEvB,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOkR,iDAAiD,CAAClR,KAAD,EAAQ5pB,OAAR,CAAxD;EACD,CAPI,CAAP;AAQD,CAZD;;AAcA,IAAMi7B,yCAAyC,GAAG,UAACjoB,MAAD,EAAchT,OAAd,EAAqC;EACrF,IAAIgC,QAAQ,GAAQ;IAClBgU,IAAI,EAAEzV,SADY;IAElBosB,IAAI,EAAEpsB,SAFY;IAGlB+wB,yBAAyB,EAAE/wB;EAHT,CAApB;;EAKA,IAAIyS,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAACgU,IAAT,GAAgB,IAAIA,IAAJ,CAAShD,MAAM,CAAC,MAAD,CAAf,CAAhB;EACD;;EACD,IAAIA,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAAC2qB,IAAT,GAAgBpO,QAAQ,CAACvL,MAAM,CAAC,MAAD,CAAP,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,2BAAD,CAAN,KAAwCzS,SAA5C,EAAuD;IACrDyB,QAAQ,CAACsvB,yBAAT,GAAqCte,MAAM,CAAC,2BAAD,CAAN,IAAuC,MAA5E;EACD;;EACD,OAAOhR,QAAP;AACD,CAhBD;;AAkBA,IAAMk5B,mCAAmC,GAAG,UAACloB,MAAD,EAAchT,OAAd,EAAqC;EAC/E,IAAIgC,QAAQ,GAAQ;IAClB8S,UAAU,EAAEvU,SADM;IAElBsuB,EAAE,EAAEtuB,SAFc;IAGlByL,MAAM,EAAEzL,SAHU;IAIlB2pB,MAAM,EAAE3pB,SAJU;IAKlBmY,MAAM,EAAEnY,SALU;IAMlBkxB,WAAW,EAAElxB,SANK;IAOlBoxB,4BAA4B,EAAEpxB,SAPZ;IAQlBsxB,2BAA2B,EAAEtxB,SARX;IASlBwxB,8BAA8B,EAAExxB;EATd,CAApB;;EAWA,IAAIyS,MAAM,CAAC,YAAD,CAAN,KAAyBzS,SAA7B,EAAwC;IACtCyB,QAAQ,CAAC8S,UAAT,GAAsBmmB,yCAAyC,CAACjoB,MAAM,CAAC,YAAD,CAAP,EAAuBhT,OAAvB,CAA/D;EACD;;EACD,IAAIgT,MAAM,CAAC,IAAD,CAAN,KAAiBzS,SAArB,EAAgC;IAC9ByB,QAAQ,CAAC6sB,EAAT,GAAc7b,MAAM,CAAC,IAAD,CAApB;EACD;;EACD,IAAIA,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACgK,MAAT,GAAkBgH,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACkoB,MAAT,GAAkBiR,yCAAyC,CAACnoB,MAAM,CAAC,QAAD,CAAP,EAAmBhT,OAAnB,CAA3D;EACD;;EACD,IAAIgT,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAAC0W,MAAT,GAAkB1F,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAACooB,UAAP,KAAsB,EAA1B,EAA8B;IAC5Bp5B,QAAQ,CAACyvB,WAAT,GAAuB,EAAvB;EACD;;EACD,IAAIze,MAAM,CAAC,YAAD,CAAN,KAAyBzS,SAA7B,EAAwC;IACtCyB,QAAQ,CAACyvB,WAAT,GAAuB4J,oCAAoC,CAACh8B,sBAAsB,CAAC2T,MAAM,CAAC,YAAD,CAAP,CAAvB,EAA+ChT,OAA/C,CAA3D;EACD;;EACD,IAAIgT,MAAM,CAACsoB,2BAAP,KAAuC,EAA3C,EAA+C;IAC7Ct5B,QAAQ,CAAC2vB,4BAAT,GAAwC,EAAxC;EACD;;EACD,IAAI3e,MAAM,CAAC,6BAAD,CAAN,KAA0CzS,SAA9C,EAAyD;IACvDyB,QAAQ,CAAC2vB,4BAAT,GAAwC4J,qDAAqD,CAC3Fl8B,sBAAsB,CAAC2T,MAAM,CAAC,6BAAD,CAAP,CADqE,EAE3FhT,OAF2F,CAA7F;EAID;;EACD,IAAIgT,MAAM,CAAC,6BAAD,CAAN,KAA0CzS,SAA9C,EAAyD;IACvDyB,QAAQ,CAAC6vB,2BAAT,GAAuC2J,iDAAiD,CACtFxoB,MAAM,CAAC,6BAAD,CADgF,EAEtFhT,OAFsF,CAAxF;EAID;;EACD,IAAIgT,MAAM,CAAC,gCAAD,CAAN,KAA6CzS,SAAjD,EAA4D;IAC1DyB,QAAQ,CAAC+vB,8BAAT,GAA0C6F,oDAAoD,CAC5F5kB,MAAM,CAAC,gCAAD,CADsF,EAE5FhT,OAF4F,CAA9F;EAID;;EACD,OAAOgC,QAAP;AACD,CAvDD;;AAyDA,IAAMy5B,8CAA8C,GAAG,UACrDzoB,MADqD,EAErDhT,OAFqD,EAE9B;EAEvB,IAAIgC,QAAQ,GAAQ;IAClBgK,MAAM,EAAEzL,SADU;IAElBypB,IAAI,EAAEzpB;EAFY,CAApB;;EAIA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACgK,MAAT,GAAkBgH,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC0X,GAAP,KAAe,EAAnB,EAAuB;IACrB1oB,QAAQ,CAACgoB,IAAT,GAAgB,EAAhB;EACD;;EACD,IAAIhX,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/ByB,QAAQ,CAACgoB,IAAT,GAAgBjN,4BAA4B,CAAC1d,sBAAsB,CAAC2T,MAAM,CAAC,KAAD,CAAP,CAAvB,EAAwChT,OAAxC,CAA5C;EACD;;EACD,OAAOgC,QAAP;AACD,CAlBD;;AAoBA,IAAMm5B,yCAAyC,GAAG,UAACnoB,MAAD,EAAchT,OAAd,EAAqC;EACrF,IAAIgT,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClC,OAAO;MACLyL,MAAM,EAAEgH,MAAM,CAAC,QAAD;IADT,CAAP;EAGD;;EACD,IAAIA,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/B,OAAO;MACLmqB,GAAG,EAAE4N,yBAAyB,CAACtlB,MAAM,CAAC,KAAD,CAAP,EAAgBhT,OAAhB;IADzB,CAAP;EAGD;;EACD,IAAIgT,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/B,OAAO;MACLqqB,GAAG,EAAE6Q,8CAA8C,CAACzoB,MAAM,CAAC,KAAD,CAAP,EAAgBhT,OAAhB;IAD9C,CAAP;EAGD;;EACD,OAAO;IAAE8oB,QAAQ,EAAEnkB,MAAM,CAACijB,OAAP,CAAe5U,MAAf,EAAuB,CAAvB;EAAZ,CAAP;AACD,CAjBD;;AAmBA,IAAMuH,oCAAoC,GAAG,UAACvH,MAAD,EAAchT,OAAd,EAAqC;EAChF,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOsR,mCAAmC,CAACtR,KAAD,EAAQ5pB,OAAR,CAA1C;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAM8a,oCAAoC,GAAG,UAAC9H,MAAD,EAAchT,OAAd,EAAqC;EAChF,IAAIgC,QAAQ,GAAQ;IAClBiwB,YAAY,EAAE1xB,SADI;IAElB2xB,YAAY,EAAE3xB,SAFI;IAGlB8xB,YAAY,EAAE9xB;EAHI,CAApB;;EAKA,IAAIyS,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAACiwB,YAAT,GAAwBjf,MAAM,CAAC,cAAD,CAA9B;EACD;;EACD,IAAIA,MAAM,CAACkf,YAAP,KAAwB,EAA5B,EAAgC;IAC9BlwB,QAAQ,CAACkwB,YAAT,GAAwB,EAAxB;EACD;;EACD,IAAIlf,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA3B,IAAwCyS,MAAM,CAAC,cAAD,CAAN,CAAuB,OAAvB,MAAoCzS,SAAhF,EAA2F;IACzFyB,QAAQ,CAACkwB,YAAT,GAAwBwJ,kCAAkC,CACxDr8B,sBAAsB,CAAC2T,MAAM,CAAC,cAAD,CAAN,CAAuB,OAAvB,CAAD,CADkC,EAExDhT,OAFwD,CAA1D;EAID;;EACD,IAAIgT,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAACqwB,YAAT,GAAwBrf,MAAM,CAAC,cAAD,CAA9B;EACD;;EACD,OAAOhR,QAAP;AACD,CAtBD;;AAwBA,IAAM03B,6BAA6B,GAAG,UAAC1mB,MAAD,EAAchT,OAAd,EAAqC;EACzE,IAAIgC,QAAQ,GAAQ;IAClB0W,MAAM,EAAEnY,SADU;IAElBgyB,cAAc,EAAEhyB;EAFE,CAApB;;EAIA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAAC0W,MAAT,GAAkB1F,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,gBAAD,CAAN,KAA6BzS,SAAjC,EAA4C;IAC1CyB,QAAQ,CAACuwB,cAAT,GAA0BoJ,0CAA0C,CAAC3oB,MAAM,CAAC,gBAAD,CAAP,EAA2BhT,OAA3B,CAApE;EACD;;EACD,OAAOgC,QAAP;AACD,CAZD;;AAcA,IAAM45B,wCAAwC,GAAG,UAAC5oB,MAAD,EAAchT,OAAd,EAAqC;EACpF,IAAIgC,QAAQ,GAAQ;IAClBgK,MAAM,EAAEzL,SADU;IAElBypB,IAAI,EAAEzpB;EAFY,CAApB;;EAIA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACgK,MAAT,GAAkBgH,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC0X,GAAP,KAAe,EAAnB,EAAuB;IACrB1oB,QAAQ,CAACgoB,IAAT,GAAgB,EAAhB;EACD;;EACD,IAAIhX,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/ByB,QAAQ,CAACgoB,IAAT,GAAgBjN,4BAA4B,CAAC1d,sBAAsB,CAAC2T,MAAM,CAAC,KAAD,CAAP,CAAvB,EAAwChT,OAAxC,CAA5C;EACD;;EACD,OAAOgC,QAAP;AACD,CAfD;;AAiBA,IAAMiZ,0CAA0C,GAAG,UAACjI,MAAD,EAAchT,OAAd,EAAqC;EACtF,IAAIgC,QAAQ,GAAQ;IAClB2D,EAAE,EAAEpF,SADc;IAElB2pB,MAAM,EAAE3pB;EAFU,CAApB;;EAIA,IAAIyS,MAAM,CAAC,IAAD,CAAN,KAAiBzS,SAArB,EAAgC;IAC9ByB,QAAQ,CAAC2D,EAAT,GAAcqN,MAAM,CAAC,IAAD,CAApB;EACD;;EACD,IAAIA,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACkoB,MAAT,GAAkB2R,mCAAmC,CAAC7oB,MAAM,CAAC,QAAD,CAAP,EAAmBhT,OAAnB,CAArD;EACD;;EACD,OAAOgC,QAAP;AACD,CAZD;;AAcA,IAAMuf,8CAA8C,GAAG,UACrDvO,MADqD,EAErDhT,OAFqD,EAE9B;EAEvB,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAO3O,0CAA0C,CAAC2O,KAAD,EAAQ5pB,OAAR,CAAjD;EACD,CAPI,CAAP;AAQD,CAZD;;AAcA,IAAM67B,mCAAmC,GAAG,UAAC7oB,MAAD,EAAchT,OAAd,EAAqC;EAC/E,IAAIgT,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClC,OAAO;MACLyL,MAAM,EAAEgH,MAAM,CAAC,QAAD;IADT,CAAP;EAGD;;EACD,IAAIA,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/B,OAAO;MACLmqB,GAAG,EAAE4N,yBAAyB,CAACtlB,MAAM,CAAC,KAAD,CAAP,EAAgBhT,OAAhB;IADzB,CAAP;EAGD;;EACD,IAAIgT,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/B,OAAO;MACLqqB,GAAG,EAAEgR,wCAAwC,CAAC5oB,MAAM,CAAC,KAAD,CAAP,EAAgBhT,OAAhB;IADxC,CAAP;EAGD;;EACD,OAAO;IAAE8oB,QAAQ,EAAEnkB,MAAM,CAACijB,OAAP,CAAe5U,MAAf,EAAuB,CAAvB;EAAZ,CAAP;AACD,CAjBD;;AAmBA,IAAM8oB,qCAAqC,GAAG,UAAC9oB,MAAD,EAAchT,OAAd,EAAqC;EACjF,IAAIgC,QAAQ,GAAQ;IAClBd,QAAQ,EAAEX,SADQ;IAElBK,GAAG,EAAEL,SAFa;IAGlBw7B,SAAS,EAAEx7B,SAHO;IAIlBkD,YAAY,EAAElD,SAJI;IAKlBuY,KAAK,EAAEvY,SALW;IAMlBijB,SAAS,EAAEjjB;EANO,CAApB;;EAQA,IAAIyS,MAAM,CAAC,UAAD,CAAN,KAAuBzS,SAA3B,EAAsC;IACpCyB,QAAQ,CAACd,QAAT,GAAoB8R,MAAM,CAAC,UAAD,CAA1B;EACD;;EACD,IAAIA,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/ByB,QAAQ,CAACpB,GAAT,GAAeoS,MAAM,CAAC,KAAD,CAArB;EACD;;EACD,IAAIA,MAAM,CAAC,WAAD,CAAN,KAAwBzS,SAA5B,EAAuC;IACrCyB,QAAQ,CAAC+5B,SAAT,GAAqB,IAAI/lB,IAAJ,CAAShD,MAAM,CAAC,WAAD,CAAf,CAArB;EACD;;EACD,IAAIA,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAACyB,YAAT,GAAwBuP,MAAM,CAAC,cAAD,CAA9B;EACD;;EACD,IAAIA,MAAM,CAAC,OAAD,CAAN,KAAoBzS,SAAxB,EAAmC;IACjCyB,QAAQ,CAAC8W,KAAT,GAAiBG,2BAA2B,CAACjG,MAAM,CAAC,OAAD,CAAP,EAAkBhT,OAAlB,CAA5C;EACD;;EACD,IAAIgT,MAAM,CAAC,WAAD,CAAN,KAAwBzS,SAA5B,EAAuC;IACrCyB,QAAQ,CAACwhB,SAAT,GAAqBG,+BAA+B,CAAC3Q,MAAM,CAAC,WAAD,CAAP,EAAsBhT,OAAtB,CAApD;EACD;;EACD,OAAOgC,QAAP;AACD,CA5BD;;AA8BA,IAAMogB,yCAAyC,GAAG,UAACpP,MAAD,EAAchT,OAAd,EAAqC;EACrF,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOkS,qCAAqC,CAAClS,KAAD,EAAQ5pB,OAAR,CAA5C;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMw7B,iDAAiD,GAAG,UACxDxoB,MADwD,EAExDhT,OAFwD,EAEjC;EAEvB,IAAIgC,QAAQ,GAAQ;IAClB2wB,cAAc,EAAEpyB;EADE,CAApB;;EAGA,IAAIyS,MAAM,CAAC,gBAAD,CAAN,KAA6BzS,SAAjC,EAA4C;IAC1CyB,QAAQ,CAAC2wB,cAAT,GAA0BpU,QAAQ,CAACvL,MAAM,CAAC,gBAAD,CAAP,CAAlC;EACD;;EACD,OAAOhR,QAAP;AACD,CAXD;;AAaA,IAAMg6B,iDAAiD,GAAG,UACxDhpB,MADwD,EAExDhT,OAFwD,EAEjC;EAEvB,IAAIgC,QAAQ,GAAQ;IAClB2wB,cAAc,EAAEpyB,SADE;IAElBkD,YAAY,EAAElD;EAFI,CAApB;;EAIA,IAAIyS,MAAM,CAAC,gBAAD,CAAN,KAA6BzS,SAAjC,EAA4C;IAC1CyB,QAAQ,CAAC2wB,cAAT,GAA0BpU,QAAQ,CAACvL,MAAM,CAAC,gBAAD,CAAP,CAAlC;EACD;;EACD,IAAIA,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAACyB,YAAT,GAAwBuP,MAAM,CAAC,cAAD,CAA9B;EACD;;EACD,OAAOhR,QAAP;AACD,CAfD;;AAiBA,IAAMu5B,qDAAqD,GAAG,UAC5DvoB,MAD4D,EAE5DhT,OAF4D,EAErC;EAEvB,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOoS,iDAAiD,CAACpS,KAAD,EAAQ5pB,OAAR,CAAxD;EACD,CAPI,CAAP;AAQD,CAZD;;AAcA,IAAMg7B,qDAAqD,GAAG,UAC5DhoB,MAD4D,EAE5DhT,OAF4D,EAErC;EAEvB,IAAIgC,QAAQ,GAAQ;IAClBpB,GAAG,EAAEL;EADa,CAApB;;EAGA,IAAIyS,MAAM,CAAC,OAAD,CAAN,KAAoBzS,SAAxB,EAAmC;IACjCyB,QAAQ,CAACpB,GAAT,GAAeq7B,iCAAiC,CAACjpB,MAAM,CAAC,OAAD,CAAP,EAAkBhT,OAAlB,CAAhD;EACD;;EACD,OAAOgC,QAAP;AACD,CAXD;;AAaA,IAAMk6B,6BAA6B,GAAG,UAAClpB,MAAD,EAAchT,OAAd,EAAqC;EACzE,IAAIgC,QAAQ,GAAQ;IAClBpB,GAAG,EAAEL,SADa;IAElB0d,YAAY,EAAE1d,SAFI;IAGlBsU,IAAI,EAAEtU,SAHY;IAIlB47B,IAAI,EAAE57B,SAJY;IAKlBkD,YAAY,EAAElD,SALI;IAMlBuY,KAAK,EAAEvY;EANW,CAApB;;EAQA,IAAIyS,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/ByB,QAAQ,CAACpB,GAAT,GAAeoS,MAAM,CAAC,KAAD,CAArB;EACD;;EACD,IAAIA,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAACic,YAAT,GAAwB,IAAIjI,IAAJ,CAAShD,MAAM,CAAC,cAAD,CAAf,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAAC6S,IAAT,GAAgB7B,MAAM,CAAC,MAAD,CAAtB;EACD;;EACD,IAAIA,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAACm6B,IAAT,GAAgB5d,QAAQ,CAACvL,MAAM,CAAC,MAAD,CAAP,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAACyB,YAAT,GAAwBuP,MAAM,CAAC,cAAD,CAA9B;EACD;;EACD,IAAIA,MAAM,CAAC,OAAD,CAAN,KAAoBzS,SAAxB,EAAmC;IACjCyB,QAAQ,CAAC8W,KAAT,GAAiBG,2BAA2B,CAACjG,MAAM,CAAC,OAAD,CAAP,EAAkBhT,OAAlB,CAA5C;EACD;;EACD,OAAOgC,QAAP;AACD,CA5BD;;AA8BA,IAAM0gB,gCAAgC,GAAG,UAAC1P,MAAD,EAAchT,OAAd,EAAqC;EAC5E,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOsS,6BAA6B,CAACtS,KAAD,EAAQ5pB,OAAR,CAApC;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMqf,6CAA6C,GAAG,UACpDrM,MADoD,EAEpDhT,OAFoD,EAE7B;EAEvB,IAAIgC,QAAQ,GAAQ;IAClBixB,iBAAiB,EAAE1yB,SADD;IAElB+Z,IAAI,EAAE/Z;EAFY,CAApB;;EAIA,IAAIyS,MAAM,CAAC,mBAAD,CAAN,KAAgCzS,SAApC,EAA+C;IAC7CyB,QAAQ,CAACixB,iBAAT,GAA6BjgB,MAAM,CAAC,mBAAD,CAAnC;EACD;;EACD,IAAIA,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAACsY,IAAT,GAAgB8hB,oCAAoC,CAACppB,MAAM,CAAC,MAAD,CAAP,EAAiBhT,OAAjB,CAApD;EACD;;EACD,OAAOgC,QAAP;AACD,CAfD;;AAiBA,IAAMkd,yCAAyC,GAAG,UAAClM,MAAD,EAAchT,OAAd,EAAqC;EACrF,IAAIgC,QAAQ,GAAQ;IAClB0W,MAAM,EAAEnY;EADU,CAApB;;EAGA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAAC0W,MAAT,GAAkB1F,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,OAAOhR,QAAP;AACD,CARD;;AAUA,IAAMwd,yCAAyC,GAAG,UAACxM,MAAD,EAAchT,OAAd,EAAqC;EACrF,IAAIgC,QAAQ,GAAQ;IAClB0qB,IAAI,EAAEnsB,SADY;IAElB4yB,eAAe,EAAE5yB;EAFC,CAApB;;EAIA,IAAIyS,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAAC0qB,IAAT,GAAgB1Z,MAAM,CAAC,MAAD,CAAtB;EACD;;EACD,IAAIA,MAAM,CAAC,iBAAD,CAAN,KAA8BzS,SAAlC,EAA6C;IAC3CyB,QAAQ,CAACmxB,eAAT,GAA2B,IAAInd,IAAJ,CAAShD,MAAM,CAAC,iBAAD,CAAf,CAA3B;EACD;;EACD,OAAOhR,QAAP;AACD,CAZD;;AAcA,IAAMo6B,oCAAoC,GAAG,UAACppB,MAAD,EAAchT,OAAd,EAAqC;EAChF,IAAIgC,QAAQ,GAAQ;IAClBoxB,gBAAgB,EAAE7yB;EADA,CAApB;;EAGA,IAAIyS,MAAM,CAAC,kBAAD,CAAN,KAA+BzS,SAAnC,EAA8C;IAC5CyB,QAAQ,CAACoxB,gBAAT,GAA4B6F,sCAAsC,CAACjmB,MAAM,CAAC,kBAAD,CAAP,EAA6BhT,OAA7B,CAAlE;EACD;;EACD,OAAOgC,QAAP;AACD,CARD;;AAUA,IAAMq6B,mCAAmC,GAAG,UAACrpB,MAAD,EAAchT,OAAd,EAAqC;EAC/E,IAAIgC,QAAQ,GAAQ;IAClB6S,IAAI,EAAEtU,SADY;IAElB47B,IAAI,EAAE57B,SAFY;IAGlBkD,YAAY,EAAElD,SAHI;IAIlBK,GAAG,EAAEL,SAJa;IAKlB8G,SAAS,EAAE9G,SALO;IAMlB84B,QAAQ,EAAE94B,SANQ;IAOlB0d,YAAY,EAAE1d,SAPI;IAQlBuY,KAAK,EAAEvY;EARW,CAApB;;EAUA,IAAIyS,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAAC6S,IAAT,GAAgB7B,MAAM,CAAC,MAAD,CAAtB;EACD;;EACD,IAAIA,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAACm6B,IAAT,GAAgB5d,QAAQ,CAACvL,MAAM,CAAC,MAAD,CAAP,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAACyB,YAAT,GAAwBuP,MAAM,CAAC,cAAD,CAA9B;EACD;;EACD,IAAIA,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/ByB,QAAQ,CAACpB,GAAT,GAAeoS,MAAM,CAAC,KAAD,CAArB;EACD;;EACD,IAAIA,MAAM,CAAC,WAAD,CAAN,KAAwBzS,SAA5B,EAAuC;IACrCyB,QAAQ,CAACqF,SAAT,GAAqB2L,MAAM,CAAC,WAAD,CAA3B;EACD;;EACD,IAAIA,MAAM,CAAC,UAAD,CAAN,KAAuBzS,SAA3B,EAAsC;IACpCyB,QAAQ,CAACq3B,QAAT,GAAoBrmB,MAAM,CAAC,UAAD,CAAN,IAAsB,MAA1C;EACD;;EACD,IAAIA,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAACic,YAAT,GAAwB,IAAIjI,IAAJ,CAAShD,MAAM,CAAC,cAAD,CAAf,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,OAAD,CAAN,KAAoBzS,SAAxB,EAAmC;IACjCyB,QAAQ,CAAC8W,KAAT,GAAiBG,2BAA2B,CAACjG,MAAM,CAAC,OAAD,CAAP,EAAkBhT,OAAlB,CAA5C;EACD;;EACD,OAAOgC,QAAP;AACD,CApCD;;AAsCA,IAAMqhB,uCAAuC,GAAG,UAACrQ,MAAD,EAAchT,OAAd,EAAqC;EACnF,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOyS,mCAAmC,CAACzS,KAAD,EAAQ5pB,OAAR,CAA1C;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMiZ,2BAA2B,GAAG,UAACjG,MAAD,EAAchT,OAAd,EAAqC;EACvE,IAAIgC,QAAQ,GAAQ;IAClB2sB,WAAW,EAAEpuB,SADK;IAElBsuB,EAAE,EAAEtuB;EAFc,CAApB;;EAIA,IAAIyS,MAAM,CAAC,aAAD,CAAN,KAA0BzS,SAA9B,EAAyC;IACvCyB,QAAQ,CAAC2sB,WAAT,GAAuB3b,MAAM,CAAC,aAAD,CAA7B;EACD;;EACD,IAAIA,MAAM,CAAC,IAAD,CAAN,KAAiBzS,SAArB,EAAgC;IAC9ByB,QAAQ,CAAC6sB,EAAT,GAAc7b,MAAM,CAAC,IAAD,CAApB;EACD;;EACD,OAAOhR,QAAP;AACD,CAZD;;AAcA,IAAM+Z,uCAAuC,GAAG,UAAC/I,MAAD,EAAchT,OAAd,EAAqC;EACnF,IAAIgC,QAAQ,GAAQ;IAClBqY,KAAK,EAAE9Z;EADW,CAApB;;EAGA,IAAIyS,MAAM,CAACsH,IAAP,KAAgB,EAApB,EAAwB;IACtBtY,QAAQ,CAACqY,KAAT,GAAiB,EAAjB;EACD;;EACD,IAAIrH,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAACqY,KAAT,GAAiBiiB,4CAA4C,CAACj9B,sBAAsB,CAAC2T,MAAM,CAAC,MAAD,CAAP,CAAvB,EAAyChT,OAAzC,CAA7D;EACD;;EACD,OAAOgC,QAAP;AACD,CAXD;;AAaA,IAAMu6B,2CAA2C,GAAG,UAACvpB,MAAD,EAAchT,OAAd,EAAqC;EACvF,IAAIgC,QAAQ,GAAQ;IAClB0xB,eAAe,EAAEnzB;EADC,CAApB;;EAGA,IAAIyS,MAAM,CAAC,iBAAD,CAAN,KAA8BzS,SAAlC,EAA6C;IAC3CyB,QAAQ,CAAC0xB,eAAT,GAA2B1gB,MAAM,CAAC,iBAAD,CAAjC;EACD;;EACD,OAAOhR,QAAP;AACD,CARD;;AAUA,IAAMs6B,4CAA4C,GAAG,UACnDtpB,MADmD,EAEnDhT,OAFmD,EAE5B;EAEvB,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAO2S,2CAA2C,CAAC3S,KAAD,EAAQ5pB,OAAR,CAAlD;EACD,CAPI,CAAP;AAQD,CAZD;;AAcA,IAAMw8B,0BAA0B,GAAG,UAACxpB,MAAD,EAAchT,OAAd,EAAqC;EACtE,IAAIgC,QAAQ,GAAQ;IAClBuI,UAAU,EAAEhK,SADM;IAElB0d,YAAY,EAAE1d,SAFI;IAGlBsU,IAAI,EAAEtU,SAHY;IAIlB47B,IAAI,EAAE57B;EAJY,CAApB;;EAMA,IAAIyS,MAAM,CAAC,YAAD,CAAN,KAAyBzS,SAA7B,EAAwC;IACtCyB,QAAQ,CAACuI,UAAT,GAAsBgU,QAAQ,CAACvL,MAAM,CAAC,YAAD,CAAP,CAA9B;EACD;;EACD,IAAIA,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAACic,YAAT,GAAwB,IAAIjI,IAAJ,CAAShD,MAAM,CAAC,cAAD,CAAf,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAAC6S,IAAT,GAAgB7B,MAAM,CAAC,MAAD,CAAtB;EACD;;EACD,IAAIA,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAACm6B,IAAT,GAAgB5d,QAAQ,CAACvL,MAAM,CAAC,MAAD,CAAP,CAAxB;EACD;;EACD,OAAOhR,QAAP;AACD,CApBD;;AAsBA,IAAM6hB,2BAA2B,GAAG,UAAC7Q,MAAD,EAAchT,OAAd,EAAqC;EACvE,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAO4S,0BAA0B,CAAC5S,KAAD,EAAQ5pB,OAAR,CAAjC;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMqc,kCAAkC,GAAG,UAACrJ,MAAD,EAAchT,OAAd,EAAqC;EAC9E,IAAIgC,QAAQ,GAAQ;IAClBy6B,QAAQ,EAAEl8B;EADQ,CAApB;;EAGA,IAAIyS,MAAM,CAAC,UAAD,CAAN,KAAuBzS,SAA3B,EAAsC;IACpCyB,QAAQ,CAACy6B,QAAT,GAAoBzpB,MAAM,CAAC,UAAD,CAAN,IAAsB,MAA1C;EACD;;EACD,OAAOhR,QAAP;AACD,CARD;;AAUA,IAAM+d,oDAAoD,GAAG,UAC3D/M,MAD2D,EAE3DhT,OAF2D,EAEpC;EAEvB,IAAIgC,QAAQ,GAAQ;IAClB2xB,eAAe,EAAEpzB,SADC;IAElBqzB,gBAAgB,EAAErzB,SAFA;IAGlBszB,iBAAiB,EAAEtzB,SAHD;IAIlBuzB,qBAAqB,EAAEvzB;EAJL,CAApB;;EAMA,IAAIyS,MAAM,CAAC,iBAAD,CAAN,KAA8BzS,SAAlC,EAA6C;IAC3CyB,QAAQ,CAAC2xB,eAAT,GAA2B3gB,MAAM,CAAC,iBAAD,CAAN,IAA6B,MAAxD;EACD;;EACD,IAAIA,MAAM,CAAC,kBAAD,CAAN,KAA+BzS,SAAnC,EAA8C;IAC5CyB,QAAQ,CAAC4xB,gBAAT,GAA4B5gB,MAAM,CAAC,kBAAD,CAAN,IAA8B,MAA1D;EACD;;EACD,IAAIA,MAAM,CAAC,mBAAD,CAAN,KAAgCzS,SAApC,EAA+C;IAC7CyB,QAAQ,CAAC6xB,iBAAT,GAA6B7gB,MAAM,CAAC,mBAAD,CAAN,IAA+B,MAA5D;EACD;;EACD,IAAIA,MAAM,CAAC,uBAAD,CAAN,KAAoCzS,SAAxC,EAAmD;IACjDyB,QAAQ,CAAC8xB,qBAAT,GAAiC9gB,MAAM,CAAC,uBAAD,CAAN,IAAmC,MAApE;EACD;;EACD,OAAOhR,QAAP;AACD,CAvBD;;AAyBA,IAAM06B,wCAAwC,GAAG,UAAC1pB,MAAD,EAAchT,OAAd,EAAqC;EACpF,IAAIgC,QAAQ,GAAQ;IAClB2D,EAAE,EAAEpF,SADc;IAElByzB,QAAQ,EAAEzzB,SAFQ;IAGlB2wB,MAAM,EAAE3wB,SAHU;IAIlB2pB,MAAM,EAAE3pB;EAJU,CAApB;;EAMA,IAAIyS,MAAM,CAAC,IAAD,CAAN,KAAiBzS,SAArB,EAAgC;IAC9ByB,QAAQ,CAAC2D,EAAT,GAAcqN,MAAM,CAAC,IAAD,CAApB;EACD;;EACD,IAAIA,MAAM,CAAC,OAAD,CAAN,KAAoBzS,SAAxB,EAAmC;IACjCyB,QAAQ,CAACgyB,QAAT,GAAoBhhB,MAAM,CAAC,OAAD,CAA1B;EACD;;EACD,IAAIA,MAAM,CAAC+nB,KAAP,KAAiB,EAArB,EAAyB;IACvB/4B,QAAQ,CAACkvB,MAAT,GAAkB,EAAlB;EACD;;EACD,IAAIle,MAAM,CAAC,OAAD,CAAN,KAAoBzS,SAAxB,EAAmC;IACjCyB,QAAQ,CAACkvB,MAAT,GAAkB0I,+BAA+B,CAACv6B,sBAAsB,CAAC2T,MAAM,CAAC,OAAD,CAAP,CAAvB,EAA0ChT,OAA1C,CAAjD;EACD;;EACD,IAAIgT,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACkoB,MAAT,GAAkB8Q,qDAAqD,CAAChoB,MAAM,CAAC,QAAD,CAAP,EAAmBhT,OAAnB,CAAvE;EACD;;EACD,OAAOgC,QAAP;AACD,CAvBD;;AAyBA,IAAM0Z,4CAA4C,GAAG,UAAC1I,MAAD,EAAchT,OAAd,EAAqC;EACxF,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAO8S,wCAAwC,CAAC9S,KAAD,EAAQ5pB,OAAR,CAA/C;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAM28B,8BAA8B,GAAG,UAAC3pB,MAAD,EAAchT,OAAd,EAAqC;EAC1E,IAAIgC,QAAQ,GAAQ;IAClBkyB,QAAQ,EAAE3zB,SADQ;IAElB4zB,gBAAgB,EAAE5zB,SAFA;IAGlB6zB,QAAQ,EAAE7zB,SAHQ;IAIlB8zB,oBAAoB,EAAE9zB,SAJJ;IAKlB+zB,cAAc,EAAE/zB;EALE,CAApB;;EAOA,IAAIyS,MAAM,CAAC,UAAD,CAAN,KAAuBzS,SAA3B,EAAsC;IACpCyB,QAAQ,CAACkyB,QAAT,GAAoBlhB,MAAM,CAAC,UAAD,CAA1B;EACD;;EACD,IAAIA,MAAM,CAAC,kBAAD,CAAN,KAA+BzS,SAAnC,EAA8C;IAC5CyB,QAAQ,CAACmyB,gBAAT,GAA4BnhB,MAAM,CAAC,kBAAD,CAAlC;EACD;;EACD,IAAIA,MAAM,CAAC,UAAD,CAAN,KAAuBzS,SAA3B,EAAsC;IACpCyB,QAAQ,CAACoyB,QAAT,GAAoBphB,MAAM,CAAC,UAAD,CAA1B;EACD;;EACD,IAAIA,MAAM,CAAC,sBAAD,CAAN,KAAmCzS,SAAvC,EAAkD;IAChDyB,QAAQ,CAACqyB,oBAAT,GAAgCrhB,MAAM,CAAC,sBAAD,CAAtC;EACD;;EACD,IAAIA,MAAM,CAAC,gBAAD,CAAN,KAA6BzS,SAAjC,EAA4C;IAC1CyB,QAAQ,CAACsyB,cAAT,GAA0BthB,MAAM,CAAC,gBAAD,CAAhC;EACD;;EACD,OAAOhR,QAAP;AACD,CAxBD;;AA0BA,IAAM2b,2CAA2C,GAAG,UAAC3K,MAAD,EAAchT,OAAd,EAAqC;EACvF,IAAIgC,QAAQ,GAAQ;IAClBkyB,QAAQ,EAAE3zB,SADQ;IAElB6zB,QAAQ,EAAE7zB;EAFQ,CAApB;;EAIA,IAAIyS,MAAM,CAAC,UAAD,CAAN,KAAuBzS,SAA3B,EAAsC;IACpCyB,QAAQ,CAACkyB,QAAT,GAAoBlhB,MAAM,CAAC,UAAD,CAA1B;EACD;;EACD,IAAIA,MAAM,CAAC,UAAD,CAAN,KAAuBzS,SAA3B,EAAsC;IACpCyB,QAAQ,CAACoyB,QAAT,GAAoBphB,MAAM,CAAC,UAAD,CAA1B;EACD;;EACD,OAAOhR,QAAP;AACD,CAZD;;AAcA,IAAM46B,0CAA0C,GAAG,UAAC5pB,MAAD,EAAchT,OAAd,EAAqC;EACtF,IAAIgC,QAAQ,GAAQ;IAClB0W,MAAM,EAAEnY;EADU,CAApB;;EAGA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAAC0W,MAAT,GAAkB1F,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,OAAOhR,QAAP;AACD,CARD;;AAUA,IAAMwa,8CAA8C,GAAG,UACrDxJ,MADqD,EAErDhT,OAFqD,EAE9B;EAEvB,IAAIgC,QAAQ,GAAQ;IAClByyB,IAAI,EAAEl0B,SADY;IAElB8Z,KAAK,EAAE9Z;EAFW,CAApB;;EAIA,IAAIyS,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAACyyB,IAAT,GAAgBzhB,MAAM,CAAC,MAAD,CAAtB;EACD;;EACD,IAAIA,MAAM,CAACsH,IAAP,KAAgB,EAApB,EAAwB;IACtBtY,QAAQ,CAACqY,KAAT,GAAiB,EAAjB;EACD;;EACD,IAAIrH,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAACqY,KAAT,GAAiBwiB,sCAAsC,CAACx9B,sBAAsB,CAAC2T,MAAM,CAAC,MAAD,CAAP,CAAvB,EAAyChT,OAAzC,CAAvD;EACD;;EACD,OAAOgC,QAAP;AACD,CAlBD;;AAoBA,IAAM86B,qCAAqC,GAAG,UAAC9pB,MAAD,EAAchT,OAAd,EAAqC;EACjF,IAAIgC,QAAQ,GAAQ;IAClB6sB,EAAE,EAAEtuB,SADc;IAElBq0B,QAAQ,EAAEr0B,SAFQ;IAGlByL,MAAM,EAAEzL,SAHU;IAIlB2pB,MAAM,EAAE3pB,SAJU;IAKlBmY,MAAM,EAAEnY,SALU;IAMlBu0B,uBAAuB,EAAEv0B,SANP;IAOlBy0B,yBAAyB,EAAEz0B,SAPT;IAQlBqvB,WAAW,EAAErvB,SARK;IASlB00B,uBAAuB,EAAE10B;EATP,CAApB;;EAWA,IAAIyS,MAAM,CAAC,IAAD,CAAN,KAAiBzS,SAArB,EAAgC;IAC9ByB,QAAQ,CAAC6sB,EAAT,GAAc7b,MAAM,CAAC,IAAD,CAApB;EACD;;EACD,IAAIA,MAAM,CAAC,UAAD,CAAN,KAAuBzS,SAA3B,EAAsC;IACpCyB,QAAQ,CAAC4yB,QAAT,GAAoBrW,QAAQ,CAACvL,MAAM,CAAC,UAAD,CAAP,CAA5B;EACD;;EACD,IAAIA,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACgK,MAAT,GAAkBgH,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACkoB,MAAT,GAAkB6S,2CAA2C,CAAC/pB,MAAM,CAAC,QAAD,CAAP,EAAmBhT,OAAnB,CAA7D;EACD;;EACD,IAAIgT,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAAC0W,MAAT,GAAkB1F,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,yBAAD,CAAN,KAAsCzS,SAA1C,EAAqD;IACnDyB,QAAQ,CAAC8yB,uBAAT,GAAmCkI,6CAA6C,CAC9EhqB,MAAM,CAAC,yBAAD,CADwE,EAE9EhT,OAF8E,CAAhF;EAID;;EACD,IAAIgT,MAAM,CAAC,2BAAD,CAAN,KAAwCzS,SAA5C,EAAuD;IACrDyB,QAAQ,CAACgzB,yBAAT,GAAqC6E,+CAA+C,CAClF7mB,MAAM,CAAC,2BAAD,CAD4E,EAElFhT,OAFkF,CAApF;EAID;;EACD,IAAIgT,MAAM,CAAC,aAAD,CAAN,KAA0BzS,SAA9B,EAAyC;IACvCyB,QAAQ,CAAC4tB,WAAT,GAAuB2J,iCAAiC,CAACvmB,MAAM,CAAC,aAAD,CAAP,EAAwBhT,OAAxB,CAAxD;EACD;;EACD,IAAIgT,MAAM,CAAC,yBAAD,CAAN,KAAsCzS,SAA1C,EAAqD;IACnDyB,QAAQ,CAACizB,uBAAT,GAAmCqE,6CAA6C,CAC9EtmB,MAAM,CAAC,yBAAD,CADwE,EAE9EhT,OAF8E,CAAhF;EAID;;EACD,OAAOgC,QAAP;AACD,CAjDD;;AAmDA,IAAMi7B,gDAAgD,GAAG,UACvDjqB,MADuD,EAEvDhT,OAFuD,EAEhC;EAEvB,IAAIgC,QAAQ,GAAQ;IAClBgK,MAAM,EAAEzL,SADU;IAElBypB,IAAI,EAAEzpB;EAFY,CAApB;;EAIA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACgK,MAAT,GAAkBgH,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC0X,GAAP,KAAe,EAAnB,EAAuB;IACrB1oB,QAAQ,CAACgoB,IAAT,GAAgB,EAAhB;EACD;;EACD,IAAIhX,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/ByB,QAAQ,CAACgoB,IAAT,GAAgBjN,4BAA4B,CAAC1d,sBAAsB,CAAC2T,MAAM,CAAC,KAAD,CAAP,CAAvB,EAAwChT,OAAxC,CAA5C;EACD;;EACD,OAAOgC,QAAP;AACD,CAlBD;;AAoBA,IAAM+6B,2CAA2C,GAAG,UAAC/pB,MAAD,EAAchT,OAAd,EAAqC;EACvF,IAAIgT,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClC,OAAO;MACLyL,MAAM,EAAEgH,MAAM,CAAC,QAAD;IADT,CAAP;EAGD;;EACD,IAAIA,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/B,OAAO;MACLmqB,GAAG,EAAE4N,yBAAyB,CAACtlB,MAAM,CAAC,KAAD,CAAP,EAAgBhT,OAAhB;IADzB,CAAP;EAGD;;EACD,IAAIgT,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/B,OAAO;MACLqqB,GAAG,EAAEqS,gDAAgD,CAACjqB,MAAM,CAAC,KAAD,CAAP,EAAgBhT,OAAhB;IADhD,CAAP;EAGD;;EACD,OAAO;IAAE8oB,QAAQ,EAAEnkB,MAAM,CAACijB,OAAP,CAAe5U,MAAf,EAAuB,CAAvB;EAAZ,CAAP;AACD,CAjBD;;AAmBA,IAAM6pB,sCAAsC,GAAG,UAAC7pB,MAAD,EAAchT,OAAd,EAAqC;EAClF,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOkT,qCAAqC,CAAClT,KAAD,EAAQ5pB,OAAR,CAA5C;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMy5B,qCAAqC,GAAG,UAACzmB,MAAD,EAAchT,OAAd,EAAqC;EACjF,IAAIgC,QAAQ,GAAQ;IAClB0W,MAAM,EAAEnY,SADU;IAElB40B,IAAI,EAAE50B;EAFY,CAApB;;EAIA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAAC0W,MAAT,GAAkB1F,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAACmzB,IAAT,GAAgBwG,0CAA0C,CAAC3oB,MAAM,CAAC,MAAD,CAAP,EAAiBhT,OAAjB,CAA1D;EACD;;EACD,OAAOgC,QAAP;AACD,CAZD;;AAcA,IAAM25B,0CAA0C,GAAG,UAAC3oB,MAAD,EAAchT,OAAd,EAAqC;EACtF,IAAIgC,QAAQ,GAAQ;IAClBozB,OAAO,EAAE70B;EADS,CAApB;;EAGA,IAAIyS,MAAM,CAAC,SAAD,CAAN,KAAsBzS,SAA1B,EAAqC;IACnCyB,QAAQ,CAACozB,OAAT,GAAmB7W,QAAQ,CAACvL,MAAM,CAAC,SAAD,CAAP,CAA3B;EACD;;EACD,OAAOhR,QAAP;AACD,CARD;;AAUA,IAAMk7B,iCAAiC,GAAG,UAAClqB,MAAD,EAAchT,OAAd,EAAqC;EAC7E,IAAIgC,QAAQ,GAAQ;IAClB4zB,SAAS,EAAEr1B,SADO;IAElBs1B,QAAQ,EAAEt1B;EAFQ,CAApB;;EAIA,IAAIyS,MAAM,CAAC,WAAD,CAAN,KAAwBzS,SAA5B,EAAuC;IACrCyB,QAAQ,CAAC4zB,SAAT,GAAqB8C,+BAA+B,CAAC1lB,MAAM,CAAC,WAAD,CAAP,EAAsBhT,OAAtB,CAApD;EACD;;EACD,IAAIgT,MAAM,CAAC,UAAD,CAAN,KAAuBzS,SAA3B,EAAsC;IACpCyB,QAAQ,CAAC6zB,QAAT,GAAoB8G,8BAA8B,CAAC3pB,MAAM,CAAC,UAAD,CAAP,EAAqBhT,OAArB,CAAlD;EACD;;EACD,OAAOgC,QAAP;AACD,CAZD;;AAcA,IAAM4b,kCAAkC,GAAG,UAAC5K,MAAD,EAAchT,OAAd,EAAqC;EAC9E,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOsT,iCAAiC,CAACtT,KAAD,EAAQ5pB,OAAR,CAAxC;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMi8B,iCAAiC,GAAG,UAACjpB,MAAD,EAAchT,OAAd,EAAqC;EAC7E,IAAIgC,QAAQ,GAAQ;IAClB+zB,WAAW,EAAEx1B;EADK,CAApB;;EAGA,IAAIyS,MAAM,CAACmqB,UAAP,KAAsB,EAA1B,EAA8B;IAC5Bn7B,QAAQ,CAAC+zB,WAAT,GAAuB,EAAvB;EACD;;EACD,IAAI/iB,MAAM,CAAC,YAAD,CAAN,KAAyBzS,SAA7B,EAAwC;IACtCyB,QAAQ,CAAC+zB,WAAT,GAAuBgE,oCAAoC,CAAC16B,sBAAsB,CAAC2T,MAAM,CAAC,YAAD,CAAP,CAAvB,EAA+ChT,OAA/C,CAA3D;EACD;;EACD,OAAOgC,QAAP;AACD,CAXD;;AAaA,IAAMo7B,mDAAmD,GAAG,UAC1DpqB,MAD0D,EAE1DhT,OAF0D,EAEnC;EAEvB,IAAIgC,QAAQ,GAAQ;IAClBy0B,YAAY,EAAEl2B,SADI;IAElBm2B,cAAc,EAAEn2B;EAFE,CAApB;;EAIA,IAAIyS,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAACy0B,YAAT,GAAwBzjB,MAAM,CAAC,cAAD,CAA9B;EACD;;EACD,IAAIA,MAAM,CAAC,gBAAD,CAAN,KAA6BzS,SAAjC,EAA4C;IAC1CyB,QAAQ,CAAC00B,cAAT,GAA0B1jB,MAAM,CAAC,gBAAD,CAAhC;EACD;;EACD,OAAOhR,QAAP;AACD,CAfD;;AAiBA,IAAM4X,uDAAuD,GAAG,UAC9D5G,MAD8D,EAE9DhT,OAF8D,EAEvC;EAEvB,IAAIgC,QAAQ,GAAQ;IAClBqY,KAAK,EAAE9Z;EADW,CAApB;;EAGA,IAAIyS,MAAM,CAACsH,IAAP,KAAgB,EAApB,EAAwB;IACtBtY,QAAQ,CAACqY,KAAT,GAAiB,EAAjB;EACD;;EACD,IAAIrH,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAACqY,KAAT,GAAiBgjB,+CAA+C,CAACh+B,sBAAsB,CAAC2T,MAAM,CAAC,MAAD,CAAP,CAAvB,EAAyChT,OAAzC,CAAhE;EACD;;EACD,OAAOgC,QAAP;AACD,CAdD;;AAgBA,IAAMs7B,8CAA8C,GAAG,UACrDtqB,MADqD,EAErDhT,OAFqD,EAE9B;EAEvB,IAAIgC,QAAQ,GAAQ;IAClB60B,kCAAkC,EAAEt2B,SADlB;IAElByD,gBAAgB,EAAEzD;EAFA,CAApB;;EAIA,IAAIyS,MAAM,CAAC,oCAAD,CAAN,KAAiDzS,SAArD,EAAgE;IAC9DyB,QAAQ,CAAC60B,kCAAT,GAA8CuG,mDAAmD,CAC/FpqB,MAAM,CAAC,oCAAD,CADyF,EAE/FhT,OAF+F,CAAjG;EAID;;EACD,IAAIgT,MAAM,CAAC,kBAAD,CAAN,KAA+BzS,SAAnC,EAA8C;IAC5CyB,QAAQ,CAACgC,gBAAT,GAA4BgP,MAAM,CAAC,kBAAD,CAAN,IAA8B,MAA1D;EACD;;EACD,OAAOhR,QAAP;AACD,CAlBD;;AAoBA,IAAMq7B,+CAA+C,GAAG,UACtDrqB,MADsD,EAEtDhT,OAFsD,EAE/B;EAEvB,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAO0T,8CAA8C,CAAC1T,KAAD,EAAQ5pB,OAAR,CAArD;EACD,CAPI,CAAP;AAQD,CAZD;;AAcA,IAAMg9B,6CAA6C,GAAG,UACpDhqB,MADoD,EAEpDhT,OAFoD,EAE7B;EAEvB,IAAIgC,QAAQ,GAAQ;IAClB80B,sBAAsB,EAAEv2B,SADN;IAElBy2B,oBAAoB,EAAEz2B;EAFJ,CAApB;;EAIA,IAAIyS,MAAM,CAAC,wBAAD,CAAN,KAAqCzS,SAAzC,EAAoD;IAClDyB,QAAQ,CAAC80B,sBAAT,GAAkCyG,4CAA4C,CAC5EvqB,MAAM,CAAC,wBAAD,CADsE,EAE5EhT,OAF4E,CAA9E;EAID;;EACD,IAAIgT,MAAM,CAAC,sBAAD,CAAN,KAAmCzS,SAAvC,EAAkD;IAChDyB,QAAQ,CAACg1B,oBAAT,GAAgC4F,0CAA0C,CAAC5pB,MAAM,CAAC,sBAAD,CAAP,EAAiChT,OAAjC,CAA1E;EACD;;EACD,OAAOgC,QAAP;AACD,CAlBD;;AAoBA,IAAM64B,4BAA4B,GAAG,UAAC7nB,MAAD,EAAchT,OAAd,EAAqC;EACxE,IAAIgC,QAAQ,GAAQ;IAClBi1B,KAAK,EAAE12B;EADW,CAApB;;EAGA,IAAIyS,MAAM,CAAC,OAAD,CAAN,KAAoBzS,SAAxB,EAAmC;IACjCyB,QAAQ,CAACi1B,KAAT,GAAiBjkB,MAAM,CAAC,OAAD,CAAvB;EACD;;EACD,OAAOhR,QAAP;AACD,CARD;;AAUA,IAAMu7B,4CAA4C,GAAG,UAACvqB,MAAD,EAAchT,OAAd,EAAqC;EACxF,IAAIgC,QAAQ,GAAQ;IAClB0W,MAAM,EAAEnY;EADU,CAApB;;EAGA,IAAIyS,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAAC0W,MAAT,GAAkB1F,MAAM,CAAC,QAAD,CAAxB;EACD;;EACD,OAAOhR,QAAP;AACD,CARD;;AAUA,IAAM44B,2BAA2B,GAAG,UAAC5nB,MAAD,EAAchT,OAAd,EAAqC;EACvE,IAAIgC,QAAQ,GAAQ,EAApB;EACA,OAAOA,QAAP;AACD,CAHD;;AAKA,IAAMm2B,0CAA0C,GAAG,UAACnlB,MAAD,EAAchT,OAAd,EAAqC;EACtF,IAAIgC,QAAQ,GAAQ;IAClBk1B,UAAU,EAAE32B;EADM,CAApB;;EAGA,IAAIyS,MAAM,CAAC,YAAD,CAAN,KAAyBzS,SAA7B,EAAwC;IACtCyB,QAAQ,CAACk1B,UAAT,GAAsBsG,oDAAoD,CAACxqB,MAAM,CAAC,YAAD,CAAP,EAAuBhT,OAAvB,CAA1E;EACD;;EACD,OAAOgC,QAAP;AACD,CARD;;AAUA,IAAMw7B,oDAAoD,GAAG,UAC3DxqB,MAD2D,EAE3DhT,OAF2D,EAEpC;EAEvB,IAAIgC,QAAQ,GAAQ;IAClBo1B,mBAAmB,EAAE72B,SADH;IAElBqvB,WAAW,EAAErvB;EAFK,CAApB;;EAIA,IAAIyS,MAAM,CAAC,qBAAD,CAAN,KAAkCzS,SAAtC,EAAiD;IAC/CyB,QAAQ,CAACo1B,mBAAT,GAA+BpkB,MAAM,CAAC,qBAAD,CAArC;EACD;;EACD,IAAIA,MAAM,CAAC,aAAD,CAAN,KAA0BzS,SAA9B,EAAyC;IACvCyB,QAAQ,CAAC4tB,WAAT,GAAuBwI,gDAAgD,CAACplB,MAAM,CAAC,aAAD,CAAP,EAAwBhT,OAAxB,CAAvE;EACD;;EACD,OAAOgC,QAAP;AACD,CAfD;;AAiBA,IAAMs2B,yBAAyB,GAAG,UAACtlB,MAAD,EAAchT,OAAd,EAAqC;EACrE,IAAIgC,QAAQ,GAAQ;IAClBpB,GAAG,EAAEL,SADa;IAElB4tB,KAAK,EAAE5tB;EAFW,CAApB;;EAIA,IAAIyS,MAAM,CAAC,KAAD,CAAN,KAAkBzS,SAAtB,EAAiC;IAC/ByB,QAAQ,CAACpB,GAAT,GAAeoS,MAAM,CAAC,KAAD,CAArB;EACD;;EACD,IAAIA,MAAM,CAAC,OAAD,CAAN,KAAoBzS,SAAxB,EAAmC;IACjCyB,QAAQ,CAACmsB,KAAT,GAAiBnb,MAAM,CAAC,OAAD,CAAvB;EACD;;EACD,OAAOhR,QAAP;AACD,CAZD;;AAcA,IAAM+a,4BAA4B,GAAG,UAAC/J,MAAD,EAAchT,OAAd,EAAqC;EACxE,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAO0O,yBAAyB,CAAC1O,KAAD,EAAQ5pB,OAAR,CAAhC;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMy9B,iCAAiC,GAAG,UAACzqB,MAAD,EAAchT,OAAd,EAAqC;EAC7E,IAAIgC,QAAQ,GAAQ;IAClBwsB,OAAO,EAAEjuB,SADS;IAElBmuB,UAAU,EAAEnuB;EAFM,CAApB;;EAIA,IAAIyS,MAAM,CAAC,SAAD,CAAN,KAAsBzS,SAA1B,EAAqC;IACnCyB,QAAQ,CAACwsB,OAAT,GAAmByL,6BAA6B,CAACjnB,MAAM,CAAC,SAAD,CAAP,EAAoBhT,OAApB,CAAhD;EACD;;EACD,IAAIgT,MAAM,CAAC,YAAD,CAAN,KAAyBzS,SAA7B,EAAwC;IACtCyB,QAAQ,CAAC0sB,UAAT,GAAsB1b,MAAM,CAAC,YAAD,CAA5B;EACD;;EACD,OAAOhR,QAAP;AACD,CAZD;;AAcA,IAAM05B,kCAAkC,GAAG,UAAC1oB,MAAD,EAAchT,OAAd,EAAqC;EAC9E,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAO6T,iCAAiC,CAAC7T,KAAD,EAAQ5pB,OAAR,CAAxC;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAM09B,6BAA6B,GAAG,UAAC1qB,MAAD,EAAchT,OAAd,EAAqC;EACzE,IAAIgC,QAAQ,GAAQ;IAClB2qB,IAAI,EAAEpsB,SADY;IAElByoB,UAAU,EAAEzoB;EAFM,CAApB;;EAIA,IAAIyS,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAAC2qB,IAAT,GAAgBpO,QAAQ,CAACvL,MAAM,CAAC,MAAD,CAAP,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,YAAD,CAAN,KAAyBzS,SAA7B,EAAwC;IACtCyB,QAAQ,CAACgnB,UAAT,GAAsBhW,MAAM,CAAC,YAAD,CAA5B;EACD;;EACD,OAAOhR,QAAP;AACD,CAZD;;AAcA,IAAMq4B,iCAAiC,GAAG,UAACrnB,MAAD,EAAchT,OAAd,EAAqC;EAC7E,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAO8T,6BAA6B,CAAC9T,KAAD,EAAQ5pB,OAAR,CAApC;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAM29B,wCAAwC,GAAG,UAAC3qB,MAAD,EAAchT,OAAd,EAAqC;EACpF,IAAIgC,QAAQ,GAAQ;IAClB2D,EAAE,EAAEpF,SADc;IAElBk3B,QAAQ,EAAEl3B,SAFQ;IAGlB2wB,MAAM,EAAE3wB,SAHU;IAIlB2pB,MAAM,EAAE3pB;EAJU,CAApB;;EAMA,IAAIyS,MAAM,CAAC,IAAD,CAAN,KAAiBzS,SAArB,EAAgC;IAC9ByB,QAAQ,CAAC2D,EAAT,GAAcqN,MAAM,CAAC,IAAD,CAApB;EACD;;EACD,IAAIA,MAAM,CAAC,OAAD,CAAN,KAAoBzS,SAAxB,EAAmC;IACjCyB,QAAQ,CAACy1B,QAAT,GAAoBzkB,MAAM,CAAC,OAAD,CAA1B;EACD;;EACD,IAAIA,MAAM,CAAC+nB,KAAP,KAAiB,EAArB,EAAyB;IACvB/4B,QAAQ,CAACkvB,MAAT,GAAkB,EAAlB;EACD;;EACD,IAAIle,MAAM,CAAC,OAAD,CAAN,KAAoBzS,SAAxB,EAAmC;IACjCyB,QAAQ,CAACkvB,MAAT,GAAkB0I,+BAA+B,CAACv6B,sBAAsB,CAAC2T,MAAM,CAAC,OAAD,CAAP,CAAvB,EAA0ChT,OAA1C,CAAjD;EACD;;EACD,IAAIgT,MAAM,CAAC,QAAD,CAAN,KAAqBzS,SAAzB,EAAoC;IAClCyB,QAAQ,CAACkoB,MAAT,GAAkB8Q,qDAAqD,CAAChoB,MAAM,CAAC,QAAD,CAAP,EAAmBhT,OAAnB,CAAvE;EACD;;EACD,OAAOgC,QAAP;AACD,CAvBD;;AAyBA,IAAM4Z,4CAA4C,GAAG,UAAC5I,MAAD,EAAchT,OAAd,EAAqC;EACxF,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAO+T,wCAAwC,CAAC/T,KAAD,EAAQ5pB,OAAR,CAA/C;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAM49B,gCAAgC,GAAG,UAAC5qB,MAAD,EAAchT,OAAd,EAAqC;EAC5E,IAAIgC,QAAQ,GAAQ;IAClBgU,IAAI,EAAEzV,SADY;IAElBosB,IAAI,EAAEpsB,SAFY;IAGlBkD,YAAY,EAAElD;EAHI,CAApB;;EAKA,IAAIyS,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAACgU,IAAT,GAAgB,IAAIA,IAAJ,CAAShD,MAAM,CAAC,MAAD,CAAf,CAAhB;EACD;;EACD,IAAIA,MAAM,CAAC,MAAD,CAAN,KAAmBzS,SAAvB,EAAkC;IAChCyB,QAAQ,CAAC2qB,IAAT,GAAgBpO,QAAQ,CAACvL,MAAM,CAAC,MAAD,CAAP,CAAxB;EACD;;EACD,IAAIA,MAAM,CAAC,cAAD,CAAN,KAA2BzS,SAA/B,EAA0C;IACxCyB,QAAQ,CAACyB,YAAT,GAAwBuP,MAAM,CAAC,cAAD,CAA9B;EACD;;EACD,OAAOhR,QAAP;AACD,CAhBD;;AAkBA,IAAMq5B,oCAAoC,GAAG,UAACroB,MAAD,EAAchT,OAAd,EAAqC;EAChF,OAAO,CAACgT,MAAM,IAAI,EAAX,EACJ0W,MADI,CACG,UAACC,CAAD,EAAO;IAAK,QAAC,IAAI,IAAL;EAAS,CADxB,EAEJ7oB,GAFI,CAEA,UAAC8oB,KAAD,EAAW;IACd,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAClB,OAAO,IAAP;IACD;;IACD,OAAOgU,gCAAgC,CAAChU,KAAD,EAAQ5pB,OAAR,CAAvC;EACD,CAPI,CAAP;AAQD,CATD;;AAWA,IAAMoT,mBAAmB,GAAG,UAACJ,MAAD,EAAuB;;;EAAyB,OAAC;IAC3E6qB,cAAc,EAAE7qB,MAAM,CAACC,UADoD;IAE3E6qB,SAAS,QAAE9qB,MAAM,CAAC/S,OAAP,CAAe,kBAAf,CAAF,MAAoC,IAApC,IAAoCoB,aAApC,GAAoCA,EAApC,GAAwC2R,MAAM,CAAC/S,OAAP,CAAe,mBAAf,CAF0B;IAG3E89B,iBAAiB,EAAE/qB,MAAM,CAAC/S,OAAP,CAAe,YAAf,CAHwD;IAI3E+9B,IAAI,EAAEhrB,MAAM,CAAC/S,OAAP,CAAe,aAAf;EAJqE,CAAD;AAK1E,CALF,C,CAOA;;;AACA,IAAMqT,WAAW,GAAG,UAAC2qB,UAAD,EAAqCj+B,OAArC,EAA4D;EAA3D;IAAAi+B,iBAAsBC,UAAtB;EAAkC;;EACrD,IAAID,UAAU,YAAYC,UAA1B,EAAsC;IACpC,OAAO3qB,OAAO,CAACC,OAAR,CAAgByqB,UAAhB,CAAP;EACD;;EACD,OAAOj+B,OAAO,CAACm+B,eAAR,CAAwBF,UAAxB,KAAuC1qB,OAAO,CAACC,OAAR,CAAgB,IAAI0qB,UAAJ,EAAhB,CAA9C;AACD,CALD,C,CAOA;;;AACA,IAAME,iBAAiB,GAAG,UAACH,UAAD,EAAkBj+B,OAAlB,EAAyC;EACjE,kBAAW,CAACi+B,UAAD,EAAaj+B,OAAb,CAAX,CAAiCq+B,IAAjC,CAAsC,UAACx8B,IAAD,EAAK;IAAK,cAAO,CAACy8B,WAAR,CAAoBz8B,IAApB;EAAyB,CAAzE;AAA0E,CAD5E;;AAGA,IAAM3B,yBAAyB,GAAG,UAAC6nB,KAAD,EAAW;EAC3C,YAAK,KAAKxnB,SAAV,IACAwnB,KAAK,KAAK,IADV,IAEAA,KAAK,KAAK,EAFV,KAGC,CAACpjB,MAAM,CAAC45B,mBAAP,CAA2BxW,KAA3B,EAAkCyW,QAAlC,CAA2C,QAA3C,CAAD,IAAyDzW,KAAK,CAACtnB,MAAN,IAAgB,CAH1E,MAIC,CAACkE,MAAM,CAAC45B,mBAAP,CAA2BxW,KAA3B,EAAkCyW,QAAlC,CAA2C,MAA3C,CAAD,IAAuDzW,KAAK,CAAC0W,IAAN,IAAc,CAJtE;AAIwE,CAL1E;;AAOA,IAAMC,gBAAgB,GAAG,UAACC,GAAD,EAAY;EACnC,UAAG,CACAh+B,OADH,CACW,QADX,EACqB,GADrB,EAEGA,OAFH,CAEW,SAFX,EAEsB,GAFtB,EAGGA,OAHH,CAGW,SAHX,EAGsB,GAHtB,EAIGA,OAJH,CAIW,OAJX,EAIoB,GAJpB,EAKGA,OALH,CAKW,OALX,EAKoB,GALpB;AAKwB,CAN1B;;AAQA,IAAM8S,SAAS,GAAG,UAACwqB,UAAD,EAAkBj+B,OAAlB,EAAyC;EACzD,wBAAiB,CAACi+B,UAAD,EAAaj+B,OAAb,CAAjB,CAAuCq+B,IAAvC,CAA4C,UAACO,OAAD,EAAQ;IAClD,IAAIA,OAAO,CAACn+B,MAAZ,EAAoB;MAClB,IAAMo+B,SAAS,GAAGh/B,QAAQ,CAAC++B,OAAD,EAAU;QAClCE,mBAAmB,EAAE,EADa;QAElCC,gBAAgB,EAAE,KAFgB;QAGlCC,cAAc,EAAE,KAHkB;QAIlCC,iBAAiB,EAAE,UAACC,GAAD,EAAMC,OAAN,EAAa;UAAK,uBAAgB,CAACD,GAAD,CAAhB;QAAqB;MAJxB,CAAV,CAA1B;MAMA,IAAME,YAAY,GAAG,OAArB;MACA,IAAMC,GAAG,GAAG16B,MAAM,CAACC,IAAP,CAAYi6B,SAAZ,EAAuB,CAAvB,CAAZ;MACA,IAAMS,iBAAiB,GAAGT,SAAS,CAACQ,GAAD,CAAnC;;MACA,IAAIC,iBAAiB,CAACF,YAAD,CAArB,EAAqC;QACnCE,iBAAiB,CAACD,GAAD,CAAjB,GAAyBC,iBAAiB,CAACF,YAAD,CAA1C;QACA,OAAOE,iBAAiB,CAACF,YAAD,CAAxB;MACD;;MACD,OAAO7/B,sBAAsB,CAAC+/B,iBAAD,CAA7B;IACD;;IACD,OAAO,EAAP;EACD,CAlBD;AAkBE,CAnBJ;;AAqBA,IAAMxrB,oBAAoB,GAAG,UAACd,MAAD,EAAyBgC,IAAzB,EAAkC;EAC7D,IAAIA,IAAI,CAACZ,IAAL,KAAc7T,SAAlB,EAA6B;IAC3B,OAAOyU,IAAI,CAACZ,IAAZ;EACD;;EACD,IAAIpB,MAAM,CAACC,UAAP,IAAqB,GAAzB,EAA8B;IAC5B,OAAO,UAAP;EACD;;EACD,OAAO,EAAP;AACD,CARD","names":["AnalyticsFilter","LifecycleRuleFilter","MetricsFilter","ReplicationRuleFilter","HttpRequest","__HttpRequest","dateToUtcString","__dateToUtcString","extendedEncodeURIComponent","__extendedEncodeURIComponent","getArrayIfSingleItem","__getArrayIfSingleItem","getValueFromTextNode","__getValueFromTextNode","XmlNode","__XmlNode","XmlText","__XmlText","parse","xmlParse","serializeAws_restXmlAbortMultipartUploadCommand","input","context","headers","isSerializableHeaderValue","RequestPayer","ExpectedBucketOwner","resolvedPath","Bucket","undefined","labelValue","length","Error","replace","Key","split","map","segment","join","query","UploadId","uploadId","endpoint","_a","_c","hostname","_b","protocol","port","method","path","body","serializeAws_restXmlCompleteMultipartUploadCommand","MultipartUpload","contents","serializeAws_restXmlCompletedMultipartUpload","addAttribute","toString","serializeAws_restXmlCopyObjectCommand","ACL","CacheControl","ContentDisposition","ContentEncoding","ContentLanguage","ContentType","CopySource","CopySourceIfMatch","CopySourceIfModifiedSince","CopySourceIfNoneMatch","CopySourceIfUnmodifiedSince","Expires","expires","GrantFullControl","GrantRead","GrantReadACP","GrantWriteACP","MetadataDirective","TaggingDirective","ServerSideEncryption","StorageClass","WebsiteRedirectLocation","SSECustomerAlgorithm","SSECustomerKey","SSECustomerKeyMD5","SSEKMSKeyId","SSEKMSEncryptionContext","BucketKeyEnabled","CopySourceSSECustomerAlgorithm","CopySourceSSECustomerKey","CopySourceSSECustomerKeyMD5","Tagging","ObjectLockMode","ObjectLockRetainUntilDate","toISOString","ObjectLockLegalHoldStatus","ExpectedSourceBucketOwner","Metadata","Object","keys","reduce","acc","suffix","toLowerCase","serializeAws_restXmlCreateBucketCommand","GrantWrite","ObjectLockEnabledForBucket","CreateBucketConfiguration","serializeAws_restXmlCreateBucketConfiguration","serializeAws_restXmlCreateMultipartUploadCommand","uploads","serializeAws_restXmlDeleteBucketCommand","serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand","analytics","Id","id","serializeAws_restXmlDeleteBucketCorsCommand","cors","serializeAws_restXmlDeleteBucketEncryptionCommand","encryption","serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand","serializeAws_restXmlDeleteBucketInventoryConfigurationCommand","inventory","serializeAws_restXmlDeleteBucketLifecycleCommand","lifecycle","serializeAws_restXmlDeleteBucketMetricsConfigurationCommand","metrics","serializeAws_restXmlDeleteBucketOwnershipControlsCommand","ownershipControls","serializeAws_restXmlDeleteBucketPolicyCommand","policy","serializeAws_restXmlDeleteBucketReplicationCommand","replication","serializeAws_restXmlDeleteBucketTaggingCommand","tagging","serializeAws_restXmlDeleteBucketWebsiteCommand","website","serializeAws_restXmlDeleteObjectCommand","MFA","BypassGovernanceRetention","VersionId","versionId","serializeAws_restXmlDeleteObjectsCommand","delete","Delete","serializeAws_restXmlDelete","serializeAws_restXmlDeleteObjectTaggingCommand","serializeAws_restXmlDeletePublicAccessBlockCommand","publicAccessBlock","serializeAws_restXmlGetBucketAccelerateConfigurationCommand","accelerate","serializeAws_restXmlGetBucketAclCommand","acl","serializeAws_restXmlGetBucketAnalyticsConfigurationCommand","serializeAws_restXmlGetBucketCorsCommand","serializeAws_restXmlGetBucketEncryptionCommand","serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand","serializeAws_restXmlGetBucketInventoryConfigurationCommand","serializeAws_restXmlGetBucketLifecycleConfigurationCommand","serializeAws_restXmlGetBucketLocationCommand","location","serializeAws_restXmlGetBucketLoggingCommand","logging","serializeAws_restXmlGetBucketMetricsConfigurationCommand","serializeAws_restXmlGetBucketNotificationConfigurationCommand","notification","serializeAws_restXmlGetBucketOwnershipControlsCommand","serializeAws_restXmlGetBucketPolicyCommand","serializeAws_restXmlGetBucketPolicyStatusCommand","policyStatus","serializeAws_restXmlGetBucketReplicationCommand","serializeAws_restXmlGetBucketRequestPaymentCommand","requestPayment","serializeAws_restXmlGetBucketTaggingCommand","serializeAws_restXmlGetBucketVersioningCommand","versioning","serializeAws_restXmlGetBucketWebsiteCommand","serializeAws_restXmlGetObjectCommand","IfMatch","IfModifiedSince","IfNoneMatch","IfUnmodifiedSince","Range","range","ResponseCacheControl","ResponseContentDisposition","ResponseContentEncoding","ResponseContentLanguage","ResponseContentType","ResponseExpires","PartNumber","partNumber","serializeAws_restXmlGetObjectAclCommand","serializeAws_restXmlGetObjectLegalHoldCommand","serializeAws_restXmlGetObjectLockConfigurationCommand","serializeAws_restXmlGetObjectRetentionCommand","retention","serializeAws_restXmlGetObjectTaggingCommand","serializeAws_restXmlGetObjectTorrentCommand","torrent","serializeAws_restXmlGetPublicAccessBlockCommand","serializeAws_restXmlHeadBucketCommand","serializeAws_restXmlHeadObjectCommand","serializeAws_restXmlListBucketAnalyticsConfigurationsCommand","ContinuationToken","serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand","serializeAws_restXmlListBucketInventoryConfigurationsCommand","serializeAws_restXmlListBucketMetricsConfigurationsCommand","serializeAws_restXmlListBucketsCommand","serializeAws_restXmlListMultipartUploadsCommand","Delimiter","delimiter","EncodingType","KeyMarker","MaxUploads","Prefix","prefix","UploadIdMarker","serializeAws_restXmlListObjectsCommand","Marker","marker","MaxKeys","serializeAws_restXmlListObjectsV2Command","FetchOwner","StartAfter","serializeAws_restXmlListObjectVersionsCommand","versions","VersionIdMarker","serializeAws_restXmlListPartsCommand","MaxParts","PartNumberMarker","serializeAws_restXmlPutBucketAccelerateConfigurationCommand","AccelerateConfiguration","serializeAws_restXmlAccelerateConfiguration","serializeAws_restXmlPutBucketAclCommand","ContentMD5","AccessControlPolicy","serializeAws_restXmlAccessControlPolicy","serializeAws_restXmlPutBucketAnalyticsConfigurationCommand","AnalyticsConfiguration","serializeAws_restXmlAnalyticsConfiguration","serializeAws_restXmlPutBucketCorsCommand","CORSConfiguration","serializeAws_restXmlCORSConfiguration","serializeAws_restXmlPutBucketEncryptionCommand","ServerSideEncryptionConfiguration","serializeAws_restXmlServerSideEncryptionConfiguration","serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand","IntelligentTieringConfiguration","serializeAws_restXmlIntelligentTieringConfiguration","serializeAws_restXmlPutBucketInventoryConfigurationCommand","InventoryConfiguration","serializeAws_restXmlInventoryConfiguration","serializeAws_restXmlPutBucketLifecycleConfigurationCommand","LifecycleConfiguration","serializeAws_restXmlBucketLifecycleConfiguration","serializeAws_restXmlPutBucketLoggingCommand","BucketLoggingStatus","serializeAws_restXmlBucketLoggingStatus","serializeAws_restXmlPutBucketMetricsConfigurationCommand","MetricsConfiguration","serializeAws_restXmlMetricsConfiguration","serializeAws_restXmlPutBucketNotificationConfigurationCommand","NotificationConfiguration","serializeAws_restXmlNotificationConfiguration","serializeAws_restXmlPutBucketOwnershipControlsCommand","OwnershipControls","serializeAws_restXmlOwnershipControls","serializeAws_restXmlPutBucketPolicyCommand","ConfirmRemoveSelfBucketAccess","Policy","serializeAws_restXmlPutBucketReplicationCommand","Token","ReplicationConfiguration","serializeAws_restXmlReplicationConfiguration","serializeAws_restXmlPutBucketRequestPaymentCommand","RequestPaymentConfiguration","serializeAws_restXmlRequestPaymentConfiguration","serializeAws_restXmlPutBucketTaggingCommand","serializeAws_restXmlTagging","serializeAws_restXmlPutBucketVersioningCommand","VersioningConfiguration","serializeAws_restXmlVersioningConfiguration","serializeAws_restXmlPutBucketWebsiteCommand","WebsiteConfiguration","serializeAws_restXmlWebsiteConfiguration","serializeAws_restXmlPutObjectCommand","ContentLength","Body","serializeAws_restXmlPutObjectAclCommand","serializeAws_restXmlPutObjectLegalHoldCommand","LegalHold","serializeAws_restXmlObjectLockLegalHold","serializeAws_restXmlPutObjectLockConfigurationCommand","ObjectLockConfiguration","serializeAws_restXmlObjectLockConfiguration","serializeAws_restXmlPutObjectRetentionCommand","Retention","serializeAws_restXmlObjectLockRetention","serializeAws_restXmlPutObjectTaggingCommand","serializeAws_restXmlPutPublicAccessBlockCommand","PublicAccessBlockConfiguration","serializeAws_restXmlPublicAccessBlockConfiguration","serializeAws_restXmlRestoreObjectCommand","restore","RestoreRequest","serializeAws_restXmlRestoreRequest","serializeAws_restXmlSelectObjectContentCommand","select","bodyNode","Expression","node","addChildNode","withName","ExpressionType","InputSerialization","serializeAws_restXmlInputSerialization","OutputSerialization","serializeAws_restXmlOutputSerialization","RequestProgress","serializeAws_restXmlRequestProgress","ScanRange","serializeAws_restXmlScanRange","serializeAws_restXmlUploadPartCommand","serializeAws_restXmlUploadPartCopyCommand","CopySourceRange","deserializeAws_restXmlAbortMultipartUploadCommand","output","statusCode","deserializeAws_restXmlAbortMultipartUploadCommandError","$metadata","deserializeMetadata","RequestCharged","collectBody","Promise","resolve","parseBody","parsedOutput","_d","_e","errorCode","loadRestXmlErrorCode","deserializeAws_restXmlNoSuchUploadResponse","response","name","parsedBody","code","Code","__assign","message","Message","$fault","reject","assign","deserializeAws_restXmlCompleteMultipartUploadCommand","deserializeAws_restXmlCompleteMultipartUploadCommandError","ETag","Expiration","Location","data","deserializeAws_restXmlCopyObjectCommand","deserializeAws_restXmlCopyObjectCommandError","CopyObjectResult","CopySourceVersionId","deserializeAws_restXmlCopyObjectResult","deserializeAws_restXmlObjectNotInActiveTierErrorResponse","deserializeAws_restXmlCreateBucketCommand","deserializeAws_restXmlCreateBucketCommandError","_f","deserializeAws_restXmlBucketAlreadyExistsResponse","deserializeAws_restXmlBucketAlreadyOwnedByYouResponse","deserializeAws_restXmlCreateMultipartUploadCommand","deserializeAws_restXmlCreateMultipartUploadCommandError","AbortDate","AbortRuleId","Date","deserializeAws_restXmlDeleteBucketCommand","deserializeAws_restXmlDeleteBucketCommandError","deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand","deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError","deserializeAws_restXmlDeleteBucketCorsCommand","deserializeAws_restXmlDeleteBucketCorsCommandError","deserializeAws_restXmlDeleteBucketEncryptionCommand","deserializeAws_restXmlDeleteBucketEncryptionCommandError","deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand","deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError","deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand","deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError","deserializeAws_restXmlDeleteBucketLifecycleCommand","deserializeAws_restXmlDeleteBucketLifecycleCommandError","deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand","deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError","deserializeAws_restXmlDeleteBucketOwnershipControlsCommand","deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError","deserializeAws_restXmlDeleteBucketPolicyCommand","deserializeAws_restXmlDeleteBucketPolicyCommandError","deserializeAws_restXmlDeleteBucketReplicationCommand","deserializeAws_restXmlDeleteBucketReplicationCommandError","deserializeAws_restXmlDeleteBucketTaggingCommand","deserializeAws_restXmlDeleteBucketTaggingCommandError","deserializeAws_restXmlDeleteBucketWebsiteCommand","deserializeAws_restXmlDeleteBucketWebsiteCommandError","deserializeAws_restXmlDeleteObjectCommand","deserializeAws_restXmlDeleteObjectCommandError","DeleteMarker","deserializeAws_restXmlDeleteObjectsCommand","deserializeAws_restXmlDeleteObjectsCommandError","Deleted","Errors","deserializeAws_restXmlDeletedObjects","deserializeAws_restXmlErrors","deserializeAws_restXmlDeleteObjectTaggingCommand","deserializeAws_restXmlDeleteObjectTaggingCommandError","deserializeAws_restXmlDeletePublicAccessBlockCommand","deserializeAws_restXmlDeletePublicAccessBlockCommandError","deserializeAws_restXmlGetBucketAccelerateConfigurationCommand","deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError","Status","deserializeAws_restXmlGetBucketAclCommand","deserializeAws_restXmlGetBucketAclCommandError","Grants","Owner","AccessControlList","deserializeAws_restXmlGrants","deserializeAws_restXmlOwner","deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand","deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError","deserializeAws_restXmlAnalyticsConfiguration","deserializeAws_restXmlGetBucketCorsCommand","deserializeAws_restXmlGetBucketCorsCommandError","CORSRules","CORSRule","deserializeAws_restXmlCORSRules","deserializeAws_restXmlGetBucketEncryptionCommand","deserializeAws_restXmlGetBucketEncryptionCommandError","deserializeAws_restXmlServerSideEncryptionConfiguration","deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand","deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError","deserializeAws_restXmlIntelligentTieringConfiguration","deserializeAws_restXmlGetBucketInventoryConfigurationCommand","deserializeAws_restXmlGetBucketInventoryConfigurationCommandError","deserializeAws_restXmlInventoryConfiguration","deserializeAws_restXmlGetBucketLifecycleConfigurationCommand","deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError","Rules","Rule","deserializeAws_restXmlLifecycleRules","deserializeAws_restXmlGetBucketLocationCommand","deserializeAws_restXmlGetBucketLocationCommandError","LocationConstraint","deserializeAws_restXmlGetBucketLoggingCommand","deserializeAws_restXmlGetBucketLoggingCommandError","LoggingEnabled","deserializeAws_restXmlLoggingEnabled","deserializeAws_restXmlGetBucketMetricsConfigurationCommand","deserializeAws_restXmlGetBucketMetricsConfigurationCommandError","deserializeAws_restXmlMetricsConfiguration","deserializeAws_restXmlGetBucketNotificationConfigurationCommand","deserializeAws_restXmlGetBucketNotificationConfigurationCommandError","LambdaFunctionConfigurations","QueueConfigurations","TopicConfigurations","CloudFunctionConfiguration","deserializeAws_restXmlLambdaFunctionConfigurationList","QueueConfiguration","deserializeAws_restXmlQueueConfigurationList","TopicConfiguration","deserializeAws_restXmlTopicConfigurationList","deserializeAws_restXmlGetBucketOwnershipControlsCommand","deserializeAws_restXmlGetBucketOwnershipControlsCommandError","deserializeAws_restXmlOwnershipControls","deserializeAws_restXmlGetBucketPolicyCommand","deserializeAws_restXmlGetBucketPolicyCommandError","deserializeAws_restXmlGetBucketPolicyStatusCommand","deserializeAws_restXmlGetBucketPolicyStatusCommandError","PolicyStatus","deserializeAws_restXmlPolicyStatus","deserializeAws_restXmlGetBucketReplicationCommand","deserializeAws_restXmlGetBucketReplicationCommandError","deserializeAws_restXmlReplicationConfiguration","deserializeAws_restXmlGetBucketRequestPaymentCommand","deserializeAws_restXmlGetBucketRequestPaymentCommandError","Payer","deserializeAws_restXmlGetBucketTaggingCommand","deserializeAws_restXmlGetBucketTaggingCommandError","TagSet","deserializeAws_restXmlTagSet","deserializeAws_restXmlGetBucketVersioningCommand","deserializeAws_restXmlGetBucketVersioningCommandError","MFADelete","deserializeAws_restXmlGetBucketWebsiteCommand","deserializeAws_restXmlGetBucketWebsiteCommandError","ErrorDocument","IndexDocument","RedirectAllRequestsTo","RoutingRules","deserializeAws_restXmlErrorDocument","deserializeAws_restXmlIndexDocument","deserializeAws_restXmlRedirectAllRequestsTo","deserializeAws_restXmlRoutingRules","deserializeAws_restXmlGetObjectCommand","deserializeAws_restXmlGetObjectCommandError","AcceptRanges","ContentRange","LastModified","MissingMeta","PartsCount","ReplicationStatus","Restore","TagCount","parseInt","forEach","header","startsWith","substring","deserializeAws_restXmlInvalidObjectStateResponse","deserializeAws_restXmlNoSuchKeyResponse","deserializeAws_restXmlGetObjectAclCommand","deserializeAws_restXmlGetObjectAclCommandError","deserializeAws_restXmlGetObjectLegalHoldCommand","deserializeAws_restXmlGetObjectLegalHoldCommandError","deserializeAws_restXmlObjectLockLegalHold","deserializeAws_restXmlGetObjectLockConfigurationCommand","deserializeAws_restXmlGetObjectLockConfigurationCommandError","deserializeAws_restXmlObjectLockConfiguration","deserializeAws_restXmlGetObjectRetentionCommand","deserializeAws_restXmlGetObjectRetentionCommandError","deserializeAws_restXmlObjectLockRetention","deserializeAws_restXmlGetObjectTaggingCommand","deserializeAws_restXmlGetObjectTaggingCommandError","deserializeAws_restXmlGetObjectTorrentCommand","deserializeAws_restXmlGetObjectTorrentCommandError","deserializeAws_restXmlGetPublicAccessBlockCommand","deserializeAws_restXmlGetPublicAccessBlockCommandError","deserializeAws_restXmlPublicAccessBlockConfiguration","deserializeAws_restXmlHeadBucketCommand","deserializeAws_restXmlHeadBucketCommandError","deserializeAws_restXmlNoSuchBucketResponse","deserializeAws_restXmlHeadObjectCommand","deserializeAws_restXmlHeadObjectCommandError","ArchiveStatus","deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand","deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError","AnalyticsConfigurationList","IsTruncated","NextContinuationToken","deserializeAws_restXmlAnalyticsConfigurationList","deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand","deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError","IntelligentTieringConfigurationList","deserializeAws_restXmlIntelligentTieringConfigurationList","deserializeAws_restXmlListBucketInventoryConfigurationsCommand","deserializeAws_restXmlListBucketInventoryConfigurationsCommandError","InventoryConfigurationList","deserializeAws_restXmlInventoryConfigurationList","deserializeAws_restXmlListBucketMetricsConfigurationsCommand","deserializeAws_restXmlListBucketMetricsConfigurationsCommandError","MetricsConfigurationList","deserializeAws_restXmlMetricsConfigurationList","deserializeAws_restXmlListBucketsCommand","deserializeAws_restXmlListBucketsCommandError","Buckets","deserializeAws_restXmlBuckets","deserializeAws_restXmlListMultipartUploadsCommand","deserializeAws_restXmlListMultipartUploadsCommandError","CommonPrefixes","NextKeyMarker","NextUploadIdMarker","Uploads","deserializeAws_restXmlCommonPrefixList","Upload","deserializeAws_restXmlMultipartUploadList","deserializeAws_restXmlListObjectsCommand","deserializeAws_restXmlListObjectsCommandError","Contents","Name","NextMarker","deserializeAws_restXmlObjectList","deserializeAws_restXmlListObjectsV2Command","deserializeAws_restXmlListObjectsV2CommandError","KeyCount","deserializeAws_restXmlListObjectVersionsCommand","deserializeAws_restXmlListObjectVersionsCommandError","DeleteMarkers","NextVersionIdMarker","Versions","deserializeAws_restXmlDeleteMarkers","Version","deserializeAws_restXmlObjectVersionList","deserializeAws_restXmlListPartsCommand","deserializeAws_restXmlListPartsCommandError","Initiator","NextPartNumberMarker","Parts","deserializeAws_restXmlInitiator","Part","deserializeAws_restXmlParts","deserializeAws_restXmlPutBucketAccelerateConfigurationCommand","deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError","deserializeAws_restXmlPutBucketAclCommand","deserializeAws_restXmlPutBucketAclCommandError","deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand","deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError","deserializeAws_restXmlPutBucketCorsCommand","deserializeAws_restXmlPutBucketCorsCommandError","deserializeAws_restXmlPutBucketEncryptionCommand","deserializeAws_restXmlPutBucketEncryptionCommandError","deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand","deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError","deserializeAws_restXmlPutBucketInventoryConfigurationCommand","deserializeAws_restXmlPutBucketInventoryConfigurationCommandError","deserializeAws_restXmlPutBucketLifecycleConfigurationCommand","deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError","deserializeAws_restXmlPutBucketLoggingCommand","deserializeAws_restXmlPutBucketLoggingCommandError","deserializeAws_restXmlPutBucketMetricsConfigurationCommand","deserializeAws_restXmlPutBucketMetricsConfigurationCommandError","deserializeAws_restXmlPutBucketNotificationConfigurationCommand","deserializeAws_restXmlPutBucketNotificationConfigurationCommandError","deserializeAws_restXmlPutBucketOwnershipControlsCommand","deserializeAws_restXmlPutBucketOwnershipControlsCommandError","deserializeAws_restXmlPutBucketPolicyCommand","deserializeAws_restXmlPutBucketPolicyCommandError","deserializeAws_restXmlPutBucketReplicationCommand","deserializeAws_restXmlPutBucketReplicationCommandError","deserializeAws_restXmlPutBucketRequestPaymentCommand","deserializeAws_restXmlPutBucketRequestPaymentCommandError","deserializeAws_restXmlPutBucketTaggingCommand","deserializeAws_restXmlPutBucketTaggingCommandError","deserializeAws_restXmlPutBucketVersioningCommand","deserializeAws_restXmlPutBucketVersioningCommandError","deserializeAws_restXmlPutBucketWebsiteCommand","deserializeAws_restXmlPutBucketWebsiteCommandError","deserializeAws_restXmlPutObjectCommand","deserializeAws_restXmlPutObjectCommandError","deserializeAws_restXmlPutObjectAclCommand","deserializeAws_restXmlPutObjectAclCommandError","deserializeAws_restXmlPutObjectLegalHoldCommand","deserializeAws_restXmlPutObjectLegalHoldCommandError","deserializeAws_restXmlPutObjectLockConfigurationCommand","deserializeAws_restXmlPutObjectLockConfigurationCommandError","deserializeAws_restXmlPutObjectRetentionCommand","deserializeAws_restXmlPutObjectRetentionCommandError","deserializeAws_restXmlPutObjectTaggingCommand","deserializeAws_restXmlPutObjectTaggingCommandError","deserializeAws_restXmlPutPublicAccessBlockCommand","deserializeAws_restXmlPutPublicAccessBlockCommandError","deserializeAws_restXmlRestoreObjectCommand","deserializeAws_restXmlRestoreObjectCommandError","RestoreOutputPath","deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse","deserializeAws_restXmlSelectObjectContentCommand","deserializeAws_restXmlSelectObjectContentCommandError","Payload","eventStreamMarshaller","deserialize","event","eventName","eventHeaders","entries","accummulator","curr","value","eventMessage","parsedEvent","deserializeAws_restXmlSelectObjectContentEventStream_event","deserializeAws_restXmlUploadPartCommand","deserializeAws_restXmlUploadPartCommandError","deserializeAws_restXmlUploadPartCopyCommand","deserializeAws_restXmlUploadPartCopyCommandError","CopyPartResult","deserializeAws_restXmlCopyPartResult","deserializeAws_restXmlRecordsEvent_event","deserializeAws_restXmlStatsEvent_event","deserializeAws_restXmlProgressEvent_event","deserializeAws_restXmlContinuationEvent_event","deserializeAws_restXmlEndEvent_event","$unknown","Details","AccessTier","serializeAws_restXmlAbortIncompleteMultipartUpload","DaysAfterInitiation","String","nodes","serializeAws_restXmlGrants","containerNode_1","serializeAws_restXmlOwner","serializeAws_restXmlAccessControlTranslation","serializeAws_restXmlAllowedHeaders","filter","e","entry","serializeAws_restXmlAllowedMethods","serializeAws_restXmlAllowedOrigins","serializeAws_restXmlAnalyticsAndOperator","Tags","serializeAws_restXmlTagSet","Filter","serializeAws_restXmlAnalyticsFilter","StorageClassAnalysis","serializeAws_restXmlStorageClassAnalysis","serializeAws_restXmlAnalyticsExportDestination","S3BucketDestination","serializeAws_restXmlAnalyticsS3BucketDestination","visit","Tag","serializeAws_restXmlTag","And","_","Format","BucketAccountId","serializeAws_restXmlLifecycleRules","serializeAws_restXmlLoggingEnabled","serializeAws_restXmlCompletedPartList","serializeAws_restXmlCompletedPart","serializeAws_restXmlCondition","HttpErrorCodeReturnedEquals","KeyPrefixEquals","serializeAws_restXmlCORSRules","serializeAws_restXmlCORSRule","AllowedHeaders","AllowedMethods","AllowedOrigins","ExposeHeaders","serializeAws_restXmlExposeHeaders","MaxAgeSeconds","serializeAws_restXmlCSVInput","FileHeaderInfo","Comments","QuoteEscapeCharacter","RecordDelimiter","FieldDelimiter","QuoteCharacter","AllowQuotedRecordDelimiter","serializeAws_restXmlCSVOutput","QuoteFields","serializeAws_restXmlDefaultRetention","Mode","Days","Years","Objects","serializeAws_restXmlObjectIdentifierList","Quiet","serializeAws_restXmlDeleteMarkerReplication","serializeAws_restXmlDestination","Account","AccessControlTranslation","EncryptionConfiguration","serializeAws_restXmlEncryptionConfiguration","ReplicationTime","serializeAws_restXmlReplicationTime","Metrics","serializeAws_restXmlMetrics","serializeAws_restXmlEncryption","EncryptionType","KMSKeyId","KMSContext","ReplicaKmsKeyID","serializeAws_restXmlErrorDocument","serializeAws_restXmlEventList","serializeAws_restXmlExistingObjectReplication","serializeAws_restXmlFilterRule","Value","serializeAws_restXmlFilterRuleList","serializeAws_restXmlGlacierJobParameters","Tier","serializeAws_restXmlGrant","Grantee","serializeAws_restXmlGrantee","Permission","DisplayName","EmailAddress","ID","URI","Type","serializeAws_restXmlIndexDocument","Suffix","CSV","CompressionType","JSON","serializeAws_restXmlJSONInput","Parquet","serializeAws_restXmlParquetInput","serializeAws_restXmlIntelligentTieringAndOperator","serializeAws_restXmlIntelligentTieringFilter","Tierings","serializeAws_restXmlTieringList","Destination","serializeAws_restXmlInventoryDestination","IsEnabled","serializeAws_restXmlInventoryFilter","IncludedObjectVersions","OptionalFields","serializeAws_restXmlInventoryOptionalFields","containerNode_2","Schedule","serializeAws_restXmlInventorySchedule","serializeAws_restXmlInventoryS3BucketDestination","serializeAws_restXmlInventoryEncryption","SSES3","serializeAws_restXmlSSES3","SSEKMS","serializeAws_restXmlSSEKMS","AccountId","Encryption","Frequency","serializeAws_restXmlJSONOutput","serializeAws_restXmlLambdaFunctionConfiguration","LambdaFunctionArn","Events","serializeAws_restXmlNotificationConfigurationFilter","serializeAws_restXmlLambdaFunctionConfigurationList","serializeAws_restXmlLifecycleExpiration","ExpiredObjectDeleteMarker","serializeAws_restXmlLifecycleRule","serializeAws_restXmlLifecycleRuleFilter","Transitions","serializeAws_restXmlTransitionList","NoncurrentVersionTransitions","serializeAws_restXmlNoncurrentVersionTransitionList","NoncurrentVersionExpiration","serializeAws_restXmlNoncurrentVersionExpiration","AbortIncompleteMultipartUpload","serializeAws_restXmlLifecycleRuleAndOperator","TargetBucket","TargetGrants","serializeAws_restXmlTargetGrants","containerNode_3","TargetPrefix","serializeAws_restXmlMetadataEntry","EventThreshold","serializeAws_restXmlReplicationTimeValue","serializeAws_restXmlMetricsAndOperator","serializeAws_restXmlMetricsFilter","NoncurrentDays","serializeAws_restXmlNoncurrentVersionTransition","serializeAws_restXmlTopicConfigurationList","serializeAws_restXmlQueueConfigurationList","serializeAws_restXmlS3KeyFilter","serializeAws_restXmlObjectIdentifier","ObjectLockEnabled","serializeAws_restXmlObjectLockRule","RetainUntilDate","DefaultRetention","serializeAws_restXmlOutputLocation","S3","serializeAws_restXmlS3Location","serializeAws_restXmlOwnershipControlsRules","serializeAws_restXmlOwnershipControlsRule","ObjectOwnership","BlockPublicAcls","IgnorePublicAcls","BlockPublicPolicy","RestrictPublicBuckets","serializeAws_restXmlQueueConfiguration","QueueArn","serializeAws_restXmlRedirect","HostName","HttpRedirectCode","Protocol","ReplaceKeyPrefixWith","ReplaceKeyWith","serializeAws_restXmlRedirectAllRequestsTo","serializeAws_restXmlReplicaModifications","Role","serializeAws_restXmlReplicationRules","serializeAws_restXmlReplicationRule","Priority","serializeAws_restXmlReplicationRuleFilter","SourceSelectionCriteria","serializeAws_restXmlSourceSelectionCriteria","ExistingObjectReplication","DeleteMarkerReplication","serializeAws_restXmlReplicationRuleAndOperator","Time","Minutes","Enabled","GlacierJobParameters","Description","SelectParameters","serializeAws_restXmlSelectParameters","OutputLocation","serializeAws_restXmlRoutingRule","Condition","Redirect","serializeAws_restXmlRoutingRules","FilterRules","BucketName","CannedACL","containerNode_4","UserMetadata","serializeAws_restXmlUserMetadata","containerNode_5","Start","End","serializeAws_restXmlServerSideEncryptionByDefault","SSEAlgorithm","KMSMasterKeyID","serializeAws_restXmlServerSideEncryptionRules","serializeAws_restXmlServerSideEncryptionRule","ApplyServerSideEncryptionByDefault","SseKmsEncryptedObjects","serializeAws_restXmlSseKmsEncryptedObjects","ReplicaModifications","KeyId","DataExport","serializeAws_restXmlStorageClassAnalysisDataExport","OutputSchemaVersion","containerNode_6","serializeAws_restXmlTargetGrant","serializeAws_restXmlTiering","serializeAws_restXmlTopicConfiguration","TopicArn","serializeAws_restXmlTransition","containerNode_7","deserializeAws_restXmlAbortIncompleteMultipartUpload","deserializeAws_restXmlAccessControlTranslation","deserializeAws_restXmlAllowedHeaders","deserializeAws_restXmlAllowedMethods","deserializeAws_restXmlAllowedOrigins","deserializeAws_restXmlAnalyticsAndOperator","deserializeAws_restXmlAnalyticsFilter","deserializeAws_restXmlStorageClassAnalysis","deserializeAws_restXmlAnalyticsExportDestination","deserializeAws_restXmlAnalyticsS3BucketDestination","deserializeAws_restXmlTag","deserializeAws_restXmlBucket","CreationDate","deserializeAws_restXmlCommonPrefix","deserializeAws_restXmlCondition","deserializeAws_restXmlCORSRule","AllowedHeader","AllowedMethod","AllowedOrigin","ExposeHeader","deserializeAws_restXmlExposeHeaders","deserializeAws_restXmlDefaultRetention","deserializeAws_restXmlDeletedObject","DeleteMarkerVersionId","deserializeAws_restXmlDeleteMarkerEntry","IsLatest","deserializeAws_restXmlDeleteMarkerReplication","deserializeAws_restXmlDestination","deserializeAws_restXmlEncryptionConfiguration","deserializeAws_restXmlReplicationTime","deserializeAws_restXmlMetrics","deserializeAws_restXml_Error","deserializeAws_restXmlEventList","deserializeAws_restXmlExistingObjectReplication","deserializeAws_restXmlFilterRule","deserializeAws_restXmlFilterRuleList","deserializeAws_restXmlGrant","deserializeAws_restXmlGrantee","deserializeAws_restXmlIntelligentTieringAndOperator","deserializeAws_restXmlIntelligentTieringFilter","Tiering","deserializeAws_restXmlTieringList","deserializeAws_restXmlInventoryDestination","deserializeAws_restXmlInventoryFilter","deserializeAws_restXmlInventoryOptionalFields","deserializeAws_restXmlInventorySchedule","deserializeAws_restXmlInventoryS3BucketDestination","deserializeAws_restXmlInventoryEncryption","deserializeAws_restXmlSSES3","deserializeAws_restXmlSSEKMS","deserializeAws_restXmlLambdaFunctionConfiguration","Event","deserializeAws_restXmlNotificationConfigurationFilter","deserializeAws_restXmlLifecycleExpiration","deserializeAws_restXmlLifecycleRule","deserializeAws_restXmlLifecycleRuleFilter","Transition","deserializeAws_restXmlTransitionList","NoncurrentVersionTransition","deserializeAws_restXmlNoncurrentVersionTransitionList","deserializeAws_restXmlNoncurrentVersionExpiration","deserializeAws_restXmlLifecycleRuleAndOperator","deserializeAws_restXmlTargetGrants","deserializeAws_restXmlReplicationTimeValue","deserializeAws_restXmlMetricsAndOperator","deserializeAws_restXmlMetricsFilter","deserializeAws_restXmlMultipartUpload","Initiated","deserializeAws_restXmlNoncurrentVersionTransition","deserializeAws_restXmlS3KeyFilter","deserializeAws_restXml_Object","Size","deserializeAws_restXmlObjectLockRule","deserializeAws_restXmlObjectVersion","deserializeAws_restXmlOwnershipControlsRules","deserializeAws_restXmlOwnershipControlsRule","deserializeAws_restXmlPart","IsPublic","deserializeAws_restXmlQueueConfiguration","deserializeAws_restXmlRedirect","deserializeAws_restXmlReplicaModifications","deserializeAws_restXmlReplicationRules","deserializeAws_restXmlReplicationRule","deserializeAws_restXmlReplicationRuleFilter","deserializeAws_restXmlSourceSelectionCriteria","deserializeAws_restXmlReplicationRuleAndOperator","deserializeAws_restXmlRoutingRule","FilterRule","deserializeAws_restXmlServerSideEncryptionByDefault","deserializeAws_restXmlServerSideEncryptionRules","deserializeAws_restXmlServerSideEncryptionRule","deserializeAws_restXmlSseKmsEncryptedObjects","deserializeAws_restXmlStorageClassAnalysisDataExport","deserializeAws_restXmlTargetGrant","deserializeAws_restXmlTiering","deserializeAws_restXmlTopicConfiguration","deserializeAws_restXmlTransition","httpStatusCode","requestId","extendedRequestId","cfId","streamBody","Uint8Array","streamCollector","collectBodyString","then","utf8Encoder","getOwnPropertyNames","includes","size","decodeEscapedXML","str","encoded","parsedObj","attributeNamePrefix","ignoreAttributes","parseNodeValue","tagValueProcessor","val","tagName","textNodeName","key","parsedObjToReturn"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-s3\\protocols\\Aws_restXml.ts"],"sourcesContent":["import {\n  AbortMultipartUploadCommandInput,\n  AbortMultipartUploadCommandOutput,\n} from \"../commands/AbortMultipartUploadCommand\";\nimport {\n  CompleteMultipartUploadCommandInput,\n  CompleteMultipartUploadCommandOutput,\n} from \"../commands/CompleteMultipartUploadCommand\";\nimport { CopyObjectCommandInput, CopyObjectCommandOutput } from \"../commands/CopyObjectCommand\";\nimport { CreateBucketCommandInput, CreateBucketCommandOutput } from \"../commands/CreateBucketCommand\";\nimport {\n  CreateMultipartUploadCommandInput,\n  CreateMultipartUploadCommandOutput,\n} from \"../commands/CreateMultipartUploadCommand\";\nimport {\n  DeleteBucketAnalyticsConfigurationCommandInput,\n  DeleteBucketAnalyticsConfigurationCommandOutput,\n} from \"../commands/DeleteBucketAnalyticsConfigurationCommand\";\nimport { DeleteBucketCommandInput, DeleteBucketCommandOutput } from \"../commands/DeleteBucketCommand\";\nimport { DeleteBucketCorsCommandInput, DeleteBucketCorsCommandOutput } from \"../commands/DeleteBucketCorsCommand\";\nimport {\n  DeleteBucketEncryptionCommandInput,\n  DeleteBucketEncryptionCommandOutput,\n} from \"../commands/DeleteBucketEncryptionCommand\";\nimport {\n  DeleteBucketIntelligentTieringConfigurationCommandInput,\n  DeleteBucketIntelligentTieringConfigurationCommandOutput,\n} from \"../commands/DeleteBucketIntelligentTieringConfigurationCommand\";\nimport {\n  DeleteBucketInventoryConfigurationCommandInput,\n  DeleteBucketInventoryConfigurationCommandOutput,\n} from \"../commands/DeleteBucketInventoryConfigurationCommand\";\nimport {\n  DeleteBucketLifecycleCommandInput,\n  DeleteBucketLifecycleCommandOutput,\n} from \"../commands/DeleteBucketLifecycleCommand\";\nimport {\n  DeleteBucketMetricsConfigurationCommandInput,\n  DeleteBucketMetricsConfigurationCommandOutput,\n} from \"../commands/DeleteBucketMetricsConfigurationCommand\";\nimport {\n  DeleteBucketOwnershipControlsCommandInput,\n  DeleteBucketOwnershipControlsCommandOutput,\n} from \"../commands/DeleteBucketOwnershipControlsCommand\";\nimport { DeleteBucketPolicyCommandInput, DeleteBucketPolicyCommandOutput } from \"../commands/DeleteBucketPolicyCommand\";\nimport {\n  DeleteBucketReplicationCommandInput,\n  DeleteBucketReplicationCommandOutput,\n} from \"../commands/DeleteBucketReplicationCommand\";\nimport {\n  DeleteBucketTaggingCommandInput,\n  DeleteBucketTaggingCommandOutput,\n} from \"../commands/DeleteBucketTaggingCommand\";\nimport {\n  DeleteBucketWebsiteCommandInput,\n  DeleteBucketWebsiteCommandOutput,\n} from \"../commands/DeleteBucketWebsiteCommand\";\nimport { DeleteObjectCommandInput, DeleteObjectCommandOutput } from \"../commands/DeleteObjectCommand\";\nimport {\n  DeleteObjectTaggingCommandInput,\n  DeleteObjectTaggingCommandOutput,\n} from \"../commands/DeleteObjectTaggingCommand\";\nimport { DeleteObjectsCommandInput, DeleteObjectsCommandOutput } from \"../commands/DeleteObjectsCommand\";\nimport {\n  DeletePublicAccessBlockCommandInput,\n  DeletePublicAccessBlockCommandOutput,\n} from \"../commands/DeletePublicAccessBlockCommand\";\nimport {\n  GetBucketAccelerateConfigurationCommandInput,\n  GetBucketAccelerateConfigurationCommandOutput,\n} from \"../commands/GetBucketAccelerateConfigurationCommand\";\nimport { GetBucketAclCommandInput, GetBucketAclCommandOutput } from \"../commands/GetBucketAclCommand\";\nimport {\n  GetBucketAnalyticsConfigurationCommandInput,\n  GetBucketAnalyticsConfigurationCommandOutput,\n} from \"../commands/GetBucketAnalyticsConfigurationCommand\";\nimport { GetBucketCorsCommandInput, GetBucketCorsCommandOutput } from \"../commands/GetBucketCorsCommand\";\nimport {\n  GetBucketEncryptionCommandInput,\n  GetBucketEncryptionCommandOutput,\n} from \"../commands/GetBucketEncryptionCommand\";\nimport {\n  GetBucketIntelligentTieringConfigurationCommandInput,\n  GetBucketIntelligentTieringConfigurationCommandOutput,\n} from \"../commands/GetBucketIntelligentTieringConfigurationCommand\";\nimport {\n  GetBucketInventoryConfigurationCommandInput,\n  GetBucketInventoryConfigurationCommandOutput,\n} from \"../commands/GetBucketInventoryConfigurationCommand\";\nimport {\n  GetBucketLifecycleConfigurationCommandInput,\n  GetBucketLifecycleConfigurationCommandOutput,\n} from \"../commands/GetBucketLifecycleConfigurationCommand\";\nimport { GetBucketLocationCommandInput, GetBucketLocationCommandOutput } from \"../commands/GetBucketLocationCommand\";\nimport { GetBucketLoggingCommandInput, GetBucketLoggingCommandOutput } from \"../commands/GetBucketLoggingCommand\";\nimport {\n  GetBucketMetricsConfigurationCommandInput,\n  GetBucketMetricsConfigurationCommandOutput,\n} from \"../commands/GetBucketMetricsConfigurationCommand\";\nimport {\n  GetBucketNotificationConfigurationCommandInput,\n  GetBucketNotificationConfigurationCommandOutput,\n} from \"../commands/GetBucketNotificationConfigurationCommand\";\nimport {\n  GetBucketOwnershipControlsCommandInput,\n  GetBucketOwnershipControlsCommandOutput,\n} from \"../commands/GetBucketOwnershipControlsCommand\";\nimport { GetBucketPolicyCommandInput, GetBucketPolicyCommandOutput } from \"../commands/GetBucketPolicyCommand\";\nimport {\n  GetBucketPolicyStatusCommandInput,\n  GetBucketPolicyStatusCommandOutput,\n} from \"../commands/GetBucketPolicyStatusCommand\";\nimport {\n  GetBucketReplicationCommandInput,\n  GetBucketReplicationCommandOutput,\n} from \"../commands/GetBucketReplicationCommand\";\nimport {\n  GetBucketRequestPaymentCommandInput,\n  GetBucketRequestPaymentCommandOutput,\n} from \"../commands/GetBucketRequestPaymentCommand\";\nimport { GetBucketTaggingCommandInput, GetBucketTaggingCommandOutput } from \"../commands/GetBucketTaggingCommand\";\nimport {\n  GetBucketVersioningCommandInput,\n  GetBucketVersioningCommandOutput,\n} from \"../commands/GetBucketVersioningCommand\";\nimport { GetBucketWebsiteCommandInput, GetBucketWebsiteCommandOutput } from \"../commands/GetBucketWebsiteCommand\";\nimport { GetObjectAclCommandInput, GetObjectAclCommandOutput } from \"../commands/GetObjectAclCommand\";\nimport { GetObjectCommandInput, GetObjectCommandOutput } from \"../commands/GetObjectCommand\";\nimport { GetObjectLegalHoldCommandInput, GetObjectLegalHoldCommandOutput } from \"../commands/GetObjectLegalHoldCommand\";\nimport {\n  GetObjectLockConfigurationCommandInput,\n  GetObjectLockConfigurationCommandOutput,\n} from \"../commands/GetObjectLockConfigurationCommand\";\nimport { GetObjectRetentionCommandInput, GetObjectRetentionCommandOutput } from \"../commands/GetObjectRetentionCommand\";\nimport { GetObjectTaggingCommandInput, GetObjectTaggingCommandOutput } from \"../commands/GetObjectTaggingCommand\";\nimport { GetObjectTorrentCommandInput, GetObjectTorrentCommandOutput } from \"../commands/GetObjectTorrentCommand\";\nimport {\n  GetPublicAccessBlockCommandInput,\n  GetPublicAccessBlockCommandOutput,\n} from \"../commands/GetPublicAccessBlockCommand\";\nimport { HeadBucketCommandInput, HeadBucketCommandOutput } from \"../commands/HeadBucketCommand\";\nimport { HeadObjectCommandInput, HeadObjectCommandOutput } from \"../commands/HeadObjectCommand\";\nimport {\n  ListBucketAnalyticsConfigurationsCommandInput,\n  ListBucketAnalyticsConfigurationsCommandOutput,\n} from \"../commands/ListBucketAnalyticsConfigurationsCommand\";\nimport {\n  ListBucketIntelligentTieringConfigurationsCommandInput,\n  ListBucketIntelligentTieringConfigurationsCommandOutput,\n} from \"../commands/ListBucketIntelligentTieringConfigurationsCommand\";\nimport {\n  ListBucketInventoryConfigurationsCommandInput,\n  ListBucketInventoryConfigurationsCommandOutput,\n} from \"../commands/ListBucketInventoryConfigurationsCommand\";\nimport {\n  ListBucketMetricsConfigurationsCommandInput,\n  ListBucketMetricsConfigurationsCommandOutput,\n} from \"../commands/ListBucketMetricsConfigurationsCommand\";\nimport { ListBucketsCommandInput, ListBucketsCommandOutput } from \"../commands/ListBucketsCommand\";\nimport {\n  ListMultipartUploadsCommandInput,\n  ListMultipartUploadsCommandOutput,\n} from \"../commands/ListMultipartUploadsCommand\";\nimport { ListObjectVersionsCommandInput, ListObjectVersionsCommandOutput } from \"../commands/ListObjectVersionsCommand\";\nimport { ListObjectsCommandInput, ListObjectsCommandOutput } from \"../commands/ListObjectsCommand\";\nimport { ListObjectsV2CommandInput, ListObjectsV2CommandOutput } from \"../commands/ListObjectsV2Command\";\nimport { ListPartsCommandInput, ListPartsCommandOutput } from \"../commands/ListPartsCommand\";\nimport {\n  PutBucketAccelerateConfigurationCommandInput,\n  PutBucketAccelerateConfigurationCommandOutput,\n} from \"../commands/PutBucketAccelerateConfigurationCommand\";\nimport { PutBucketAclCommandInput, PutBucketAclCommandOutput } from \"../commands/PutBucketAclCommand\";\nimport {\n  PutBucketAnalyticsConfigurationCommandInput,\n  PutBucketAnalyticsConfigurationCommandOutput,\n} from \"../commands/PutBucketAnalyticsConfigurationCommand\";\nimport { PutBucketCorsCommandInput, PutBucketCorsCommandOutput } from \"../commands/PutBucketCorsCommand\";\nimport {\n  PutBucketEncryptionCommandInput,\n  PutBucketEncryptionCommandOutput,\n} from \"../commands/PutBucketEncryptionCommand\";\nimport {\n  PutBucketIntelligentTieringConfigurationCommandInput,\n  PutBucketIntelligentTieringConfigurationCommandOutput,\n} from \"../commands/PutBucketIntelligentTieringConfigurationCommand\";\nimport {\n  PutBucketInventoryConfigurationCommandInput,\n  PutBucketInventoryConfigurationCommandOutput,\n} from \"../commands/PutBucketInventoryConfigurationCommand\";\nimport {\n  PutBucketLifecycleConfigurationCommandInput,\n  PutBucketLifecycleConfigurationCommandOutput,\n} from \"../commands/PutBucketLifecycleConfigurationCommand\";\nimport { PutBucketLoggingCommandInput, PutBucketLoggingCommandOutput } from \"../commands/PutBucketLoggingCommand\";\nimport {\n  PutBucketMetricsConfigurationCommandInput,\n  PutBucketMetricsConfigurationCommandOutput,\n} from \"../commands/PutBucketMetricsConfigurationCommand\";\nimport {\n  PutBucketNotificationConfigurationCommandInput,\n  PutBucketNotificationConfigurationCommandOutput,\n} from \"../commands/PutBucketNotificationConfigurationCommand\";\nimport {\n  PutBucketOwnershipControlsCommandInput,\n  PutBucketOwnershipControlsCommandOutput,\n} from \"../commands/PutBucketOwnershipControlsCommand\";\nimport { PutBucketPolicyCommandInput, PutBucketPolicyCommandOutput } from \"../commands/PutBucketPolicyCommand\";\nimport {\n  PutBucketReplicationCommandInput,\n  PutBucketReplicationCommandOutput,\n} from \"../commands/PutBucketReplicationCommand\";\nimport {\n  PutBucketRequestPaymentCommandInput,\n  PutBucketRequestPaymentCommandOutput,\n} from \"../commands/PutBucketRequestPaymentCommand\";\nimport { PutBucketTaggingCommandInput, PutBucketTaggingCommandOutput } from \"../commands/PutBucketTaggingCommand\";\nimport {\n  PutBucketVersioningCommandInput,\n  PutBucketVersioningCommandOutput,\n} from \"../commands/PutBucketVersioningCommand\";\nimport { PutBucketWebsiteCommandInput, PutBucketWebsiteCommandOutput } from \"../commands/PutBucketWebsiteCommand\";\nimport { PutObjectAclCommandInput, PutObjectAclCommandOutput } from \"../commands/PutObjectAclCommand\";\nimport { PutObjectCommandInput, PutObjectCommandOutput } from \"../commands/PutObjectCommand\";\nimport { PutObjectLegalHoldCommandInput, PutObjectLegalHoldCommandOutput } from \"../commands/PutObjectLegalHoldCommand\";\nimport {\n  PutObjectLockConfigurationCommandInput,\n  PutObjectLockConfigurationCommandOutput,\n} from \"../commands/PutObjectLockConfigurationCommand\";\nimport { PutObjectRetentionCommandInput, PutObjectRetentionCommandOutput } from \"../commands/PutObjectRetentionCommand\";\nimport { PutObjectTaggingCommandInput, PutObjectTaggingCommandOutput } from \"../commands/PutObjectTaggingCommand\";\nimport {\n  PutPublicAccessBlockCommandInput,\n  PutPublicAccessBlockCommandOutput,\n} from \"../commands/PutPublicAccessBlockCommand\";\nimport { RestoreObjectCommandInput, RestoreObjectCommandOutput } from \"../commands/RestoreObjectCommand\";\nimport {\n  SelectObjectContentCommandInput,\n  SelectObjectContentCommandOutput,\n} from \"../commands/SelectObjectContentCommand\";\nimport { UploadPartCommandInput, UploadPartCommandOutput } from \"../commands/UploadPartCommand\";\nimport { UploadPartCopyCommandInput, UploadPartCopyCommandOutput } from \"../commands/UploadPartCopyCommand\";\nimport {\n  AbortIncompleteMultipartUpload,\n  AccelerateConfiguration,\n  AccessControlPolicy,\n  AccessControlTranslation,\n  AnalyticsAndOperator,\n  AnalyticsConfiguration,\n  AnalyticsExportDestination,\n  AnalyticsFilter,\n  AnalyticsS3BucketDestination,\n  Bucket,\n  BucketAlreadyExists,\n  BucketAlreadyOwnedByYou,\n  BucketLifecycleConfiguration,\n  BucketLoggingStatus,\n  CORSConfiguration,\n  CORSRule,\n  CommonPrefix,\n  CompletedMultipartUpload,\n  CompletedPart,\n  Condition,\n  CopyObjectResult,\n  CreateBucketConfiguration,\n  DefaultRetention,\n  Delete,\n  DeleteMarkerEntry,\n  DeleteMarkerReplication,\n  DeletedObject,\n  Destination,\n  Encryption,\n  EncryptionConfiguration,\n  ErrorDocument,\n  Event,\n  ExistingObjectReplication,\n  FilterRule,\n  GlacierJobParameters,\n  Grant,\n  Grantee,\n  IndexDocument,\n  Initiator,\n  IntelligentTieringAndOperator,\n  IntelligentTieringConfiguration,\n  IntelligentTieringFilter,\n  InvalidObjectState,\n  InventoryConfiguration,\n  InventoryDestination,\n  InventoryEncryption,\n  InventoryFilter,\n  InventoryOptionalField,\n  InventoryS3BucketDestination,\n  InventorySchedule,\n  LambdaFunctionConfiguration,\n  LifecycleExpiration,\n  LifecycleRule,\n  LifecycleRuleAndOperator,\n  LifecycleRuleFilter,\n  LoggingEnabled,\n  Metrics,\n  MetricsAndOperator,\n  MetricsConfiguration,\n  MetricsFilter,\n  MultipartUpload,\n  NoSuchBucket,\n  NoSuchKey,\n  NoSuchUpload,\n  NoncurrentVersionExpiration,\n  NoncurrentVersionTransition,\n  NotificationConfiguration,\n  NotificationConfigurationFilter,\n  ObjectAlreadyInActiveTierError,\n  ObjectIdentifier,\n  ObjectLockConfiguration,\n  ObjectLockLegalHold,\n  ObjectLockRetention,\n  ObjectLockRule,\n  ObjectNotInActiveTierError,\n  ObjectVersion,\n  Owner,\n  OwnershipControls,\n  OwnershipControlsRule,\n  Part,\n  PolicyStatus,\n  PublicAccessBlockConfiguration,\n  QueueConfiguration,\n  Redirect,\n  RedirectAllRequestsTo,\n  ReplicaModifications,\n  ReplicationConfiguration,\n  ReplicationRule,\n  ReplicationRuleAndOperator,\n  ReplicationRuleFilter,\n  ReplicationTime,\n  ReplicationTimeValue,\n  RequestPaymentConfiguration,\n  RoutingRule,\n  S3KeyFilter,\n  SSEKMS,\n  SSES3,\n  ServerSideEncryptionByDefault,\n  ServerSideEncryptionConfiguration,\n  ServerSideEncryptionRule,\n  SourceSelectionCriteria,\n  SseKmsEncryptedObjects,\n  StorageClassAnalysis,\n  StorageClassAnalysisDataExport,\n  Tag,\n  Tagging,\n  TargetGrant,\n  Tiering,\n  TopicConfiguration,\n  Transition,\n  VersioningConfiguration,\n  WebsiteConfiguration,\n  _Error,\n  _Object,\n} from \"../models/models_0\";\nimport {\n  CSVInput,\n  CSVOutput,\n  ContinuationEvent,\n  CopyPartResult,\n  EndEvent,\n  InputSerialization,\n  JSONInput,\n  JSONOutput,\n  MetadataEntry,\n  OutputLocation,\n  OutputSerialization,\n  ParquetInput,\n  ProgressEvent,\n  RecordsEvent,\n  RequestProgress,\n  RestoreRequest,\n  S3Location,\n  ScanRange,\n  SelectObjectContentEventStream,\n  SelectParameters,\n  StatsEvent,\n} from \"../models/models_1\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport {\n  SmithyException as __SmithyException,\n  dateToUtcString as __dateToUtcString,\n  extendedEncodeURIComponent as __extendedEncodeURIComponent,\n  getArrayIfSingleItem as __getArrayIfSingleItem,\n  getValueFromTextNode as __getValueFromTextNode,\n} from \"@aws-sdk/smithy-client\";\nimport {\n  Endpoint as __Endpoint,\n  EventStreamSerdeContext as __EventStreamSerdeContext,\n  MetadataBearer as __MetadataBearer,\n  ResponseMetadata as __ResponseMetadata,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\nimport { XmlNode as __XmlNode, XmlText as __XmlText } from \"@aws-sdk/xml-builder\";\nimport { parse as xmlParse } from \"fast-xml-parser\";\n\nexport const serializeAws_restXmlAbortMultipartUploadCommand = async (\n  input: AbortMultipartUploadCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"AbortMultipartUpload\",\n    ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlCompleteMultipartUploadCommand = async (\n  input: CompleteMultipartUploadCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.MultipartUpload !== undefined) {\n    contents = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlCopyObjectCommand = async (\n  input: CopyObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.CacheControl) && { \"cache-control\": input.CacheControl! }),\n    ...(isSerializableHeaderValue(input.ContentDisposition) && { \"content-disposition\": input.ContentDisposition! }),\n    ...(isSerializableHeaderValue(input.ContentEncoding) && { \"content-encoding\": input.ContentEncoding! }),\n    ...(isSerializableHeaderValue(input.ContentLanguage) && { \"content-language\": input.ContentLanguage! }),\n    ...(isSerializableHeaderValue(input.ContentType) && { \"content-type\": input.ContentType! }),\n    ...(isSerializableHeaderValue(input.CopySource) && { \"x-amz-copy-source\": input.CopySource! }),\n    ...(isSerializableHeaderValue(input.CopySourceIfMatch) && {\n      \"x-amz-copy-source-if-match\": input.CopySourceIfMatch!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {\n      \"x-amz-copy-source-if-modified-since\": __dateToUtcString(input.CopySourceIfModifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {\n      \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {\n      \"x-amz-copy-source-if-unmodified-since\": __dateToUtcString(input.CopySourceIfUnmodifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.Expires) && { expires: __dateToUtcString(input.Expires!).toString() }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.MetadataDirective) && { \"x-amz-metadata-directive\": input.MetadataDirective! }),\n    ...(isSerializableHeaderValue(input.TaggingDirective) && { \"x-amz-tagging-directive\": input.TaggingDirective! }),\n    ...(isSerializableHeaderValue(input.ServerSideEncryption) && {\n      \"x-amz-server-side-encryption\": input.ServerSideEncryption!,\n    }),\n    ...(isSerializableHeaderValue(input.StorageClass) && { \"x-amz-storage-class\": input.StorageClass! }),\n    ...(isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n      \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSKeyId) && {\n      \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n      \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext!,\n    }),\n    ...(isSerializableHeaderValue(input.BucketKeyEnabled) && {\n      \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {\n      \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {\n      \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {\n      \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.Tagging) && { \"x-amz-tagging\": input.Tagging! }),\n    ...(isSerializableHeaderValue(input.ObjectLockMode) && { \"x-amz-object-lock-mode\": input.ObjectLockMode! }),\n    ...(isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n      \"x-amz-object-lock-retain-until-date\": (\n        input.ObjectLockRetainUntilDate!.toISOString().split(\".\")[0] + \"Z\"\n      ).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n      \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {\n      \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner!,\n    }),\n    ...(input.Metadata !== undefined &&\n      Object.keys(input.Metadata).reduce(\n        (acc: any, suffix: string) => ({\n          ...acc,\n          [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata![suffix],\n        }),\n        {}\n      )),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"CopyObject\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlCreateBucketCommand = async (\n  input: CreateBucketCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWrite) && { \"x-amz-grant-write\": input.GrantWrite! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.ObjectLockEnabledForBucket) && {\n      \"x-amz-bucket-object-lock-enabled\": input.ObjectLockEnabledForBucket!.toString(),\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  let body: any;\n  let contents: any;\n  if (input.CreateBucketConfiguration !== undefined) {\n    contents = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlCreateMultipartUploadCommand = async (\n  input: CreateMultipartUploadCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.CacheControl) && { \"cache-control\": input.CacheControl! }),\n    ...(isSerializableHeaderValue(input.ContentDisposition) && { \"content-disposition\": input.ContentDisposition! }),\n    ...(isSerializableHeaderValue(input.ContentEncoding) && { \"content-encoding\": input.ContentEncoding! }),\n    ...(isSerializableHeaderValue(input.ContentLanguage) && { \"content-language\": input.ContentLanguage! }),\n    ...(isSerializableHeaderValue(input.ContentType) && { \"content-type\": input.ContentType! }),\n    ...(isSerializableHeaderValue(input.Expires) && { expires: __dateToUtcString(input.Expires!).toString() }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.ServerSideEncryption) && {\n      \"x-amz-server-side-encryption\": input.ServerSideEncryption!,\n    }),\n    ...(isSerializableHeaderValue(input.StorageClass) && { \"x-amz-storage-class\": input.StorageClass! }),\n    ...(isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n      \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSKeyId) && {\n      \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n      \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext!,\n    }),\n    ...(isSerializableHeaderValue(input.BucketKeyEnabled) && {\n      \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.Tagging) && { \"x-amz-tagging\": input.Tagging! }),\n    ...(isSerializableHeaderValue(input.ObjectLockMode) && { \"x-amz-object-lock-mode\": input.ObjectLockMode! }),\n    ...(isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n      \"x-amz-object-lock-retain-until-date\": (\n        input.ObjectLockRetainUntilDate!.toISOString().split(\".\")[0] + \"Z\"\n      ).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n      \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n    ...(input.Metadata !== undefined &&\n      Object.keys(input.Metadata).reduce(\n        (acc: any, suffix: string) => ({\n          ...acc,\n          [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata![suffix],\n        }),\n        {}\n      )),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    uploads: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketCommand = async (\n  input: DeleteBucketCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (\n  input: DeleteBucketAnalyticsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    analytics: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketCorsCommand = async (\n  input: DeleteBucketCorsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    cors: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketEncryptionCommand = async (\n  input: DeleteBucketEncryptionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    encryption: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (\n  input: DeleteBucketIntelligentTieringConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"intelligent-tiering\": \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (\n  input: DeleteBucketInventoryConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    inventory: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketLifecycleCommand = async (\n  input: DeleteBucketLifecycleCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    lifecycle: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (\n  input: DeleteBucketMetricsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    metrics: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (\n  input: DeleteBucketOwnershipControlsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    ownershipControls: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketPolicyCommand = async (\n  input: DeleteBucketPolicyCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    policy: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketReplicationCommand = async (\n  input: DeleteBucketReplicationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    replication: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketTaggingCommand = async (\n  input: DeleteBucketTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    tagging: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteBucketWebsiteCommand = async (\n  input: DeleteBucketWebsiteCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    website: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteObjectCommand = async (\n  input: DeleteObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.MFA) && { \"x-amz-mfa\": input.MFA! }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n      \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"DeleteObject\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteObjectsCommand = async (\n  input: DeleteObjectsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.MFA) && { \"x-amz-mfa\": input.MFA! }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n      \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    delete: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.Delete !== undefined) {\n    contents = serializeAws_restXmlDelete(input.Delete, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeleteObjectTaggingCommand = async (\n  input: DeleteObjectTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    tagging: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlDeletePublicAccessBlockCommand = async (\n  input: DeletePublicAccessBlockCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    publicAccessBlock: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (\n  input: GetBucketAccelerateConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    accelerate: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketAclCommand = async (\n  input: GetBucketAclCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    acl: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (\n  input: GetBucketAnalyticsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    analytics: \"\",\n    \"x-id\": \"GetBucketAnalyticsConfiguration\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketCorsCommand = async (\n  input: GetBucketCorsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    cors: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketEncryptionCommand = async (\n  input: GetBucketEncryptionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    encryption: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (\n  input: GetBucketIntelligentTieringConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"intelligent-tiering\": \"\",\n    \"x-id\": \"GetBucketIntelligentTieringConfiguration\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketInventoryConfigurationCommand = async (\n  input: GetBucketInventoryConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    inventory: \"\",\n    \"x-id\": \"GetBucketInventoryConfiguration\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (\n  input: GetBucketLifecycleConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    lifecycle: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketLocationCommand = async (\n  input: GetBucketLocationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    location: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketLoggingCommand = async (\n  input: GetBucketLoggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    logging: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketMetricsConfigurationCommand = async (\n  input: GetBucketMetricsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    metrics: \"\",\n    \"x-id\": \"GetBucketMetricsConfiguration\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketNotificationConfigurationCommand = async (\n  input: GetBucketNotificationConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    notification: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketOwnershipControlsCommand = async (\n  input: GetBucketOwnershipControlsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    ownershipControls: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketPolicyCommand = async (\n  input: GetBucketPolicyCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    policy: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketPolicyStatusCommand = async (\n  input: GetBucketPolicyStatusCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    policyStatus: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketReplicationCommand = async (\n  input: GetBucketReplicationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    replication: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketRequestPaymentCommand = async (\n  input: GetBucketRequestPaymentCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    requestPayment: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketTaggingCommand = async (\n  input: GetBucketTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    tagging: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketVersioningCommand = async (\n  input: GetBucketVersioningCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    versioning: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetBucketWebsiteCommand = async (\n  input: GetBucketWebsiteCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    website: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectCommand = async (\n  input: GetObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch! }),\n    ...(isSerializableHeaderValue(input.IfModifiedSince) && {\n      \"if-modified-since\": __dateToUtcString(input.IfModifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.IfNoneMatch) && { \"if-none-match\": input.IfNoneMatch! }),\n    ...(isSerializableHeaderValue(input.IfUnmodifiedSince) && {\n      \"if-unmodified-since\": __dateToUtcString(input.IfUnmodifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.Range) && { range: input.Range! }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"GetObject\",\n    ...(input.ResponseCacheControl !== undefined && { \"response-cache-control\": input.ResponseCacheControl }),\n    ...(input.ResponseContentDisposition !== undefined && {\n      \"response-content-disposition\": input.ResponseContentDisposition,\n    }),\n    ...(input.ResponseContentEncoding !== undefined && { \"response-content-encoding\": input.ResponseContentEncoding }),\n    ...(input.ResponseContentLanguage !== undefined && { \"response-content-language\": input.ResponseContentLanguage }),\n    ...(input.ResponseContentType !== undefined && { \"response-content-type\": input.ResponseContentType }),\n    ...(input.ResponseExpires !== undefined && {\n      \"response-expires\": (input.ResponseExpires.toISOString().split(\".\")[0] + \"Z\").toString(),\n    }),\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    ...(input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectAclCommand = async (\n  input: GetObjectAclCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    acl: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectLegalHoldCommand = async (\n  input: GetObjectLegalHoldCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"legal-hold\": \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectLockConfigurationCommand = async (\n  input: GetObjectLockConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"object-lock\": \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectRetentionCommand = async (\n  input: GetObjectRetentionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    retention: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectTaggingCommand = async (\n  input: GetObjectTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    tagging: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetObjectTorrentCommand = async (\n  input: GetObjectTorrentCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    torrent: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlGetPublicAccessBlockCommand = async (\n  input: GetPublicAccessBlockCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    publicAccessBlock: \"\",\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlHeadBucketCommand = async (\n  input: HeadBucketCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"HEAD\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlHeadObjectCommand = async (\n  input: HeadObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch! }),\n    ...(isSerializableHeaderValue(input.IfModifiedSince) && {\n      \"if-modified-since\": __dateToUtcString(input.IfModifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.IfNoneMatch) && { \"if-none-match\": input.IfNoneMatch! }),\n    ...(isSerializableHeaderValue(input.IfUnmodifiedSince) && {\n      \"if-unmodified-since\": __dateToUtcString(input.IfUnmodifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.Range) && { range: input.Range! }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    ...(input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"HEAD\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (\n  input: ListBucketAnalyticsConfigurationsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    analytics: \"\",\n    \"x-id\": \"ListBucketAnalyticsConfigurations\",\n    ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (\n  input: ListBucketIntelligentTieringConfigurationsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"intelligent-tiering\": \"\",\n    \"x-id\": \"ListBucketIntelligentTieringConfigurations\",\n    ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListBucketInventoryConfigurationsCommand = async (\n  input: ListBucketInventoryConfigurationsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    inventory: \"\",\n    \"x-id\": \"ListBucketInventoryConfigurations\",\n    ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListBucketMetricsConfigurationsCommand = async (\n  input: ListBucketMetricsConfigurationsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    metrics: \"\",\n    \"x-id\": \"ListBucketMetricsConfigurations\",\n    ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListBucketsCommand = async (\n  input: ListBucketsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/\";\n  let body: any;\n  body = \"\";\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListMultipartUploadsCommand = async (\n  input: ListMultipartUploadsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    uploads: \"\",\n    ...(input.Delimiter !== undefined && { delimiter: input.Delimiter }),\n    ...(input.EncodingType !== undefined && { \"encoding-type\": input.EncodingType }),\n    ...(input.KeyMarker !== undefined && { \"key-marker\": input.KeyMarker }),\n    ...(input.MaxUploads !== undefined && { \"max-uploads\": input.MaxUploads.toString() }),\n    ...(input.Prefix !== undefined && { prefix: input.Prefix }),\n    ...(input.UploadIdMarker !== undefined && { \"upload-id-marker\": input.UploadIdMarker }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListObjectsCommand = async (\n  input: ListObjectsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    ...(input.Delimiter !== undefined && { delimiter: input.Delimiter }),\n    ...(input.EncodingType !== undefined && { \"encoding-type\": input.EncodingType }),\n    ...(input.Marker !== undefined && { marker: input.Marker }),\n    ...(input.MaxKeys !== undefined && { \"max-keys\": input.MaxKeys.toString() }),\n    ...(input.Prefix !== undefined && { prefix: input.Prefix }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListObjectsV2Command = async (\n  input: ListObjectsV2CommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"list-type\": \"2\",\n    ...(input.Delimiter !== undefined && { delimiter: input.Delimiter }),\n    ...(input.EncodingType !== undefined && { \"encoding-type\": input.EncodingType }),\n    ...(input.MaxKeys !== undefined && { \"max-keys\": input.MaxKeys.toString() }),\n    ...(input.Prefix !== undefined && { prefix: input.Prefix }),\n    ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n    ...(input.FetchOwner !== undefined && { \"fetch-owner\": input.FetchOwner.toString() }),\n    ...(input.StartAfter !== undefined && { \"start-after\": input.StartAfter }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListObjectVersionsCommand = async (\n  input: ListObjectVersionsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    versions: \"\",\n    ...(input.Delimiter !== undefined && { delimiter: input.Delimiter }),\n    ...(input.EncodingType !== undefined && { \"encoding-type\": input.EncodingType }),\n    ...(input.KeyMarker !== undefined && { \"key-marker\": input.KeyMarker }),\n    ...(input.MaxKeys !== undefined && { \"max-keys\": input.MaxKeys.toString() }),\n    ...(input.Prefix !== undefined && { prefix: input.Prefix }),\n    ...(input.VersionIdMarker !== undefined && { \"version-id-marker\": input.VersionIdMarker }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlListPartsCommand = async (\n  input: ListPartsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"ListParts\",\n    ...(input.MaxParts !== undefined && { \"max-parts\": input.MaxParts.toString() }),\n    ...(input.PartNumberMarker !== undefined && { \"part-number-marker\": input.PartNumberMarker }),\n    ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (\n  input: PutBucketAccelerateConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    accelerate: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.AccelerateConfiguration !== undefined) {\n    contents = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketAclCommand = async (\n  input: PutBucketAclCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWrite) && { \"x-amz-grant-write\": input.GrantWrite! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    acl: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.AccessControlPolicy !== undefined) {\n    contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (\n  input: PutBucketAnalyticsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    analytics: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.AnalyticsConfiguration !== undefined) {\n    contents = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketCorsCommand = async (\n  input: PutBucketCorsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    cors: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.CORSConfiguration !== undefined) {\n    contents = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketEncryptionCommand = async (\n  input: PutBucketEncryptionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    encryption: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.ServerSideEncryptionConfiguration !== undefined) {\n    contents = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (\n  input: PutBucketIntelligentTieringConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"intelligent-tiering\": \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.IntelligentTieringConfiguration !== undefined) {\n    contents = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketInventoryConfigurationCommand = async (\n  input: PutBucketInventoryConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    inventory: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.InventoryConfiguration !== undefined) {\n    contents = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (\n  input: PutBucketLifecycleConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    lifecycle: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.LifecycleConfiguration !== undefined) {\n    contents = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketLoggingCommand = async (\n  input: PutBucketLoggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    logging: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.BucketLoggingStatus !== undefined) {\n    contents = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketMetricsConfigurationCommand = async (\n  input: PutBucketMetricsConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    metrics: \"\",\n    ...(input.Id !== undefined && { id: input.Id }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.MetricsConfiguration !== undefined) {\n    contents = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketNotificationConfigurationCommand = async (\n  input: PutBucketNotificationConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    notification: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.NotificationConfiguration !== undefined) {\n    contents = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketOwnershipControlsCommand = async (\n  input: PutBucketOwnershipControlsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    ownershipControls: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.OwnershipControls !== undefined) {\n    contents = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketPolicyCommand = async (\n  input: PutBucketPolicyCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"text/plain\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess) && {\n      \"x-amz-confirm-remove-self-bucket-access\": input.ConfirmRemoveSelfBucketAccess!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    policy: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.Policy !== undefined) {\n    contents = input.Policy;\n    body = contents;\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketReplicationCommand = async (\n  input: PutBucketReplicationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.Token) && { \"x-amz-bucket-object-lock-token\": input.Token! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    replication: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.ReplicationConfiguration !== undefined) {\n    contents = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketRequestPaymentCommand = async (\n  input: PutBucketRequestPaymentCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    requestPayment: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.RequestPaymentConfiguration !== undefined) {\n    contents = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketTaggingCommand = async (\n  input: PutBucketTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    tagging: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.Tagging !== undefined) {\n    contents = serializeAws_restXmlTagging(input.Tagging, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketVersioningCommand = async (\n  input: PutBucketVersioningCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.MFA) && { \"x-amz-mfa\": input.MFA! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    versioning: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.VersioningConfiguration !== undefined) {\n    contents = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutBucketWebsiteCommand = async (\n  input: PutBucketWebsiteCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    website: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.WebsiteConfiguration !== undefined) {\n    contents = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectCommand = async (\n  input: PutObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/octet-stream\",\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.CacheControl) && { \"cache-control\": input.CacheControl! }),\n    ...(isSerializableHeaderValue(input.ContentDisposition) && { \"content-disposition\": input.ContentDisposition! }),\n    ...(isSerializableHeaderValue(input.ContentEncoding) && { \"content-encoding\": input.ContentEncoding! }),\n    ...(isSerializableHeaderValue(input.ContentLanguage) && { \"content-language\": input.ContentLanguage! }),\n    ...(isSerializableHeaderValue(input.ContentLength) && { \"content-length\": input.ContentLength!.toString() }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ContentType) && { \"content-type\": input.ContentType! }),\n    ...(isSerializableHeaderValue(input.Expires) && { expires: __dateToUtcString(input.Expires!).toString() }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.ServerSideEncryption) && {\n      \"x-amz-server-side-encryption\": input.ServerSideEncryption!,\n    }),\n    ...(isSerializableHeaderValue(input.StorageClass) && { \"x-amz-storage-class\": input.StorageClass! }),\n    ...(isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n      \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSKeyId) && {\n      \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId!,\n    }),\n    ...(isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n      \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext!,\n    }),\n    ...(isSerializableHeaderValue(input.BucketKeyEnabled) && {\n      \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.Tagging) && { \"x-amz-tagging\": input.Tagging! }),\n    ...(isSerializableHeaderValue(input.ObjectLockMode) && { \"x-amz-object-lock-mode\": input.ObjectLockMode! }),\n    ...(isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n      \"x-amz-object-lock-retain-until-date\": (\n        input.ObjectLockRetainUntilDate!.toISOString().split(\".\")[0] + \"Z\"\n      ).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n      \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n    ...(input.Metadata !== undefined &&\n      Object.keys(input.Metadata).reduce(\n        (acc: any, suffix: string) => ({\n          ...acc,\n          [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata![suffix],\n        }),\n        {}\n      )),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"PutObject\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.Body !== undefined) {\n    contents = input.Body;\n    body = contents;\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectAclCommand = async (\n  input: PutObjectAclCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL! }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl! }),\n    ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead! }),\n    ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP! }),\n    ...(isSerializableHeaderValue(input.GrantWrite) && { \"x-amz-grant-write\": input.GrantWrite! }),\n    ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP! }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    acl: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.AccessControlPolicy !== undefined) {\n    contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectLegalHoldCommand = async (\n  input: PutObjectLegalHoldCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"legal-hold\": \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.LegalHold !== undefined) {\n    contents = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectLockConfigurationCommand = async (\n  input: PutObjectLockConfigurationCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.Token) && { \"x-amz-bucket-object-lock-token\": input.Token! }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    \"object-lock\": \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.ObjectLockConfiguration !== undefined) {\n    contents = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectRetentionCommand = async (\n  input: PutObjectRetentionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n      \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention!.toString(),\n    }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    retention: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.Retention !== undefined) {\n    contents = serializeAws_restXmlObjectLockRetention(input.Retention, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutObjectTaggingCommand = async (\n  input: PutObjectTaggingCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    tagging: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.Tagging !== undefined) {\n    contents = serializeAws_restXmlTagging(input.Tagging, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlPutPublicAccessBlockCommand = async (\n  input: PutPublicAccessBlockCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  const query: any = {\n    publicAccessBlock: \"\",\n  };\n  let body: any;\n  let contents: any;\n  if (input.PublicAccessBlockConfiguration !== undefined) {\n    contents = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlRestoreObjectCommand = async (\n  input: RestoreObjectCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    restore: \"\",\n    ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.RestoreRequest !== undefined) {\n    contents = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    body += contents.toString();\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlSelectObjectContentCommand = async (\n  input: SelectObjectContentCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/xml\",\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    select: \"\",\n    \"select-type\": \"2\",\n  };\n  let body: any;\n  body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n  const bodyNode = new __XmlNode(\"SelectObjectContentRequest\");\n  bodyNode.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n  if (input.Expression !== undefined) {\n    const node = new __XmlNode(\"Expression\").addChildNode(new __XmlText(input.Expression)).withName(\"Expression\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpressionType !== undefined) {\n    const node = new __XmlNode(\"ExpressionType\")\n      .addChildNode(new __XmlText(input.ExpressionType))\n      .withName(\"ExpressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.InputSerialization !== undefined) {\n    const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\n      \"InputSerialization\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputSerialization !== undefined) {\n    const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\n      \"OutputSerialization\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.RequestProgress !== undefined) {\n    const node = serializeAws_restXmlRequestProgress(input.RequestProgress, context).withName(\"RequestProgress\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ScanRange !== undefined) {\n    const node = serializeAws_restXmlScanRange(input.ScanRange, context).withName(\"ScanRange\");\n    bodyNode.addChildNode(node);\n  }\n  body += bodyNode.toString();\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlUploadPartCommand = async (\n  input: UploadPartCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/octet-stream\",\n    ...(isSerializableHeaderValue(input.ContentLength) && { \"content-length\": input.ContentLength!.toString() }),\n    ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5! }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"UploadPart\",\n    ...(input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }),\n    ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n  };\n  let body: any;\n  let contents: any;\n  if (input.Body !== undefined) {\n    contents = input.Body;\n    body = contents;\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restXmlUploadPartCopyCommand = async (\n  input: UploadPartCopyCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    ...(isSerializableHeaderValue(input.CopySource) && { \"x-amz-copy-source\": input.CopySource! }),\n    ...(isSerializableHeaderValue(input.CopySourceIfMatch) && {\n      \"x-amz-copy-source-if-match\": input.CopySourceIfMatch!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {\n      \"x-amz-copy-source-if-modified-since\": __dateToUtcString(input.CopySourceIfModifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {\n      \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {\n      \"x-amz-copy-source-if-unmodified-since\": __dateToUtcString(input.CopySourceIfUnmodifiedSince!).toString(),\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceRange) && { \"x-amz-copy-source-range\": input.CopySourceRange! }),\n    ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n      \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n      \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n      \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {\n      \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {\n      \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey!,\n    }),\n    ...(isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {\n      \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5!,\n    }),\n    ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer! }),\n    ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n      \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner!,\n    }),\n    ...(isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {\n      \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner!,\n    }),\n  };\n  let resolvedPath = \"/{Bucket}/{Key+}\";\n  if (input.Bucket !== undefined) {\n    const labelValue: string = input.Bucket;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Bucket}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Bucket.\");\n  }\n  if (input.Key !== undefined) {\n    const labelValue: string = input.Key;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Key.\");\n    }\n    resolvedPath = resolvedPath.replace(\n      \"{Key+}\",\n      labelValue\n        .split(\"/\")\n        .map((segment) => __extendedEncodeURIComponent(segment))\n        .join(\"/\")\n    );\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Key.\");\n  }\n  const query: any = {\n    \"x-id\": \"UploadPartCopy\",\n    ...(input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }),\n    ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const deserializeAws_restXmlAbortMultipartUploadCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<AbortMultipartUploadCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlAbortMultipartUploadCommandError(output, context);\n  }\n  const contents: AbortMultipartUploadCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlAbortMultipartUploadCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<AbortMultipartUploadCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchUpload\":\n    case \"com.amazonaws.s3#NoSuchUpload\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchUploadResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlCompleteMultipartUploadCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CompleteMultipartUploadCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlCompleteMultipartUploadCommandError(output, context);\n  }\n  const contents: CompleteMultipartUploadCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Bucket: undefined,\n    BucketKeyEnabled: undefined,\n    ETag: undefined,\n    Expiration: undefined,\n    Key: undefined,\n    Location: undefined,\n    RequestCharged: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-expiration\"] !== undefined) {\n    contents.Expiration = output.headers[\"x-amz-expiration\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = data[\"Bucket\"];\n  }\n  if (data[\"ETag\"] !== undefined) {\n    contents.ETag = data[\"ETag\"];\n  }\n  if (data[\"Key\"] !== undefined) {\n    contents.Key = data[\"Key\"];\n  }\n  if (data[\"Location\"] !== undefined) {\n    contents.Location = data[\"Location\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlCompleteMultipartUploadCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CompleteMultipartUploadCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlCopyObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CopyObjectCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlCopyObjectCommandError(output, context);\n  }\n  const contents: CopyObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    BucketKeyEnabled: undefined,\n    CopyObjectResult: undefined,\n    CopySourceVersionId: undefined,\n    Expiration: undefined,\n    RequestCharged: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSEncryptionContext: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-expiration\"] !== undefined) {\n    contents.Expiration = output.headers[\"x-amz-expiration\"];\n  }\n  if (output.headers[\"x-amz-copy-source-version-id\"] !== undefined) {\n    contents.CopySourceVersionId = output.headers[\"x-amz-copy-source-version-id\"];\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n    contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  contents.CopyObjectResult = deserializeAws_restXmlCopyObjectResult(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlCopyObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CopyObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ObjectNotInActiveTierError\":\n    case \"com.amazonaws.s3#ObjectNotInActiveTierError\":\n      response = {\n        ...(await deserializeAws_restXmlObjectNotInActiveTierErrorResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlCreateBucketCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CreateBucketCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlCreateBucketCommandError(output, context);\n  }\n  const contents: CreateBucketCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Location: undefined,\n  };\n  if (output.headers[\"location\"] !== undefined) {\n    contents.Location = output.headers[\"location\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlCreateBucketCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CreateBucketCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BucketAlreadyExists\":\n    case \"com.amazonaws.s3#BucketAlreadyExists\":\n      response = {\n        ...(await deserializeAws_restXmlBucketAlreadyExistsResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"BucketAlreadyOwnedByYou\":\n    case \"com.amazonaws.s3#BucketAlreadyOwnedByYou\":\n      response = {\n        ...(await deserializeAws_restXmlBucketAlreadyOwnedByYouResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlCreateMultipartUploadCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CreateMultipartUploadCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlCreateMultipartUploadCommandError(output, context);\n  }\n  const contents: CreateMultipartUploadCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AbortDate: undefined,\n    AbortRuleId: undefined,\n    Bucket: undefined,\n    BucketKeyEnabled: undefined,\n    Key: undefined,\n    RequestCharged: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSEncryptionContext: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    UploadId: undefined,\n  };\n  if (output.headers[\"x-amz-abort-date\"] !== undefined) {\n    contents.AbortDate = new Date(output.headers[\"x-amz-abort-date\"]);\n  }\n  if (output.headers[\"x-amz-abort-rule-id\"] !== undefined) {\n    contents.AbortRuleId = output.headers[\"x-amz-abort-rule-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n    contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = data[\"Bucket\"];\n  }\n  if (data[\"Key\"] !== undefined) {\n    contents.Key = data[\"Key\"];\n  }\n  if (data[\"UploadId\"] !== undefined) {\n    contents.UploadId = data[\"UploadId\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlCreateMultipartUploadCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<CreateMultipartUploadCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketCommandError(output, context);\n  }\n  const contents: DeleteBucketCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketAnalyticsConfigurationCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError(output, context);\n  }\n  const contents: DeleteBucketAnalyticsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketAnalyticsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketCorsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketCorsCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketCorsCommandError(output, context);\n  }\n  const contents: DeleteBucketCorsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketCorsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketCorsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketEncryptionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketEncryptionCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketEncryptionCommandError(output, context);\n  }\n  const contents: DeleteBucketEncryptionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketEncryptionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketEncryptionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketIntelligentTieringConfigurationCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError(output, context);\n  }\n  const contents: DeleteBucketIntelligentTieringConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketIntelligentTieringConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketInventoryConfigurationCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError(output, context);\n  }\n  const contents: DeleteBucketInventoryConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketInventoryConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketLifecycleCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketLifecycleCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketLifecycleCommandError(output, context);\n  }\n  const contents: DeleteBucketLifecycleCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketLifecycleCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketLifecycleCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketMetricsConfigurationCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError(output, context);\n  }\n  const contents: DeleteBucketMetricsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketMetricsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketOwnershipControlsCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError(output, context);\n  }\n  const contents: DeleteBucketOwnershipControlsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketOwnershipControlsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketPolicyCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketPolicyCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketPolicyCommandError(output, context);\n  }\n  const contents: DeleteBucketPolicyCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketPolicyCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketPolicyCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketReplicationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketReplicationCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketReplicationCommandError(output, context);\n  }\n  const contents: DeleteBucketReplicationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketReplicationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketReplicationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketTaggingCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketTaggingCommandError(output, context);\n  }\n  const contents: DeleteBucketTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteBucketWebsiteCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketWebsiteCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteBucketWebsiteCommandError(output, context);\n  }\n  const contents: DeleteBucketWebsiteCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteBucketWebsiteCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteBucketWebsiteCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteObjectCommandError(output, context);\n  }\n  const contents: DeleteObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    DeleteMarker: undefined,\n    RequestCharged: undefined,\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n    contents.DeleteMarker = output.headers[\"x-amz-delete-marker\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteObjectsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteObjectsCommandError(output, context);\n  }\n  const contents: DeleteObjectsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Deleted: undefined,\n    Errors: undefined,\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data.Deleted === \"\") {\n    contents.Deleted = [];\n  }\n  if (data[\"Deleted\"] !== undefined) {\n    contents.Deleted = deserializeAws_restXmlDeletedObjects(__getArrayIfSingleItem(data[\"Deleted\"]), context);\n  }\n  if (data.Error === \"\") {\n    contents.Errors = [];\n  }\n  if (data[\"Error\"] !== undefined) {\n    contents.Errors = deserializeAws_restXmlErrors(__getArrayIfSingleItem(data[\"Error\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteObjectsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeleteObjectTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectTaggingCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeleteObjectTaggingCommandError(output, context);\n  }\n  const contents: DeleteObjectTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeleteObjectTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteObjectTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlDeletePublicAccessBlockCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeletePublicAccessBlockCommandOutput> => {\n  if (output.statusCode !== 204 && output.statusCode >= 300) {\n    return deserializeAws_restXmlDeletePublicAccessBlockCommandError(output, context);\n  }\n  const contents: DeletePublicAccessBlockCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlDeletePublicAccessBlockCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeletePublicAccessBlockCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAccelerateConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketAccelerateConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Status: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Status\"] !== undefined) {\n    contents.Status = data[\"Status\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAccelerateConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketAclCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAclCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketAclCommandError(output, context);\n  }\n  const contents: GetBucketAclCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Grants: undefined,\n    Owner: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.AccessControlList === \"\") {\n    contents.Grants = [];\n  }\n  if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n    contents.Grants = deserializeAws_restXmlGrants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketAclCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAclCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAnalyticsConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketAnalyticsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AnalyticsConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.AnalyticsConfiguration = deserializeAws_restXmlAnalyticsConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketAnalyticsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketCorsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketCorsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketCorsCommandError(output, context);\n  }\n  const contents: GetBucketCorsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    CORSRules: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.CORSRule === \"\") {\n    contents.CORSRules = [];\n  }\n  if (data[\"CORSRule\"] !== undefined) {\n    contents.CORSRules = deserializeAws_restXmlCORSRules(__getArrayIfSingleItem(data[\"CORSRule\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketCorsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketCorsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketEncryptionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketEncryptionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketEncryptionCommandError(output, context);\n  }\n  const contents: GetBucketEncryptionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ServerSideEncryptionConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.ServerSideEncryptionConfiguration = deserializeAws_restXmlServerSideEncryptionConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketEncryptionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketEncryptionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketIntelligentTieringConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketIntelligentTieringConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    IntelligentTieringConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.IntelligentTieringConfiguration = deserializeAws_restXmlIntelligentTieringConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketIntelligentTieringConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketInventoryConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketInventoryConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketInventoryConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketInventoryConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    InventoryConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.InventoryConfiguration = deserializeAws_restXmlInventoryConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketInventoryConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketInventoryConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLifecycleConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketLifecycleConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Rules: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.Rule === \"\") {\n    contents.Rules = [];\n  }\n  if (data[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlLifecycleRules(__getArrayIfSingleItem(data[\"Rule\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLifecycleConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketLocationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLocationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketLocationCommandError(output, context);\n  }\n  const contents: GetBucketLocationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    LocationConstraint: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"LocationConstraint\"] !== undefined) {\n    contents.LocationConstraint = data[\"LocationConstraint\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketLocationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLocationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketLoggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLoggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketLoggingCommandError(output, context);\n  }\n  const contents: GetBucketLoggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    LoggingEnabled: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"LoggingEnabled\"] !== undefined) {\n    contents.LoggingEnabled = deserializeAws_restXmlLoggingEnabled(data[\"LoggingEnabled\"], context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketLoggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketLoggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketMetricsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketMetricsConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketMetricsConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketMetricsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    MetricsConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.MetricsConfiguration = deserializeAws_restXmlMetricsConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketMetricsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketMetricsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketNotificationConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketNotificationConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketNotificationConfigurationCommandError(output, context);\n  }\n  const contents: GetBucketNotificationConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    LambdaFunctionConfigurations: undefined,\n    QueueConfigurations: undefined,\n    TopicConfigurations: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.CloudFunctionConfiguration === \"\") {\n    contents.LambdaFunctionConfigurations = [];\n  }\n  if (data[\"CloudFunctionConfiguration\"] !== undefined) {\n    contents.LambdaFunctionConfigurations = deserializeAws_restXmlLambdaFunctionConfigurationList(\n      __getArrayIfSingleItem(data[\"CloudFunctionConfiguration\"]),\n      context\n    );\n  }\n  if (data.QueueConfiguration === \"\") {\n    contents.QueueConfigurations = [];\n  }\n  if (data[\"QueueConfiguration\"] !== undefined) {\n    contents.QueueConfigurations = deserializeAws_restXmlQueueConfigurationList(\n      __getArrayIfSingleItem(data[\"QueueConfiguration\"]),\n      context\n    );\n  }\n  if (data.TopicConfiguration === \"\") {\n    contents.TopicConfigurations = [];\n  }\n  if (data[\"TopicConfiguration\"] !== undefined) {\n    contents.TopicConfigurations = deserializeAws_restXmlTopicConfigurationList(\n      __getArrayIfSingleItem(data[\"TopicConfiguration\"]),\n      context\n    );\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketNotificationConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketNotificationConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketOwnershipControlsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketOwnershipControlsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketOwnershipControlsCommandError(output, context);\n  }\n  const contents: GetBucketOwnershipControlsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    OwnershipControls: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.OwnershipControls = deserializeAws_restXmlOwnershipControls(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketOwnershipControlsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketOwnershipControlsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketPolicyCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketPolicyCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketPolicyCommandError(output, context);\n  }\n  const contents: GetBucketPolicyCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Policy: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Policy\"] !== undefined) {\n    contents.Policy = data[\"Policy\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketPolicyCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketPolicyCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketPolicyStatusCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketPolicyStatusCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketPolicyStatusCommandError(output, context);\n  }\n  const contents: GetBucketPolicyStatusCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    PolicyStatus: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.PolicyStatus = deserializeAws_restXmlPolicyStatus(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketPolicyStatusCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketPolicyStatusCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketReplicationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketReplicationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketReplicationCommandError(output, context);\n  }\n  const contents: GetBucketReplicationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ReplicationConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.ReplicationConfiguration = deserializeAws_restXmlReplicationConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketReplicationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketReplicationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketRequestPaymentCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketRequestPaymentCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketRequestPaymentCommandError(output, context);\n  }\n  const contents: GetBucketRequestPaymentCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Payer: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Payer\"] !== undefined) {\n    contents.Payer = data[\"Payer\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketRequestPaymentCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketRequestPaymentCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketTaggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketTaggingCommandError(output, context);\n  }\n  const contents: GetBucketTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    TagSet: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.TagSet === \"\") {\n    contents.TagSet = [];\n  }\n  if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n    contents.TagSet = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketVersioningCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketVersioningCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketVersioningCommandError(output, context);\n  }\n  const contents: GetBucketVersioningCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    MFADelete: undefined,\n    Status: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"MfaDelete\"] !== undefined) {\n    contents.MFADelete = data[\"MfaDelete\"];\n  }\n  if (data[\"Status\"] !== undefined) {\n    contents.Status = data[\"Status\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketVersioningCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketVersioningCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetBucketWebsiteCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketWebsiteCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetBucketWebsiteCommandError(output, context);\n  }\n  const contents: GetBucketWebsiteCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ErrorDocument: undefined,\n    IndexDocument: undefined,\n    RedirectAllRequestsTo: undefined,\n    RoutingRules: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"ErrorDocument\"] !== undefined) {\n    contents.ErrorDocument = deserializeAws_restXmlErrorDocument(data[\"ErrorDocument\"], context);\n  }\n  if (data[\"IndexDocument\"] !== undefined) {\n    contents.IndexDocument = deserializeAws_restXmlIndexDocument(data[\"IndexDocument\"], context);\n  }\n  if (data[\"RedirectAllRequestsTo\"] !== undefined) {\n    contents.RedirectAllRequestsTo = deserializeAws_restXmlRedirectAllRequestsTo(\n      data[\"RedirectAllRequestsTo\"],\n      context\n    );\n  }\n  if (data.RoutingRules === \"\") {\n    contents.RoutingRules = [];\n  }\n  if (data[\"RoutingRules\"] !== undefined && data[\"RoutingRules\"][\"RoutingRule\"] !== undefined) {\n    contents.RoutingRules = deserializeAws_restXmlRoutingRules(\n      __getArrayIfSingleItem(data[\"RoutingRules\"][\"RoutingRule\"]),\n      context\n    );\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetBucketWebsiteCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetBucketWebsiteCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectCommandError(output, context);\n  }\n  const contents: GetObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AcceptRanges: undefined,\n    Body: undefined,\n    BucketKeyEnabled: undefined,\n    CacheControl: undefined,\n    ContentDisposition: undefined,\n    ContentEncoding: undefined,\n    ContentLanguage: undefined,\n    ContentLength: undefined,\n    ContentRange: undefined,\n    ContentType: undefined,\n    DeleteMarker: undefined,\n    ETag: undefined,\n    Expiration: undefined,\n    Expires: undefined,\n    LastModified: undefined,\n    Metadata: undefined,\n    MissingMeta: undefined,\n    ObjectLockLegalHoldStatus: undefined,\n    ObjectLockMode: undefined,\n    ObjectLockRetainUntilDate: undefined,\n    PartsCount: undefined,\n    ReplicationStatus: undefined,\n    RequestCharged: undefined,\n    Restore: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    StorageClass: undefined,\n    TagCount: undefined,\n    VersionId: undefined,\n    WebsiteRedirectLocation: undefined,\n  };\n  if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n    contents.DeleteMarker = output.headers[\"x-amz-delete-marker\"] === \"true\";\n  }\n  if (output.headers[\"accept-ranges\"] !== undefined) {\n    contents.AcceptRanges = output.headers[\"accept-ranges\"];\n  }\n  if (output.headers[\"x-amz-expiration\"] !== undefined) {\n    contents.Expiration = output.headers[\"x-amz-expiration\"];\n  }\n  if (output.headers[\"x-amz-restore\"] !== undefined) {\n    contents.Restore = output.headers[\"x-amz-restore\"];\n  }\n  if (output.headers[\"last-modified\"] !== undefined) {\n    contents.LastModified = new Date(output.headers[\"last-modified\"]);\n  }\n  if (output.headers[\"content-length\"] !== undefined) {\n    contents.ContentLength = parseInt(output.headers[\"content-length\"], 10);\n  }\n  if (output.headers[\"etag\"] !== undefined) {\n    contents.ETag = output.headers[\"etag\"];\n  }\n  if (output.headers[\"x-amz-missing-meta\"] !== undefined) {\n    contents.MissingMeta = parseInt(output.headers[\"x-amz-missing-meta\"], 10);\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"cache-control\"] !== undefined) {\n    contents.CacheControl = output.headers[\"cache-control\"];\n  }\n  if (output.headers[\"content-disposition\"] !== undefined) {\n    contents.ContentDisposition = output.headers[\"content-disposition\"];\n  }\n  if (output.headers[\"content-encoding\"] !== undefined) {\n    contents.ContentEncoding = output.headers[\"content-encoding\"];\n  }\n  if (output.headers[\"content-language\"] !== undefined) {\n    contents.ContentLanguage = output.headers[\"content-language\"];\n  }\n  if (output.headers[\"content-range\"] !== undefined) {\n    contents.ContentRange = output.headers[\"content-range\"];\n  }\n  if (output.headers[\"content-type\"] !== undefined) {\n    contents.ContentType = output.headers[\"content-type\"];\n  }\n  if (output.headers[\"expires\"] !== undefined) {\n    contents.Expires = new Date(output.headers[\"expires\"]);\n  }\n  if (output.headers[\"x-amz-website-redirect-location\"] !== undefined) {\n    contents.WebsiteRedirectLocation = output.headers[\"x-amz-website-redirect-location\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-storage-class\"] !== undefined) {\n    contents.StorageClass = output.headers[\"x-amz-storage-class\"];\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  if (output.headers[\"x-amz-replication-status\"] !== undefined) {\n    contents.ReplicationStatus = output.headers[\"x-amz-replication-status\"];\n  }\n  if (output.headers[\"x-amz-mp-parts-count\"] !== undefined) {\n    contents.PartsCount = parseInt(output.headers[\"x-amz-mp-parts-count\"], 10);\n  }\n  if (output.headers[\"x-amz-tagging-count\"] !== undefined) {\n    contents.TagCount = parseInt(output.headers[\"x-amz-tagging-count\"], 10);\n  }\n  if (output.headers[\"x-amz-object-lock-mode\"] !== undefined) {\n    contents.ObjectLockMode = output.headers[\"x-amz-object-lock-mode\"];\n  }\n  if (output.headers[\"x-amz-object-lock-retain-until-date\"] !== undefined) {\n    contents.ObjectLockRetainUntilDate = new Date(output.headers[\"x-amz-object-lock-retain-until-date\"]);\n  }\n  if (output.headers[\"x-amz-object-lock-legal-hold\"] !== undefined) {\n    contents.ObjectLockLegalHoldStatus = output.headers[\"x-amz-object-lock-legal-hold\"];\n  }\n  Object.keys(output.headers).forEach((header) => {\n    if (contents.Metadata === undefined) {\n      contents.Metadata = {};\n    }\n    if (header.startsWith(\"x-amz-meta-\")) {\n      contents.Metadata[header.substring(11)] = output.headers[header];\n    }\n  });\n  const data: any = output.body;\n  contents.Body = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidObjectState\":\n    case \"com.amazonaws.s3#InvalidObjectState\":\n      response = {\n        ...(await deserializeAws_restXmlInvalidObjectStateResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectAclCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectAclCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectAclCommandError(output, context);\n  }\n  const contents: GetObjectAclCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Grants: undefined,\n    Owner: undefined,\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data.AccessControlList === \"\") {\n    contents.Grants = [];\n  }\n  if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n    contents.Grants = deserializeAws_restXmlGrants(__getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectAclCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectAclCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectLegalHoldCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectLegalHoldCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectLegalHoldCommandError(output, context);\n  }\n  const contents: GetObjectLegalHoldCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    LegalHold: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.LegalHold = deserializeAws_restXmlObjectLockLegalHold(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectLegalHoldCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectLegalHoldCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectLockConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectLockConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectLockConfigurationCommandError(output, context);\n  }\n  const contents: GetObjectLockConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ObjectLockConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.ObjectLockConfiguration = deserializeAws_restXmlObjectLockConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectLockConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectLockConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectRetentionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectRetentionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectRetentionCommandError(output, context);\n  }\n  const contents: GetObjectRetentionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Retention: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.Retention = deserializeAws_restXmlObjectLockRetention(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectRetentionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectRetentionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectTaggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectTaggingCommandError(output, context);\n  }\n  const contents: GetObjectTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    TagSet: undefined,\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data.TagSet === \"\") {\n    contents.TagSet = [];\n  }\n  if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n    contents.TagSet = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetObjectTorrentCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectTorrentCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetObjectTorrentCommandError(output, context);\n  }\n  const contents: GetObjectTorrentCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Body: undefined,\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = output.body;\n  contents.Body = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetObjectTorrentCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetObjectTorrentCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlGetPublicAccessBlockCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetPublicAccessBlockCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlGetPublicAccessBlockCommandError(output, context);\n  }\n  const contents: GetPublicAccessBlockCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    PublicAccessBlockConfiguration: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  contents.PublicAccessBlockConfiguration = deserializeAws_restXmlPublicAccessBlockConfiguration(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlGetPublicAccessBlockCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetPublicAccessBlockCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlHeadBucketCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<HeadBucketCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlHeadBucketCommandError(output, context);\n  }\n  const contents: HeadBucketCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlHeadBucketCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<HeadBucketCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchBucket\":\n    case \"com.amazonaws.s3#NoSuchBucket\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlHeadObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<HeadObjectCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlHeadObjectCommandError(output, context);\n  }\n  const contents: HeadObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AcceptRanges: undefined,\n    ArchiveStatus: undefined,\n    BucketKeyEnabled: undefined,\n    CacheControl: undefined,\n    ContentDisposition: undefined,\n    ContentEncoding: undefined,\n    ContentLanguage: undefined,\n    ContentLength: undefined,\n    ContentType: undefined,\n    DeleteMarker: undefined,\n    ETag: undefined,\n    Expiration: undefined,\n    Expires: undefined,\n    LastModified: undefined,\n    Metadata: undefined,\n    MissingMeta: undefined,\n    ObjectLockLegalHoldStatus: undefined,\n    ObjectLockMode: undefined,\n    ObjectLockRetainUntilDate: undefined,\n    PartsCount: undefined,\n    ReplicationStatus: undefined,\n    RequestCharged: undefined,\n    Restore: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    StorageClass: undefined,\n    VersionId: undefined,\n    WebsiteRedirectLocation: undefined,\n  };\n  if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n    contents.DeleteMarker = output.headers[\"x-amz-delete-marker\"] === \"true\";\n  }\n  if (output.headers[\"accept-ranges\"] !== undefined) {\n    contents.AcceptRanges = output.headers[\"accept-ranges\"];\n  }\n  if (output.headers[\"x-amz-expiration\"] !== undefined) {\n    contents.Expiration = output.headers[\"x-amz-expiration\"];\n  }\n  if (output.headers[\"x-amz-restore\"] !== undefined) {\n    contents.Restore = output.headers[\"x-amz-restore\"];\n  }\n  if (output.headers[\"x-amz-archive-status\"] !== undefined) {\n    contents.ArchiveStatus = output.headers[\"x-amz-archive-status\"];\n  }\n  if (output.headers[\"last-modified\"] !== undefined) {\n    contents.LastModified = new Date(output.headers[\"last-modified\"]);\n  }\n  if (output.headers[\"content-length\"] !== undefined) {\n    contents.ContentLength = parseInt(output.headers[\"content-length\"], 10);\n  }\n  if (output.headers[\"etag\"] !== undefined) {\n    contents.ETag = output.headers[\"etag\"];\n  }\n  if (output.headers[\"x-amz-missing-meta\"] !== undefined) {\n    contents.MissingMeta = parseInt(output.headers[\"x-amz-missing-meta\"], 10);\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"cache-control\"] !== undefined) {\n    contents.CacheControl = output.headers[\"cache-control\"];\n  }\n  if (output.headers[\"content-disposition\"] !== undefined) {\n    contents.ContentDisposition = output.headers[\"content-disposition\"];\n  }\n  if (output.headers[\"content-encoding\"] !== undefined) {\n    contents.ContentEncoding = output.headers[\"content-encoding\"];\n  }\n  if (output.headers[\"content-language\"] !== undefined) {\n    contents.ContentLanguage = output.headers[\"content-language\"];\n  }\n  if (output.headers[\"content-type\"] !== undefined) {\n    contents.ContentType = output.headers[\"content-type\"];\n  }\n  if (output.headers[\"expires\"] !== undefined) {\n    contents.Expires = new Date(output.headers[\"expires\"]);\n  }\n  if (output.headers[\"x-amz-website-redirect-location\"] !== undefined) {\n    contents.WebsiteRedirectLocation = output.headers[\"x-amz-website-redirect-location\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-storage-class\"] !== undefined) {\n    contents.StorageClass = output.headers[\"x-amz-storage-class\"];\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  if (output.headers[\"x-amz-replication-status\"] !== undefined) {\n    contents.ReplicationStatus = output.headers[\"x-amz-replication-status\"];\n  }\n  if (output.headers[\"x-amz-mp-parts-count\"] !== undefined) {\n    contents.PartsCount = parseInt(output.headers[\"x-amz-mp-parts-count\"], 10);\n  }\n  if (output.headers[\"x-amz-object-lock-mode\"] !== undefined) {\n    contents.ObjectLockMode = output.headers[\"x-amz-object-lock-mode\"];\n  }\n  if (output.headers[\"x-amz-object-lock-retain-until-date\"] !== undefined) {\n    contents.ObjectLockRetainUntilDate = new Date(output.headers[\"x-amz-object-lock-retain-until-date\"]);\n  }\n  if (output.headers[\"x-amz-object-lock-legal-hold\"] !== undefined) {\n    contents.ObjectLockLegalHoldStatus = output.headers[\"x-amz-object-lock-legal-hold\"];\n  }\n  Object.keys(output.headers).forEach((header) => {\n    if (contents.Metadata === undefined) {\n      contents.Metadata = {};\n    }\n    if (header.startsWith(\"x-amz-meta-\")) {\n      contents.Metadata[header.substring(11)] = output.headers[header];\n    }\n  });\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlHeadObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<HeadObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketAnalyticsConfigurationsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError(output, context);\n  }\n  const contents: ListBucketAnalyticsConfigurationsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AnalyticsConfigurationList: undefined,\n    ContinuationToken: undefined,\n    IsTruncated: undefined,\n    NextContinuationToken: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.AnalyticsConfiguration === \"\") {\n    contents.AnalyticsConfigurationList = [];\n  }\n  if (data[\"AnalyticsConfiguration\"] !== undefined) {\n    contents.AnalyticsConfigurationList = deserializeAws_restXmlAnalyticsConfigurationList(\n      __getArrayIfSingleItem(data[\"AnalyticsConfiguration\"]),\n      context\n    );\n  }\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = data[\"ContinuationToken\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = data[\"NextContinuationToken\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketAnalyticsConfigurationsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketIntelligentTieringConfigurationsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError(output, context);\n  }\n  const contents: ListBucketIntelligentTieringConfigurationsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ContinuationToken: undefined,\n    IntelligentTieringConfigurationList: undefined,\n    IsTruncated: undefined,\n    NextContinuationToken: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = data[\"ContinuationToken\"];\n  }\n  if (data.IntelligentTieringConfiguration === \"\") {\n    contents.IntelligentTieringConfigurationList = [];\n  }\n  if (data[\"IntelligentTieringConfiguration\"] !== undefined) {\n    contents.IntelligentTieringConfigurationList = deserializeAws_restXmlIntelligentTieringConfigurationList(\n      __getArrayIfSingleItem(data[\"IntelligentTieringConfiguration\"]),\n      context\n    );\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = data[\"NextContinuationToken\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketIntelligentTieringConfigurationsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListBucketInventoryConfigurationsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketInventoryConfigurationsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketInventoryConfigurationsCommandError(output, context);\n  }\n  const contents: ListBucketInventoryConfigurationsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ContinuationToken: undefined,\n    InventoryConfigurationList: undefined,\n    IsTruncated: undefined,\n    NextContinuationToken: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = data[\"ContinuationToken\"];\n  }\n  if (data.InventoryConfiguration === \"\") {\n    contents.InventoryConfigurationList = [];\n  }\n  if (data[\"InventoryConfiguration\"] !== undefined) {\n    contents.InventoryConfigurationList = deserializeAws_restXmlInventoryConfigurationList(\n      __getArrayIfSingleItem(data[\"InventoryConfiguration\"]),\n      context\n    );\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = data[\"NextContinuationToken\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListBucketInventoryConfigurationsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketInventoryConfigurationsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListBucketMetricsConfigurationsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketMetricsConfigurationsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketMetricsConfigurationsCommandError(output, context);\n  }\n  const contents: ListBucketMetricsConfigurationsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    ContinuationToken: undefined,\n    IsTruncated: undefined,\n    MetricsConfigurationList: undefined,\n    NextContinuationToken: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = data[\"ContinuationToken\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data.MetricsConfiguration === \"\") {\n    contents.MetricsConfigurationList = [];\n  }\n  if (data[\"MetricsConfiguration\"] !== undefined) {\n    contents.MetricsConfigurationList = deserializeAws_restXmlMetricsConfigurationList(\n      __getArrayIfSingleItem(data[\"MetricsConfiguration\"]),\n      context\n    );\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = data[\"NextContinuationToken\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListBucketMetricsConfigurationsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketMetricsConfigurationsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListBucketsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListBucketsCommandError(output, context);\n  }\n  const contents: ListBucketsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Buckets: undefined,\n    Owner: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.Buckets === \"\") {\n    contents.Buckets = [];\n  }\n  if (data[\"Buckets\"] !== undefined && data[\"Buckets\"][\"Bucket\"] !== undefined) {\n    contents.Buckets = deserializeAws_restXmlBuckets(__getArrayIfSingleItem(data[\"Buckets\"][\"Bucket\"]), context);\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListBucketsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListBucketsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListMultipartUploadsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListMultipartUploadsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListMultipartUploadsCommandError(output, context);\n  }\n  const contents: ListMultipartUploadsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Bucket: undefined,\n    CommonPrefixes: undefined,\n    Delimiter: undefined,\n    EncodingType: undefined,\n    IsTruncated: undefined,\n    KeyMarker: undefined,\n    MaxUploads: undefined,\n    NextKeyMarker: undefined,\n    NextUploadIdMarker: undefined,\n    Prefix: undefined,\n    UploadIdMarker: undefined,\n    Uploads: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = data[\"Bucket\"];\n  }\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  }\n  if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(\n      __getArrayIfSingleItem(data[\"CommonPrefixes\"]),\n      context\n    );\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = data[\"Delimiter\"];\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = data[\"EncodingType\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"KeyMarker\"] !== undefined) {\n    contents.KeyMarker = data[\"KeyMarker\"];\n  }\n  if (data[\"MaxUploads\"] !== undefined) {\n    contents.MaxUploads = parseInt(data[\"MaxUploads\"]);\n  }\n  if (data[\"NextKeyMarker\"] !== undefined) {\n    contents.NextKeyMarker = data[\"NextKeyMarker\"];\n  }\n  if (data[\"NextUploadIdMarker\"] !== undefined) {\n    contents.NextUploadIdMarker = data[\"NextUploadIdMarker\"];\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = data[\"Prefix\"];\n  }\n  if (data[\"UploadIdMarker\"] !== undefined) {\n    contents.UploadIdMarker = data[\"UploadIdMarker\"];\n  }\n  if (data.Upload === \"\") {\n    contents.Uploads = [];\n  }\n  if (data[\"Upload\"] !== undefined) {\n    contents.Uploads = deserializeAws_restXmlMultipartUploadList(__getArrayIfSingleItem(data[\"Upload\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListMultipartUploadsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListMultipartUploadsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListObjectsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListObjectsCommandError(output, context);\n  }\n  const contents: ListObjectsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    CommonPrefixes: undefined,\n    Contents: undefined,\n    Delimiter: undefined,\n    EncodingType: undefined,\n    IsTruncated: undefined,\n    Marker: undefined,\n    MaxKeys: undefined,\n    Name: undefined,\n    NextMarker: undefined,\n    Prefix: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  }\n  if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(\n      __getArrayIfSingleItem(data[\"CommonPrefixes\"]),\n      context\n    );\n  }\n  if (data.Contents === \"\") {\n    contents.Contents = [];\n  }\n  if (data[\"Contents\"] !== undefined) {\n    contents.Contents = deserializeAws_restXmlObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = data[\"Delimiter\"];\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = data[\"EncodingType\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"Marker\"] !== undefined) {\n    contents.Marker = data[\"Marker\"];\n  }\n  if (data[\"MaxKeys\"] !== undefined) {\n    contents.MaxKeys = parseInt(data[\"MaxKeys\"]);\n  }\n  if (data[\"Name\"] !== undefined) {\n    contents.Name = data[\"Name\"];\n  }\n  if (data[\"NextMarker\"] !== undefined) {\n    contents.NextMarker = data[\"NextMarker\"];\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = data[\"Prefix\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListObjectsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchBucket\":\n    case \"com.amazonaws.s3#NoSuchBucket\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListObjectsV2Command = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectsV2CommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListObjectsV2CommandError(output, context);\n  }\n  const contents: ListObjectsV2CommandOutput = {\n    $metadata: deserializeMetadata(output),\n    CommonPrefixes: undefined,\n    Contents: undefined,\n    ContinuationToken: undefined,\n    Delimiter: undefined,\n    EncodingType: undefined,\n    IsTruncated: undefined,\n    KeyCount: undefined,\n    MaxKeys: undefined,\n    Name: undefined,\n    NextContinuationToken: undefined,\n    Prefix: undefined,\n    StartAfter: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  }\n  if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(\n      __getArrayIfSingleItem(data[\"CommonPrefixes\"]),\n      context\n    );\n  }\n  if (data.Contents === \"\") {\n    contents.Contents = [];\n  }\n  if (data[\"Contents\"] !== undefined) {\n    contents.Contents = deserializeAws_restXmlObjectList(__getArrayIfSingleItem(data[\"Contents\"]), context);\n  }\n  if (data[\"ContinuationToken\"] !== undefined) {\n    contents.ContinuationToken = data[\"ContinuationToken\"];\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = data[\"Delimiter\"];\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = data[\"EncodingType\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"KeyCount\"] !== undefined) {\n    contents.KeyCount = parseInt(data[\"KeyCount\"]);\n  }\n  if (data[\"MaxKeys\"] !== undefined) {\n    contents.MaxKeys = parseInt(data[\"MaxKeys\"]);\n  }\n  if (data[\"Name\"] !== undefined) {\n    contents.Name = data[\"Name\"];\n  }\n  if (data[\"NextContinuationToken\"] !== undefined) {\n    contents.NextContinuationToken = data[\"NextContinuationToken\"];\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = data[\"Prefix\"];\n  }\n  if (data[\"StartAfter\"] !== undefined) {\n    contents.StartAfter = data[\"StartAfter\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListObjectsV2CommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectsV2CommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchBucket\":\n    case \"com.amazonaws.s3#NoSuchBucket\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListObjectVersionsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectVersionsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListObjectVersionsCommandError(output, context);\n  }\n  const contents: ListObjectVersionsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    CommonPrefixes: undefined,\n    DeleteMarkers: undefined,\n    Delimiter: undefined,\n    EncodingType: undefined,\n    IsTruncated: undefined,\n    KeyMarker: undefined,\n    MaxKeys: undefined,\n    Name: undefined,\n    NextKeyMarker: undefined,\n    NextVersionIdMarker: undefined,\n    Prefix: undefined,\n    VersionIdMarker: undefined,\n    Versions: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.CommonPrefixes === \"\") {\n    contents.CommonPrefixes = [];\n  }\n  if (data[\"CommonPrefixes\"] !== undefined) {\n    contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(\n      __getArrayIfSingleItem(data[\"CommonPrefixes\"]),\n      context\n    );\n  }\n  if (data.DeleteMarker === \"\") {\n    contents.DeleteMarkers = [];\n  }\n  if (data[\"DeleteMarker\"] !== undefined) {\n    contents.DeleteMarkers = deserializeAws_restXmlDeleteMarkers(__getArrayIfSingleItem(data[\"DeleteMarker\"]), context);\n  }\n  if (data[\"Delimiter\"] !== undefined) {\n    contents.Delimiter = data[\"Delimiter\"];\n  }\n  if (data[\"EncodingType\"] !== undefined) {\n    contents.EncodingType = data[\"EncodingType\"];\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"KeyMarker\"] !== undefined) {\n    contents.KeyMarker = data[\"KeyMarker\"];\n  }\n  if (data[\"MaxKeys\"] !== undefined) {\n    contents.MaxKeys = parseInt(data[\"MaxKeys\"]);\n  }\n  if (data[\"Name\"] !== undefined) {\n    contents.Name = data[\"Name\"];\n  }\n  if (data[\"NextKeyMarker\"] !== undefined) {\n    contents.NextKeyMarker = data[\"NextKeyMarker\"];\n  }\n  if (data[\"NextVersionIdMarker\"] !== undefined) {\n    contents.NextVersionIdMarker = data[\"NextVersionIdMarker\"];\n  }\n  if (data[\"Prefix\"] !== undefined) {\n    contents.Prefix = data[\"Prefix\"];\n  }\n  if (data[\"VersionIdMarker\"] !== undefined) {\n    contents.VersionIdMarker = data[\"VersionIdMarker\"];\n  }\n  if (data.Version === \"\") {\n    contents.Versions = [];\n  }\n  if (data[\"Version\"] !== undefined) {\n    contents.Versions = deserializeAws_restXmlObjectVersionList(__getArrayIfSingleItem(data[\"Version\"]), context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListObjectVersionsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListObjectVersionsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlListPartsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListPartsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlListPartsCommandError(output, context);\n  }\n  const contents: ListPartsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AbortDate: undefined,\n    AbortRuleId: undefined,\n    Bucket: undefined,\n    Initiator: undefined,\n    IsTruncated: undefined,\n    Key: undefined,\n    MaxParts: undefined,\n    NextPartNumberMarker: undefined,\n    Owner: undefined,\n    PartNumberMarker: undefined,\n    Parts: undefined,\n    RequestCharged: undefined,\n    StorageClass: undefined,\n    UploadId: undefined,\n  };\n  if (output.headers[\"x-amz-abort-date\"] !== undefined) {\n    contents.AbortDate = new Date(output.headers[\"x-amz-abort-date\"]);\n  }\n  if (output.headers[\"x-amz-abort-rule-id\"] !== undefined) {\n    contents.AbortRuleId = output.headers[\"x-amz-abort-rule-id\"];\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  if (data[\"Bucket\"] !== undefined) {\n    contents.Bucket = data[\"Bucket\"];\n  }\n  if (data[\"Initiator\"] !== undefined) {\n    contents.Initiator = deserializeAws_restXmlInitiator(data[\"Initiator\"], context);\n  }\n  if (data[\"IsTruncated\"] !== undefined) {\n    contents.IsTruncated = data[\"IsTruncated\"] == \"true\";\n  }\n  if (data[\"Key\"] !== undefined) {\n    contents.Key = data[\"Key\"];\n  }\n  if (data[\"MaxParts\"] !== undefined) {\n    contents.MaxParts = parseInt(data[\"MaxParts\"]);\n  }\n  if (data[\"NextPartNumberMarker\"] !== undefined) {\n    contents.NextPartNumberMarker = data[\"NextPartNumberMarker\"];\n  }\n  if (data[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n  }\n  if (data[\"PartNumberMarker\"] !== undefined) {\n    contents.PartNumberMarker = data[\"PartNumberMarker\"];\n  }\n  if (data.Part === \"\") {\n    contents.Parts = [];\n  }\n  if (data[\"Part\"] !== undefined) {\n    contents.Parts = deserializeAws_restXmlParts(__getArrayIfSingleItem(data[\"Part\"]), context);\n  }\n  if (data[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = data[\"StorageClass\"];\n  }\n  if (data[\"UploadId\"] !== undefined) {\n    contents.UploadId = data[\"UploadId\"];\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlListPartsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListPartsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAccelerateConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketAccelerateConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAccelerateConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketAclCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAclCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketAclCommandError(output, context);\n  }\n  const contents: PutBucketAclCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketAclCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAclCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAnalyticsConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketAnalyticsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketAnalyticsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketCorsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketCorsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketCorsCommandError(output, context);\n  }\n  const contents: PutBucketCorsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketCorsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketCorsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketEncryptionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketEncryptionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketEncryptionCommandError(output, context);\n  }\n  const contents: PutBucketEncryptionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketEncryptionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketEncryptionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketIntelligentTieringConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketIntelligentTieringConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketIntelligentTieringConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketInventoryConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketInventoryConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketInventoryConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketInventoryConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketInventoryConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketInventoryConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketLifecycleConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketLifecycleConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketLifecycleConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketLoggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketLoggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketLoggingCommandError(output, context);\n  }\n  const contents: PutBucketLoggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketLoggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketLoggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketMetricsConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketMetricsConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketMetricsConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketMetricsConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketMetricsConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketMetricsConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketNotificationConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketNotificationConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketNotificationConfigurationCommandError(output, context);\n  }\n  const contents: PutBucketNotificationConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketNotificationConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketNotificationConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketOwnershipControlsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketOwnershipControlsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketOwnershipControlsCommandError(output, context);\n  }\n  const contents: PutBucketOwnershipControlsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketOwnershipControlsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketOwnershipControlsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketPolicyCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketPolicyCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketPolicyCommandError(output, context);\n  }\n  const contents: PutBucketPolicyCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketPolicyCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketPolicyCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketReplicationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketReplicationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketReplicationCommandError(output, context);\n  }\n  const contents: PutBucketReplicationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketReplicationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketReplicationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketRequestPaymentCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketRequestPaymentCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketRequestPaymentCommandError(output, context);\n  }\n  const contents: PutBucketRequestPaymentCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketRequestPaymentCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketRequestPaymentCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketTaggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketTaggingCommandError(output, context);\n  }\n  const contents: PutBucketTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketVersioningCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketVersioningCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketVersioningCommandError(output, context);\n  }\n  const contents: PutBucketVersioningCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketVersioningCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketVersioningCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutBucketWebsiteCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketWebsiteCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutBucketWebsiteCommandError(output, context);\n  }\n  const contents: PutBucketWebsiteCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutBucketWebsiteCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutBucketWebsiteCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectCommandError(output, context);\n  }\n  const contents: PutObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    BucketKeyEnabled: undefined,\n    ETag: undefined,\n    Expiration: undefined,\n    RequestCharged: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSEncryptionContext: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-expiration\"] !== undefined) {\n    contents.Expiration = output.headers[\"x-amz-expiration\"];\n  }\n  if (output.headers[\"etag\"] !== undefined) {\n    contents.ETag = output.headers[\"etag\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n    contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectAclCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectAclCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectAclCommandError(output, context);\n  }\n  const contents: PutObjectAclCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectAclCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectAclCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"NoSuchKey\":\n    case \"com.amazonaws.s3#NoSuchKey\":\n      response = {\n        ...(await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectLegalHoldCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectLegalHoldCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectLegalHoldCommandError(output, context);\n  }\n  const contents: PutObjectLegalHoldCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectLegalHoldCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectLegalHoldCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectLockConfigurationCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectLockConfigurationCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectLockConfigurationCommandError(output, context);\n  }\n  const contents: PutObjectLockConfigurationCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectLockConfigurationCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectLockConfigurationCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectRetentionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectRetentionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectRetentionCommandError(output, context);\n  }\n  const contents: PutObjectRetentionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectRetentionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectRetentionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutObjectTaggingCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectTaggingCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutObjectTaggingCommandError(output, context);\n  }\n  const contents: PutObjectTaggingCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    VersionId: undefined,\n  };\n  if (output.headers[\"x-amz-version-id\"] !== undefined) {\n    contents.VersionId = output.headers[\"x-amz-version-id\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutObjectTaggingCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutObjectTaggingCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlPutPublicAccessBlockCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutPublicAccessBlockCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlPutPublicAccessBlockCommandError(output, context);\n  }\n  const contents: PutPublicAccessBlockCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlPutPublicAccessBlockCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutPublicAccessBlockCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlRestoreObjectCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<RestoreObjectCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlRestoreObjectCommandError(output, context);\n  }\n  const contents: RestoreObjectCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    RequestCharged: undefined,\n    RestoreOutputPath: undefined,\n  };\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  if (output.headers[\"x-amz-restore-output-path\"] !== undefined) {\n    contents.RestoreOutputPath = output.headers[\"x-amz-restore-output-path\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlRestoreObjectCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<RestoreObjectCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ObjectAlreadyInActiveTierError\":\n    case \"com.amazonaws.s3#ObjectAlreadyInActiveTierError\":\n      response = {\n        ...(await deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlSelectObjectContentCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext & __EventStreamSerdeContext\n): Promise<SelectObjectContentCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlSelectObjectContentCommandError(output, context);\n  }\n  const contents: SelectObjectContentCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Payload: undefined,\n  };\n  const data: any = context.eventStreamMarshaller.deserialize(output.body, async (event) => {\n    const eventName = Object.keys(event)[0];\n    const eventHeaders = Object.entries(event[eventName].headers).reduce((accummulator, curr) => {\n      accummulator[curr[0]] = curr[1].value;\n      return accummulator;\n    }, {} as { [key: string]: any });\n    const eventMessage = {\n      headers: eventHeaders,\n      body: event[eventName].body,\n    };\n    const parsedEvent = {\n      [eventName]: eventMessage,\n    };\n    return await deserializeAws_restXmlSelectObjectContentEventStream_event(parsedEvent, context);\n  });\n  contents.Payload = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlSelectObjectContentCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<SelectObjectContentCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlUploadPartCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<UploadPartCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlUploadPartCommandError(output, context);\n  }\n  const contents: UploadPartCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    BucketKeyEnabled: undefined,\n    ETag: undefined,\n    RequestCharged: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n  };\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"etag\"] !== undefined) {\n    contents.ETag = output.headers[\"etag\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlUploadPartCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<UploadPartCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restXmlUploadPartCopyCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<UploadPartCopyCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restXmlUploadPartCopyCommandError(output, context);\n  }\n  const contents: UploadPartCopyCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    BucketKeyEnabled: undefined,\n    CopyPartResult: undefined,\n    CopySourceVersionId: undefined,\n    RequestCharged: undefined,\n    SSECustomerAlgorithm: undefined,\n    SSECustomerKeyMD5: undefined,\n    SSEKMSKeyId: undefined,\n    ServerSideEncryption: undefined,\n  };\n  if (output.headers[\"x-amz-copy-source-version-id\"] !== undefined) {\n    contents.CopySourceVersionId = output.headers[\"x-amz-copy-source-version-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n    contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n    contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n    contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n    contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n  }\n  if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] === \"true\";\n  }\n  if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n    contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n  }\n  const data: any = await parseBody(output.body, context);\n  contents.CopyPartResult = deserializeAws_restXmlCopyPartResult(data, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restXmlUploadPartCopyCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<UploadPartCopyCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nconst deserializeAws_restXmlSelectObjectContentEventStream_event = async (\n  output: any,\n  context: __SerdeContext\n): Promise<SelectObjectContentEventStream> => {\n  if (output[\"Records\"] !== undefined) {\n    return {\n      Records: await deserializeAws_restXmlRecordsEvent_event(output[\"Records\"], context),\n    };\n  }\n  if (output[\"Stats\"] !== undefined) {\n    return {\n      Stats: await deserializeAws_restXmlStatsEvent_event(output[\"Stats\"], context),\n    };\n  }\n  if (output[\"Progress\"] !== undefined) {\n    return {\n      Progress: await deserializeAws_restXmlProgressEvent_event(output[\"Progress\"], context),\n    };\n  }\n  if (output[\"Cont\"] !== undefined) {\n    return {\n      Cont: await deserializeAws_restXmlContinuationEvent_event(output[\"Cont\"], context),\n    };\n  }\n  if (output[\"End\"] !== undefined) {\n    return {\n      End: await deserializeAws_restXmlEndEvent_event(output[\"End\"], context),\n    };\n  }\n  return { $unknown: output };\n};\nconst deserializeAws_restXmlContinuationEvent_event = async (\n  output: any,\n  context: __SerdeContext\n): Promise<ContinuationEvent> => {\n  let contents: ContinuationEvent = {} as any;\n  return contents;\n};\nconst deserializeAws_restXmlEndEvent_event = async (output: any, context: __SerdeContext): Promise<EndEvent> => {\n  let contents: EndEvent = {} as any;\n  return contents;\n};\nconst deserializeAws_restXmlProgressEvent_event = async (\n  output: any,\n  context: __SerdeContext\n): Promise<ProgressEvent> => {\n  let contents: ProgressEvent = {} as any;\n  contents.Details = await parseBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlRecordsEvent_event = async (\n  output: any,\n  context: __SerdeContext\n): Promise<RecordsEvent> => {\n  let contents: RecordsEvent = {} as any;\n  contents.Payload = output.body;\n  return contents;\n};\nconst deserializeAws_restXmlStatsEvent_event = async (output: any, context: __SerdeContext): Promise<StatsEvent> => {\n  let contents: StatsEvent = {} as any;\n  contents.Details = await parseBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restXmlBucketAlreadyExistsResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<BucketAlreadyExists> => {\n  const contents: BucketAlreadyExists = {\n    name: \"BucketAlreadyExists\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlBucketAlreadyOwnedByYouResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<BucketAlreadyOwnedByYou> => {\n  const contents: BucketAlreadyOwnedByYou = {\n    name: \"BucketAlreadyOwnedByYou\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlInvalidObjectStateResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidObjectState> => {\n  const contents: InvalidObjectState = {\n    name: \"InvalidObjectState\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    AccessTier: undefined,\n    StorageClass: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data[\"AccessTier\"] !== undefined) {\n    contents.AccessTier = data[\"AccessTier\"];\n  }\n  if (data[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = data[\"StorageClass\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlNoSuchBucketResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<NoSuchBucket> => {\n  const contents: NoSuchBucket = {\n    name: \"NoSuchBucket\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlNoSuchKeyResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<NoSuchKey> => {\n  const contents: NoSuchKey = {\n    name: \"NoSuchKey\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlNoSuchUploadResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<NoSuchUpload> => {\n  const contents: NoSuchUpload = {\n    name: \"NoSuchUpload\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<ObjectAlreadyInActiveTierError> => {\n  const contents: ObjectAlreadyInActiveTierError = {\n    name: \"ObjectAlreadyInActiveTierError\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectNotInActiveTierErrorResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<ObjectNotInActiveTierError> => {\n  const contents: ObjectNotInActiveTierError = {\n    name: \"ObjectNotInActiveTierError\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n  };\n  const data: any = parsedOutput.body;\n  return contents;\n};\n\nconst serializeAws_restXmlAbortIncompleteMultipartUpload = (\n  input: AbortIncompleteMultipartUpload,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"AbortIncompleteMultipartUpload\");\n  if (input.DaysAfterInitiation !== undefined && input.DaysAfterInitiation !== null) {\n    const node = new __XmlNode(\"DaysAfterInitiation\")\n      .addChildNode(new __XmlText(String(input.DaysAfterInitiation)))\n      .withName(\"DaysAfterInitiation\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAccelerateConfiguration = (input: AccelerateConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"AccelerateConfiguration\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"BucketAccelerateStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAccessControlPolicy = (input: AccessControlPolicy, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"AccessControlPolicy\");\n  if (input.Grants !== undefined && input.Grants !== null) {\n    const nodes = serializeAws_restXmlGrants(input.Grants, context);\n    const containerNode = new __XmlNode(\"AccessControlList\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.Owner !== undefined && input.Owner !== null) {\n    const node = serializeAws_restXmlOwner(input.Owner, context).withName(\"Owner\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAccessControlTranslation = (\n  input: AccessControlTranslation,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"AccessControlTranslation\");\n  if (input.Owner !== undefined && input.Owner !== null) {\n    const node = new __XmlNode(\"OwnerOverride\").addChildNode(new __XmlText(input.Owner)).withName(\"Owner\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAllowedHeaders = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"AllowedHeader\").addChildNode(new __XmlText(entry));\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlAllowedMethods = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"AllowedMethod\").addChildNode(new __XmlText(entry));\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlAllowedOrigins = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"AllowedOrigin\").addChildNode(new __XmlText(entry));\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlAnalyticsAndOperator = (input: AnalyticsAndOperator, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"AnalyticsAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAnalyticsConfiguration = (input: AnalyticsConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"AnalyticsConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"AnalyticsId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlAnalyticsFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClassAnalysis !== undefined && input.StorageClassAnalysis !== null) {\n    const node = serializeAws_restXmlStorageClassAnalysis(input.StorageClassAnalysis, context).withName(\n      \"StorageClassAnalysis\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAnalyticsExportDestination = (\n  input: AnalyticsExportDestination,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"AnalyticsExportDestination\");\n  if (input.S3BucketDestination !== undefined && input.S3BucketDestination !== null) {\n    const node = serializeAws_restXmlAnalyticsS3BucketDestination(input.S3BucketDestination, context).withName(\n      \"S3BucketDestination\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAnalyticsFilter = (input: AnalyticsFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"AnalyticsFilter\");\n  AnalyticsFilter.visit(input, {\n    Prefix: (value) => {\n      const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: (value) => {\n      const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: (value) => {\n      const node = serializeAws_restXmlAnalyticsAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name: string, value: any) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    },\n  });\n  return bodyNode;\n};\n\nconst serializeAws_restXmlAnalyticsS3BucketDestination = (\n  input: AnalyticsS3BucketDestination,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"AnalyticsS3BucketDestination\");\n  if (input.Format !== undefined && input.Format !== null) {\n    const node = new __XmlNode(\"AnalyticsS3ExportFileFormat\")\n      .addChildNode(new __XmlText(input.Format))\n      .withName(\"Format\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BucketAccountId !== undefined && input.BucketAccountId !== null) {\n    const node = new __XmlNode(\"AccountId\")\n      .addChildNode(new __XmlText(input.BucketAccountId))\n      .withName(\"BucketAccountId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Bucket !== undefined && input.Bucket !== null) {\n    const node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.Bucket)).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlBucketLifecycleConfiguration = (\n  input: BucketLifecycleConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"BucketLifecycleConfiguration\");\n  if (input.Rules !== undefined && input.Rules !== null) {\n    const nodes = serializeAws_restXmlLifecycleRules(input.Rules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlBucketLoggingStatus = (input: BucketLoggingStatus, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"BucketLoggingStatus\");\n  if (input.LoggingEnabled !== undefined && input.LoggingEnabled !== null) {\n    const node = serializeAws_restXmlLoggingEnabled(input.LoggingEnabled, context).withName(\"LoggingEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCompletedMultipartUpload = (\n  input: CompletedMultipartUpload,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"CompletedMultipartUpload\");\n  if (input.Parts !== undefined && input.Parts !== null) {\n    const nodes = serializeAws_restXmlCompletedPartList(input.Parts, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Part\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCompletedPart = (input: CompletedPart, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"CompletedPart\");\n  if (input.ETag !== undefined && input.ETag !== null) {\n    const node = new __XmlNode(\"ETag\").addChildNode(new __XmlText(input.ETag)).withName(\"ETag\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.PartNumber !== undefined && input.PartNumber !== null) {\n    const node = new __XmlNode(\"PartNumber\")\n      .addChildNode(new __XmlText(String(input.PartNumber)))\n      .withName(\"PartNumber\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCompletedPartList = (input: CompletedPart[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlCompletedPart(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlCondition = (input: Condition, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Condition\");\n  if (input.HttpErrorCodeReturnedEquals !== undefined && input.HttpErrorCodeReturnedEquals !== null) {\n    const node = new __XmlNode(\"HttpErrorCodeReturnedEquals\")\n      .addChildNode(new __XmlText(input.HttpErrorCodeReturnedEquals))\n      .withName(\"HttpErrorCodeReturnedEquals\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KeyPrefixEquals !== undefined && input.KeyPrefixEquals !== null) {\n    const node = new __XmlNode(\"KeyPrefixEquals\")\n      .addChildNode(new __XmlText(input.KeyPrefixEquals))\n      .withName(\"KeyPrefixEquals\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCORSConfiguration = (input: CORSConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"CORSConfiguration\");\n  if (input.CORSRules !== undefined && input.CORSRules !== null) {\n    const nodes = serializeAws_restXmlCORSRules(input.CORSRules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"CORSRule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCORSRule = (input: CORSRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"CORSRule\");\n  if (input.AllowedHeaders !== undefined && input.AllowedHeaders !== null) {\n    const nodes = serializeAws_restXmlAllowedHeaders(input.AllowedHeaders, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"AllowedHeader\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.AllowedMethods !== undefined && input.AllowedMethods !== null) {\n    const nodes = serializeAws_restXmlAllowedMethods(input.AllowedMethods, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"AllowedMethod\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.AllowedOrigins !== undefined && input.AllowedOrigins !== null) {\n    const nodes = serializeAws_restXmlAllowedOrigins(input.AllowedOrigins, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"AllowedOrigin\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.ExposeHeaders !== undefined && input.ExposeHeaders !== null) {\n    const nodes = serializeAws_restXmlExposeHeaders(input.ExposeHeaders, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"ExposeHeader\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.MaxAgeSeconds !== undefined && input.MaxAgeSeconds !== null) {\n    const node = new __XmlNode(\"MaxAgeSeconds\")\n      .addChildNode(new __XmlText(String(input.MaxAgeSeconds)))\n      .withName(\"MaxAgeSeconds\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCORSRules = (input: CORSRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlCORSRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlCreateBucketConfiguration = (\n  input: CreateBucketConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"CreateBucketConfiguration\");\n  if (input.LocationConstraint !== undefined && input.LocationConstraint !== null) {\n    const node = new __XmlNode(\"BucketLocationConstraint\")\n      .addChildNode(new __XmlText(input.LocationConstraint))\n      .withName(\"LocationConstraint\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCSVInput = (input: CSVInput, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"CSVInput\");\n  if (input.FileHeaderInfo !== undefined && input.FileHeaderInfo !== null) {\n    const node = new __XmlNode(\"FileHeaderInfo\")\n      .addChildNode(new __XmlText(input.FileHeaderInfo))\n      .withName(\"FileHeaderInfo\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Comments !== undefined && input.Comments !== null) {\n    const node = new __XmlNode(\"Comments\").addChildNode(new __XmlText(input.Comments)).withName(\"Comments\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteEscapeCharacter !== undefined && input.QuoteEscapeCharacter !== null) {\n    const node = new __XmlNode(\"QuoteEscapeCharacter\")\n      .addChildNode(new __XmlText(input.QuoteEscapeCharacter))\n      .withName(\"QuoteEscapeCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n    const node = new __XmlNode(\"RecordDelimiter\")\n      .addChildNode(new __XmlText(input.RecordDelimiter))\n      .withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.FieldDelimiter !== undefined && input.FieldDelimiter !== null) {\n    const node = new __XmlNode(\"FieldDelimiter\")\n      .addChildNode(new __XmlText(input.FieldDelimiter))\n      .withName(\"FieldDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteCharacter !== undefined && input.QuoteCharacter !== null) {\n    const node = new __XmlNode(\"QuoteCharacter\")\n      .addChildNode(new __XmlText(input.QuoteCharacter))\n      .withName(\"QuoteCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AllowQuotedRecordDelimiter !== undefined && input.AllowQuotedRecordDelimiter !== null) {\n    const node = new __XmlNode(\"AllowQuotedRecordDelimiter\")\n      .addChildNode(new __XmlText(String(input.AllowQuotedRecordDelimiter)))\n      .withName(\"AllowQuotedRecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlCSVOutput = (input: CSVOutput, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"CSVOutput\");\n  if (input.QuoteFields !== undefined && input.QuoteFields !== null) {\n    const node = new __XmlNode(\"QuoteFields\").addChildNode(new __XmlText(input.QuoteFields)).withName(\"QuoteFields\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteEscapeCharacter !== undefined && input.QuoteEscapeCharacter !== null) {\n    const node = new __XmlNode(\"QuoteEscapeCharacter\")\n      .addChildNode(new __XmlText(input.QuoteEscapeCharacter))\n      .withName(\"QuoteEscapeCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n    const node = new __XmlNode(\"RecordDelimiter\")\n      .addChildNode(new __XmlText(input.RecordDelimiter))\n      .withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.FieldDelimiter !== undefined && input.FieldDelimiter !== null) {\n    const node = new __XmlNode(\"FieldDelimiter\")\n      .addChildNode(new __XmlText(input.FieldDelimiter))\n      .withName(\"FieldDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QuoteCharacter !== undefined && input.QuoteCharacter !== null) {\n    const node = new __XmlNode(\"QuoteCharacter\")\n      .addChildNode(new __XmlText(input.QuoteCharacter))\n      .withName(\"QuoteCharacter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlDefaultRetention = (input: DefaultRetention, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"DefaultRetention\");\n  if (input.Mode !== undefined && input.Mode !== null) {\n    const node = new __XmlNode(\"ObjectLockRetentionMode\").addChildNode(new __XmlText(input.Mode)).withName(\"Mode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days !== undefined && input.Days !== null) {\n    const node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Years !== undefined && input.Years !== null) {\n    const node = new __XmlNode(\"Years\").addChildNode(new __XmlText(String(input.Years))).withName(\"Years\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlDelete = (input: Delete, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Delete\");\n  if (input.Objects !== undefined && input.Objects !== null) {\n    const nodes = serializeAws_restXmlObjectIdentifierList(input.Objects, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Object\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Quiet !== undefined && input.Quiet !== null) {\n    const node = new __XmlNode(\"Quiet\").addChildNode(new __XmlText(String(input.Quiet))).withName(\"Quiet\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlDeleteMarkerReplication = (input: DeleteMarkerReplication, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"DeleteMarkerReplication\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"DeleteMarkerReplicationStatus\")\n      .addChildNode(new __XmlText(input.Status))\n      .withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlDestination = (input: Destination, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Destination\");\n  if (input.Bucket !== undefined && input.Bucket !== null) {\n    const node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.Bucket)).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Account !== undefined && input.Account !== null) {\n    const node = new __XmlNode(\"AccountId\").addChildNode(new __XmlText(input.Account)).withName(\"Account\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    const node = new __XmlNode(\"StorageClass\").addChildNode(new __XmlText(input.StorageClass)).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessControlTranslation !== undefined && input.AccessControlTranslation !== null) {\n    const node = serializeAws_restXmlAccessControlTranslation(input.AccessControlTranslation, context).withName(\n      \"AccessControlTranslation\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.EncryptionConfiguration !== undefined && input.EncryptionConfiguration !== null) {\n    const node = serializeAws_restXmlEncryptionConfiguration(input.EncryptionConfiguration, context).withName(\n      \"EncryptionConfiguration\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplicationTime !== undefined && input.ReplicationTime !== null) {\n    const node = serializeAws_restXmlReplicationTime(input.ReplicationTime, context).withName(\"ReplicationTime\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Metrics !== undefined && input.Metrics !== null) {\n    const node = serializeAws_restXmlMetrics(input.Metrics, context).withName(\"Metrics\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlEncryption = (input: Encryption, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Encryption\");\n  if (input.EncryptionType !== undefined && input.EncryptionType !== null) {\n    const node = new __XmlNode(\"ServerSideEncryption\")\n      .addChildNode(new __XmlText(input.EncryptionType))\n      .withName(\"EncryptionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSKeyId !== undefined && input.KMSKeyId !== null) {\n    const node = new __XmlNode(\"SSEKMSKeyId\").addChildNode(new __XmlText(input.KMSKeyId)).withName(\"KMSKeyId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSContext !== undefined && input.KMSContext !== null) {\n    const node = new __XmlNode(\"KMSContext\").addChildNode(new __XmlText(input.KMSContext)).withName(\"KMSContext\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlEncryptionConfiguration = (input: EncryptionConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"EncryptionConfiguration\");\n  if (input.ReplicaKmsKeyID !== undefined && input.ReplicaKmsKeyID !== null) {\n    const node = new __XmlNode(\"ReplicaKmsKeyID\")\n      .addChildNode(new __XmlText(input.ReplicaKmsKeyID))\n      .withName(\"ReplicaKmsKeyID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlErrorDocument = (input: ErrorDocument, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ErrorDocument\");\n  if (input.Key !== undefined && input.Key !== null) {\n    const node = new __XmlNode(\"ObjectKey\").addChildNode(new __XmlText(input.Key)).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlEventList = (input: (Event | string)[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"Event\").addChildNode(new __XmlText(entry));\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlExistingObjectReplication = (\n  input: ExistingObjectReplication,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ExistingObjectReplication\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ExistingObjectReplicationStatus\")\n      .addChildNode(new __XmlText(input.Status))\n      .withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlExposeHeaders = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"ExposeHeader\").addChildNode(new __XmlText(entry));\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlFilterRule = (input: FilterRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"FilterRule\");\n  if (input.Name !== undefined && input.Name !== null) {\n    const node = new __XmlNode(\"FilterRuleName\").addChildNode(new __XmlText(input.Name)).withName(\"Name\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value !== undefined && input.Value !== null) {\n    const node = new __XmlNode(\"FilterRuleValue\").addChildNode(new __XmlText(input.Value)).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlFilterRuleList = (input: FilterRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlFilterRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlGlacierJobParameters = (input: GlacierJobParameters, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"GlacierJobParameters\");\n  if (input.Tier !== undefined && input.Tier !== null) {\n    const node = new __XmlNode(\"Tier\").addChildNode(new __XmlText(input.Tier)).withName(\"Tier\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlGrant = (input: Grant, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Grant\");\n  if (input.Grantee !== undefined && input.Grantee !== null) {\n    const node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Permission !== undefined && input.Permission !== null) {\n    const node = new __XmlNode(\"Permission\").addChildNode(new __XmlText(input.Permission)).withName(\"Permission\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlGrantee = (input: Grantee, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Grantee\");\n  if (input.DisplayName !== undefined && input.DisplayName !== null) {\n    const node = new __XmlNode(\"DisplayName\").addChildNode(new __XmlText(input.DisplayName)).withName(\"DisplayName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.EmailAddress !== undefined && input.EmailAddress !== null) {\n    const node = new __XmlNode(\"EmailAddress\").addChildNode(new __XmlText(input.EmailAddress)).withName(\"EmailAddress\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID !== undefined && input.ID !== null) {\n    const node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.URI !== undefined && input.URI !== null) {\n    const node = new __XmlNode(\"URI\").addChildNode(new __XmlText(input.URI)).withName(\"URI\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Type !== undefined && input.Type !== null) {\n    bodyNode.addAttribute(\"xsi:type\", input.Type);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlGrants = (input: Grant[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlGrant(entry, context);\n      return node.withName(\"Grant\");\n    });\n};\n\nconst serializeAws_restXmlIndexDocument = (input: IndexDocument, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"IndexDocument\");\n  if (input.Suffix !== undefined && input.Suffix !== null) {\n    const node = new __XmlNode(\"Suffix\").addChildNode(new __XmlText(input.Suffix)).withName(\"Suffix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInputSerialization = (input: InputSerialization, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InputSerialization\");\n  if (input.CSV !== undefined && input.CSV !== null) {\n    const node = serializeAws_restXmlCSVInput(input.CSV, context).withName(\"CSV\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.CompressionType !== undefined && input.CompressionType !== null) {\n    const node = new __XmlNode(\"CompressionType\")\n      .addChildNode(new __XmlText(input.CompressionType))\n      .withName(\"CompressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.JSON !== undefined && input.JSON !== null) {\n    const node = serializeAws_restXmlJSONInput(input.JSON, context).withName(\"JSON\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Parquet !== undefined && input.Parquet !== null) {\n    const node = serializeAws_restXmlParquetInput(input.Parquet, context).withName(\"Parquet\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlIntelligentTieringAndOperator = (\n  input: IntelligentTieringAndOperator,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"IntelligentTieringAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlIntelligentTieringConfiguration = (\n  input: IntelligentTieringConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"IntelligentTieringConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"IntelligentTieringId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlIntelligentTieringFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"IntelligentTieringStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tierings !== undefined && input.Tierings !== null) {\n    const nodes = serializeAws_restXmlTieringList(input.Tierings, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tiering\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlIntelligentTieringFilter = (\n  input: IntelligentTieringFilter,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"IntelligentTieringFilter\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tag !== undefined && input.Tag !== null) {\n    const node = serializeAws_restXmlTag(input.Tag, context).withName(\"Tag\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.And !== undefined && input.And !== null) {\n    const node = serializeAws_restXmlIntelligentTieringAndOperator(input.And, context).withName(\"And\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventoryConfiguration = (input: InventoryConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InventoryConfiguration\");\n  if (input.Destination !== undefined && input.Destination !== null) {\n    const node = serializeAws_restXmlInventoryDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IsEnabled !== undefined && input.IsEnabled !== null) {\n    const node = new __XmlNode(\"IsEnabled\").addChildNode(new __XmlText(String(input.IsEnabled))).withName(\"IsEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlInventoryFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"InventoryId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IncludedObjectVersions !== undefined && input.IncludedObjectVersions !== null) {\n    const node = new __XmlNode(\"InventoryIncludedObjectVersions\")\n      .addChildNode(new __XmlText(input.IncludedObjectVersions))\n      .withName(\"IncludedObjectVersions\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OptionalFields !== undefined && input.OptionalFields !== null) {\n    const nodes = serializeAws_restXmlInventoryOptionalFields(input.OptionalFields, context);\n    const containerNode = new __XmlNode(\"OptionalFields\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.Schedule !== undefined && input.Schedule !== null) {\n    const node = serializeAws_restXmlInventorySchedule(input.Schedule, context).withName(\"Schedule\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventoryDestination = (input: InventoryDestination, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InventoryDestination\");\n  if (input.S3BucketDestination !== undefined && input.S3BucketDestination !== null) {\n    const node = serializeAws_restXmlInventoryS3BucketDestination(input.S3BucketDestination, context).withName(\n      \"S3BucketDestination\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventoryEncryption = (input: InventoryEncryption, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InventoryEncryption\");\n  if (input.SSES3 !== undefined && input.SSES3 !== null) {\n    const node = serializeAws_restXmlSSES3(input.SSES3, context).withName(\"SSE-S3\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SSEKMS !== undefined && input.SSEKMS !== null) {\n    const node = serializeAws_restXmlSSEKMS(input.SSEKMS, context).withName(\"SSE-KMS\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventoryFilter = (input: InventoryFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InventoryFilter\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventoryOptionalFields = (\n  input: (InventoryOptionalField | string)[],\n  context: __SerdeContext\n): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = new __XmlNode(\"InventoryOptionalField\").addChildNode(new __XmlText(entry));\n      return node.withName(\"Field\");\n    });\n};\n\nconst serializeAws_restXmlInventoryS3BucketDestination = (\n  input: InventoryS3BucketDestination,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"InventoryS3BucketDestination\");\n  if (input.AccountId !== undefined && input.AccountId !== null) {\n    const node = new __XmlNode(\"AccountId\").addChildNode(new __XmlText(input.AccountId)).withName(\"AccountId\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Bucket !== undefined && input.Bucket !== null) {\n    const node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.Bucket)).withName(\"Bucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Format !== undefined && input.Format !== null) {\n    const node = new __XmlNode(\"InventoryFormat\").addChildNode(new __XmlText(input.Format)).withName(\"Format\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Encryption !== undefined && input.Encryption !== null) {\n    const node = serializeAws_restXmlInventoryEncryption(input.Encryption, context).withName(\"Encryption\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlInventorySchedule = (input: InventorySchedule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"InventorySchedule\");\n  if (input.Frequency !== undefined && input.Frequency !== null) {\n    const node = new __XmlNode(\"InventoryFrequency\").addChildNode(new __XmlText(input.Frequency)).withName(\"Frequency\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlJSONInput = (input: JSONInput, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"JSONInput\");\n  if (input.Type !== undefined && input.Type !== null) {\n    const node = new __XmlNode(\"JSONType\").addChildNode(new __XmlText(input.Type)).withName(\"Type\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlJSONOutput = (input: JSONOutput, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"JSONOutput\");\n  if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n    const node = new __XmlNode(\"RecordDelimiter\")\n      .addChildNode(new __XmlText(input.RecordDelimiter))\n      .withName(\"RecordDelimiter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLambdaFunctionConfiguration = (\n  input: LambdaFunctionConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"LambdaFunctionConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"NotificationId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.LambdaFunctionArn !== undefined && input.LambdaFunctionArn !== null) {\n    const node = new __XmlNode(\"LambdaFunctionArn\")\n      .addChildNode(new __XmlText(input.LambdaFunctionArn))\n      .withName(\"CloudFunction\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events !== undefined && input.Events !== null) {\n    const nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLambdaFunctionConfigurationList = (\n  input: LambdaFunctionConfiguration[],\n  context: __SerdeContext\n): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlLifecycleExpiration = (input: LifecycleExpiration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"LifecycleExpiration\");\n  if (input.Date !== undefined && input.Date !== null) {\n    const node = new __XmlNode(\"Date\")\n      .addChildNode(new __XmlText(input.Date.toISOString().split(\".\")[0] + \"Z\"))\n      .withName(\"Date\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days !== undefined && input.Days !== null) {\n    const node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpiredObjectDeleteMarker !== undefined && input.ExpiredObjectDeleteMarker !== null) {\n    const node = new __XmlNode(\"ExpiredObjectDeleteMarker\")\n      .addChildNode(new __XmlText(String(input.ExpiredObjectDeleteMarker)))\n      .withName(\"ExpiredObjectDeleteMarker\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLifecycleRule = (input: LifecycleRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"LifecycleRule\");\n  if (input.Expiration !== undefined && input.Expiration !== null) {\n    const node = serializeAws_restXmlLifecycleExpiration(input.Expiration, context).withName(\"Expiration\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID !== undefined && input.ID !== null) {\n    const node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlLifecycleRuleFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ExpirationStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Transitions !== undefined && input.Transitions !== null) {\n    const nodes = serializeAws_restXmlTransitionList(input.Transitions, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Transition\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.NoncurrentVersionTransitions !== undefined && input.NoncurrentVersionTransitions !== null) {\n    const nodes = serializeAws_restXmlNoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"NoncurrentVersionTransition\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.NoncurrentVersionExpiration !== undefined && input.NoncurrentVersionExpiration !== null) {\n    const node = serializeAws_restXmlNoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName(\n      \"NoncurrentVersionExpiration\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.AbortIncompleteMultipartUpload !== undefined && input.AbortIncompleteMultipartUpload !== null) {\n    const node = serializeAws_restXmlAbortIncompleteMultipartUpload(\n      input.AbortIncompleteMultipartUpload,\n      context\n    ).withName(\"AbortIncompleteMultipartUpload\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLifecycleRuleAndOperator = (\n  input: LifecycleRuleAndOperator,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"LifecycleRuleAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLifecycleRuleFilter = (input: LifecycleRuleFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"LifecycleRuleFilter\");\n  LifecycleRuleFilter.visit(input, {\n    Prefix: (value) => {\n      const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: (value) => {\n      const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: (value) => {\n      const node = serializeAws_restXmlLifecycleRuleAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name: string, value: any) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    },\n  });\n  return bodyNode;\n};\n\nconst serializeAws_restXmlLifecycleRules = (input: LifecycleRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlLifecycleRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlLoggingEnabled = (input: LoggingEnabled, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"LoggingEnabled\");\n  if (input.TargetBucket !== undefined && input.TargetBucket !== null) {\n    const node = new __XmlNode(\"TargetBucket\").addChildNode(new __XmlText(input.TargetBucket)).withName(\"TargetBucket\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.TargetGrants !== undefined && input.TargetGrants !== null) {\n    const nodes = serializeAws_restXmlTargetGrants(input.TargetGrants, context);\n    const containerNode = new __XmlNode(\"TargetGrants\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.TargetPrefix !== undefined && input.TargetPrefix !== null) {\n    const node = new __XmlNode(\"TargetPrefix\").addChildNode(new __XmlText(input.TargetPrefix)).withName(\"TargetPrefix\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlMetadataEntry = (input: MetadataEntry, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"MetadataEntry\");\n  if (input.Name !== undefined && input.Name !== null) {\n    const node = new __XmlNode(\"MetadataKey\").addChildNode(new __XmlText(input.Name)).withName(\"Name\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value !== undefined && input.Value !== null) {\n    const node = new __XmlNode(\"MetadataValue\").addChildNode(new __XmlText(input.Value)).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlMetrics = (input: Metrics, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Metrics\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"MetricsStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.EventThreshold !== undefined && input.EventThreshold !== null) {\n    const node = serializeAws_restXmlReplicationTimeValue(input.EventThreshold, context).withName(\"EventThreshold\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlMetricsAndOperator = (input: MetricsAndOperator, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"MetricsAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlMetricsConfiguration = (input: MetricsConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"MetricsConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"MetricsId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlMetricsFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlMetricsFilter = (input: MetricsFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"MetricsFilter\");\n  MetricsFilter.visit(input, {\n    Prefix: (value) => {\n      const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: (value) => {\n      const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: (value) => {\n      const node = serializeAws_restXmlMetricsAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name: string, value: any) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    },\n  });\n  return bodyNode;\n};\n\nconst serializeAws_restXmlNoncurrentVersionExpiration = (\n  input: NoncurrentVersionExpiration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"NoncurrentVersionExpiration\");\n  if (input.NoncurrentDays !== undefined && input.NoncurrentDays !== null) {\n    const node = new __XmlNode(\"Days\")\n      .addChildNode(new __XmlText(String(input.NoncurrentDays)))\n      .withName(\"NoncurrentDays\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlNoncurrentVersionTransition = (\n  input: NoncurrentVersionTransition,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"NoncurrentVersionTransition\");\n  if (input.NoncurrentDays !== undefined && input.NoncurrentDays !== null) {\n    const node = new __XmlNode(\"Days\")\n      .addChildNode(new __XmlText(String(input.NoncurrentDays)))\n      .withName(\"NoncurrentDays\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    const node = new __XmlNode(\"TransitionStorageClass\")\n      .addChildNode(new __XmlText(input.StorageClass))\n      .withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlNoncurrentVersionTransitionList = (\n  input: NoncurrentVersionTransition[],\n  context: __SerdeContext\n): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlNoncurrentVersionTransition(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlNotificationConfiguration = (\n  input: NotificationConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"NotificationConfiguration\");\n  if (input.TopicConfigurations !== undefined && input.TopicConfigurations !== null) {\n    const nodes = serializeAws_restXmlTopicConfigurationList(input.TopicConfigurations, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"TopicConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.QueueConfigurations !== undefined && input.QueueConfigurations !== null) {\n    const nodes = serializeAws_restXmlQueueConfigurationList(input.QueueConfigurations, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"QueueConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.LambdaFunctionConfigurations !== undefined && input.LambdaFunctionConfigurations !== null) {\n    const nodes = serializeAws_restXmlLambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"CloudFunctionConfiguration\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlNotificationConfigurationFilter = (\n  input: NotificationConfigurationFilter,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"NotificationConfigurationFilter\");\n  if (input.Key !== undefined && input.Key !== null) {\n    const node = serializeAws_restXmlS3KeyFilter(input.Key, context).withName(\"S3Key\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlObjectIdentifier = (input: ObjectIdentifier, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ObjectIdentifier\");\n  if (input.Key !== undefined && input.Key !== null) {\n    const node = new __XmlNode(\"ObjectKey\").addChildNode(new __XmlText(input.Key)).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.VersionId !== undefined && input.VersionId !== null) {\n    const node = new __XmlNode(\"ObjectVersionId\").addChildNode(new __XmlText(input.VersionId)).withName(\"VersionId\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlObjectIdentifierList = (input: ObjectIdentifier[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlObjectIdentifier(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlObjectLockConfiguration = (input: ObjectLockConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ObjectLockConfiguration\");\n  if (input.ObjectLockEnabled !== undefined && input.ObjectLockEnabled !== null) {\n    const node = new __XmlNode(\"ObjectLockEnabled\")\n      .addChildNode(new __XmlText(input.ObjectLockEnabled))\n      .withName(\"ObjectLockEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Rule !== undefined && input.Rule !== null) {\n    const node = serializeAws_restXmlObjectLockRule(input.Rule, context).withName(\"Rule\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlObjectLockLegalHold = (input: ObjectLockLegalHold, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ObjectLockLegalHold\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ObjectLockLegalHoldStatus\")\n      .addChildNode(new __XmlText(input.Status))\n      .withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlObjectLockRetention = (input: ObjectLockRetention, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ObjectLockRetention\");\n  if (input.Mode !== undefined && input.Mode !== null) {\n    const node = new __XmlNode(\"ObjectLockRetentionMode\").addChildNode(new __XmlText(input.Mode)).withName(\"Mode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RetainUntilDate !== undefined && input.RetainUntilDate !== null) {\n    const node = new __XmlNode(\"Date\")\n      .addChildNode(new __XmlText(input.RetainUntilDate.toISOString().split(\".\")[0] + \"Z\"))\n      .withName(\"RetainUntilDate\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlObjectLockRule = (input: ObjectLockRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ObjectLockRule\");\n  if (input.DefaultRetention !== undefined && input.DefaultRetention !== null) {\n    const node = serializeAws_restXmlDefaultRetention(input.DefaultRetention, context).withName(\"DefaultRetention\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOutputLocation = (input: OutputLocation, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"OutputLocation\");\n  if (input.S3 !== undefined && input.S3 !== null) {\n    const node = serializeAws_restXmlS3Location(input.S3, context).withName(\"S3\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOutputSerialization = (input: OutputSerialization, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"OutputSerialization\");\n  if (input.CSV !== undefined && input.CSV !== null) {\n    const node = serializeAws_restXmlCSVOutput(input.CSV, context).withName(\"CSV\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.JSON !== undefined && input.JSON !== null) {\n    const node = serializeAws_restXmlJSONOutput(input.JSON, context).withName(\"JSON\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOwner = (input: Owner, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Owner\");\n  if (input.DisplayName !== undefined && input.DisplayName !== null) {\n    const node = new __XmlNode(\"DisplayName\").addChildNode(new __XmlText(input.DisplayName)).withName(\"DisplayName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ID !== undefined && input.ID !== null) {\n    const node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOwnershipControls = (input: OwnershipControls, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"OwnershipControls\");\n  if (input.Rules !== undefined && input.Rules !== null) {\n    const nodes = serializeAws_restXmlOwnershipControlsRules(input.Rules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOwnershipControlsRule = (input: OwnershipControlsRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"OwnershipControlsRule\");\n  if (input.ObjectOwnership !== undefined && input.ObjectOwnership !== null) {\n    const node = new __XmlNode(\"ObjectOwnership\")\n      .addChildNode(new __XmlText(input.ObjectOwnership))\n      .withName(\"ObjectOwnership\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlOwnershipControlsRules = (input: OwnershipControlsRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlOwnershipControlsRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlParquetInput = (input: ParquetInput, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ParquetInput\");\n  return bodyNode;\n};\n\nconst serializeAws_restXmlPublicAccessBlockConfiguration = (\n  input: PublicAccessBlockConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"PublicAccessBlockConfiguration\");\n  if (input.BlockPublicAcls !== undefined && input.BlockPublicAcls !== null) {\n    const node = new __XmlNode(\"Setting\")\n      .addChildNode(new __XmlText(String(input.BlockPublicAcls)))\n      .withName(\"BlockPublicAcls\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IgnorePublicAcls !== undefined && input.IgnorePublicAcls !== null) {\n    const node = new __XmlNode(\"Setting\")\n      .addChildNode(new __XmlText(String(input.IgnorePublicAcls)))\n      .withName(\"IgnorePublicAcls\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BlockPublicPolicy !== undefined && input.BlockPublicPolicy !== null) {\n    const node = new __XmlNode(\"Setting\")\n      .addChildNode(new __XmlText(String(input.BlockPublicPolicy)))\n      .withName(\"BlockPublicPolicy\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RestrictPublicBuckets !== undefined && input.RestrictPublicBuckets !== null) {\n    const node = new __XmlNode(\"Setting\")\n      .addChildNode(new __XmlText(String(input.RestrictPublicBuckets)))\n      .withName(\"RestrictPublicBuckets\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlQueueConfiguration = (input: QueueConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"QueueConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"NotificationId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.QueueArn !== undefined && input.QueueArn !== null) {\n    const node = new __XmlNode(\"QueueArn\").addChildNode(new __XmlText(input.QueueArn)).withName(\"Queue\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events !== undefined && input.Events !== null) {\n    const nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlQueueConfigurationList = (input: QueueConfiguration[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlQueueConfiguration(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlRedirect = (input: Redirect, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Redirect\");\n  if (input.HostName !== undefined && input.HostName !== null) {\n    const node = new __XmlNode(\"HostName\").addChildNode(new __XmlText(input.HostName)).withName(\"HostName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.HttpRedirectCode !== undefined && input.HttpRedirectCode !== null) {\n    const node = new __XmlNode(\"HttpRedirectCode\")\n      .addChildNode(new __XmlText(input.HttpRedirectCode))\n      .withName(\"HttpRedirectCode\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Protocol !== undefined && input.Protocol !== null) {\n    const node = new __XmlNode(\"Protocol\").addChildNode(new __XmlText(input.Protocol)).withName(\"Protocol\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplaceKeyPrefixWith !== undefined && input.ReplaceKeyPrefixWith !== null) {\n    const node = new __XmlNode(\"ReplaceKeyPrefixWith\")\n      .addChildNode(new __XmlText(input.ReplaceKeyPrefixWith))\n      .withName(\"ReplaceKeyPrefixWith\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplaceKeyWith !== undefined && input.ReplaceKeyWith !== null) {\n    const node = new __XmlNode(\"ReplaceKeyWith\")\n      .addChildNode(new __XmlText(input.ReplaceKeyWith))\n      .withName(\"ReplaceKeyWith\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRedirectAllRequestsTo = (input: RedirectAllRequestsTo, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"RedirectAllRequestsTo\");\n  if (input.HostName !== undefined && input.HostName !== null) {\n    const node = new __XmlNode(\"HostName\").addChildNode(new __XmlText(input.HostName)).withName(\"HostName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Protocol !== undefined && input.Protocol !== null) {\n    const node = new __XmlNode(\"Protocol\").addChildNode(new __XmlText(input.Protocol)).withName(\"Protocol\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicaModifications = (input: ReplicaModifications, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ReplicaModifications\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ReplicaModificationsStatus\")\n      .addChildNode(new __XmlText(input.Status))\n      .withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationConfiguration = (\n  input: ReplicationConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ReplicationConfiguration\");\n  if (input.Role !== undefined && input.Role !== null) {\n    const node = new __XmlNode(\"Role\").addChildNode(new __XmlText(input.Role)).withName(\"Role\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Rules !== undefined && input.Rules !== null) {\n    const nodes = serializeAws_restXmlReplicationRules(input.Rules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationRule = (input: ReplicationRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ReplicationRule\");\n  if (input.ID !== undefined && input.ID !== null) {\n    const node = new __XmlNode(\"ID\").addChildNode(new __XmlText(input.ID)).withName(\"ID\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Priority !== undefined && input.Priority !== null) {\n    const node = new __XmlNode(\"Priority\").addChildNode(new __XmlText(String(input.Priority))).withName(\"Priority\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlReplicationRuleFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ReplicationRuleStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SourceSelectionCriteria !== undefined && input.SourceSelectionCriteria !== null) {\n    const node = serializeAws_restXmlSourceSelectionCriteria(input.SourceSelectionCriteria, context).withName(\n      \"SourceSelectionCriteria\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExistingObjectReplication !== undefined && input.ExistingObjectReplication !== null) {\n    const node = serializeAws_restXmlExistingObjectReplication(input.ExistingObjectReplication, context).withName(\n      \"ExistingObjectReplication\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.Destination !== undefined && input.Destination !== null) {\n    const node = serializeAws_restXmlDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.DeleteMarkerReplication !== undefined && input.DeleteMarkerReplication !== null) {\n    const node = serializeAws_restXmlDeleteMarkerReplication(input.DeleteMarkerReplication, context).withName(\n      \"DeleteMarkerReplication\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationRuleAndOperator = (\n  input: ReplicationRuleAndOperator,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ReplicationRuleAndOperator\");\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tags !== undefined && input.Tags !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationRuleFilter = (input: ReplicationRuleFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ReplicationRuleFilter\");\n  ReplicationRuleFilter.visit(input, {\n    Prefix: (value) => {\n      const node = new __XmlNode(\"Prefix\").addChildNode(new __XmlText(value)).withName(\"Prefix\");\n      bodyNode.addChildNode(node);\n    },\n    Tag: (value) => {\n      const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n      bodyNode.addChildNode(node);\n    },\n    And: (value) => {\n      const node = serializeAws_restXmlReplicationRuleAndOperator(value, context).withName(\"And\");\n      bodyNode.addChildNode(node);\n    },\n    _: (name: string, value: any) => {\n      if (!(value instanceof __XmlNode || value instanceof __XmlText)) {\n        throw new Error(\"Unable to serialize unknown union members in XML.\");\n      }\n      bodyNode.addChildNode(new __XmlNode(name).addChildNode(value));\n    },\n  });\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationRules = (input: ReplicationRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlReplicationRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlReplicationTime = (input: ReplicationTime, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ReplicationTime\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"ReplicationTimeStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Time !== undefined && input.Time !== null) {\n    const node = serializeAws_restXmlReplicationTimeValue(input.Time, context).withName(\"Time\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlReplicationTimeValue = (input: ReplicationTimeValue, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ReplicationTimeValue\");\n  if (input.Minutes !== undefined && input.Minutes !== null) {\n    const node = new __XmlNode(\"Minutes\").addChildNode(new __XmlText(String(input.Minutes))).withName(\"Minutes\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRequestPaymentConfiguration = (\n  input: RequestPaymentConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"RequestPaymentConfiguration\");\n  if (input.Payer !== undefined && input.Payer !== null) {\n    const node = new __XmlNode(\"Payer\").addChildNode(new __XmlText(input.Payer)).withName(\"Payer\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRequestProgress = (input: RequestProgress, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"RequestProgress\");\n  if (input.Enabled !== undefined && input.Enabled !== null) {\n    const node = new __XmlNode(\"EnableRequestProgress\")\n      .addChildNode(new __XmlText(String(input.Enabled)))\n      .withName(\"Enabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRestoreRequest = (input: RestoreRequest, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"RestoreRequest\");\n  if (input.Days !== undefined && input.Days !== null) {\n    const node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.GlacierJobParameters !== undefined && input.GlacierJobParameters !== null) {\n    const node = serializeAws_restXmlGlacierJobParameters(input.GlacierJobParameters, context).withName(\n      \"GlacierJobParameters\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.Type !== undefined && input.Type !== null) {\n    const node = new __XmlNode(\"RestoreRequestType\").addChildNode(new __XmlText(input.Type)).withName(\"Type\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Tier !== undefined && input.Tier !== null) {\n    const node = new __XmlNode(\"Tier\").addChildNode(new __XmlText(input.Tier)).withName(\"Tier\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Description !== undefined && input.Description !== null) {\n    const node = new __XmlNode(\"Description\").addChildNode(new __XmlText(input.Description)).withName(\"Description\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.SelectParameters !== undefined && input.SelectParameters !== null) {\n    const node = serializeAws_restXmlSelectParameters(input.SelectParameters, context).withName(\"SelectParameters\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputLocation !== undefined && input.OutputLocation !== null) {\n    const node = serializeAws_restXmlOutputLocation(input.OutputLocation, context).withName(\"OutputLocation\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRoutingRule = (input: RoutingRule, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"RoutingRule\");\n  if (input.Condition !== undefined && input.Condition !== null) {\n    const node = serializeAws_restXmlCondition(input.Condition, context).withName(\"Condition\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Redirect !== undefined && input.Redirect !== null) {\n    const node = serializeAws_restXmlRedirect(input.Redirect, context).withName(\"Redirect\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlRoutingRules = (input: RoutingRule[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlRoutingRule(entry, context);\n      return node.withName(\"RoutingRule\");\n    });\n};\n\nconst serializeAws_restXmlS3KeyFilter = (input: S3KeyFilter, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"S3KeyFilter\");\n  if (input.FilterRules !== undefined && input.FilterRules !== null) {\n    const nodes = serializeAws_restXmlFilterRuleList(input.FilterRules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"FilterRule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlS3Location = (input: S3Location, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"S3Location\");\n  if (input.BucketName !== undefined && input.BucketName !== null) {\n    const node = new __XmlNode(\"BucketName\").addChildNode(new __XmlText(input.BucketName)).withName(\"BucketName\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Prefix !== undefined && input.Prefix !== null) {\n    const node = new __XmlNode(\"LocationPrefix\").addChildNode(new __XmlText(input.Prefix)).withName(\"Prefix\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Encryption !== undefined && input.Encryption !== null) {\n    const node = serializeAws_restXmlEncryption(input.Encryption, context).withName(\"Encryption\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.CannedACL !== undefined && input.CannedACL !== null) {\n    const node = new __XmlNode(\"ObjectCannedACL\").addChildNode(new __XmlText(input.CannedACL)).withName(\"CannedACL\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessControlList !== undefined && input.AccessControlList !== null) {\n    const nodes = serializeAws_restXmlGrants(input.AccessControlList, context);\n    const containerNode = new __XmlNode(\"AccessControlList\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.Tagging !== undefined && input.Tagging !== null) {\n    const node = serializeAws_restXmlTagging(input.Tagging, context).withName(\"Tagging\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.UserMetadata !== undefined && input.UserMetadata !== null) {\n    const nodes = serializeAws_restXmlUserMetadata(input.UserMetadata, context);\n    const containerNode = new __XmlNode(\"UserMetadata\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    const node = new __XmlNode(\"StorageClass\").addChildNode(new __XmlText(input.StorageClass)).withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlScanRange = (input: ScanRange, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"ScanRange\");\n  if (input.Start !== undefined && input.Start !== null) {\n    const node = new __XmlNode(\"Start\").addChildNode(new __XmlText(String(input.Start))).withName(\"Start\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.End !== undefined && input.End !== null) {\n    const node = new __XmlNode(\"End\").addChildNode(new __XmlText(String(input.End))).withName(\"End\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlSelectParameters = (input: SelectParameters, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"SelectParameters\");\n  if (input.InputSerialization !== undefined && input.InputSerialization !== null) {\n    const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\n      \"InputSerialization\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.ExpressionType !== undefined && input.ExpressionType !== null) {\n    const node = new __XmlNode(\"ExpressionType\")\n      .addChildNode(new __XmlText(input.ExpressionType))\n      .withName(\"ExpressionType\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Expression !== undefined && input.Expression !== null) {\n    const node = new __XmlNode(\"Expression\").addChildNode(new __XmlText(input.Expression)).withName(\"Expression\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.OutputSerialization !== undefined && input.OutputSerialization !== null) {\n    const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\n      \"OutputSerialization\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlServerSideEncryptionByDefault = (\n  input: ServerSideEncryptionByDefault,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ServerSideEncryptionByDefault\");\n  if (input.SSEAlgorithm !== undefined && input.SSEAlgorithm !== null) {\n    const node = new __XmlNode(\"ServerSideEncryption\")\n      .addChildNode(new __XmlText(input.SSEAlgorithm))\n      .withName(\"SSEAlgorithm\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.KMSMasterKeyID !== undefined && input.KMSMasterKeyID !== null) {\n    const node = new __XmlNode(\"SSEKMSKeyId\")\n      .addChildNode(new __XmlText(input.KMSMasterKeyID))\n      .withName(\"KMSMasterKeyID\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlServerSideEncryptionConfiguration = (\n  input: ServerSideEncryptionConfiguration,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ServerSideEncryptionConfiguration\");\n  if (input.Rules !== undefined && input.Rules !== null) {\n    const nodes = serializeAws_restXmlServerSideEncryptionRules(input.Rules, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Rule\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlServerSideEncryptionRule = (\n  input: ServerSideEncryptionRule,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"ServerSideEncryptionRule\");\n  if (input.ApplyServerSideEncryptionByDefault !== undefined && input.ApplyServerSideEncryptionByDefault !== null) {\n    const node = serializeAws_restXmlServerSideEncryptionByDefault(\n      input.ApplyServerSideEncryptionByDefault,\n      context\n    ).withName(\"ApplyServerSideEncryptionByDefault\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.BucketKeyEnabled !== undefined && input.BucketKeyEnabled !== null) {\n    const node = new __XmlNode(\"BucketKeyEnabled\")\n      .addChildNode(new __XmlText(String(input.BucketKeyEnabled)))\n      .withName(\"BucketKeyEnabled\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlServerSideEncryptionRules = (\n  input: ServerSideEncryptionRule[],\n  context: __SerdeContext\n): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlServerSideEncryptionRule(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlSourceSelectionCriteria = (input: SourceSelectionCriteria, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"SourceSelectionCriteria\");\n  if (input.SseKmsEncryptedObjects !== undefined && input.SseKmsEncryptedObjects !== null) {\n    const node = serializeAws_restXmlSseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName(\n      \"SseKmsEncryptedObjects\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.ReplicaModifications !== undefined && input.ReplicaModifications !== null) {\n    const node = serializeAws_restXmlReplicaModifications(input.ReplicaModifications, context).withName(\n      \"ReplicaModifications\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlSSEKMS = (input: SSEKMS, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"SSE-KMS\");\n  if (input.KeyId !== undefined && input.KeyId !== null) {\n    const node = new __XmlNode(\"SSEKMSKeyId\").addChildNode(new __XmlText(input.KeyId)).withName(\"KeyId\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlSseKmsEncryptedObjects = (input: SseKmsEncryptedObjects, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"SseKmsEncryptedObjects\");\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"SseKmsEncryptedObjectsStatus\")\n      .addChildNode(new __XmlText(input.Status))\n      .withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlSSES3 = (input: SSES3, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"SSE-S3\");\n  return bodyNode;\n};\n\nconst serializeAws_restXmlStorageClassAnalysis = (input: StorageClassAnalysis, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"StorageClassAnalysis\");\n  if (input.DataExport !== undefined && input.DataExport !== null) {\n    const node = serializeAws_restXmlStorageClassAnalysisDataExport(input.DataExport, context).withName(\"DataExport\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlStorageClassAnalysisDataExport = (\n  input: StorageClassAnalysisDataExport,\n  context: __SerdeContext\n): any => {\n  const bodyNode = new __XmlNode(\"StorageClassAnalysisDataExport\");\n  if (input.OutputSchemaVersion !== undefined && input.OutputSchemaVersion !== null) {\n    const node = new __XmlNode(\"StorageClassAnalysisSchemaVersion\")\n      .addChildNode(new __XmlText(input.OutputSchemaVersion))\n      .withName(\"OutputSchemaVersion\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Destination !== undefined && input.Destination !== null) {\n    const node = serializeAws_restXmlAnalyticsExportDestination(input.Destination, context).withName(\"Destination\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTag = (input: Tag, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Tag\");\n  if (input.Key !== undefined && input.Key !== null) {\n    const node = new __XmlNode(\"ObjectKey\").addChildNode(new __XmlText(input.Key)).withName(\"Key\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Value !== undefined && input.Value !== null) {\n    const node = new __XmlNode(\"Value\").addChildNode(new __XmlText(input.Value)).withName(\"Value\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTagging = (input: Tagging, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Tagging\");\n  if (input.TagSet !== undefined && input.TagSet !== null) {\n    const nodes = serializeAws_restXmlTagSet(input.TagSet, context);\n    const containerNode = new __XmlNode(\"TagSet\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTagSet = (input: Tag[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlTag(entry, context);\n      return node.withName(\"Tag\");\n    });\n};\n\nconst serializeAws_restXmlTargetGrant = (input: TargetGrant, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"TargetGrant\");\n  if (input.Grantee !== undefined && input.Grantee !== null) {\n    const node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Permission !== undefined && input.Permission !== null) {\n    const node = new __XmlNode(\"BucketLogsPermission\")\n      .addChildNode(new __XmlText(input.Permission))\n      .withName(\"Permission\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTargetGrants = (input: TargetGrant[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlTargetGrant(entry, context);\n      return node.withName(\"Grant\");\n    });\n};\n\nconst serializeAws_restXmlTiering = (input: Tiering, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Tiering\");\n  if (input.Days !== undefined && input.Days !== null) {\n    const node = new __XmlNode(\"IntelligentTieringDays\")\n      .addChildNode(new __XmlText(String(input.Days)))\n      .withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.AccessTier !== undefined && input.AccessTier !== null) {\n    const node = new __XmlNode(\"IntelligentTieringAccessTier\")\n      .addChildNode(new __XmlText(input.AccessTier))\n      .withName(\"AccessTier\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTieringList = (input: Tiering[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlTiering(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlTopicConfiguration = (input: TopicConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"TopicConfiguration\");\n  if (input.Id !== undefined && input.Id !== null) {\n    const node = new __XmlNode(\"NotificationId\").addChildNode(new __XmlText(input.Id)).withName(\"Id\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.TopicArn !== undefined && input.TopicArn !== null) {\n    const node = new __XmlNode(\"TopicArn\").addChildNode(new __XmlText(input.TopicArn)).withName(\"Topic\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Events !== undefined && input.Events !== null) {\n    const nodes = serializeAws_restXmlEventList(input.Events, context);\n    nodes.map((node: any) => {\n      node = node.withName(\"Event\");\n      bodyNode.addChildNode(node);\n    });\n  }\n  if (input.Filter !== undefined && input.Filter !== null) {\n    const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTopicConfigurationList = (input: TopicConfiguration[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlTopicConfiguration(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlTransition = (input: Transition, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"Transition\");\n  if (input.Date !== undefined && input.Date !== null) {\n    const node = new __XmlNode(\"Date\")\n      .addChildNode(new __XmlText(input.Date.toISOString().split(\".\")[0] + \"Z\"))\n      .withName(\"Date\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Days !== undefined && input.Days !== null) {\n    const node = new __XmlNode(\"Days\").addChildNode(new __XmlText(String(input.Days))).withName(\"Days\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.StorageClass !== undefined && input.StorageClass !== null) {\n    const node = new __XmlNode(\"TransitionStorageClass\")\n      .addChildNode(new __XmlText(input.StorageClass))\n      .withName(\"StorageClass\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlTransitionList = (input: Transition[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlTransition(entry, context);\n      return node.withName(\"member\");\n    });\n};\n\nconst serializeAws_restXmlUserMetadata = (input: MetadataEntry[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      const node = serializeAws_restXmlMetadataEntry(entry, context);\n      return node.withName(\"MetadataEntry\");\n    });\n};\n\nconst serializeAws_restXmlVersioningConfiguration = (input: VersioningConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"VersioningConfiguration\");\n  if (input.MFADelete !== undefined && input.MFADelete !== null) {\n    const node = new __XmlNode(\"MFADelete\").addChildNode(new __XmlText(input.MFADelete)).withName(\"MfaDelete\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.Status !== undefined && input.Status !== null) {\n    const node = new __XmlNode(\"BucketVersioningStatus\").addChildNode(new __XmlText(input.Status)).withName(\"Status\");\n    bodyNode.addChildNode(node);\n  }\n  return bodyNode;\n};\n\nconst serializeAws_restXmlWebsiteConfiguration = (input: WebsiteConfiguration, context: __SerdeContext): any => {\n  const bodyNode = new __XmlNode(\"WebsiteConfiguration\");\n  if (input.ErrorDocument !== undefined && input.ErrorDocument !== null) {\n    const node = serializeAws_restXmlErrorDocument(input.ErrorDocument, context).withName(\"ErrorDocument\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.IndexDocument !== undefined && input.IndexDocument !== null) {\n    const node = serializeAws_restXmlIndexDocument(input.IndexDocument, context).withName(\"IndexDocument\");\n    bodyNode.addChildNode(node);\n  }\n  if (input.RedirectAllRequestsTo !== undefined && input.RedirectAllRequestsTo !== null) {\n    const node = serializeAws_restXmlRedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName(\n      \"RedirectAllRequestsTo\"\n    );\n    bodyNode.addChildNode(node);\n  }\n  if (input.RoutingRules !== undefined && input.RoutingRules !== null) {\n    const nodes = serializeAws_restXmlRoutingRules(input.RoutingRules, context);\n    const containerNode = new __XmlNode(\"RoutingRules\");\n    nodes.map((node: any) => {\n      containerNode.addChildNode(node);\n    });\n    bodyNode.addChildNode(containerNode);\n  }\n  return bodyNode;\n};\n\nconst deserializeAws_restXmlAbortIncompleteMultipartUpload = (\n  output: any,\n  context: __SerdeContext\n): AbortIncompleteMultipartUpload => {\n  let contents: any = {\n    DaysAfterInitiation: undefined,\n  };\n  if (output[\"DaysAfterInitiation\"] !== undefined) {\n    contents.DaysAfterInitiation = parseInt(output[\"DaysAfterInitiation\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlAccessControlTranslation = (\n  output: any,\n  context: __SerdeContext\n): AccessControlTranslation => {\n  let contents: any = {\n    Owner: undefined,\n  };\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = output[\"Owner\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlAllowedHeaders = (output: any, context: __SerdeContext): string[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlAllowedMethods = (output: any, context: __SerdeContext): string[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlAllowedOrigins = (output: any, context: __SerdeContext): string[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlAnalyticsAndOperator = (output: any, context: __SerdeContext): AnalyticsAndOperator => {\n  let contents: any = {\n    Prefix: undefined,\n    Tags: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlAnalyticsConfiguration = (output: any, context: __SerdeContext): AnalyticsConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    Filter: undefined,\n    StorageClassAnalysis: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlAnalyticsFilter(output[\"Filter\"], context);\n  }\n  if (output[\"StorageClassAnalysis\"] !== undefined) {\n    contents.StorageClassAnalysis = deserializeAws_restXmlStorageClassAnalysis(output[\"StorageClassAnalysis\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlAnalyticsConfigurationList = (\n  output: any,\n  context: __SerdeContext\n): AnalyticsConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlAnalyticsConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlAnalyticsExportDestination = (\n  output: any,\n  context: __SerdeContext\n): AnalyticsExportDestination => {\n  let contents: any = {\n    S3BucketDestination: undefined,\n  };\n  if (output[\"S3BucketDestination\"] !== undefined) {\n    contents.S3BucketDestination = deserializeAws_restXmlAnalyticsS3BucketDestination(\n      output[\"S3BucketDestination\"],\n      context\n    );\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlAnalyticsFilter = (output: any, context: __SerdeContext): AnalyticsFilter => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"],\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlAnalyticsAndOperator(output[\"And\"], context),\n    };\n  }\n  return { $unknown: Object.entries(output)[0] };\n};\n\nconst deserializeAws_restXmlAnalyticsS3BucketDestination = (\n  output: any,\n  context: __SerdeContext\n): AnalyticsS3BucketDestination => {\n  let contents: any = {\n    Format: undefined,\n    BucketAccountId: undefined,\n    Bucket: undefined,\n    Prefix: undefined,\n  };\n  if (output[\"Format\"] !== undefined) {\n    contents.Format = output[\"Format\"];\n  }\n  if (output[\"BucketAccountId\"] !== undefined) {\n    contents.BucketAccountId = output[\"BucketAccountId\"];\n  }\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = output[\"Bucket\"];\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlBucket = (output: any, context: __SerdeContext): Bucket => {\n  let contents: any = {\n    Name: undefined,\n    CreationDate: undefined,\n  };\n  if (output[\"Name\"] !== undefined) {\n    contents.Name = output[\"Name\"];\n  }\n  if (output[\"CreationDate\"] !== undefined) {\n    contents.CreationDate = new Date(output[\"CreationDate\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlBuckets = (output: any, context: __SerdeContext): Bucket[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlBucket(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlCommonPrefix = (output: any, context: __SerdeContext): CommonPrefix => {\n  let contents: any = {\n    Prefix: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlCommonPrefixList = (output: any, context: __SerdeContext): CommonPrefix[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlCommonPrefix(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlCondition = (output: any, context: __SerdeContext): Condition => {\n  let contents: any = {\n    HttpErrorCodeReturnedEquals: undefined,\n    KeyPrefixEquals: undefined,\n  };\n  if (output[\"HttpErrorCodeReturnedEquals\"] !== undefined) {\n    contents.HttpErrorCodeReturnedEquals = output[\"HttpErrorCodeReturnedEquals\"];\n  }\n  if (output[\"KeyPrefixEquals\"] !== undefined) {\n    contents.KeyPrefixEquals = output[\"KeyPrefixEquals\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlCopyObjectResult = (output: any, context: __SerdeContext): CopyObjectResult => {\n  let contents: any = {\n    ETag: undefined,\n    LastModified: undefined,\n  };\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlCopyPartResult = (output: any, context: __SerdeContext): CopyPartResult => {\n  let contents: any = {\n    ETag: undefined,\n    LastModified: undefined,\n  };\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlCORSRule = (output: any, context: __SerdeContext): CORSRule => {\n  let contents: any = {\n    AllowedHeaders: undefined,\n    AllowedMethods: undefined,\n    AllowedOrigins: undefined,\n    ExposeHeaders: undefined,\n    MaxAgeSeconds: undefined,\n  };\n  if (output.AllowedHeader === \"\") {\n    contents.AllowedHeaders = [];\n  }\n  if (output[\"AllowedHeader\"] !== undefined) {\n    contents.AllowedHeaders = deserializeAws_restXmlAllowedHeaders(\n      __getArrayIfSingleItem(output[\"AllowedHeader\"]),\n      context\n    );\n  }\n  if (output.AllowedMethod === \"\") {\n    contents.AllowedMethods = [];\n  }\n  if (output[\"AllowedMethod\"] !== undefined) {\n    contents.AllowedMethods = deserializeAws_restXmlAllowedMethods(\n      __getArrayIfSingleItem(output[\"AllowedMethod\"]),\n      context\n    );\n  }\n  if (output.AllowedOrigin === \"\") {\n    contents.AllowedOrigins = [];\n  }\n  if (output[\"AllowedOrigin\"] !== undefined) {\n    contents.AllowedOrigins = deserializeAws_restXmlAllowedOrigins(\n      __getArrayIfSingleItem(output[\"AllowedOrigin\"]),\n      context\n    );\n  }\n  if (output.ExposeHeader === \"\") {\n    contents.ExposeHeaders = [];\n  }\n  if (output[\"ExposeHeader\"] !== undefined) {\n    contents.ExposeHeaders = deserializeAws_restXmlExposeHeaders(\n      __getArrayIfSingleItem(output[\"ExposeHeader\"]),\n      context\n    );\n  }\n  if (output[\"MaxAgeSeconds\"] !== undefined) {\n    contents.MaxAgeSeconds = parseInt(output[\"MaxAgeSeconds\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlCORSRules = (output: any, context: __SerdeContext): CORSRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlCORSRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlDefaultRetention = (output: any, context: __SerdeContext): DefaultRetention => {\n  let contents: any = {\n    Mode: undefined,\n    Days: undefined,\n    Years: undefined,\n  };\n  if (output[\"Mode\"] !== undefined) {\n    contents.Mode = output[\"Mode\"];\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n  if (output[\"Years\"] !== undefined) {\n    contents.Years = parseInt(output[\"Years\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlDeletedObject = (output: any, context: __SerdeContext): DeletedObject => {\n  let contents: any = {\n    Key: undefined,\n    VersionId: undefined,\n    DeleteMarker: undefined,\n    DeleteMarkerVersionId: undefined,\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n  if (output[\"DeleteMarker\"] !== undefined) {\n    contents.DeleteMarker = output[\"DeleteMarker\"] == \"true\";\n  }\n  if (output[\"DeleteMarkerVersionId\"] !== undefined) {\n    contents.DeleteMarkerVersionId = output[\"DeleteMarkerVersionId\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlDeletedObjects = (output: any, context: __SerdeContext): DeletedObject[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlDeletedObject(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlDeleteMarkerEntry = (output: any, context: __SerdeContext): DeleteMarkerEntry => {\n  let contents: any = {\n    Owner: undefined,\n    Key: undefined,\n    VersionId: undefined,\n    IsLatest: undefined,\n    LastModified: undefined,\n  };\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n  if (output[\"IsLatest\"] !== undefined) {\n    contents.IsLatest = output[\"IsLatest\"] == \"true\";\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlDeleteMarkerReplication = (\n  output: any,\n  context: __SerdeContext\n): DeleteMarkerReplication => {\n  let contents: any = {\n    Status: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlDeleteMarkers = (output: any, context: __SerdeContext): DeleteMarkerEntry[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlDeleteMarkerEntry(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlDestination = (output: any, context: __SerdeContext): Destination => {\n  let contents: any = {\n    Bucket: undefined,\n    Account: undefined,\n    StorageClass: undefined,\n    AccessControlTranslation: undefined,\n    EncryptionConfiguration: undefined,\n    ReplicationTime: undefined,\n    Metrics: undefined,\n  };\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = output[\"Bucket\"];\n  }\n  if (output[\"Account\"] !== undefined) {\n    contents.Account = output[\"Account\"];\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  if (output[\"AccessControlTranslation\"] !== undefined) {\n    contents.AccessControlTranslation = deserializeAws_restXmlAccessControlTranslation(\n      output[\"AccessControlTranslation\"],\n      context\n    );\n  }\n  if (output[\"EncryptionConfiguration\"] !== undefined) {\n    contents.EncryptionConfiguration = deserializeAws_restXmlEncryptionConfiguration(\n      output[\"EncryptionConfiguration\"],\n      context\n    );\n  }\n  if (output[\"ReplicationTime\"] !== undefined) {\n    contents.ReplicationTime = deserializeAws_restXmlReplicationTime(output[\"ReplicationTime\"], context);\n  }\n  if (output[\"Metrics\"] !== undefined) {\n    contents.Metrics = deserializeAws_restXmlMetrics(output[\"Metrics\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlEncryptionConfiguration = (\n  output: any,\n  context: __SerdeContext\n): EncryptionConfiguration => {\n  let contents: any = {\n    ReplicaKmsKeyID: undefined,\n  };\n  if (output[\"ReplicaKmsKeyID\"] !== undefined) {\n    contents.ReplicaKmsKeyID = output[\"ReplicaKmsKeyID\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXml_Error = (output: any, context: __SerdeContext): _Error => {\n  let contents: any = {\n    Key: undefined,\n    VersionId: undefined,\n    Code: undefined,\n    Message: undefined,\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n  if (output[\"Code\"] !== undefined) {\n    contents.Code = output[\"Code\"];\n  }\n  if (output[\"Message\"] !== undefined) {\n    contents.Message = output[\"Message\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlErrorDocument = (output: any, context: __SerdeContext): ErrorDocument => {\n  let contents: any = {\n    Key: undefined,\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlErrors = (output: any, context: __SerdeContext): _Error[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXml_Error(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlEventList = (output: any, context: __SerdeContext): (Event | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlExistingObjectReplication = (\n  output: any,\n  context: __SerdeContext\n): ExistingObjectReplication => {\n  let contents: any = {\n    Status: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlExposeHeaders = (output: any, context: __SerdeContext): string[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlFilterRule = (output: any, context: __SerdeContext): FilterRule => {\n  let contents: any = {\n    Name: undefined,\n    Value: undefined,\n  };\n  if (output[\"Name\"] !== undefined) {\n    contents.Name = output[\"Name\"];\n  }\n  if (output[\"Value\"] !== undefined) {\n    contents.Value = output[\"Value\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlFilterRuleList = (output: any, context: __SerdeContext): FilterRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlFilterRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlGrant = (output: any, context: __SerdeContext): Grant => {\n  let contents: any = {\n    Grantee: undefined,\n    Permission: undefined,\n  };\n  if (output[\"Grantee\"] !== undefined) {\n    contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n  }\n  if (output[\"Permission\"] !== undefined) {\n    contents.Permission = output[\"Permission\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlGrantee = (output: any, context: __SerdeContext): Grantee => {\n  let contents: any = {\n    DisplayName: undefined,\n    EmailAddress: undefined,\n    ID: undefined,\n    URI: undefined,\n    Type: undefined,\n  };\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = output[\"DisplayName\"];\n  }\n  if (output[\"EmailAddress\"] !== undefined) {\n    contents.EmailAddress = output[\"EmailAddress\"];\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  if (output[\"URI\"] !== undefined) {\n    contents.URI = output[\"URI\"];\n  }\n  if (output[\"xsi:type\"] !== undefined) {\n    contents.Type = output[\"xsi:type\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlGrants = (output: any, context: __SerdeContext): Grant[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlGrant(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlIndexDocument = (output: any, context: __SerdeContext): IndexDocument => {\n  let contents: any = {\n    Suffix: undefined,\n  };\n  if (output[\"Suffix\"] !== undefined) {\n    contents.Suffix = output[\"Suffix\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInitiator = (output: any, context: __SerdeContext): Initiator => {\n  let contents: any = {\n    ID: undefined,\n    DisplayName: undefined,\n  };\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = output[\"DisplayName\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlIntelligentTieringAndOperator = (\n  output: any,\n  context: __SerdeContext\n): IntelligentTieringAndOperator => {\n  let contents: any = {\n    Prefix: undefined,\n    Tags: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlIntelligentTieringConfiguration = (\n  output: any,\n  context: __SerdeContext\n): IntelligentTieringConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    Filter: undefined,\n    Status: undefined,\n    Tierings: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlIntelligentTieringFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output.Tiering === \"\") {\n    contents.Tierings = [];\n  }\n  if (output[\"Tiering\"] !== undefined) {\n    contents.Tierings = deserializeAws_restXmlTieringList(__getArrayIfSingleItem(output[\"Tiering\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlIntelligentTieringConfigurationList = (\n  output: any,\n  context: __SerdeContext\n): IntelligentTieringConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlIntelligentTieringConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlIntelligentTieringFilter = (\n  output: any,\n  context: __SerdeContext\n): IntelligentTieringFilter => {\n  let contents: any = {\n    Prefix: undefined,\n    Tag: undefined,\n    And: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tag = deserializeAws_restXmlTag(output[\"Tag\"], context);\n  }\n  if (output[\"And\"] !== undefined) {\n    contents.And = deserializeAws_restXmlIntelligentTieringAndOperator(output[\"And\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventoryConfiguration = (output: any, context: __SerdeContext): InventoryConfiguration => {\n  let contents: any = {\n    Destination: undefined,\n    IsEnabled: undefined,\n    Filter: undefined,\n    Id: undefined,\n    IncludedObjectVersions: undefined,\n    OptionalFields: undefined,\n    Schedule: undefined,\n  };\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlInventoryDestination(output[\"Destination\"], context);\n  }\n  if (output[\"IsEnabled\"] !== undefined) {\n    contents.IsEnabled = output[\"IsEnabled\"] == \"true\";\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlInventoryFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"IncludedObjectVersions\"] !== undefined) {\n    contents.IncludedObjectVersions = output[\"IncludedObjectVersions\"];\n  }\n  if (output.OptionalFields === \"\") {\n    contents.OptionalFields = [];\n  }\n  if (output[\"OptionalFields\"] !== undefined && output[\"OptionalFields\"][\"Field\"] !== undefined) {\n    contents.OptionalFields = deserializeAws_restXmlInventoryOptionalFields(\n      __getArrayIfSingleItem(output[\"OptionalFields\"][\"Field\"]),\n      context\n    );\n  }\n  if (output[\"Schedule\"] !== undefined) {\n    contents.Schedule = deserializeAws_restXmlInventorySchedule(output[\"Schedule\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventoryConfigurationList = (\n  output: any,\n  context: __SerdeContext\n): InventoryConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlInventoryConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlInventoryDestination = (output: any, context: __SerdeContext): InventoryDestination => {\n  let contents: any = {\n    S3BucketDestination: undefined,\n  };\n  if (output[\"S3BucketDestination\"] !== undefined) {\n    contents.S3BucketDestination = deserializeAws_restXmlInventoryS3BucketDestination(\n      output[\"S3BucketDestination\"],\n      context\n    );\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventoryEncryption = (output: any, context: __SerdeContext): InventoryEncryption => {\n  let contents: any = {\n    SSES3: undefined,\n    SSEKMS: undefined,\n  };\n  if (output[\"SSE-S3\"] !== undefined) {\n    contents.SSES3 = deserializeAws_restXmlSSES3(output[\"SSE-S3\"], context);\n  }\n  if (output[\"SSE-KMS\"] !== undefined) {\n    contents.SSEKMS = deserializeAws_restXmlSSEKMS(output[\"SSE-KMS\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventoryFilter = (output: any, context: __SerdeContext): InventoryFilter => {\n  let contents: any = {\n    Prefix: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventoryOptionalFields = (\n  output: any,\n  context: __SerdeContext\n): (InventoryOptionalField | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restXmlInventoryS3BucketDestination = (\n  output: any,\n  context: __SerdeContext\n): InventoryS3BucketDestination => {\n  let contents: any = {\n    AccountId: undefined,\n    Bucket: undefined,\n    Format: undefined,\n    Prefix: undefined,\n    Encryption: undefined,\n  };\n  if (output[\"AccountId\"] !== undefined) {\n    contents.AccountId = output[\"AccountId\"];\n  }\n  if (output[\"Bucket\"] !== undefined) {\n    contents.Bucket = output[\"Bucket\"];\n  }\n  if (output[\"Format\"] !== undefined) {\n    contents.Format = output[\"Format\"];\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output[\"Encryption\"] !== undefined) {\n    contents.Encryption = deserializeAws_restXmlInventoryEncryption(output[\"Encryption\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlInventorySchedule = (output: any, context: __SerdeContext): InventorySchedule => {\n  let contents: any = {\n    Frequency: undefined,\n  };\n  if (output[\"Frequency\"] !== undefined) {\n    contents.Frequency = output[\"Frequency\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlLambdaFunctionConfiguration = (\n  output: any,\n  context: __SerdeContext\n): LambdaFunctionConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    LambdaFunctionArn: undefined,\n    Events: undefined,\n    Filter: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"CloudFunction\"] !== undefined) {\n    contents.LambdaFunctionArn = output[\"CloudFunction\"];\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  }\n  if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlLambdaFunctionConfigurationList = (\n  output: any,\n  context: __SerdeContext\n): LambdaFunctionConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlLifecycleExpiration = (output: any, context: __SerdeContext): LifecycleExpiration => {\n  let contents: any = {\n    Date: undefined,\n    Days: undefined,\n    ExpiredObjectDeleteMarker: undefined,\n  };\n  if (output[\"Date\"] !== undefined) {\n    contents.Date = new Date(output[\"Date\"]);\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n  if (output[\"ExpiredObjectDeleteMarker\"] !== undefined) {\n    contents.ExpiredObjectDeleteMarker = output[\"ExpiredObjectDeleteMarker\"] == \"true\";\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlLifecycleRule = (output: any, context: __SerdeContext): LifecycleRule => {\n  let contents: any = {\n    Expiration: undefined,\n    ID: undefined,\n    Prefix: undefined,\n    Filter: undefined,\n    Status: undefined,\n    Transitions: undefined,\n    NoncurrentVersionTransitions: undefined,\n    NoncurrentVersionExpiration: undefined,\n    AbortIncompleteMultipartUpload: undefined,\n  };\n  if (output[\"Expiration\"] !== undefined) {\n    contents.Expiration = deserializeAws_restXmlLifecycleExpiration(output[\"Expiration\"], context);\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlLifecycleRuleFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output.Transition === \"\") {\n    contents.Transitions = [];\n  }\n  if (output[\"Transition\"] !== undefined) {\n    contents.Transitions = deserializeAws_restXmlTransitionList(__getArrayIfSingleItem(output[\"Transition\"]), context);\n  }\n  if (output.NoncurrentVersionTransition === \"\") {\n    contents.NoncurrentVersionTransitions = [];\n  }\n  if (output[\"NoncurrentVersionTransition\"] !== undefined) {\n    contents.NoncurrentVersionTransitions = deserializeAws_restXmlNoncurrentVersionTransitionList(\n      __getArrayIfSingleItem(output[\"NoncurrentVersionTransition\"]),\n      context\n    );\n  }\n  if (output[\"NoncurrentVersionExpiration\"] !== undefined) {\n    contents.NoncurrentVersionExpiration = deserializeAws_restXmlNoncurrentVersionExpiration(\n      output[\"NoncurrentVersionExpiration\"],\n      context\n    );\n  }\n  if (output[\"AbortIncompleteMultipartUpload\"] !== undefined) {\n    contents.AbortIncompleteMultipartUpload = deserializeAws_restXmlAbortIncompleteMultipartUpload(\n      output[\"AbortIncompleteMultipartUpload\"],\n      context\n    );\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlLifecycleRuleAndOperator = (\n  output: any,\n  context: __SerdeContext\n): LifecycleRuleAndOperator => {\n  let contents: any = {\n    Prefix: undefined,\n    Tags: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlLifecycleRuleFilter = (output: any, context: __SerdeContext): LifecycleRuleFilter => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"],\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlLifecycleRuleAndOperator(output[\"And\"], context),\n    };\n  }\n  return { $unknown: Object.entries(output)[0] };\n};\n\nconst deserializeAws_restXmlLifecycleRules = (output: any, context: __SerdeContext): LifecycleRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlLifecycleRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlLoggingEnabled = (output: any, context: __SerdeContext): LoggingEnabled => {\n  let contents: any = {\n    TargetBucket: undefined,\n    TargetGrants: undefined,\n    TargetPrefix: undefined,\n  };\n  if (output[\"TargetBucket\"] !== undefined) {\n    contents.TargetBucket = output[\"TargetBucket\"];\n  }\n  if (output.TargetGrants === \"\") {\n    contents.TargetGrants = [];\n  }\n  if (output[\"TargetGrants\"] !== undefined && output[\"TargetGrants\"][\"Grant\"] !== undefined) {\n    contents.TargetGrants = deserializeAws_restXmlTargetGrants(\n      __getArrayIfSingleItem(output[\"TargetGrants\"][\"Grant\"]),\n      context\n    );\n  }\n  if (output[\"TargetPrefix\"] !== undefined) {\n    contents.TargetPrefix = output[\"TargetPrefix\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlMetrics = (output: any, context: __SerdeContext): Metrics => {\n  let contents: any = {\n    Status: undefined,\n    EventThreshold: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output[\"EventThreshold\"] !== undefined) {\n    contents.EventThreshold = deserializeAws_restXmlReplicationTimeValue(output[\"EventThreshold\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlMetricsAndOperator = (output: any, context: __SerdeContext): MetricsAndOperator => {\n  let contents: any = {\n    Prefix: undefined,\n    Tags: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlMetricsConfiguration = (output: any, context: __SerdeContext): MetricsConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    Filter: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlMetricsFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlMetricsConfigurationList = (\n  output: any,\n  context: __SerdeContext\n): MetricsConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlMetricsConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlMetricsFilter = (output: any, context: __SerdeContext): MetricsFilter => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"],\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlMetricsAndOperator(output[\"And\"], context),\n    };\n  }\n  return { $unknown: Object.entries(output)[0] };\n};\n\nconst deserializeAws_restXmlMultipartUpload = (output: any, context: __SerdeContext): MultipartUpload => {\n  let contents: any = {\n    UploadId: undefined,\n    Key: undefined,\n    Initiated: undefined,\n    StorageClass: undefined,\n    Owner: undefined,\n    Initiator: undefined,\n  };\n  if (output[\"UploadId\"] !== undefined) {\n    contents.UploadId = output[\"UploadId\"];\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"Initiated\"] !== undefined) {\n    contents.Initiated = new Date(output[\"Initiated\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  if (output[\"Initiator\"] !== undefined) {\n    contents.Initiator = deserializeAws_restXmlInitiator(output[\"Initiator\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlMultipartUploadList = (output: any, context: __SerdeContext): MultipartUpload[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlMultipartUpload(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlNoncurrentVersionExpiration = (\n  output: any,\n  context: __SerdeContext\n): NoncurrentVersionExpiration => {\n  let contents: any = {\n    NoncurrentDays: undefined,\n  };\n  if (output[\"NoncurrentDays\"] !== undefined) {\n    contents.NoncurrentDays = parseInt(output[\"NoncurrentDays\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlNoncurrentVersionTransition = (\n  output: any,\n  context: __SerdeContext\n): NoncurrentVersionTransition => {\n  let contents: any = {\n    NoncurrentDays: undefined,\n    StorageClass: undefined,\n  };\n  if (output[\"NoncurrentDays\"] !== undefined) {\n    contents.NoncurrentDays = parseInt(output[\"NoncurrentDays\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlNoncurrentVersionTransitionList = (\n  output: any,\n  context: __SerdeContext\n): NoncurrentVersionTransition[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlNoncurrentVersionTransition(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlNotificationConfigurationFilter = (\n  output: any,\n  context: __SerdeContext\n): NotificationConfigurationFilter => {\n  let contents: any = {\n    Key: undefined,\n  };\n  if (output[\"S3Key\"] !== undefined) {\n    contents.Key = deserializeAws_restXmlS3KeyFilter(output[\"S3Key\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXml_Object = (output: any, context: __SerdeContext): _Object => {\n  let contents: any = {\n    Key: undefined,\n    LastModified: undefined,\n    ETag: undefined,\n    Size: undefined,\n    StorageClass: undefined,\n    Owner: undefined,\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = parseInt(output[\"Size\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectList = (output: any, context: __SerdeContext): _Object[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXml_Object(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlObjectLockConfiguration = (\n  output: any,\n  context: __SerdeContext\n): ObjectLockConfiguration => {\n  let contents: any = {\n    ObjectLockEnabled: undefined,\n    Rule: undefined,\n  };\n  if (output[\"ObjectLockEnabled\"] !== undefined) {\n    contents.ObjectLockEnabled = output[\"ObjectLockEnabled\"];\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rule = deserializeAws_restXmlObjectLockRule(output[\"Rule\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectLockLegalHold = (output: any, context: __SerdeContext): ObjectLockLegalHold => {\n  let contents: any = {\n    Status: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectLockRetention = (output: any, context: __SerdeContext): ObjectLockRetention => {\n  let contents: any = {\n    Mode: undefined,\n    RetainUntilDate: undefined,\n  };\n  if (output[\"Mode\"] !== undefined) {\n    contents.Mode = output[\"Mode\"];\n  }\n  if (output[\"RetainUntilDate\"] !== undefined) {\n    contents.RetainUntilDate = new Date(output[\"RetainUntilDate\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectLockRule = (output: any, context: __SerdeContext): ObjectLockRule => {\n  let contents: any = {\n    DefaultRetention: undefined,\n  };\n  if (output[\"DefaultRetention\"] !== undefined) {\n    contents.DefaultRetention = deserializeAws_restXmlDefaultRetention(output[\"DefaultRetention\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectVersion = (output: any, context: __SerdeContext): ObjectVersion => {\n  let contents: any = {\n    ETag: undefined,\n    Size: undefined,\n    StorageClass: undefined,\n    Key: undefined,\n    VersionId: undefined,\n    IsLatest: undefined,\n    LastModified: undefined,\n    Owner: undefined,\n  };\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = parseInt(output[\"Size\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"VersionId\"] !== undefined) {\n    contents.VersionId = output[\"VersionId\"];\n  }\n  if (output[\"IsLatest\"] !== undefined) {\n    contents.IsLatest = output[\"IsLatest\"] == \"true\";\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  if (output[\"Owner\"] !== undefined) {\n    contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlObjectVersionList = (output: any, context: __SerdeContext): ObjectVersion[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlObjectVersion(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlOwner = (output: any, context: __SerdeContext): Owner => {\n  let contents: any = {\n    DisplayName: undefined,\n    ID: undefined,\n  };\n  if (output[\"DisplayName\"] !== undefined) {\n    contents.DisplayName = output[\"DisplayName\"];\n  }\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlOwnershipControls = (output: any, context: __SerdeContext): OwnershipControls => {\n  let contents: any = {\n    Rules: undefined,\n  };\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlOwnershipControlsRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlOwnershipControlsRule = (output: any, context: __SerdeContext): OwnershipControlsRule => {\n  let contents: any = {\n    ObjectOwnership: undefined,\n  };\n  if (output[\"ObjectOwnership\"] !== undefined) {\n    contents.ObjectOwnership = output[\"ObjectOwnership\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlOwnershipControlsRules = (\n  output: any,\n  context: __SerdeContext\n): OwnershipControlsRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlOwnershipControlsRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlPart = (output: any, context: __SerdeContext): Part => {\n  let contents: any = {\n    PartNumber: undefined,\n    LastModified: undefined,\n    ETag: undefined,\n    Size: undefined,\n  };\n  if (output[\"PartNumber\"] !== undefined) {\n    contents.PartNumber = parseInt(output[\"PartNumber\"]);\n  }\n  if (output[\"LastModified\"] !== undefined) {\n    contents.LastModified = new Date(output[\"LastModified\"]);\n  }\n  if (output[\"ETag\"] !== undefined) {\n    contents.ETag = output[\"ETag\"];\n  }\n  if (output[\"Size\"] !== undefined) {\n    contents.Size = parseInt(output[\"Size\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlParts = (output: any, context: __SerdeContext): Part[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlPart(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlPolicyStatus = (output: any, context: __SerdeContext): PolicyStatus => {\n  let contents: any = {\n    IsPublic: undefined,\n  };\n  if (output[\"IsPublic\"] !== undefined) {\n    contents.IsPublic = output[\"IsPublic\"] == \"true\";\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlPublicAccessBlockConfiguration = (\n  output: any,\n  context: __SerdeContext\n): PublicAccessBlockConfiguration => {\n  let contents: any = {\n    BlockPublicAcls: undefined,\n    IgnorePublicAcls: undefined,\n    BlockPublicPolicy: undefined,\n    RestrictPublicBuckets: undefined,\n  };\n  if (output[\"BlockPublicAcls\"] !== undefined) {\n    contents.BlockPublicAcls = output[\"BlockPublicAcls\"] == \"true\";\n  }\n  if (output[\"IgnorePublicAcls\"] !== undefined) {\n    contents.IgnorePublicAcls = output[\"IgnorePublicAcls\"] == \"true\";\n  }\n  if (output[\"BlockPublicPolicy\"] !== undefined) {\n    contents.BlockPublicPolicy = output[\"BlockPublicPolicy\"] == \"true\";\n  }\n  if (output[\"RestrictPublicBuckets\"] !== undefined) {\n    contents.RestrictPublicBuckets = output[\"RestrictPublicBuckets\"] == \"true\";\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlQueueConfiguration = (output: any, context: __SerdeContext): QueueConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    QueueArn: undefined,\n    Events: undefined,\n    Filter: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Queue\"] !== undefined) {\n    contents.QueueArn = output[\"Queue\"];\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  }\n  if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlQueueConfigurationList = (output: any, context: __SerdeContext): QueueConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlQueueConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlRedirect = (output: any, context: __SerdeContext): Redirect => {\n  let contents: any = {\n    HostName: undefined,\n    HttpRedirectCode: undefined,\n    Protocol: undefined,\n    ReplaceKeyPrefixWith: undefined,\n    ReplaceKeyWith: undefined,\n  };\n  if (output[\"HostName\"] !== undefined) {\n    contents.HostName = output[\"HostName\"];\n  }\n  if (output[\"HttpRedirectCode\"] !== undefined) {\n    contents.HttpRedirectCode = output[\"HttpRedirectCode\"];\n  }\n  if (output[\"Protocol\"] !== undefined) {\n    contents.Protocol = output[\"Protocol\"];\n  }\n  if (output[\"ReplaceKeyPrefixWith\"] !== undefined) {\n    contents.ReplaceKeyPrefixWith = output[\"ReplaceKeyPrefixWith\"];\n  }\n  if (output[\"ReplaceKeyWith\"] !== undefined) {\n    contents.ReplaceKeyWith = output[\"ReplaceKeyWith\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlRedirectAllRequestsTo = (output: any, context: __SerdeContext): RedirectAllRequestsTo => {\n  let contents: any = {\n    HostName: undefined,\n    Protocol: undefined,\n  };\n  if (output[\"HostName\"] !== undefined) {\n    contents.HostName = output[\"HostName\"];\n  }\n  if (output[\"Protocol\"] !== undefined) {\n    contents.Protocol = output[\"Protocol\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicaModifications = (output: any, context: __SerdeContext): ReplicaModifications => {\n  let contents: any = {\n    Status: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicationConfiguration = (\n  output: any,\n  context: __SerdeContext\n): ReplicationConfiguration => {\n  let contents: any = {\n    Role: undefined,\n    Rules: undefined,\n  };\n  if (output[\"Role\"] !== undefined) {\n    contents.Role = output[\"Role\"];\n  }\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlReplicationRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicationRule = (output: any, context: __SerdeContext): ReplicationRule => {\n  let contents: any = {\n    ID: undefined,\n    Priority: undefined,\n    Prefix: undefined,\n    Filter: undefined,\n    Status: undefined,\n    SourceSelectionCriteria: undefined,\n    ExistingObjectReplication: undefined,\n    Destination: undefined,\n    DeleteMarkerReplication: undefined,\n  };\n  if (output[\"ID\"] !== undefined) {\n    contents.ID = output[\"ID\"];\n  }\n  if (output[\"Priority\"] !== undefined) {\n    contents.Priority = parseInt(output[\"Priority\"]);\n  }\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlReplicationRuleFilter(output[\"Filter\"], context);\n  }\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output[\"SourceSelectionCriteria\"] !== undefined) {\n    contents.SourceSelectionCriteria = deserializeAws_restXmlSourceSelectionCriteria(\n      output[\"SourceSelectionCriteria\"],\n      context\n    );\n  }\n  if (output[\"ExistingObjectReplication\"] !== undefined) {\n    contents.ExistingObjectReplication = deserializeAws_restXmlExistingObjectReplication(\n      output[\"ExistingObjectReplication\"],\n      context\n    );\n  }\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlDestination(output[\"Destination\"], context);\n  }\n  if (output[\"DeleteMarkerReplication\"] !== undefined) {\n    contents.DeleteMarkerReplication = deserializeAws_restXmlDeleteMarkerReplication(\n      output[\"DeleteMarkerReplication\"],\n      context\n    );\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicationRuleAndOperator = (\n  output: any,\n  context: __SerdeContext\n): ReplicationRuleAndOperator => {\n  let contents: any = {\n    Prefix: undefined,\n    Tags: undefined,\n  };\n  if (output[\"Prefix\"] !== undefined) {\n    contents.Prefix = output[\"Prefix\"];\n  }\n  if (output.Tag === \"\") {\n    contents.Tags = [];\n  }\n  if (output[\"Tag\"] !== undefined) {\n    contents.Tags = deserializeAws_restXmlTagSet(__getArrayIfSingleItem(output[\"Tag\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicationRuleFilter = (output: any, context: __SerdeContext): ReplicationRuleFilter => {\n  if (output[\"Prefix\"] !== undefined) {\n    return {\n      Prefix: output[\"Prefix\"],\n    };\n  }\n  if (output[\"Tag\"] !== undefined) {\n    return {\n      Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n    };\n  }\n  if (output[\"And\"] !== undefined) {\n    return {\n      And: deserializeAws_restXmlReplicationRuleAndOperator(output[\"And\"], context),\n    };\n  }\n  return { $unknown: Object.entries(output)[0] };\n};\n\nconst deserializeAws_restXmlReplicationRules = (output: any, context: __SerdeContext): ReplicationRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlReplicationRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlReplicationTime = (output: any, context: __SerdeContext): ReplicationTime => {\n  let contents: any = {\n    Status: undefined,\n    Time: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  if (output[\"Time\"] !== undefined) {\n    contents.Time = deserializeAws_restXmlReplicationTimeValue(output[\"Time\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlReplicationTimeValue = (output: any, context: __SerdeContext): ReplicationTimeValue => {\n  let contents: any = {\n    Minutes: undefined,\n  };\n  if (output[\"Minutes\"] !== undefined) {\n    contents.Minutes = parseInt(output[\"Minutes\"]);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlRoutingRule = (output: any, context: __SerdeContext): RoutingRule => {\n  let contents: any = {\n    Condition: undefined,\n    Redirect: undefined,\n  };\n  if (output[\"Condition\"] !== undefined) {\n    contents.Condition = deserializeAws_restXmlCondition(output[\"Condition\"], context);\n  }\n  if (output[\"Redirect\"] !== undefined) {\n    contents.Redirect = deserializeAws_restXmlRedirect(output[\"Redirect\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlRoutingRules = (output: any, context: __SerdeContext): RoutingRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlRoutingRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlS3KeyFilter = (output: any, context: __SerdeContext): S3KeyFilter => {\n  let contents: any = {\n    FilterRules: undefined,\n  };\n  if (output.FilterRule === \"\") {\n    contents.FilterRules = [];\n  }\n  if (output[\"FilterRule\"] !== undefined) {\n    contents.FilterRules = deserializeAws_restXmlFilterRuleList(__getArrayIfSingleItem(output[\"FilterRule\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlServerSideEncryptionByDefault = (\n  output: any,\n  context: __SerdeContext\n): ServerSideEncryptionByDefault => {\n  let contents: any = {\n    SSEAlgorithm: undefined,\n    KMSMasterKeyID: undefined,\n  };\n  if (output[\"SSEAlgorithm\"] !== undefined) {\n    contents.SSEAlgorithm = output[\"SSEAlgorithm\"];\n  }\n  if (output[\"KMSMasterKeyID\"] !== undefined) {\n    contents.KMSMasterKeyID = output[\"KMSMasterKeyID\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlServerSideEncryptionConfiguration = (\n  output: any,\n  context: __SerdeContext\n): ServerSideEncryptionConfiguration => {\n  let contents: any = {\n    Rules: undefined,\n  };\n  if (output.Rule === \"\") {\n    contents.Rules = [];\n  }\n  if (output[\"Rule\"] !== undefined) {\n    contents.Rules = deserializeAws_restXmlServerSideEncryptionRules(__getArrayIfSingleItem(output[\"Rule\"]), context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlServerSideEncryptionRule = (\n  output: any,\n  context: __SerdeContext\n): ServerSideEncryptionRule => {\n  let contents: any = {\n    ApplyServerSideEncryptionByDefault: undefined,\n    BucketKeyEnabled: undefined,\n  };\n  if (output[\"ApplyServerSideEncryptionByDefault\"] !== undefined) {\n    contents.ApplyServerSideEncryptionByDefault = deserializeAws_restXmlServerSideEncryptionByDefault(\n      output[\"ApplyServerSideEncryptionByDefault\"],\n      context\n    );\n  }\n  if (output[\"BucketKeyEnabled\"] !== undefined) {\n    contents.BucketKeyEnabled = output[\"BucketKeyEnabled\"] == \"true\";\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlServerSideEncryptionRules = (\n  output: any,\n  context: __SerdeContext\n): ServerSideEncryptionRule[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlServerSideEncryptionRule(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlSourceSelectionCriteria = (\n  output: any,\n  context: __SerdeContext\n): SourceSelectionCriteria => {\n  let contents: any = {\n    SseKmsEncryptedObjects: undefined,\n    ReplicaModifications: undefined,\n  };\n  if (output[\"SseKmsEncryptedObjects\"] !== undefined) {\n    contents.SseKmsEncryptedObjects = deserializeAws_restXmlSseKmsEncryptedObjects(\n      output[\"SseKmsEncryptedObjects\"],\n      context\n    );\n  }\n  if (output[\"ReplicaModifications\"] !== undefined) {\n    contents.ReplicaModifications = deserializeAws_restXmlReplicaModifications(output[\"ReplicaModifications\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlSSEKMS = (output: any, context: __SerdeContext): SSEKMS => {\n  let contents: any = {\n    KeyId: undefined,\n  };\n  if (output[\"KeyId\"] !== undefined) {\n    contents.KeyId = output[\"KeyId\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlSseKmsEncryptedObjects = (output: any, context: __SerdeContext): SseKmsEncryptedObjects => {\n  let contents: any = {\n    Status: undefined,\n  };\n  if (output[\"Status\"] !== undefined) {\n    contents.Status = output[\"Status\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlSSES3 = (output: any, context: __SerdeContext): SSES3 => {\n  let contents: any = {};\n  return contents;\n};\n\nconst deserializeAws_restXmlStorageClassAnalysis = (output: any, context: __SerdeContext): StorageClassAnalysis => {\n  let contents: any = {\n    DataExport: undefined,\n  };\n  if (output[\"DataExport\"] !== undefined) {\n    contents.DataExport = deserializeAws_restXmlStorageClassAnalysisDataExport(output[\"DataExport\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlStorageClassAnalysisDataExport = (\n  output: any,\n  context: __SerdeContext\n): StorageClassAnalysisDataExport => {\n  let contents: any = {\n    OutputSchemaVersion: undefined,\n    Destination: undefined,\n  };\n  if (output[\"OutputSchemaVersion\"] !== undefined) {\n    contents.OutputSchemaVersion = output[\"OutputSchemaVersion\"];\n  }\n  if (output[\"Destination\"] !== undefined) {\n    contents.Destination = deserializeAws_restXmlAnalyticsExportDestination(output[\"Destination\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTag = (output: any, context: __SerdeContext): Tag => {\n  let contents: any = {\n    Key: undefined,\n    Value: undefined,\n  };\n  if (output[\"Key\"] !== undefined) {\n    contents.Key = output[\"Key\"];\n  }\n  if (output[\"Value\"] !== undefined) {\n    contents.Value = output[\"Value\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTagSet = (output: any, context: __SerdeContext): Tag[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlTag(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlTargetGrant = (output: any, context: __SerdeContext): TargetGrant => {\n  let contents: any = {\n    Grantee: undefined,\n    Permission: undefined,\n  };\n  if (output[\"Grantee\"] !== undefined) {\n    contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n  }\n  if (output[\"Permission\"] !== undefined) {\n    contents.Permission = output[\"Permission\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTargetGrants = (output: any, context: __SerdeContext): TargetGrant[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlTargetGrant(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlTiering = (output: any, context: __SerdeContext): Tiering => {\n  let contents: any = {\n    Days: undefined,\n    AccessTier: undefined,\n  };\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n  if (output[\"AccessTier\"] !== undefined) {\n    contents.AccessTier = output[\"AccessTier\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTieringList = (output: any, context: __SerdeContext): Tiering[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlTiering(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlTopicConfiguration = (output: any, context: __SerdeContext): TopicConfiguration => {\n  let contents: any = {\n    Id: undefined,\n    TopicArn: undefined,\n    Events: undefined,\n    Filter: undefined,\n  };\n  if (output[\"Id\"] !== undefined) {\n    contents.Id = output[\"Id\"];\n  }\n  if (output[\"Topic\"] !== undefined) {\n    contents.TopicArn = output[\"Topic\"];\n  }\n  if (output.Event === \"\") {\n    contents.Events = [];\n  }\n  if (output[\"Event\"] !== undefined) {\n    contents.Events = deserializeAws_restXmlEventList(__getArrayIfSingleItem(output[\"Event\"]), context);\n  }\n  if (output[\"Filter\"] !== undefined) {\n    contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTopicConfigurationList = (output: any, context: __SerdeContext): TopicConfiguration[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlTopicConfiguration(entry, context);\n    });\n};\n\nconst deserializeAws_restXmlTransition = (output: any, context: __SerdeContext): Transition => {\n  let contents: any = {\n    Date: undefined,\n    Days: undefined,\n    StorageClass: undefined,\n  };\n  if (output[\"Date\"] !== undefined) {\n    contents.Date = new Date(output[\"Date\"]);\n  }\n  if (output[\"Days\"] !== undefined) {\n    contents.Days = parseInt(output[\"Days\"]);\n  }\n  if (output[\"StorageClass\"] !== undefined) {\n    contents.StorageClass = output[\"StorageClass\"];\n  }\n  return contents;\n};\n\nconst deserializeAws_restXmlTransitionList = (output: any, context: __SerdeContext): Transition[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restXmlTransition(entry, context);\n    });\n};\n\nconst deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"],\n});\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: __SerdeContext): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\nconst isSerializableHeaderValue = (value: any): boolean =>\n  value !== undefined &&\n  value !== null &&\n  value !== \"\" &&\n  (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n  (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n\nconst decodeEscapedXML = (str: string) =>\n  str\n    .replace(/&amp;/g, \"&\")\n    .replace(/&apos;/g, \"'\")\n    .replace(/&quot;/g, '\"')\n    .replace(/&gt;/g, \">\")\n    .replace(/&lt;/g, \"<\");\n\nconst parseBody = (streamBody: any, context: __SerdeContext): any =>\n  collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n      const parsedObj = xmlParse(encoded, {\n        attributeNamePrefix: \"\",\n        ignoreAttributes: false,\n        parseNodeValue: false,\n        tagValueProcessor: (val, tagName) => decodeEscapedXML(val),\n      });\n      const textNodeName = \"#text\";\n      const key = Object.keys(parsedObj)[0];\n      const parsedObjToReturn = parsedObj[key];\n      if (parsedObjToReturn[textNodeName]) {\n        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n        delete parsedObjToReturn[textNodeName];\n      }\n      return __getValueFromTextNode(parsedObjToReturn);\n    }\n    return {};\n  });\n\nconst loadRestXmlErrorCode = (output: __HttpResponse, data: any): string => {\n  if (data.Code !== undefined) {\n    return data.Code;\n  }\n  if (output.statusCode == 404) {\n    return \"NotFound\";\n  }\n  return \"\";\n};\n"]},"metadata":{},"sourceType":"module"}