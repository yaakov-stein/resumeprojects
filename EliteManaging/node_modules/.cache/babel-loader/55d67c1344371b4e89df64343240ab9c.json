{"ast":null,"code":"import { __asyncGenerator, __await, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { CognitoIdentity } from \"../CognitoIdentity\";\nimport { CognitoIdentityClient } from \"../CognitoIdentityClient\";\nimport { ListIdentityPoolsCommand } from \"../commands/ListIdentityPoolsCommand\";\n/**\n * @private\n */\n\nvar makePagedClientRequest = function (client, input) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , client.send.apply(client, __spread([new ListIdentityPoolsCommand(input)], args))];\n\n        case 1:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n};\n/**\n * @private\n */\n\n\nvar makePagedRequest = function (client, input) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , client.listIdentityPools.apply(client, __spread([input], args))];\n\n        case 1:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n};\n\nexport function paginateListIdentityPools(config, input) {\n  var additionalArguments = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    additionalArguments[_i - 2] = arguments[_i];\n  }\n\n  return __asyncGenerator(this, arguments, function paginateListIdentityPools_1() {\n    var token, hasNext, page;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          token = config.startingToken || undefined;\n          hasNext = true;\n          _a.label = 1;\n\n        case 1:\n          if (!hasNext) return [3\n          /*break*/\n          , 9];\n          input.NextToken = token;\n          input[\"MaxResults\"] = config.pageSize;\n          if (!(config.client instanceof CognitoIdentity)) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , __await(makePagedRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n\n        case 2:\n          page = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 3:\n          if (!(config.client instanceof CognitoIdentityClient)) return [3\n          /*break*/\n          , 5];\n          return [4\n          /*yield*/\n          , __await(makePagedClientRequest.apply(void 0, __spread([config.client, input], additionalArguments)))];\n\n        case 4:\n          page = _a.sent();\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          throw new Error(\"Invalid client, expected CognitoIdentity | CognitoIdentityClient\");\n\n        case 6:\n          return [4\n          /*yield*/\n          , __await(page)];\n\n        case 7:\n          return [4\n          /*yield*/\n          , _a.sent()];\n\n        case 8:\n          _a.sent();\n\n          token = page.NextToken;\n          hasNext = !!token;\n          return [3\n          /*break*/\n          , 1];\n\n        case 9:\n          return [4\n          /*yield*/\n          , __await(undefined)];\n\n        case 10:\n          // @ts-ignore\n          return [2\n          /*return*/\n          , _a.sent()];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,eAAT,QAAgC,oBAAhC;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,SACEC,wBADF,QAIO,sCAJP;AAQA;;;;AAGA,IAAMC,sBAAsB,GAAG,UAC7BC,MAD6B,EAE7BC,KAF6B,EAEO;EACpC;;OAAA,yCAAY;IAAZC;;;;;;;UAGO;UAAA;UAAA,EAAMF,MAAM,CAACG,IAAP,CAAWC,KAAX,SAAMC,UAAM,IAAIP,wBAAJ,CAA6BG,KAA7B,CAAN,GAA8CC,IAA9C,CAAN,CAAN;;;UADP;UACA;UAAA;UAAA,EAAOI,SAAP;;;;AACD,CAPD;AAQA;;;;;AAGA,IAAMC,gBAAgB,GAAG,UACvBP,MADuB,EAEvBC,KAFuB,EAEa;EACpC;;OAAA,yCAAY;IAAZC;;;;;;;UAGO;UAAA;UAAA,EAAMF,MAAM,CAACQ,iBAAP,CAAwBJ,KAAxB,SAAMC,UAAmBJ,KAAnB,GAA6BC,IAA7B,CAAN,CAAN;;;UADP;UACA;UAAA;UAAA,EAAOI,SAAP;;;;AACD,CAPD;;AAQA,OAAM,SAAiBG,yBAAjB,CACJC,MADI,EAEJT,KAFI,EAEgC;EACpC;;OAAA,yCAA2B;IAA3BU;;;;;;;;UAGIC,KAAK,GAAuCF,MAAM,CAACG,aAAP,IAAwBC,SAApE;UACAC,OAAO,GAAG,IAAV;;;;eAEGA,SAAO;UAAA;UAAA;UACZd,KAAK,CAACe,SAAN,GAAkBJ,KAAlB;UACAX,KAAK,CAAC,YAAD,CAAL,GAAsBS,MAAM,CAACO,QAA7B;gBACIP,MAAM,CAACV,MAAP,YAAyBJ,kBAAzB;UAAA;UAAA;UACK;UAAA;UAAA,UAAMW,gBAAgB,MAAhB,CAAgB,MAAhB,EAAgBF,UAACK,MAAM,CAACV,MAAR,EAAgBC,KAAhB,GAA0BU,mBAA1B,CAAhB,CAAN;;;UAAPO,IAAI,GAAGZ,SAAP;;;;;;gBACSI,MAAM,CAACV,MAAP,YAAyBH,wBAAzB;UAAA;UAAA;UACF;UAAA;UAAA,UAAME,sBAAsB,MAAtB,CAAsB,MAAtB,EAAsBM,UAACK,MAAM,CAACV,MAAR,EAAgBC,KAAhB,GAA0BU,mBAA1B,CAAtB,CAAN;;;UAAPO,IAAI,GAAGZ,SAAP;;;;;;UAEA,MAAM,IAAIa,KAAJ,CAAU,kEAAV,CAAN;;;;;oBAEID;;;UAAN;UAAA;UAAA;;;UAAAZ;;UACAM,KAAK,GAAGM,IAAI,CAACF,SAAb;UACAD,OAAO,GAAG,CAAC,CAACH,KAAZ;;;;;;;;oBAGKE;;;UADP;UACA;UAAA;UAAA;;;;AACD","names":["CognitoIdentity","CognitoIdentityClient","ListIdentityPoolsCommand","makePagedClientRequest","client","input","args","send","apply","__spread","_a","makePagedRequest","listIdentityPools","paginateListIdentityPools","config","additionalArguments","token","startingToken","undefined","hasNext","NextToken","pageSize","page","Error"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-cognito-identity\\pagination\\ListIdentityPoolsPaginator.ts"],"sourcesContent":["import { CognitoIdentity } from \"../CognitoIdentity\";\nimport { CognitoIdentityClient } from \"../CognitoIdentityClient\";\nimport {\n  ListIdentityPoolsCommand,\n  ListIdentityPoolsCommandInput,\n  ListIdentityPoolsCommandOutput,\n} from \"../commands/ListIdentityPoolsCommand\";\nimport { CognitoIdentityPaginationConfiguration } from \"./Interfaces\";\nimport { Paginator } from \"@aws-sdk/types\";\n\n/**\n * @private\n */\nconst makePagedClientRequest = async (\n  client: CognitoIdentityClient,\n  input: ListIdentityPoolsCommandInput,\n  ...args: any\n): Promise<ListIdentityPoolsCommandOutput> => {\n  // @ts-ignore\n  return await client.send(new ListIdentityPoolsCommand(input), ...args);\n};\n/**\n * @private\n */\nconst makePagedRequest = async (\n  client: CognitoIdentity,\n  input: ListIdentityPoolsCommandInput,\n  ...args: any\n): Promise<ListIdentityPoolsCommandOutput> => {\n  // @ts-ignore\n  return await client.listIdentityPools(input, ...args);\n};\nexport async function* paginateListIdentityPools(\n  config: CognitoIdentityPaginationConfiguration,\n  input: ListIdentityPoolsCommandInput,\n  ...additionalArguments: any\n): Paginator<ListIdentityPoolsCommandOutput> {\n  // ToDo: replace with actual type instead of typeof input.NextToken\n  let token: typeof input.NextToken | undefined = config.startingToken || undefined;\n  let hasNext = true;\n  let page: ListIdentityPoolsCommandOutput;\n  while (hasNext) {\n    input.NextToken = token;\n    input[\"MaxResults\"] = config.pageSize;\n    if (config.client instanceof CognitoIdentity) {\n      page = await makePagedRequest(config.client, input, ...additionalArguments);\n    } else if (config.client instanceof CognitoIdentityClient) {\n      page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n    } else {\n      throw new Error(\"Invalid client, expected CognitoIdentity | CognitoIdentityClient\");\n    }\n    yield page;\n    token = page.NextToken;\n    hasNext = !!token;\n  }\n  // @ts-ignore\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}