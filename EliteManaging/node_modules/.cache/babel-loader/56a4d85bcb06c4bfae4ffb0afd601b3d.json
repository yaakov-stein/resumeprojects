{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { ConsoleLogger as Logger, ClientDevice, Credentials, Signer, JS, Hub, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { PinpointClient, PutEventsCommand, UpdateEndpointCommand } from '@aws-sdk/client-pinpoint';\nimport Cache from '@aws-amplify/cache';\nimport { v1 as uuid } from 'uuid';\nimport EventsBuffer from './EventBuffer';\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\n\nvar dispatchAnalyticsEvent = function (event, data) {\n  Hub.dispatch('analytics', {\n    event: event,\n    data: data\n  }, 'Analytics', AMPLIFY_SYMBOL);\n};\n\nvar logger = new Logger('AWSPinpointProvider');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar FORBIDDEN_CODE = 403;\nvar MOBILE_SERVICE_NAME = 'mobiletargeting';\nvar EXPIRED_TOKEN_CODE = 'ExpiredTokenException';\nvar UPDATE_ENDPOINT = '_update_endpoint';\nvar SESSION_START = '_session.start';\nvar SESSION_STOP = '_session.stop';\nvar BEACON_SUPPORTED = typeof navigator !== 'undefined' && navigator && typeof navigator.sendBeacon === 'function'; // events buffer\n\nvar BUFFER_SIZE = 1000;\nvar FLUSH_SIZE = 100;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\n\nvar RESEND_LIMIT = 5; // params: { event: {name: , .... }, timeStamp, config, resendLimits }\n\nvar AWSPinpointProvider =\n/** @class */\nfunction () {\n  function AWSPinpointProvider(config) {\n    this._endpointGenerating = true;\n    this._endpointUpdateInProgress = false;\n    this._buffer = null;\n    this._endpointBuffer = [];\n    this._config = config ? config : {};\n    this._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n    this._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n    this._clientInfo = ClientDevice.clientInfo();\n  }\n  /**\n   * get the category of the plugin\n   */\n\n\n  AWSPinpointProvider.prototype.getCategory = function () {\n    return AWSPinpointProvider.category;\n  };\n  /**\n   * get provider name of the plugin\n   */\n\n\n  AWSPinpointProvider.prototype.getProviderName = function () {\n    return AWSPinpointProvider.providerName;\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n\n\n  AWSPinpointProvider.prototype.configure = function (config) {\n    var _this = this;\n\n    logger.debug('configure Analytics', config);\n    var conf = config || {};\n    this._config = Object.assign({}, this._config, conf); // If autoSessionRecord is enabled, we need to wait for the endpoint to be\n    // updated before sending any events. See `sendEvents` in `Analytics.ts`\n\n    this._endpointGenerating = !!config['autoSessionRecord'];\n\n    if (this._config.appId && !this._config.disabled) {\n      if (!this._config.endpointId) {\n        var cacheKey = this.getProviderName() + '_' + this._config.appId;\n\n        this._getEndpointId(cacheKey).then(function (endpointId) {\n          logger.debug('setting endpoint id from the cache', endpointId);\n          _this._config.endpointId = endpointId;\n          dispatchAnalyticsEvent('pinpointProvider_configured', null);\n        }).catch(function (err) {\n          logger.debug('Failed to generate endpointId', err);\n        });\n      } else {\n        dispatchAnalyticsEvent('pinpointProvider_configured', null);\n      }\n    } else {\n      this._flushBuffer();\n    }\n\n    return this._config;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n\n\n  AWSPinpointProvider.prototype.record = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, timestamp;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('_public record', params);\n            return [4\n            /*yield*/\n            , this._getCredentials()];\n\n          case 1:\n            credentials = _a.sent();\n\n            if (!credentials || !this._config.appId || !this._config.region) {\n              logger.debug('cannot send events without credentials, applicationId or region');\n              return [2\n              /*return*/\n              , handlers.reject(new Error('No credentials, applicationId or region'))];\n            }\n\n            this._initClients(credentials);\n\n            timestamp = new Date().getTime(); // attach the session and eventId\n\n            this._generateSession(params);\n\n            params.event.eventId = uuid();\n            Object.assign(params, {\n              timestamp: timestamp,\n              config: this._config\n            });\n\n            if (params.event.immediate) {\n              return [2\n              /*return*/\n              , this._send(params, handlers)];\n            } else {\n              this._putToBuffer(params, handlers);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._sendEndpointUpdate = function (endpointObject) {\n    return __awaiter(this, void 0, void 0, function () {\n      var next;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._endpointUpdateInProgress) {\n              this._endpointBuffer.push(endpointObject);\n\n              return [2\n              /*return*/\n              ];\n            }\n\n            this._endpointUpdateInProgress = true;\n            return [4\n            /*yield*/\n            , this._updateEndpoint(endpointObject)];\n\n          case 1:\n            _a.sent();\n\n            next = this._endpointBuffer.shift();\n            this._endpointUpdateInProgress = false;\n            next && this._sendEndpointUpdate(next);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   * @param params - params for event recording\n   * Put events into buffer\n   */\n\n\n  AWSPinpointProvider.prototype._putToBuffer = function (params, handlers) {\n    if (params.event.name === UPDATE_ENDPOINT) {\n      this._sendEndpointUpdate({\n        params: params,\n        handlers: handlers\n      });\n\n      return;\n    }\n\n    this._buffer && this._buffer.push({\n      params: params,\n      handlers: handlers\n    });\n  };\n\n  AWSPinpointProvider.prototype._generateSession = function (params) {\n    this._sessionId = this._sessionId || uuid();\n    var event = params.event;\n\n    switch (event.name) {\n      case SESSION_START:\n        // refresh the session id and session start time\n        this._sessionStartTimestamp = new Date().getTime();\n        this._sessionId = uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n        break;\n\n      case SESSION_STOP:\n        var stopTimestamp = new Date().getTime();\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          Duration: stopTimestamp - this._sessionStartTimestamp,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n          StopTimestamp: new Date(stopTimestamp).toISOString()\n        };\n        this._sessionId = undefined;\n        this._sessionStartTimestamp = undefined;\n        break;\n\n      default:\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n    }\n  };\n\n  AWSPinpointProvider.prototype._send = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var event;\n      return __generator(this, function (_a) {\n        event = params.event;\n\n        switch (event.name) {\n          case UPDATE_ENDPOINT:\n            return [2\n            /*return*/\n            , this._updateEndpoint({\n              params: params,\n              handlers: handlers\n            })];\n\n          case SESSION_STOP:\n            return [2\n            /*return*/\n            , this._pinpointSendStopSession(params, handlers)];\n\n          default:\n            return [2\n            /*return*/\n            , this._pinpointPutEvents(params, handlers)];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._generateBatchItemContext = function (params) {\n    var _a;\n\n    var event = params.event,\n        timestamp = params.timestamp,\n        config = params.config;\n    var name = event.name,\n        attributes = event.attributes,\n        metrics = event.metrics,\n        eventId = event.eventId,\n        session = event.session;\n    var appId = config.appId,\n        endpointId = config.endpointId;\n    var endpointContext = {};\n    var eventParams = {\n      ApplicationId: appId,\n      EventsRequest: {\n        BatchItem: {}\n      }\n    };\n    var endpointObj = {};\n    endpointObj.Endpoint = endpointContext;\n    endpointObj.Events = (_a = {}, _a[eventId] = {\n      EventType: name,\n      Timestamp: new Date(timestamp).toISOString(),\n      Attributes: attributes,\n      Metrics: metrics,\n      Session: session\n    }, _a);\n    eventParams.EventsRequest.BatchItem[endpointId] = endpointObj;\n    return eventParams;\n  };\n\n  AWSPinpointProvider.prototype._pinpointPutEvents = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventId, endpointId, eventParams, command, data, _a, _b, _c, _d, StatusCode, Message, err_1;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            eventId = params.event.eventId, endpointId = params.config.endpointId;\n            eventParams = this._generateBatchItemContext(params);\n            command = new PutEventsCommand(eventParams);\n            _e.label = 1;\n\n          case 1:\n            _e.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.pinpointClient.send(command)];\n\n          case 2:\n            data = _e.sent();\n            _a = data, _b = endpointId, _c = eventId, _d = _a.EventsResponse.Results[_b].EventsItemResponse[_c], StatusCode = _d.StatusCode, Message = _d.Message;\n\n            if (ACCEPTED_CODES.includes(StatusCode)) {\n              logger.debug('record event success. ', data);\n              return [2\n              /*return*/\n              , handlers.resolve(data)];\n            } else {\n              if (RETRYABLE_CODES.includes(StatusCode)) {\n                this._retry(params, handlers);\n              } else {\n                logger.error(\"Event \" + eventId + \" is not accepted, the error is \" + Message);\n                return [2\n                /*return*/\n                , handlers.reject(data)];\n              }\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_1 = _e.sent();\n\n            this._eventError(err_1);\n\n            return [2\n            /*return*/\n            , handlers.reject(err_1)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._pinpointSendStopSession = function (params, handlers) {\n    if (!BEACON_SUPPORTED) {\n      this._pinpointPutEvents(params, handlers);\n\n      return;\n    }\n\n    var eventParams = this._generateBatchItemContext(params);\n\n    var region = this._config.region;\n    var ApplicationId = eventParams.ApplicationId,\n        EventsRequest = eventParams.EventsRequest;\n    var accessInfo = {\n      secret_key: this._config.credentials.secretAccessKey,\n      access_key: this._config.credentials.accessKeyId,\n      session_token: this._config.credentials.sessionToken\n    };\n    var url = \"https://pinpoint.\" + region + \".amazonaws.com/v1/apps/\" + ApplicationId + \"/events/legacy\";\n    var body = JSON.stringify(EventsRequest);\n    var method = 'POST';\n    var request = {\n      url: url,\n      body: body,\n      method: method\n    };\n    var serviceInfo = {\n      region: region,\n      service: MOBILE_SERVICE_NAME\n    };\n    var requestUrl = Signer.signUrl(request, accessInfo, serviceInfo, null);\n    var success = navigator.sendBeacon(requestUrl, body);\n\n    if (success) {\n      return handlers.resolve('sendBeacon success');\n    }\n\n    return handlers.reject('sendBeacon failure');\n  };\n\n  AWSPinpointProvider.prototype._retry = function (params, handlers) {\n    var resendLimit = params.config.resendLimit; // For backward compatibility\n\n    params.resendLimit = typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n\n    if (params.resendLimit-- > 0) {\n      logger.debug(\"resending event \" + params.eventName + \" with \" + params.resendLimit + \" retry times left\");\n\n      this._pinpointPutEvents(params, handlers);\n    } else {\n      logger.debug(\"retry times used up for event \" + params.eventName);\n    }\n  };\n\n  AWSPinpointProvider.prototype._updateEndpoint = function (endpointObject) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params, handlers, config, event, appId, endpointId, request, update_params, command, data, err_2, failureData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = endpointObject.params, handlers = endpointObject.handlers;\n            config = params.config, event = params.event;\n            appId = config.appId, endpointId = config.endpointId;\n            request = this._endpointRequest(config, JS.transferKeyToLowerCase(event, [], ['attributes', 'userAttributes', 'Attributes', 'UserAttributes']));\n            update_params = {\n              ApplicationId: appId,\n              EndpointId: endpointId,\n              EndpointRequest: request\n            };\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            command = new UpdateEndpointCommand(update_params);\n            return [4\n            /*yield*/\n            , this.pinpointClient.send(command)];\n\n          case 2:\n            data = _a.sent();\n            logger.debug('updateEndpoint success', data);\n            this._endpointGenerating = false;\n\n            this._resumeBuffer();\n\n            handlers.resolve(data);\n            return [2\n            /*return*/\n            ];\n\n          case 3:\n            err_2 = _a.sent();\n            failureData = {\n              err: err_2,\n              update_params: update_params,\n              endpointObject: endpointObject\n            };\n            return [2\n            /*return*/\n            , this._handleEndpointUpdateFailure(failureData)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._handleEndpointUpdateFailure = function (failureData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err, endpointObject, statusCode, exponential;\n      return __generator(this, function (_a) {\n        err = failureData.err, endpointObject = failureData.endpointObject;\n        statusCode = err.$metadata && err.$metadata.httpStatusCode;\n        logger.debug('updateEndpoint error', err);\n\n        switch (statusCode) {\n          case FORBIDDEN_CODE:\n            return [2\n            /*return*/\n            , this._handleEndpointUpdateForbidden(failureData)];\n\n          default:\n            if (RETRYABLE_CODES.includes(statusCode)) {\n              exponential = true;\n              return [2\n              /*return*/\n              , this._retryEndpointUpdate(endpointObject, exponential)];\n            }\n\n            logger.error('updateEndpoint failed', err);\n            endpointObject.handlers.reject(err);\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._handleEndpointUpdateForbidden = function (failureData) {\n    var err = failureData.err,\n        endpointObject = failureData.endpointObject;\n    var code = err.code,\n        retryable = err.retryable;\n\n    if (code !== EXPIRED_TOKEN_CODE && !retryable) {\n      return endpointObject.handlers.reject(err);\n    }\n\n    this._retryEndpointUpdate(endpointObject);\n  };\n\n  AWSPinpointProvider.prototype._retryEndpointUpdate = function (endpointObject, exponential) {\n    if (exponential === void 0) {\n      exponential = false;\n    }\n\n    logger.debug('_retryEndpointUpdate', endpointObject);\n    var params = endpointObject.params; // TODO: implement retry with exp back off once exp function is available\n\n    var resendLimit = params.config.resendLimit;\n    params.resendLimit = typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n\n    if (params.resendLimit-- > 0) {\n      logger.debug(\"resending endpoint update \" + params.event.eventId + \" with \" + params.resendLimit + \" retry attempts remaining\"); // insert at the front of endpointBuffer\n\n      this._endpointBuffer.length ? this._endpointBuffer.unshift(endpointObject) : this._updateEndpoint(endpointObject);\n      return;\n    }\n\n    logger.warn(\"resending endpoint update \" + params.event.eventId + \" failed after \" + params.config.resendLimit + \" attempts\");\n\n    if (this._endpointGenerating) {\n      logger.error('Initial endpoint update failed. ');\n    }\n  };\n  /**\n   * @private\n   * @param config\n   * Init the clients\n   */\n\n\n  AWSPinpointProvider.prototype._initClients = function (credentials) {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityId, region;\n      return __generator(this, function (_a) {\n        logger.debug('init clients');\n\n        if (this.pinpointClient && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n          logger.debug('no change for aws credentials, directly return from init');\n          return [2\n          /*return*/\n          ];\n        }\n\n        identityId = this._config.credentials ? this._config.credentials.identityId : null;\n        this._config.credentials = credentials;\n        region = this._config.region;\n        logger.debug('init clients with credentials', credentials);\n        this.pinpointClient = new PinpointClient({\n          region: region,\n          credentials: credentials,\n          customUserAgent: getAmplifyUserAgent()\n        }); // TODO: remove this middleware once a long term fix is implemented by aws-sdk-js team.\n\n        this.pinpointClient.middlewareStack.addRelativeTo(function (next) {\n          return function (args) {\n            delete args.request.headers['amz-sdk-invocation-id'];\n            delete args.request.headers['amz-sdk-request'];\n            return next(args);\n          };\n        }, {\n          step: 'finalizeRequest',\n          relation: 'after',\n          toMiddleware: 'retryMiddleware'\n        });\n\n        if (this._bufferExists() && identityId === credentials.identityId) {\n          // if the identity has remained the same, pass the updated client to the buffer\n          this._updateBufferClient();\n        } else {\n          // otherwise flush the buffer and instantiate a new one\n          // this will cause the old buffer to send any remaining events\n          // with the old credentials and then stop looping and shortly thereafter get picked up by GC\n          this._initBuffer();\n        }\n\n        this._customizePinpointClientReq();\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._bufferExists = function () {\n    return this._buffer && this._buffer instanceof EventsBuffer;\n  };\n\n  AWSPinpointProvider.prototype._initBuffer = function () {\n    if (this._bufferExists()) {\n      this._flushBuffer();\n    }\n\n    this._buffer = new EventsBuffer(this.pinpointClient, this._config); // if the first endpoint update hasn't yet resolved pause the buffer to\n    // prevent race conditions. It will be resumed as soon as that request succeeds\n\n    if (this._endpointGenerating) {\n      this._buffer.pause();\n    }\n  };\n\n  AWSPinpointProvider.prototype._updateBufferClient = function () {\n    if (this._bufferExists()) {\n      this._buffer.updateClient(this.pinpointClient);\n    }\n  };\n\n  AWSPinpointProvider.prototype._flushBuffer = function () {\n    if (this._bufferExists()) {\n      this._buffer.flush();\n\n      this._buffer = null;\n    }\n  };\n\n  AWSPinpointProvider.prototype._resumeBuffer = function () {\n    if (this._bufferExists()) {\n      this._buffer.resume();\n    }\n  };\n\n  AWSPinpointProvider.prototype._customizePinpointClientReq = function () {// TODO FIXME: Find a middleware to do this with AWS V3 SDK\n    // if (Platform.isReactNative) {\n    // \tthis.pinpointClient.customizeRequests(request => {\n    // \t\trequest.on('build', req => {\n    // \t\t\treq.httpRequest.headers['user-agent'] = Platform.userAgent;\n    // \t\t});\n    // \t});\n    // }\n  };\n\n  AWSPinpointProvider.prototype._getEndpointId = function (cacheKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointId, ttl, expiration;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Cache.getItem(cacheKey)];\n\n          case 1:\n            endpointId = _a.sent();\n            logger.debug('endpointId from cache', endpointId, 'type', typeof endpointId);\n\n            if (!endpointId) {\n              endpointId = uuid();\n              ttl = 1000 * 60 * 60 * 24 * 365 * 100;\n              expiration = new Date().getTime() + ttl;\n              Cache.setItem(cacheKey, endpointId, {\n                expires: expiration,\n                priority: 1\n              });\n            }\n\n            return [2\n            /*return*/\n            , endpointId];\n        }\n      });\n    });\n  };\n  /**\n   * EndPoint request\n   * @return {Object} - The request of updating endpoint\n   */\n\n\n  AWSPinpointProvider.prototype._endpointRequest = function (config, event) {\n    var credentials = config.credentials;\n    var clientInfo = this._clientInfo || {};\n    var clientContext = config.clientContext || {}; // for now we have three different ways for default endpoint configurations\n    // clientInfo\n    // clientContext (deprecated)\n    // config.endpoint\n\n    var defaultEndpointConfig = config.endpoint || {};\n    var demographicByClientInfo = {\n      appVersion: clientInfo.appVersion,\n      make: clientInfo.make,\n      model: clientInfo.model,\n      modelVersion: clientInfo.version,\n      platform: clientInfo.platform\n    }; // for backward compatibility\n\n    var clientId = clientContext.clientId,\n        appTitle = clientContext.appTitle,\n        appVersionName = clientContext.appVersionName,\n        appVersionCode = clientContext.appVersionCode,\n        appPackageName = clientContext.appPackageName,\n        demographicByClientContext = __rest(clientContext, [\"clientId\", \"appTitle\", \"appVersionName\", \"appVersionCode\", \"appPackageName\"]);\n\n    var channelType = event.address ? clientInfo.platform === 'android' ? 'GCM' : 'APNS' : undefined;\n\n    var tmp = __assign(__assign(__assign({\n      channelType: channelType,\n      requestId: uuid(),\n      effectiveDate: new Date().toISOString()\n    }, defaultEndpointConfig), event), {\n      attributes: __assign(__assign({}, defaultEndpointConfig.attributes), event.attributes),\n      demographic: __assign(__assign(__assign(__assign({}, demographicByClientInfo), demographicByClientContext), defaultEndpointConfig.demographic), event.demographic),\n      location: __assign(__assign({}, defaultEndpointConfig.location), event.location),\n      metrics: __assign(__assign({}, defaultEndpointConfig.metrics), event.metrics),\n      user: {\n        userId: event.userId || defaultEndpointConfig.userId || credentials.identityId,\n        userAttributes: __assign(__assign({}, defaultEndpointConfig.userAttributes), event.userAttributes)\n      }\n    }); // eliminate unnecessary params\n\n\n    var userId = tmp.userId,\n        userAttributes = tmp.userAttributes,\n        name = tmp.name,\n        session = tmp.session,\n        eventId = tmp.eventId,\n        immediate = tmp.immediate,\n        ret = __rest(tmp, [\"userId\", \"userAttributes\", \"name\", \"session\", \"eventId\", \"immediate\"]);\n\n    return JS.transferKeyToUpperCase(ret, [], ['metrics', 'userAttributes', 'attributes']);\n  };\n\n  AWSPinpointProvider.prototype._eventError = function (err) {\n    logger.error('record event failed.', err);\n    logger.warn(\"Please ensure you have updated your Pinpoint IAM Policy \" + \"with the Action: \\\"mobiletargeting:PutEvents\\\" \" + \"in order to record events\");\n  };\n\n  AWSPinpointProvider.prototype._getCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, err_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2\n            /*return*/\n            , null];\n            logger.debug('set credentials for analytics', credentials);\n            return [2\n            /*return*/\n            , Credentials.shear(credentials)];\n\n          case 2:\n            err_3 = _a.sent();\n            logger.debug('ensure credentials error', err_3);\n            return [2\n            /*return*/\n            , null];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.category = 'Analytics';\n  AWSPinpointProvider.providerName = 'AWSPinpoint';\n  return AWSPinpointProvider;\n}();\n\nexport { AWSPinpointProvider };\n/**\n * @deprecated use named import\n */\n\nexport default AWSPinpointProvider;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","ClientDevice","Credentials","Signer","JS","Hub","getAmplifyUserAgent","PinpointClient","PutEventsCommand","UpdateEndpointCommand","Cache","v1","uuid","EventsBuffer","AMPLIFY_SYMBOL","Symbol","for","dispatchAnalyticsEvent","event","data","dispatch","logger","RETRYABLE_CODES","ACCEPTED_CODES","FORBIDDEN_CODE","MOBILE_SERVICE_NAME","EXPIRED_TOKEN_CODE","UPDATE_ENDPOINT","SESSION_START","SESSION_STOP","BEACON_SUPPORTED","navigator","sendBeacon","BUFFER_SIZE","FLUSH_SIZE","FLUSH_INTERVAL","RESEND_LIMIT","config","_buffer","_endpointBuffer","_config","bufferSize","flushSize","flushInterval","resendLimit","_clientInfo","clientInfo","AWSPinpointProvider","category","providerName","debug","conf","Object","assign","_endpointGenerating","appId","disabled","endpointId","cacheKey","getProviderName","_getEndpointId","then","_this","catch","err","_flushBuffer","params","handlers","_getCredentials","credentials","_a","region","reject","Error","_initClients","timestamp","Date","getTime","_generateSession","eventId","immediate","_send","_putToBuffer","endpointObject","_endpointUpdateInProgress","push","_updateEndpoint","next","shift","_sendEndpointUpdate","name","_sessionId","_sessionStartTimestamp","session","Id","StartTimestamp","toISOString","stopTimestamp","Duration","StopTimestamp","undefined","_pinpointSendStopSession","_pinpointPutEvents","attributes","metrics","endpointContext","eventParams","ApplicationId","EventsRequest","BatchItem","endpointObj","Endpoint","Events","EventType","Timestamp","Attributes","Metrics","Session","_generateBatchItemContext","command","pinpointClient","send","_e","_b","_c","_d","StatusCode","Message","includes","resolve","_retry","error","_eventError","err_1","accessInfo","secret_key","secretAccessKey","access_key","accessKeyId","session_token","sessionToken","url","body","JSON","stringify","method","request","serviceInfo","service","requestUrl","signUrl","success","eventName","_endpointRequest","transferKeyToLowerCase","update_params","EndpointId","EndpointRequest","_resumeBuffer","failureData","_handleEndpointUpdateFailure","statusCode","$metadata","httpStatusCode","_handleEndpointUpdateForbidden","exponential","_retryEndpointUpdate","retryable","code","length","unshift","warn","identityId","customUserAgent","middlewareStack","addRelativeTo","args","headers","step","relation","toMiddleware","_bufferExists","_updateBufferClient","_initBuffer","_customizePinpointClientReq","pause","updateClient","flush","resume","getItem","ttl","expiration","setItem","expires","priority","clientContext","defaultEndpointConfig","endpoint","demographicByClientInfo","appVersion","make","model","modelVersion","version","platform","appTitle","appVersionName","appVersionCode","appPackageName","demographicByClientContext","channelType","address","tmp","requestId","effectiveDate","demographic","location","user","userId","userAttributes","ret","transferKeyToUpperCase","get","shear","err_3"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-amplify\\analytics\\src\\Providers\\AWSPinpointProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport {\n\tConsoleLogger as Logger,\n\tClientDevice,\n\tCredentials,\n\tSigner,\n\tJS,\n\tHub,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport {\n\tEventsBatch,\n\tPinpointClient,\n\tPutEventsCommand,\n\tPutEventsCommandInput,\n\tUpdateEndpointCommand,\n} from '@aws-sdk/client-pinpoint';\nimport Cache from '@aws-amplify/cache';\n\nimport {\n\tAnalyticsProvider,\n\tPromiseHandlers,\n\tEndpointBuffer,\n\tEventParams,\n\tEventObject,\n\tEndpointFailureData,\n} from '../types';\nimport { v1 as uuid } from 'uuid';\nimport EventsBuffer from './EventBuffer';\n\nconst AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' &&\ntypeof Symbol.for === 'function'\n\t? Symbol.for('amplify_default')\n\t: '@@amplify_default') as Symbol;\n\nconst dispatchAnalyticsEvent = (event, data) => {\n\tHub.dispatch('analytics', { event, data }, 'Analytics', AMPLIFY_SYMBOL);\n};\n\nconst logger = new Logger('AWSPinpointProvider');\nconst RETRYABLE_CODES = [429, 500];\nconst ACCEPTED_CODES = [202];\nconst FORBIDDEN_CODE = 403;\nconst MOBILE_SERVICE_NAME = 'mobiletargeting';\nconst EXPIRED_TOKEN_CODE = 'ExpiredTokenException';\nconst UPDATE_ENDPOINT = '_update_endpoint';\nconst SESSION_START = '_session.start';\nconst SESSION_STOP = '_session.stop';\n\nconst BEACON_SUPPORTED =\n\ttypeof navigator !== 'undefined' &&\n\tnavigator &&\n\ttypeof navigator.sendBeacon === 'function';\n\n// events buffer\nconst BUFFER_SIZE = 1000;\nconst FLUSH_SIZE = 100;\nconst FLUSH_INTERVAL = 5 * 1000; // 5s\nconst RESEND_LIMIT = 5;\n\n// params: { event: {name: , .... }, timeStamp, config, resendLimits }\nexport class AWSPinpointProvider implements AnalyticsProvider {\n\tstatic category = 'Analytics';\n\tstatic providerName = 'AWSPinpoint';\n\n\tprivate _config;\n\tprivate pinpointClient;\n\tprivate _sessionId;\n\tprivate _sessionStartTimestamp;\n\tprivate _buffer: EventsBuffer;\n\tprivate _endpointBuffer: EndpointBuffer;\n\tprivate _clientInfo;\n\tprivate _endpointGenerating = true;\n\tprivate _endpointUpdateInProgress = false;\n\n\tconstructor(config?) {\n\t\tthis._buffer = null;\n\t\tthis._endpointBuffer = [];\n\t\tthis._config = config ? config : {};\n\t\tthis._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n\t\tthis._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n\t\tthis._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n\t\tthis._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n\t\tthis._clientInfo = ClientDevice.clientInfo();\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tgetCategory(): string {\n\t\treturn AWSPinpointProvider.category;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tgetProviderName(): string {\n\t\treturn AWSPinpointProvider.providerName;\n\t}\n\n\t/**\n\t * configure the plugin\n\t * @param {Object} config - configuration\n\t */\n\tpublic configure(config): object {\n\t\tlogger.debug('configure Analytics', config);\n\t\tconst conf = config || {};\n\t\tthis._config = Object.assign({}, this._config, conf);\n\n\t\t// If autoSessionRecord is enabled, we need to wait for the endpoint to be\n\t\t// updated before sending any events. See `sendEvents` in `Analytics.ts`\n\t\tthis._endpointGenerating = !!config['autoSessionRecord'];\n\n\t\tif (this._config.appId && !this._config.disabled) {\n\t\t\tif (!this._config.endpointId) {\n\t\t\t\tconst cacheKey = this.getProviderName() + '_' + this._config.appId;\n\t\t\t\tthis._getEndpointId(cacheKey)\n\t\t\t\t\t.then(endpointId => {\n\t\t\t\t\t\tlogger.debug('setting endpoint id from the cache', endpointId);\n\t\t\t\t\t\tthis._config.endpointId = endpointId;\n\t\t\t\t\t\tdispatchAnalyticsEvent('pinpointProvider_configured', null);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\tlogger.debug('Failed to generate endpointId', err);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdispatchAnalyticsEvent('pinpointProvider_configured', null);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._flushBuffer();\n\t\t}\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * record an event\n\t * @param {Object} params - the params of an event\n\t */\n\tpublic async record(params: EventParams, handlers: PromiseHandlers) {\n\t\tlogger.debug('_public record', params);\n\t\tconst credentials = await this._getCredentials();\n\t\tif (!credentials || !this._config.appId || !this._config.region) {\n\t\t\tlogger.debug(\n\t\t\t\t'cannot send events without credentials, applicationId or region'\n\t\t\t);\n\t\t\treturn handlers.reject(\n\t\t\t\tnew Error('No credentials, applicationId or region')\n\t\t\t);\n\t\t}\n\n\t\tthis._initClients(credentials);\n\n\t\tconst timestamp = new Date().getTime();\n\t\t// attach the session and eventId\n\t\tthis._generateSession(params);\n\t\tparams.event.eventId = uuid();\n\n\t\tObject.assign(params, { timestamp, config: this._config });\n\n\t\tif (params.event.immediate) {\n\t\t\treturn this._send(params, handlers);\n\t\t} else {\n\t\t\tthis._putToBuffer(params, handlers);\n\t\t}\n\t}\n\n\tprivate async _sendEndpointUpdate(endpointObject: EventObject) {\n\t\tif (this._endpointUpdateInProgress) {\n\t\t\tthis._endpointBuffer.push(endpointObject);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._endpointUpdateInProgress = true;\n\t\tawait this._updateEndpoint(endpointObject);\n\n\t\tconst next = this._endpointBuffer.shift();\n\t\tthis._endpointUpdateInProgress = false;\n\n\t\tnext && this._sendEndpointUpdate(next);\n\t}\n\n\t/**\n\t * @private\n\t * @param params - params for event recording\n\t * Put events into buffer\n\t */\n\tprivate _putToBuffer(params, handlers) {\n\t\tif (params.event.name === UPDATE_ENDPOINT) {\n\t\t\tthis._sendEndpointUpdate({ params, handlers });\n\t\t\treturn;\n\t\t}\n\n\t\tthis._buffer && this._buffer.push({ params, handlers });\n\t}\n\n\tprivate _generateSession(params) {\n\t\tthis._sessionId = this._sessionId || uuid();\n\t\tconst { event } = params;\n\n\t\tswitch (event.name) {\n\t\t\tcase SESSION_START:\n\t\t\t\t// refresh the session id and session start time\n\t\t\t\tthis._sessionStartTimestamp = new Date().getTime();\n\t\t\t\tthis._sessionId = uuid();\n\t\t\t\tevent.session = {\n\t\t\t\t\tId: this._sessionId,\n\t\t\t\t\tStartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase SESSION_STOP:\n\t\t\t\tconst stopTimestamp = new Date().getTime();\n\t\t\t\tthis._sessionStartTimestamp =\n\t\t\t\t\tthis._sessionStartTimestamp || new Date().getTime();\n\t\t\t\tthis._sessionId = this._sessionId || uuid();\n\t\t\t\tevent.session = {\n\t\t\t\t\tId: this._sessionId,\n\t\t\t\t\tDuration: stopTimestamp - this._sessionStartTimestamp,\n\t\t\t\t\tStartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n\t\t\t\t\tStopTimestamp: new Date(stopTimestamp).toISOString(),\n\t\t\t\t};\n\t\t\t\tthis._sessionId = undefined;\n\t\t\t\tthis._sessionStartTimestamp = undefined;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._sessionStartTimestamp =\n\t\t\t\t\tthis._sessionStartTimestamp || new Date().getTime();\n\t\t\t\tthis._sessionId = this._sessionId || uuid();\n\t\t\t\tevent.session = {\n\t\t\t\t\tId: this._sessionId,\n\t\t\t\t\tStartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n\t\t\t\t};\n\t\t}\n\t}\n\n\tprivate async _send(params, handlers) {\n\t\tconst { event } = params;\n\n\t\tswitch (event.name) {\n\t\t\tcase UPDATE_ENDPOINT:\n\t\t\t\treturn this._updateEndpoint({ params, handlers });\n\t\t\tcase SESSION_STOP:\n\t\t\t\treturn this._pinpointSendStopSession(params, handlers);\n\t\t\tdefault:\n\t\t\t\treturn this._pinpointPutEvents(params, handlers);\n\t\t}\n\t}\n\n\tprivate _generateBatchItemContext(params) {\n\t\tconst { event, timestamp, config } = params;\n\t\tconst { name, attributes, metrics, eventId, session } = event;\n\t\tconst { appId, endpointId } = config;\n\n\t\tconst endpointContext = {};\n\n\t\tconst eventParams: PutEventsCommandInput = {\n\t\t\tApplicationId: appId,\n\t\t\tEventsRequest: {\n\t\t\t\tBatchItem: {},\n\t\t\t},\n\t\t};\n\n\t\tconst endpointObj: EventsBatch = {} as EventsBatch;\n\t\tendpointObj.Endpoint = endpointContext;\n\t\tendpointObj.Events = {\n\t\t\t[eventId]: {\n\t\t\t\tEventType: name,\n\t\t\t\tTimestamp: new Date(timestamp).toISOString(),\n\t\t\t\tAttributes: attributes,\n\t\t\t\tMetrics: metrics,\n\t\t\t\tSession: session,\n\t\t\t},\n\t\t};\n\t\teventParams.EventsRequest.BatchItem[endpointId] = endpointObj;\n\n\t\treturn eventParams;\n\t}\n\n\tprivate async _pinpointPutEvents(params, handlers) {\n\t\tconst {\n\t\t\tevent: { eventId },\n\t\t\tconfig: { endpointId },\n\t\t} = params;\n\t\tconst eventParams = this._generateBatchItemContext(params);\n\t\tconst command: PutEventsCommand = new PutEventsCommand(eventParams);\n\n\t\ttry {\n\t\t\tconst data = await this.pinpointClient.send(command);\n\t\t\tconst {\n\t\t\t\tEventsResponse: {\n\t\t\t\t\tResults: {\n\t\t\t\t\t\t[endpointId]: {\n\t\t\t\t\t\t\tEventsItemResponse: {\n\t\t\t\t\t\t\t\t[eventId]: { StatusCode, Message },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t} = data;\n\t\t\tif (ACCEPTED_CODES.includes(StatusCode)) {\n\t\t\t\tlogger.debug('record event success. ', data);\n\t\t\t\treturn handlers.resolve(data);\n\t\t\t} else {\n\t\t\t\tif (RETRYABLE_CODES.includes(StatusCode)) {\n\t\t\t\t\tthis._retry(params, handlers);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t`Event ${eventId} is not accepted, the error is ${Message}`\n\t\t\t\t\t);\n\t\t\t\t\treturn handlers.reject(data);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthis._eventError(err);\n\t\t\treturn handlers.reject(err);\n\t\t}\n\t}\n\n\tprivate _pinpointSendStopSession(params, handlers): Promise<string> {\n\t\tif (!BEACON_SUPPORTED) {\n\t\t\tthis._pinpointPutEvents(params, handlers);\n\t\t\treturn;\n\t\t}\n\n\t\tconst eventParams = this._generateBatchItemContext(params);\n\n\t\tconst { region } = this._config;\n\t\tconst { ApplicationId, EventsRequest } = eventParams;\n\n\t\tconst accessInfo = {\n\t\t\tsecret_key: this._config.credentials.secretAccessKey,\n\t\t\taccess_key: this._config.credentials.accessKeyId,\n\t\t\tsession_token: this._config.credentials.sessionToken,\n\t\t};\n\n\t\tconst url = `https://pinpoint.${region}.amazonaws.com/v1/apps/${ApplicationId}/events/legacy`;\n\t\tconst body = JSON.stringify(EventsRequest);\n\t\tconst method = 'POST';\n\n\t\tconst request = {\n\t\t\turl,\n\t\t\tbody,\n\t\t\tmethod,\n\t\t};\n\n\t\tconst serviceInfo = { region, service: MOBILE_SERVICE_NAME };\n\n\t\tconst requestUrl: string = Signer.signUrl(\n\t\t\trequest,\n\t\t\taccessInfo,\n\t\t\tserviceInfo,\n\t\t\tnull\n\t\t);\n\n\t\tconst success: boolean = navigator.sendBeacon(requestUrl, body);\n\n\t\tif (success) {\n\t\t\treturn handlers.resolve('sendBeacon success');\n\t\t}\n\t\treturn handlers.reject('sendBeacon failure');\n\t}\n\n\tprivate _retry(params, handlers) {\n\t\tconst {\n\t\t\tconfig: { resendLimit },\n\t\t} = params;\n\t\t// For backward compatibility\n\t\tparams.resendLimit =\n\t\t\ttypeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n\t\tif (params.resendLimit-- > 0) {\n\t\t\tlogger.debug(\n\t\t\t\t`resending event ${params.eventName} with ${params.resendLimit} retry times left`\n\t\t\t);\n\t\t\tthis._pinpointPutEvents(params, handlers);\n\t\t} else {\n\t\t\tlogger.debug(`retry times used up for event ${params.eventName}`);\n\t\t}\n\t}\n\n\tprivate async _updateEndpoint(endpointObject: EventObject) {\n\t\tconst { params, handlers } = endpointObject;\n\t\tconst { config, event } = params;\n\t\tconst { appId, endpointId } = config;\n\n\t\tconst request = this._endpointRequest(\n\t\t\tconfig,\n\t\t\tJS.transferKeyToLowerCase(\n\t\t\t\tevent,\n\t\t\t\t[],\n\t\t\t\t['attributes', 'userAttributes', 'Attributes', 'UserAttributes']\n\t\t\t)\n\t\t);\n\t\tconst update_params = {\n\t\t\tApplicationId: appId,\n\t\t\tEndpointId: endpointId,\n\t\t\tEndpointRequest: request,\n\t\t};\n\n\t\ttry {\n\t\t\tconst command: UpdateEndpointCommand = new UpdateEndpointCommand(\n\t\t\t\tupdate_params\n\t\t\t);\n\t\t\tconst data = await this.pinpointClient.send(command);\n\n\t\t\tlogger.debug('updateEndpoint success', data);\n\t\t\tthis._endpointGenerating = false;\n\t\t\tthis._resumeBuffer();\n\n\t\t\thandlers.resolve(data);\n\t\t\treturn;\n\t\t} catch (err) {\n\t\t\tconst failureData: EndpointFailureData = {\n\t\t\t\terr,\n\t\t\t\tupdate_params,\n\t\t\t\tendpointObject,\n\t\t\t};\n\n\t\t\treturn this._handleEndpointUpdateFailure(failureData);\n\t\t}\n\t}\n\n\tprivate async _handleEndpointUpdateFailure(failureData: EndpointFailureData) {\n\t\tconst { err, endpointObject } = failureData;\n\t\tconst statusCode = err.$metadata && err.$metadata.httpStatusCode;\n\n\t\tlogger.debug('updateEndpoint error', err);\n\n\t\tswitch (statusCode) {\n\t\t\tcase FORBIDDEN_CODE:\n\t\t\t\treturn this._handleEndpointUpdateForbidden(failureData);\n\t\t\tdefault:\n\t\t\t\tif (RETRYABLE_CODES.includes(statusCode)) {\n\t\t\t\t\t// Server error. Attempt exponential retry\n\t\t\t\t\tconst exponential = true;\n\t\t\t\t\treturn this._retryEndpointUpdate(endpointObject, exponential);\n\t\t\t\t}\n\t\t\t\tlogger.error('updateEndpoint failed', err);\n\t\t\t\tendpointObject.handlers.reject(err);\n\t\t}\n\t}\n\n\tprivate _handleEndpointUpdateForbidden(failureData: EndpointFailureData) {\n\t\tconst { err, endpointObject } = failureData;\n\n\t\tconst { code, retryable } = err;\n\n\t\tif (code !== EXPIRED_TOKEN_CODE && !retryable) {\n\t\t\treturn endpointObject.handlers.reject(err);\n\t\t}\n\n\t\tthis._retryEndpointUpdate(endpointObject);\n\t}\n\n\tprivate _retryEndpointUpdate(\n\t\tendpointObject: EventObject,\n\t\texponential: boolean = false\n\t) {\n\t\tlogger.debug('_retryEndpointUpdate', endpointObject);\n\t\tconst { params } = endpointObject;\n\n\t\t// TODO: implement retry with exp back off once exp function is available\n\t\tconst {\n\t\t\tconfig: { resendLimit },\n\t\t} = params;\n\n\t\tparams.resendLimit =\n\t\t\ttypeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n\n\t\tif (params.resendLimit-- > 0) {\n\t\t\tlogger.debug(\n\t\t\t\t`resending endpoint update ${params.event.eventId} with ${params.resendLimit} retry attempts remaining`\n\t\t\t);\n\t\t\t// insert at the front of endpointBuffer\n\t\t\tthis._endpointBuffer.length\n\t\t\t\t? this._endpointBuffer.unshift(endpointObject)\n\t\t\t\t: this._updateEndpoint(endpointObject);\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.warn(\n\t\t\t`resending endpoint update ${params.event.eventId} failed after ${params.config.resendLimit} attempts`\n\t\t);\n\n\t\tif (this._endpointGenerating) {\n\t\t\tlogger.error('Initial endpoint update failed. ');\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param config\n\t * Init the clients\n\t */\n\tprivate async _initClients(credentials) {\n\t\tlogger.debug('init clients');\n\n\t\tif (\n\t\t\tthis.pinpointClient &&\n\t\t\tthis._config.credentials &&\n\t\t\tthis._config.credentials.sessionToken === credentials.sessionToken &&\n\t\t\tthis._config.credentials.identityId === credentials.identityId\n\t\t) {\n\t\t\tlogger.debug('no change for aws credentials, directly return from init');\n\t\t\treturn;\n\t\t}\n\n\t\tconst identityId = this._config.credentials\n\t\t\t? this._config.credentials.identityId\n\t\t\t: null;\n\n\t\tthis._config.credentials = credentials;\n\t\tconst { region } = this._config;\n\t\tlogger.debug('init clients with credentials', credentials);\n\t\tthis.pinpointClient = new PinpointClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\t// TODO: remove this middleware once a long term fix is implemented by aws-sdk-js team.\n\t\tthis.pinpointClient.middlewareStack.addRelativeTo(\n\t\t\tnext => args => {\n\t\t\t\tdelete args.request.headers['amz-sdk-invocation-id'];\n\t\t\t\tdelete args.request.headers['amz-sdk-request'];\n\t\t\t\treturn next(args);\n\t\t\t},\n\t\t\t{\n\t\t\t\tstep: 'finalizeRequest',\n\t\t\t\trelation: 'after',\n\t\t\t\ttoMiddleware: 'retryMiddleware',\n\t\t\t}\n\t\t);\n\n\t\tif (this._bufferExists() && identityId === credentials.identityId) {\n\t\t\t// if the identity has remained the same, pass the updated client to the buffer\n\t\t\tthis._updateBufferClient();\n\t\t} else {\n\t\t\t// otherwise flush the buffer and instantiate a new one\n\t\t\t// this will cause the old buffer to send any remaining events\n\t\t\t// with the old credentials and then stop looping and shortly thereafter get picked up by GC\n\t\t\tthis._initBuffer();\n\t\t}\n\n\t\tthis._customizePinpointClientReq();\n\t}\n\n\tprivate _bufferExists() {\n\t\treturn this._buffer && this._buffer instanceof EventsBuffer;\n\t}\n\n\tprivate _initBuffer() {\n\t\tif (this._bufferExists()) {\n\t\t\tthis._flushBuffer();\n\t\t}\n\n\t\tthis._buffer = new EventsBuffer(this.pinpointClient, this._config);\n\n\t\t// if the first endpoint update hasn't yet resolved pause the buffer to\n\t\t// prevent race conditions. It will be resumed as soon as that request succeeds\n\t\tif (this._endpointGenerating) {\n\t\t\tthis._buffer.pause();\n\t\t}\n\t}\n\n\tprivate _updateBufferClient() {\n\t\tif (this._bufferExists()) {\n\t\t\tthis._buffer.updateClient(this.pinpointClient);\n\t\t}\n\t}\n\n\tprivate _flushBuffer() {\n\t\tif (this._bufferExists()) {\n\t\t\tthis._buffer.flush();\n\t\t\tthis._buffer = null;\n\t\t}\n\t}\n\n\tprivate _resumeBuffer() {\n\t\tif (this._bufferExists()) {\n\t\t\tthis._buffer.resume();\n\t\t}\n\t}\n\n\tprivate _customizePinpointClientReq() {\n\t\t// TODO FIXME: Find a middleware to do this with AWS V3 SDK\n\t\t// if (Platform.isReactNative) {\n\t\t// \tthis.pinpointClient.customizeRequests(request => {\n\t\t// \t\trequest.on('build', req => {\n\t\t// \t\t\treq.httpRequest.headers['user-agent'] = Platform.userAgent;\n\t\t// \t\t});\n\t\t// \t});\n\t\t// }\n\t}\n\n\tprivate async _getEndpointId(cacheKey) {\n\t\t// try to get from cache\n\t\tlet endpointId = await Cache.getItem(cacheKey);\n\t\tlogger.debug(\n\t\t\t'endpointId from cache',\n\t\t\tendpointId,\n\t\t\t'type',\n\t\t\ttypeof endpointId\n\t\t);\n\t\tif (!endpointId) {\n\t\t\tendpointId = uuid();\n\t\t\t// set a longer TTL to avoid endpoint id being deleted after the default TTL (3 days)\n\t\t\t// also set its priority to the highest to reduce its chance of being deleted when cache is full\n\t\t\tconst ttl = 1000 * 60 * 60 * 24 * 365 * 100; // 100 years\n\t\t\tconst expiration = new Date().getTime() + ttl;\n\t\t\tCache.setItem(cacheKey, endpointId, {\n\t\t\t\texpires: expiration,\n\t\t\t\tpriority: 1,\n\t\t\t});\n\t\t}\n\t\treturn endpointId;\n\t}\n\n\t/**\n\t * EndPoint request\n\t * @return {Object} - The request of updating endpoint\n\t */\n\tprivate _endpointRequest(config, event) {\n\t\tconst { credentials } = config;\n\t\tconst clientInfo = this._clientInfo || {};\n\t\tconst clientContext = config.clientContext || {};\n\t\t// for now we have three different ways for default endpoint configurations\n\t\t// clientInfo\n\t\t// clientContext (deprecated)\n\t\t// config.endpoint\n\t\tconst defaultEndpointConfig = config.endpoint || {};\n\t\tconst demographicByClientInfo = {\n\t\t\tappVersion: clientInfo.appVersion,\n\t\t\tmake: clientInfo.make,\n\t\t\tmodel: clientInfo.model,\n\t\t\tmodelVersion: clientInfo.version,\n\t\t\tplatform: clientInfo.platform,\n\t\t};\n\t\t// for backward compatibility\n\t\tconst {\n\t\t\tclientId,\n\t\t\tappTitle,\n\t\t\tappVersionName,\n\t\t\tappVersionCode,\n\t\t\tappPackageName,\n\t\t\t...demographicByClientContext\n\t\t} = clientContext;\n\t\tconst channelType = event.address\n\t\t\t? clientInfo.platform === 'android'\n\t\t\t\t? 'GCM'\n\t\t\t\t: 'APNS'\n\t\t\t: undefined;\n\t\tconst tmp = {\n\t\t\tchannelType,\n\t\t\trequestId: uuid(),\n\t\t\teffectiveDate: new Date().toISOString(),\n\t\t\t...defaultEndpointConfig,\n\t\t\t...event,\n\t\t\tattributes: {\n\t\t\t\t...defaultEndpointConfig.attributes,\n\t\t\t\t...event.attributes,\n\t\t\t},\n\t\t\tdemographic: {\n\t\t\t\t...demographicByClientInfo,\n\t\t\t\t...demographicByClientContext,\n\t\t\t\t...defaultEndpointConfig.demographic,\n\t\t\t\t...event.demographic,\n\t\t\t},\n\t\t\tlocation: {\n\t\t\t\t...defaultEndpointConfig.location,\n\t\t\t\t...event.location,\n\t\t\t},\n\t\t\tmetrics: {\n\t\t\t\t...defaultEndpointConfig.metrics,\n\t\t\t\t...event.metrics,\n\t\t\t},\n\t\t\tuser: {\n\t\t\t\tuserId:\n\t\t\t\t\tevent.userId ||\n\t\t\t\t\tdefaultEndpointConfig.userId ||\n\t\t\t\t\tcredentials.identityId,\n\t\t\t\tuserAttributes: {\n\t\t\t\t\t...defaultEndpointConfig.userAttributes,\n\t\t\t\t\t...event.userAttributes,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\t// eliminate unnecessary params\n\t\tconst {\n\t\t\tuserId,\n\t\t\tuserAttributes,\n\t\t\tname,\n\t\t\tsession,\n\t\t\teventId,\n\t\t\timmediate,\n\t\t\t...ret\n\t\t} = tmp;\n\t\treturn JS.transferKeyToUpperCase(\n\t\t\tret,\n\t\t\t[],\n\t\t\t['metrics', 'userAttributes', 'attributes']\n\t\t);\n\t}\n\n\tprivate _eventError(err: any) {\n\t\tlogger.error('record event failed.', err);\n\t\tlogger.warn(\n\t\t\t`Please ensure you have updated your Pinpoint IAM Policy ` +\n\t\t\t\t`with the Action: \"mobiletargeting:PutEvents\" ` +\n\t\t\t\t`in order to record events`\n\t\t);\n\t}\n\n\tprivate async _getCredentials() {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return null;\n\n\t\t\tlogger.debug('set credentials for analytics', credentials);\n\t\t\treturn Credentials.shear(credentials);\n\t\t} catch (err) {\n\t\t\tlogger.debug('ensure credentials error', err);\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default AWSPinpointProvider;\n"]},"metadata":{},"sourceType":"module"}