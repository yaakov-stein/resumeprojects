{"ast":null,"code":"/**\n * Converts a JS string from its native UCS-2/UTF-16 representation into a\n * Uint8Array of the bytes used to represent the equivalent characters in UTF-8.\n *\n * Cribbed from the `goog.crypt.stringToUtf8ByteArray` function in the Google\n * Closure library, though updated to use typed arrays.\n */\nexport var fromUtf8 = function (input) {\n  var bytes = [];\n\n  for (var i = 0, len = input.length; i < len; i++) {\n    var value = input.charCodeAt(i);\n\n    if (value < 0x80) {\n      bytes.push(value);\n    } else if (value < 0x800) {\n      bytes.push(value >> 6 | 192, value & 63 | 128);\n    } else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n      var surrogatePair = 0x10000 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);\n      bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);\n    } else {\n      bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);\n    }\n  }\n\n  return Uint8Array.from(bytes);\n};\n/**\n * Converts a typed array of bytes containing UTF-8 data into a native JS\n * string.\n *\n * Partly cribbed from the `goog.crypt.utf8ByteArrayToString` function in the\n * Google Closure library, though updated to use typed arrays and to better\n * handle astral plane code points.\n */\n\nexport var toUtf8 = function (input) {\n  var decoded = \"\";\n\n  for (var i = 0, len = input.length; i < len; i++) {\n    var byte = input[i];\n\n    if (byte < 0x80) {\n      decoded += String.fromCharCode(byte);\n    } else if (192 <= byte && byte < 224) {\n      var nextByte = input[++i];\n      decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);\n    } else if (240 <= byte && byte < 365) {\n      var surrogatePair = [byte, input[++i], input[++i], input[++i]];\n      var encoded = \"%\" + surrogatePair.map(function (byteValue) {\n        return byteValue.toString(16);\n      }).join(\"%\");\n      decoded += decodeURIComponent(encoded);\n    } else {\n      decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);\n    }\n  }\n\n  return decoded;\n};","map":{"version":3,"mappings":"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","names":["fromUtf8","input","bytes","i","len","length","value","charCodeAt","push","surrogatePair","Uint8Array","from","toUtf8","decoded","byte","String","fromCharCode","nextByte","encoded","map","byteValue","toString","join","decodeURIComponent"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-s3\\node_modules\\@aws-sdk\\util-utf8-browser\\src\\pureJs.ts"],"sourcesContent":["/**\n * Converts a JS string from its native UCS-2/UTF-16 representation into a\n * Uint8Array of the bytes used to represent the equivalent characters in UTF-8.\n *\n * Cribbed from the `goog.crypt.stringToUtf8ByteArray` function in the Google\n * Closure library, though updated to use typed arrays.\n */\nexport const fromUtf8 = (input: string): Uint8Array => {\n  const bytes: Array<number> = [];\n  for (let i = 0, len = input.length; i < len; i++) {\n    const value = input.charCodeAt(i);\n    if (value < 0x80) {\n      bytes.push(value);\n    } else if (value < 0x800) {\n      bytes.push((value >> 6) | 0b11000000, (value & 0b111111) | 0b10000000);\n    } else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n      const surrogatePair = 0x10000 + ((value & 0b1111111111) << 10) + (input.charCodeAt(++i) & 0b1111111111);\n      bytes.push(\n        (surrogatePair >> 18) | 0b11110000,\n        ((surrogatePair >> 12) & 0b111111) | 0b10000000,\n        ((surrogatePair >> 6) & 0b111111) | 0b10000000,\n        (surrogatePair & 0b111111) | 0b10000000\n      );\n    } else {\n      bytes.push((value >> 12) | 0b11100000, ((value >> 6) & 0b111111) | 0b10000000, (value & 0b111111) | 0b10000000);\n    }\n  }\n\n  return Uint8Array.from(bytes);\n};\n\n/**\n * Converts a typed array of bytes containing UTF-8 data into a native JS\n * string.\n *\n * Partly cribbed from the `goog.crypt.utf8ByteArrayToString` function in the\n * Google Closure library, though updated to use typed arrays and to better\n * handle astral plane code points.\n */\nexport const toUtf8 = (input: Uint8Array): string => {\n  let decoded = \"\";\n  for (let i = 0, len = input.length; i < len; i++) {\n    const byte = input[i];\n    if (byte < 0x80) {\n      decoded += String.fromCharCode(byte);\n    } else if (0b11000000 <= byte && byte < 0b11100000) {\n      const nextByte = input[++i];\n      decoded += String.fromCharCode(((byte & 0b11111) << 6) | (nextByte & 0b111111));\n    } else if (0b11110000 <= byte && byte < 0b101101101) {\n      const surrogatePair = [byte, input[++i], input[++i], input[++i]];\n      const encoded = \"%\" + surrogatePair.map((byteValue) => byteValue.toString(16)).join(\"%\");\n      decoded += decodeURIComponent(encoded);\n    } else {\n      decoded += String.fromCharCode(\n        ((byte & 0b1111) << 12) | ((input[++i] & 0b111111) << 6) | (input[++i] & 0b111111)\n      );\n    }\n  }\n\n  return decoded;\n};\n"]},"metadata":{},"sourceType":"module"}