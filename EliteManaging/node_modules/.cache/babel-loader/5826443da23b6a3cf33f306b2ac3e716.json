{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { runPolling } from \"./poller\";\nimport { validateWaiterOptions } from \"./utils\";\nimport { waiterServiceDefaults, WaiterState } from \"./waiter\";\n\nvar abortTimeout = function (abortSignal) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2\n      /*return*/\n      , new Promise(function (resolve) {\n        abortSignal.onabort = function () {\n          return resolve({\n            state: WaiterState.ABORTED\n          });\n        };\n      })];\n    });\n  });\n};\n/**\n * Create a waiter promise that only resolves when:\n * 1. Abort controller is signaled\n * 2. Max wait time is reached\n * 3. `acceptorChecks` succeeds, or fails\n * Otherwise, it invokes `acceptorChecks` with exponential-backoff delay.\n *\n * @internal\n */\n\n\nexport var createWaiter = function (options, input, acceptorChecks) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var params, exitConditions;\n    return __generator(this, function (_a) {\n      params = __assign(__assign({}, waiterServiceDefaults), options);\n      validateWaiterOptions(params);\n      exitConditions = [runPolling(params, input, acceptorChecks)];\n\n      if (options.abortController) {\n        exitConditions.push(abortTimeout(options.abortController.signal));\n      }\n\n      return [2\n      /*return*/\n      , Promise.race(exitConditions)];\n    });\n  });\n};","map":{"version":3,"mappings":";AAEA,SAASA,UAAT,QAA2B,UAA3B;AACA,SAASC,qBAAT,QAAsC,SAAtC;AACA,SAAsCC,qBAAtC,EAA6DC,WAA7D,QAAgF,UAAhF;;AAEA,IAAMC,YAAY,GAAG,UAAOC,WAAP,EAA+B;EAAA;;MAClD;MAAA;MAAA,EAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAQ;QACzBF,WAAW,CAACG,OAAZ,GAAsB;UAAM,cAAO,CAAC;YAAEC,KAAK,EAAEN,WAAW,CAACO;UAArB,CAAD,CAAP;QAAuC,CAAnE;MACD,CAFM,CAAP;;GADkD;AAInD,CAJD;AAMA;;;;;;;;;;;AASA,OAAO,IAAMC,YAAY,GAAG,UAC1BC,OAD0B,EAE1BC,KAF0B,EAG1BC,cAH0B,EAG6C;EAAA;;;MAEjEC,MAAM,yBACPb,qBADO,GAEPU,OAFO,CAAN;MAINX,qBAAqB,CAACc,MAAD,CAArB;MAEMC,cAAc,GAAG,CAAChB,UAAU,CAAgBe,MAAhB,EAAwBF,KAAxB,EAA+BC,cAA/B,CAAX,CAAjB;;MACN,IAAIF,OAAO,CAACK,eAAZ,EAA6B;QAC3BD,cAAc,CAACE,IAAf,CAAoBd,YAAY,CAACQ,OAAO,CAACK,eAAR,CAAwBE,MAAzB,CAAhC;MACD;;MACD;MAAA;MAAA,EAAOb,OAAO,CAACc,IAAR,CAAaJ,cAAb,CAAP;;GAZuE;AAaxE,CAhBM","names":["runPolling","validateWaiterOptions","waiterServiceDefaults","WaiterState","abortTimeout","abortSignal","Promise","resolve","onabort","state","ABORTED","createWaiter","options","input","acceptorChecks","params","exitConditions","abortController","push","signal","race"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\util-waiter\\src\\createWaiter.ts"],"sourcesContent":["import { AbortSignal } from \"@aws-sdk/types\";\n\nimport { runPolling } from \"./poller\";\nimport { validateWaiterOptions } from \"./utils\";\nimport { WaiterOptions, WaiterResult, waiterServiceDefaults, WaiterState } from \"./waiter\";\n\nconst abortTimeout = async (abortSignal: AbortSignal): Promise<WaiterResult> => {\n  return new Promise((resolve) => {\n    abortSignal.onabort = () => resolve({ state: WaiterState.ABORTED });\n  });\n};\n\n/**\n * Create a waiter promise that only resolves when:\n * 1. Abort controller is signaled\n * 2. Max wait time is reached\n * 3. `acceptorChecks` succeeds, or fails\n * Otherwise, it invokes `acceptorChecks` with exponential-backoff delay.\n *\n * @internal\n */\nexport const createWaiter = async <Client, Input>(\n  options: WaiterOptions<Client>,\n  input: Input,\n  acceptorChecks: (client: Client, input: Input) => Promise<WaiterResult>\n): Promise<WaiterResult> => {\n  const params = {\n    ...waiterServiceDefaults,\n    ...options,\n  };\n  validateWaiterOptions(params);\n\n  const exitConditions = [runPolling<Client, Input>(params, input, acceptorChecks)];\n  if (options.abortController) {\n    exitConditions.push(abortTimeout(options.abortController.signal));\n  }\n  return Promise.race(exitConditions);\n};\n"]},"metadata":{},"sourceType":"module"}