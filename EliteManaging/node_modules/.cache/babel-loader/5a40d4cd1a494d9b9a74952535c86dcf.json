{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CognitoIdentityClient } from \"./CognitoIdentityClient\";\nimport { CreateIdentityPoolCommand } from \"./commands/CreateIdentityPoolCommand\";\nimport { DeleteIdentitiesCommand } from \"./commands/DeleteIdentitiesCommand\";\nimport { DeleteIdentityPoolCommand } from \"./commands/DeleteIdentityPoolCommand\";\nimport { DescribeIdentityCommand } from \"./commands/DescribeIdentityCommand\";\nimport { DescribeIdentityPoolCommand } from \"./commands/DescribeIdentityPoolCommand\";\nimport { GetCredentialsForIdentityCommand } from \"./commands/GetCredentialsForIdentityCommand\";\nimport { GetIdCommand } from \"./commands/GetIdCommand\";\nimport { GetIdentityPoolRolesCommand } from \"./commands/GetIdentityPoolRolesCommand\";\nimport { GetOpenIdTokenCommand } from \"./commands/GetOpenIdTokenCommand\";\nimport { GetOpenIdTokenForDeveloperIdentityCommand } from \"./commands/GetOpenIdTokenForDeveloperIdentityCommand\";\nimport { ListIdentitiesCommand } from \"./commands/ListIdentitiesCommand\";\nimport { ListIdentityPoolsCommand } from \"./commands/ListIdentityPoolsCommand\";\nimport { ListTagsForResourceCommand } from \"./commands/ListTagsForResourceCommand\";\nimport { LookupDeveloperIdentityCommand } from \"./commands/LookupDeveloperIdentityCommand\";\nimport { MergeDeveloperIdentitiesCommand } from \"./commands/MergeDeveloperIdentitiesCommand\";\nimport { SetIdentityPoolRolesCommand } from \"./commands/SetIdentityPoolRolesCommand\";\nimport { TagResourceCommand } from \"./commands/TagResourceCommand\";\nimport { UnlinkDeveloperIdentityCommand } from \"./commands/UnlinkDeveloperIdentityCommand\";\nimport { UnlinkIdentityCommand } from \"./commands/UnlinkIdentityCommand\";\nimport { UntagResourceCommand } from \"./commands/UntagResourceCommand\";\nimport { UpdateIdentityPoolCommand } from \"./commands/UpdateIdentityPoolCommand\";\n/**\n * <fullname>Amazon Cognito Federated Identities</fullname>\n *          <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary\n *          credentials to mobile devices and other untrusted environments. It uniquely identifies a\n *          device and supplies the user with a consistent identity over the lifetime of an\n *          application.</p>\n *          <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or\n *          more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon\n *          Cognito user pool, and you can also choose to support unauthenticated access from your app.\n *          Cognito delivers a unique identifier for each user and acts as an OpenID token provider\n *          trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS\n *          credentials.</p>\n *          <p>For a description of the authentication flow from the Amazon Cognito Developer Guide\n *          see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p>\n *          <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>\n */\n\nvar CognitoIdentity =\n/** @class */\nfunction (_super) {\n  __extends(CognitoIdentity, _super);\n\n  function CognitoIdentity() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CognitoIdentity.prototype.createIdentityPool = function (args, optionsOrCb, cb) {\n    var command = new CreateIdentityPoolCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.deleteIdentities = function (args, optionsOrCb, cb) {\n    var command = new DeleteIdentitiesCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.deleteIdentityPool = function (args, optionsOrCb, cb) {\n    var command = new DeleteIdentityPoolCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.describeIdentity = function (args, optionsOrCb, cb) {\n    var command = new DescribeIdentityCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.describeIdentityPool = function (args, optionsOrCb, cb) {\n    var command = new DescribeIdentityPoolCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.getCredentialsForIdentity = function (args, optionsOrCb, cb) {\n    var command = new GetCredentialsForIdentityCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.getId = function (args, optionsOrCb, cb) {\n    var command = new GetIdCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.getIdentityPoolRoles = function (args, optionsOrCb, cb) {\n    var command = new GetIdentityPoolRolesCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.getOpenIdToken = function (args, optionsOrCb, cb) {\n    var command = new GetOpenIdTokenCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.getOpenIdTokenForDeveloperIdentity = function (args, optionsOrCb, cb) {\n    var command = new GetOpenIdTokenForDeveloperIdentityCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.listIdentities = function (args, optionsOrCb, cb) {\n    var command = new ListIdentitiesCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.listIdentityPools = function (args, optionsOrCb, cb) {\n    var command = new ListIdentityPoolsCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.listTagsForResource = function (args, optionsOrCb, cb) {\n    var command = new ListTagsForResourceCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.lookupDeveloperIdentity = function (args, optionsOrCb, cb) {\n    var command = new LookupDeveloperIdentityCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.mergeDeveloperIdentities = function (args, optionsOrCb, cb) {\n    var command = new MergeDeveloperIdentitiesCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.setIdentityPoolRoles = function (args, optionsOrCb, cb) {\n    var command = new SetIdentityPoolRolesCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.tagResource = function (args, optionsOrCb, cb) {\n    var command = new TagResourceCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.unlinkDeveloperIdentity = function (args, optionsOrCb, cb) {\n    var command = new UnlinkDeveloperIdentityCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.unlinkIdentity = function (args, optionsOrCb, cb) {\n    var command = new UnlinkIdentityCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.untagResource = function (args, optionsOrCb, cb) {\n    var command = new UntagResourceCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  CognitoIdentity.prototype.updateIdentityPool = function (args, optionsOrCb, cb) {\n    var command = new UpdateIdentityPoolCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  return CognitoIdentity;\n}(CognitoIdentityClient);\n\nexport { CognitoIdentity };","map":{"version":3,"mappings":"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","names":["CognitoIdentityClient","CreateIdentityPoolCommand","DeleteIdentitiesCommand","DeleteIdentityPoolCommand","DescribeIdentityCommand","DescribeIdentityPoolCommand","GetCredentialsForIdentityCommand","GetIdCommand","GetIdentityPoolRolesCommand","GetOpenIdTokenCommand","GetOpenIdTokenForDeveloperIdentityCommand","ListIdentitiesCommand","ListIdentityPoolsCommand","ListTagsForResourceCommand","LookupDeveloperIdentityCommand","MergeDeveloperIdentitiesCommand","SetIdentityPoolRolesCommand","TagResourceCommand","UnlinkDeveloperIdentityCommand","UnlinkIdentityCommand","UntagResourceCommand","UpdateIdentityPoolCommand","__extends","CognitoIdentity","args","optionsOrCb","cb","command","send","Error"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\client-cognito-identity\\CognitoIdentity.ts"],"sourcesContent":["import { CognitoIdentityClient } from \"./CognitoIdentityClient\";\nimport {\n  CreateIdentityPoolCommand,\n  CreateIdentityPoolCommandInput,\n  CreateIdentityPoolCommandOutput,\n} from \"./commands/CreateIdentityPoolCommand\";\nimport {\n  DeleteIdentitiesCommand,\n  DeleteIdentitiesCommandInput,\n  DeleteIdentitiesCommandOutput,\n} from \"./commands/DeleteIdentitiesCommand\";\nimport {\n  DeleteIdentityPoolCommand,\n  DeleteIdentityPoolCommandInput,\n  DeleteIdentityPoolCommandOutput,\n} from \"./commands/DeleteIdentityPoolCommand\";\nimport {\n  DescribeIdentityCommand,\n  DescribeIdentityCommandInput,\n  DescribeIdentityCommandOutput,\n} from \"./commands/DescribeIdentityCommand\";\nimport {\n  DescribeIdentityPoolCommand,\n  DescribeIdentityPoolCommandInput,\n  DescribeIdentityPoolCommandOutput,\n} from \"./commands/DescribeIdentityPoolCommand\";\nimport {\n  GetCredentialsForIdentityCommand,\n  GetCredentialsForIdentityCommandInput,\n  GetCredentialsForIdentityCommandOutput,\n} from \"./commands/GetCredentialsForIdentityCommand\";\nimport { GetIdCommand, GetIdCommandInput, GetIdCommandOutput } from \"./commands/GetIdCommand\";\nimport {\n  GetIdentityPoolRolesCommand,\n  GetIdentityPoolRolesCommandInput,\n  GetIdentityPoolRolesCommandOutput,\n} from \"./commands/GetIdentityPoolRolesCommand\";\nimport {\n  GetOpenIdTokenCommand,\n  GetOpenIdTokenCommandInput,\n  GetOpenIdTokenCommandOutput,\n} from \"./commands/GetOpenIdTokenCommand\";\nimport {\n  GetOpenIdTokenForDeveloperIdentityCommand,\n  GetOpenIdTokenForDeveloperIdentityCommandInput,\n  GetOpenIdTokenForDeveloperIdentityCommandOutput,\n} from \"./commands/GetOpenIdTokenForDeveloperIdentityCommand\";\nimport {\n  ListIdentitiesCommand,\n  ListIdentitiesCommandInput,\n  ListIdentitiesCommandOutput,\n} from \"./commands/ListIdentitiesCommand\";\nimport {\n  ListIdentityPoolsCommand,\n  ListIdentityPoolsCommandInput,\n  ListIdentityPoolsCommandOutput,\n} from \"./commands/ListIdentityPoolsCommand\";\nimport {\n  ListTagsForResourceCommand,\n  ListTagsForResourceCommandInput,\n  ListTagsForResourceCommandOutput,\n} from \"./commands/ListTagsForResourceCommand\";\nimport {\n  LookupDeveloperIdentityCommand,\n  LookupDeveloperIdentityCommandInput,\n  LookupDeveloperIdentityCommandOutput,\n} from \"./commands/LookupDeveloperIdentityCommand\";\nimport {\n  MergeDeveloperIdentitiesCommand,\n  MergeDeveloperIdentitiesCommandInput,\n  MergeDeveloperIdentitiesCommandOutput,\n} from \"./commands/MergeDeveloperIdentitiesCommand\";\nimport {\n  SetIdentityPoolRolesCommand,\n  SetIdentityPoolRolesCommandInput,\n  SetIdentityPoolRolesCommandOutput,\n} from \"./commands/SetIdentityPoolRolesCommand\";\nimport { TagResourceCommand, TagResourceCommandInput, TagResourceCommandOutput } from \"./commands/TagResourceCommand\";\nimport {\n  UnlinkDeveloperIdentityCommand,\n  UnlinkDeveloperIdentityCommandInput,\n  UnlinkDeveloperIdentityCommandOutput,\n} from \"./commands/UnlinkDeveloperIdentityCommand\";\nimport {\n  UnlinkIdentityCommand,\n  UnlinkIdentityCommandInput,\n  UnlinkIdentityCommandOutput,\n} from \"./commands/UnlinkIdentityCommand\";\nimport {\n  UntagResourceCommand,\n  UntagResourceCommandInput,\n  UntagResourceCommandOutput,\n} from \"./commands/UntagResourceCommand\";\nimport {\n  UpdateIdentityPoolCommand,\n  UpdateIdentityPoolCommandInput,\n  UpdateIdentityPoolCommandOutput,\n} from \"./commands/UpdateIdentityPoolCommand\";\nimport { HttpHandlerOptions as __HttpHandlerOptions } from \"@aws-sdk/types\";\n\n/**\n * <fullname>Amazon Cognito Federated Identities</fullname>\n *          <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary\n *          credentials to mobile devices and other untrusted environments. It uniquely identifies a\n *          device and supplies the user with a consistent identity over the lifetime of an\n *          application.</p>\n *          <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or\n *          more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon\n *          Cognito user pool, and you can also choose to support unauthenticated access from your app.\n *          Cognito delivers a unique identifier for each user and acts as an OpenID token provider\n *          trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS\n *          credentials.</p>\n *          <p>For a description of the authentication flow from the Amazon Cognito Developer Guide\n *          see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html\">Authentication Flow</a>.</p>\n *          <p>For more information see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html\">Amazon Cognito Federated Identities</a>.</p>\n */\nexport class CognitoIdentity extends CognitoIdentityClient {\n  /**\n   * <p>Creates a new identity pool. The identity pool is a store of user identity\n   *          information that is specific to your AWS account. The keys for <code>SupportedLoginProviders</code> are as follows:</p>\n   *\n   *          <ul>\n   *             <li>\n   *                <p>Facebook: <code>graph.facebook.com</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Google: <code>accounts.google.com</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Amazon: <code>www.amazon.com</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Twitter: <code>api.twitter.com</code>\n   *                </p>\n   *             </li>\n   *             <li>\n   *                <p>Digits: <code>www.digits.com</code>\n   *                </p>\n   *             </li>\n   *          </ul>\n   *\n   *          <p>You must use AWS Developer credentials to call this API.</p>\n   */\n  public createIdentityPool(\n    args: CreateIdentityPoolCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<CreateIdentityPoolCommandOutput>;\n  public createIdentityPool(\n    args: CreateIdentityPoolCommandInput,\n    cb: (err: any, data?: CreateIdentityPoolCommandOutput) => void\n  ): void;\n  public createIdentityPool(\n    args: CreateIdentityPoolCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: CreateIdentityPoolCommandOutput) => void\n  ): void;\n  public createIdentityPool(\n    args: CreateIdentityPoolCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: CreateIdentityPoolCommandOutput) => void),\n    cb?: (err: any, data?: CreateIdentityPoolCommandOutput) => void\n  ): Promise<CreateIdentityPoolCommandOutput> | void {\n    const command = new CreateIdentityPoolCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes identities from an identity pool. You can specify a list of 1-60 identities\n   *          that you want to delete.</p>\n   *          <p>You must use AWS Developer credentials to call this API.</p>\n   */\n  public deleteIdentities(\n    args: DeleteIdentitiesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteIdentitiesCommandOutput>;\n  public deleteIdentities(\n    args: DeleteIdentitiesCommandInput,\n    cb: (err: any, data?: DeleteIdentitiesCommandOutput) => void\n  ): void;\n  public deleteIdentities(\n    args: DeleteIdentitiesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteIdentitiesCommandOutput) => void\n  ): void;\n  public deleteIdentities(\n    args: DeleteIdentitiesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteIdentitiesCommandOutput) => void),\n    cb?: (err: any, data?: DeleteIdentitiesCommandOutput) => void\n  ): Promise<DeleteIdentitiesCommandOutput> | void {\n    const command = new DeleteIdentitiesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Deletes an identity pool. Once a pool is deleted, users will not be able to\n   *          authenticate with the pool.</p>\n   *          <p>You must use AWS Developer credentials to call this API.</p>\n   */\n  public deleteIdentityPool(\n    args: DeleteIdentityPoolCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteIdentityPoolCommandOutput>;\n  public deleteIdentityPool(\n    args: DeleteIdentityPoolCommandInput,\n    cb: (err: any, data?: DeleteIdentityPoolCommandOutput) => void\n  ): void;\n  public deleteIdentityPool(\n    args: DeleteIdentityPoolCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteIdentityPoolCommandOutput) => void\n  ): void;\n  public deleteIdentityPool(\n    args: DeleteIdentityPoolCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteIdentityPoolCommandOutput) => void),\n    cb?: (err: any, data?: DeleteIdentityPoolCommandOutput) => void\n  ): Promise<DeleteIdentityPoolCommandOutput> | void {\n    const command = new DeleteIdentityPoolCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Returns metadata related to the given identity, including when the identity was\n   *          created and any associated linked logins.</p>\n   *          <p>You must use AWS Developer credentials to call this API.</p>\n   */\n  public describeIdentity(\n    args: DescribeIdentityCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeIdentityCommandOutput>;\n  public describeIdentity(\n    args: DescribeIdentityCommandInput,\n    cb: (err: any, data?: DescribeIdentityCommandOutput) => void\n  ): void;\n  public describeIdentity(\n    args: DescribeIdentityCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeIdentityCommandOutput) => void\n  ): void;\n  public describeIdentity(\n    args: DescribeIdentityCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeIdentityCommandOutput) => void),\n    cb?: (err: any, data?: DescribeIdentityCommandOutput) => void\n  ): Promise<DescribeIdentityCommandOutput> | void {\n    const command = new DescribeIdentityCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets details about a particular identity pool, including the pool name, ID\n   *          description, creation date, and current number of users.</p>\n   *          <p>You must use AWS Developer credentials to call this API.</p>\n   */\n  public describeIdentityPool(\n    args: DescribeIdentityPoolCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DescribeIdentityPoolCommandOutput>;\n  public describeIdentityPool(\n    args: DescribeIdentityPoolCommandInput,\n    cb: (err: any, data?: DescribeIdentityPoolCommandOutput) => void\n  ): void;\n  public describeIdentityPool(\n    args: DescribeIdentityPoolCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DescribeIdentityPoolCommandOutput) => void\n  ): void;\n  public describeIdentityPool(\n    args: DescribeIdentityPoolCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DescribeIdentityPoolCommandOutput) => void),\n    cb?: (err: any, data?: DescribeIdentityPoolCommandOutput) => void\n  ): Promise<DescribeIdentityPoolCommandOutput> | void {\n    const command = new DescribeIdentityPoolCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Returns credentials for the provided identity ID. Any provided logins will be\n   *          validated against supported login providers. If the token is for\n   *          cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service\n   *          with the appropriate role for the token.</p>\n   *          <p>This is a public API. You do not need any credentials to call this API.</p>\n   */\n  public getCredentialsForIdentity(\n    args: GetCredentialsForIdentityCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetCredentialsForIdentityCommandOutput>;\n  public getCredentialsForIdentity(\n    args: GetCredentialsForIdentityCommandInput,\n    cb: (err: any, data?: GetCredentialsForIdentityCommandOutput) => void\n  ): void;\n  public getCredentialsForIdentity(\n    args: GetCredentialsForIdentityCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetCredentialsForIdentityCommandOutput) => void\n  ): void;\n  public getCredentialsForIdentity(\n    args: GetCredentialsForIdentityCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetCredentialsForIdentityCommandOutput) => void),\n    cb?: (err: any, data?: GetCredentialsForIdentityCommandOutput) => void\n  ): Promise<GetCredentialsForIdentityCommandOutput> | void {\n    const command = new GetCredentialsForIdentityCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an\n   *          implicit linked account.</p>\n   *          <p>This is a public API. You do not need any credentials to call this API.</p>\n   */\n  public getId(args: GetIdCommandInput, options?: __HttpHandlerOptions): Promise<GetIdCommandOutput>;\n  public getId(args: GetIdCommandInput, cb: (err: any, data?: GetIdCommandOutput) => void): void;\n  public getId(\n    args: GetIdCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetIdCommandOutput) => void\n  ): void;\n  public getId(\n    args: GetIdCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetIdCommandOutput) => void),\n    cb?: (err: any, data?: GetIdCommandOutput) => void\n  ): Promise<GetIdCommandOutput> | void {\n    const command = new GetIdCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets the roles for an identity pool.</p>\n   *          <p>You must use AWS Developer credentials to call this API.</p>\n   */\n  public getIdentityPoolRoles(\n    args: GetIdentityPoolRolesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetIdentityPoolRolesCommandOutput>;\n  public getIdentityPoolRoles(\n    args: GetIdentityPoolRolesCommandInput,\n    cb: (err: any, data?: GetIdentityPoolRolesCommandOutput) => void\n  ): void;\n  public getIdentityPoolRoles(\n    args: GetIdentityPoolRolesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetIdentityPoolRolesCommandOutput) => void\n  ): void;\n  public getIdentityPoolRoles(\n    args: GetIdentityPoolRolesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetIdentityPoolRolesCommandOutput) => void),\n    cb?: (err: any, data?: GetIdentityPoolRolesCommandOutput) => void\n  ): Promise<GetIdentityPoolRolesCommandOutput> | void {\n    const command = new GetIdentityPoolRolesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Gets an OpenID token, using a known Cognito ID. This known Cognito ID is returned by\n   *             <a>GetId</a>. You can optionally add additional logins for the identity.\n   *          Supplying multiple logins creates an implicit link.</p>\n   *          <p>The OpenId token is valid for 10 minutes.</p>\n   *          <p>This is a public API. You do not need any credentials to call this API.</p>\n   */\n  public getOpenIdToken(\n    args: GetOpenIdTokenCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetOpenIdTokenCommandOutput>;\n  public getOpenIdToken(\n    args: GetOpenIdTokenCommandInput,\n    cb: (err: any, data?: GetOpenIdTokenCommandOutput) => void\n  ): void;\n  public getOpenIdToken(\n    args: GetOpenIdTokenCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetOpenIdTokenCommandOutput) => void\n  ): void;\n  public getOpenIdToken(\n    args: GetOpenIdTokenCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetOpenIdTokenCommandOutput) => void),\n    cb?: (err: any, data?: GetOpenIdTokenCommandOutput) => void\n  ): Promise<GetOpenIdTokenCommandOutput> | void {\n    const command = new GetOpenIdTokenCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect\n   *          token for a user authenticated by your backend authentication process. Supplying multiple\n   *          logins will create an implicit linked account. You can only specify one developer provider\n   *          as part of the <code>Logins</code> map, which is linked to the identity pool. The developer\n   *          provider is the \"domain\" by which Cognito will refer to your users.</p>\n   *          <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity\n   *          and to link new logins (that is, user credentials issued by a public provider or developer\n   *          provider) to an existing identity. When you want to create a new identity, the\n   *             <code>IdentityId</code> should be null. When you want to associate a new login with an\n   *          existing authenticated/unauthenticated identity, you can do so by providing the existing\n   *             <code>IdentityId</code>. This API will create the identity in the specified\n   *             <code>IdentityPoolId</code>.</p>\n   *          <p>You must use AWS Developer credentials to call this API.</p>\n   */\n  public getOpenIdTokenForDeveloperIdentity(\n    args: GetOpenIdTokenForDeveloperIdentityCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<GetOpenIdTokenForDeveloperIdentityCommandOutput>;\n  public getOpenIdTokenForDeveloperIdentity(\n    args: GetOpenIdTokenForDeveloperIdentityCommandInput,\n    cb: (err: any, data?: GetOpenIdTokenForDeveloperIdentityCommandOutput) => void\n  ): void;\n  public getOpenIdTokenForDeveloperIdentity(\n    args: GetOpenIdTokenForDeveloperIdentityCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetOpenIdTokenForDeveloperIdentityCommandOutput) => void\n  ): void;\n  public getOpenIdTokenForDeveloperIdentity(\n    args: GetOpenIdTokenForDeveloperIdentityCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetOpenIdTokenForDeveloperIdentityCommandOutput) => void),\n    cb?: (err: any, data?: GetOpenIdTokenForDeveloperIdentityCommandOutput) => void\n  ): Promise<GetOpenIdTokenForDeveloperIdentityCommandOutput> | void {\n    const command = new GetOpenIdTokenForDeveloperIdentityCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists the identities in an identity pool.</p>\n   *          <p>You must use AWS Developer credentials to call this API.</p>\n   */\n  public listIdentities(\n    args: ListIdentitiesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListIdentitiesCommandOutput>;\n  public listIdentities(\n    args: ListIdentitiesCommandInput,\n    cb: (err: any, data?: ListIdentitiesCommandOutput) => void\n  ): void;\n  public listIdentities(\n    args: ListIdentitiesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListIdentitiesCommandOutput) => void\n  ): void;\n  public listIdentities(\n    args: ListIdentitiesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListIdentitiesCommandOutput) => void),\n    cb?: (err: any, data?: ListIdentitiesCommandOutput) => void\n  ): Promise<ListIdentitiesCommandOutput> | void {\n    const command = new ListIdentitiesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists all of the Cognito identity pools registered for your account.</p>\n   *          <p>You must use AWS Developer credentials to call this API.</p>\n   */\n  public listIdentityPools(\n    args: ListIdentityPoolsCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListIdentityPoolsCommandOutput>;\n  public listIdentityPools(\n    args: ListIdentityPoolsCommandInput,\n    cb: (err: any, data?: ListIdentityPoolsCommandOutput) => void\n  ): void;\n  public listIdentityPools(\n    args: ListIdentityPoolsCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListIdentityPoolsCommandOutput) => void\n  ): void;\n  public listIdentityPools(\n    args: ListIdentityPoolsCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListIdentityPoolsCommandOutput) => void),\n    cb?: (err: any, data?: ListIdentityPoolsCommandOutput) => void\n  ): Promise<ListIdentityPoolsCommandOutput> | void {\n    const command = new ListIdentityPoolsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Lists the tags that are assigned to an Amazon Cognito identity pool.</p>\n   *          <p>A tag is a label that you can apply to identity pools to categorize and manage them in\n   *          different ways, such as by purpose, owner, environment, or other criteria.</p>\n   *          <p>You can use this action up to 10 times per second, per account.</p>\n   */\n  public listTagsForResource(\n    args: ListTagsForResourceCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<ListTagsForResourceCommandOutput>;\n  public listTagsForResource(\n    args: ListTagsForResourceCommandInput,\n    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void\n  ): void;\n  public listTagsForResource(\n    args: ListTagsForResourceCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void\n  ): void;\n  public listTagsForResource(\n    args: ListTagsForResourceCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: ListTagsForResourceCommandOutput) => void),\n    cb?: (err: any, data?: ListTagsForResourceCommandOutput) => void\n  ): Promise<ListTagsForResourceCommandOutput> | void {\n    const command = new ListTagsForResourceCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Retrieves the <code>IdentityID</code> associated with a\n   *             <code>DeveloperUserIdentifier</code> or the list of <code>DeveloperUserIdentifier</code>\n   *          values associated with an <code>IdentityId</code> for an existing identity. Either\n   *             <code>IdentityID</code> or <code>DeveloperUserIdentifier</code> must not be null. If you\n   *          supply only one of these values, the other value will be searched in the database and\n   *          returned as a part of the response. If you supply both,\n   *             <code>DeveloperUserIdentifier</code> will be matched against <code>IdentityID</code>. If\n   *          the values are verified against the database, the response returns both values and is the\n   *          same as the request. Otherwise a <code>ResourceConflictException</code> is\n   *          thrown.</p>\n   *          <p>\n   *             <code>LookupDeveloperIdentity</code> is intended for low-throughput control plane\n   *          operations: for example, to enable customer service to locate an identity ID by username.\n   *          If you are using it for higher-volume operations such as user authentication, your requests\n   *          are likely to be throttled. <a>GetOpenIdTokenForDeveloperIdentity</a> is a\n   *          better option for higher-volume operations for user authentication.</p>\n   *          <p>You must use AWS Developer credentials to call this API.</p>\n   */\n  public lookupDeveloperIdentity(\n    args: LookupDeveloperIdentityCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<LookupDeveloperIdentityCommandOutput>;\n  public lookupDeveloperIdentity(\n    args: LookupDeveloperIdentityCommandInput,\n    cb: (err: any, data?: LookupDeveloperIdentityCommandOutput) => void\n  ): void;\n  public lookupDeveloperIdentity(\n    args: LookupDeveloperIdentityCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: LookupDeveloperIdentityCommandOutput) => void\n  ): void;\n  public lookupDeveloperIdentity(\n    args: LookupDeveloperIdentityCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: LookupDeveloperIdentityCommandOutput) => void),\n    cb?: (err: any, data?: LookupDeveloperIdentityCommandOutput) => void\n  ): Promise<LookupDeveloperIdentityCommandOutput> | void {\n    const command = new LookupDeveloperIdentityCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Merges two users having different <code>IdentityId</code>s, existing in the same\n   *          identity pool, and identified by the same developer provider. You can use this action to\n   *          request that discrete users be merged and identified as a single user in the Cognito\n   *          environment. Cognito associates the given source user (<code>SourceUserIdentifier</code>)\n   *          with the <code>IdentityId</code> of the <code>DestinationUserIdentifier</code>. Only\n   *          developer-authenticated users can be merged. If the users to be merged are associated with\n   *          the same public provider, but as two different users, an exception will be\n   *          thrown.</p>\n   *          <p>The number of linked logins is limited to 20. So, the number of linked logins for the\n   *          source user, <code>SourceUserIdentifier</code>, and the destination user,\n   *          <code>DestinationUserIdentifier</code>, together should not be larger than 20.\n   *          Otherwise, an exception will be thrown.</p>\n   *          <p>You must use AWS Developer credentials to call this API.</p>\n   */\n  public mergeDeveloperIdentities(\n    args: MergeDeveloperIdentitiesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<MergeDeveloperIdentitiesCommandOutput>;\n  public mergeDeveloperIdentities(\n    args: MergeDeveloperIdentitiesCommandInput,\n    cb: (err: any, data?: MergeDeveloperIdentitiesCommandOutput) => void\n  ): void;\n  public mergeDeveloperIdentities(\n    args: MergeDeveloperIdentitiesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: MergeDeveloperIdentitiesCommandOutput) => void\n  ): void;\n  public mergeDeveloperIdentities(\n    args: MergeDeveloperIdentitiesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: MergeDeveloperIdentitiesCommandOutput) => void),\n    cb?: (err: any, data?: MergeDeveloperIdentitiesCommandOutput) => void\n  ): Promise<MergeDeveloperIdentitiesCommandOutput> | void {\n    const command = new MergeDeveloperIdentitiesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Sets the roles for an identity pool. These roles are used when making calls to <a>GetCredentialsForIdentity</a> action.</p>\n   *          <p>You must use AWS Developer credentials to call this API.</p>\n   */\n  public setIdentityPoolRoles(\n    args: SetIdentityPoolRolesCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<SetIdentityPoolRolesCommandOutput>;\n  public setIdentityPoolRoles(\n    args: SetIdentityPoolRolesCommandInput,\n    cb: (err: any, data?: SetIdentityPoolRolesCommandOutput) => void\n  ): void;\n  public setIdentityPoolRoles(\n    args: SetIdentityPoolRolesCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: SetIdentityPoolRolesCommandOutput) => void\n  ): void;\n  public setIdentityPoolRoles(\n    args: SetIdentityPoolRolesCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: SetIdentityPoolRolesCommandOutput) => void),\n    cb?: (err: any, data?: SetIdentityPoolRolesCommandOutput) => void\n  ): Promise<SetIdentityPoolRolesCommandOutput> | void {\n    const command = new SetIdentityPoolRolesCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Assigns a set of tags to an Amazon Cognito identity pool. A tag is a label that you can\n   *          use to categorize and manage identity pools in different ways, such as by purpose, owner,\n   *          environment, or other criteria.</p>\n   *          <p>Each tag consists of a key and value, both of which you define. A key is a general\n   *          category for more specific values. For example, if you have two versions of an identity\n   *          pool, one for testing and another for production, you might assign an\n   *             <code>Environment</code> tag key to both identity pools. The value of this key might be\n   *             <code>Test</code> for one identity pool and <code>Production</code> for the\n   *          other.</p>\n   *          <p>Tags are useful for cost tracking and access control. You can activate your tags so that\n   *          they appear on the Billing and Cost Management console, where you can track the costs\n   *          associated with your identity pools. In an IAM policy, you can constrain permissions for\n   *          identity pools based on specific tags or tag values.</p>\n   *          <p>You can use this action up to 5 times per second, per account. An identity pool can have\n   *          as many as 50 tags.</p>\n   */\n  public tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;\n  public tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;\n  public tagResource(\n    args: TagResourceCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: TagResourceCommandOutput) => void\n  ): void;\n  public tagResource(\n    args: TagResourceCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: TagResourceCommandOutput) => void),\n    cb?: (err: any, data?: TagResourceCommandOutput) => void\n  ): Promise<TagResourceCommandOutput> | void {\n    const command = new TagResourceCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Unlinks a <code>DeveloperUserIdentifier</code> from an existing identity. Unlinked\n   *          developer users will be considered new identities next time they are seen. If, for a given\n   *          Cognito identity, you remove all federated identities as well as the developer user\n   *          identifier, the Cognito identity becomes inaccessible.</p>\n   *          <p>You must use AWS Developer credentials to call this API.</p>\n   */\n  public unlinkDeveloperIdentity(\n    args: UnlinkDeveloperIdentityCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<UnlinkDeveloperIdentityCommandOutput>;\n  public unlinkDeveloperIdentity(\n    args: UnlinkDeveloperIdentityCommandInput,\n    cb: (err: any, data?: UnlinkDeveloperIdentityCommandOutput) => void\n  ): void;\n  public unlinkDeveloperIdentity(\n    args: UnlinkDeveloperIdentityCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: UnlinkDeveloperIdentityCommandOutput) => void\n  ): void;\n  public unlinkDeveloperIdentity(\n    args: UnlinkDeveloperIdentityCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: UnlinkDeveloperIdentityCommandOutput) => void),\n    cb?: (err: any, data?: UnlinkDeveloperIdentityCommandOutput) => void\n  ): Promise<UnlinkDeveloperIdentityCommandOutput> | void {\n    const command = new UnlinkDeveloperIdentityCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Unlinks a federated identity from an existing account. Unlinked logins will be\n   *          considered new identities next time they are seen. Removing the last linked login will make\n   *          this identity inaccessible.</p>\n   *          <p>This is a public API. You do not need any credentials to call this API.</p>\n   */\n  public unlinkIdentity(\n    args: UnlinkIdentityCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<UnlinkIdentityCommandOutput>;\n  public unlinkIdentity(\n    args: UnlinkIdentityCommandInput,\n    cb: (err: any, data?: UnlinkIdentityCommandOutput) => void\n  ): void;\n  public unlinkIdentity(\n    args: UnlinkIdentityCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: UnlinkIdentityCommandOutput) => void\n  ): void;\n  public unlinkIdentity(\n    args: UnlinkIdentityCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: UnlinkIdentityCommandOutput) => void),\n    cb?: (err: any, data?: UnlinkIdentityCommandOutput) => void\n  ): Promise<UnlinkIdentityCommandOutput> | void {\n    const command = new UnlinkIdentityCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Removes the specified tags from an Amazon Cognito identity pool. You can use this action\n   *          up to 5 times per second, per account</p>\n   */\n  public untagResource(\n    args: UntagResourceCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<UntagResourceCommandOutput>;\n  public untagResource(\n    args: UntagResourceCommandInput,\n    cb: (err: any, data?: UntagResourceCommandOutput) => void\n  ): void;\n  public untagResource(\n    args: UntagResourceCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: UntagResourceCommandOutput) => void\n  ): void;\n  public untagResource(\n    args: UntagResourceCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: UntagResourceCommandOutput) => void),\n    cb?: (err: any, data?: UntagResourceCommandOutput) => void\n  ): Promise<UntagResourceCommandOutput> | void {\n    const command = new UntagResourceCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Updates an identity pool.</p>\n   *          <p>You must use AWS Developer credentials to call this API.</p>\n   */\n  public updateIdentityPool(\n    args: UpdateIdentityPoolCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<UpdateIdentityPoolCommandOutput>;\n  public updateIdentityPool(\n    args: UpdateIdentityPoolCommandInput,\n    cb: (err: any, data?: UpdateIdentityPoolCommandOutput) => void\n  ): void;\n  public updateIdentityPool(\n    args: UpdateIdentityPoolCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: UpdateIdentityPoolCommandOutput) => void\n  ): void;\n  public updateIdentityPool(\n    args: UpdateIdentityPoolCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: UpdateIdentityPoolCommandOutput) => void),\n    cb?: (err: any, data?: UpdateIdentityPoolCommandOutput) => void\n  ): Promise<UpdateIdentityPoolCommandOutput> | void {\n    const command = new UpdateIdentityPoolCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}