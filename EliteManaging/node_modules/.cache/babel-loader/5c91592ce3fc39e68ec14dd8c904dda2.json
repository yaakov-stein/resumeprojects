{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { sleep } from \"./utils/sleep\";\nimport { WaiterState } from \"./waiter\";\n/**\n * Reference: https://awslabs.github.io/smithy/1.0/spec/waiters.html#waiter-retries\n */\n\nvar exponentialBackoffWithJitter = function (minDelay, maxDelay, attemptCeiling, attempt) {\n  if (attempt > attemptCeiling) return maxDelay;\n  var delay = minDelay * Math.pow(2, attempt - 1);\n  return randomInRange(minDelay, delay);\n};\n\nvar randomInRange = function (min, max) {\n  return min + Math.random() * (max - min);\n};\n/**\n * Function that runs polling as part of waiters. This will make one inital attempt and then\n * subsequent attempts with an increasing delay.\n * @param params options passed to the waiter.\n * @param client AWS SDK Client\n * @param input client input\n * @param stateChecker function that checks the acceptor states on each poll.\n */\n\n\nexport var runPolling = function (_a, input, acceptorChecks) {\n  var minDelay = _a.minDelay,\n      maxDelay = _a.maxDelay,\n      maxWaitTime = _a.maxWaitTime,\n      abortController = _a.abortController,\n      client = _a.client;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var state, currentAttempt, waitUntil, attemptCeiling, delay, state_1;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , acceptorChecks(client, input)];\n\n        case 1:\n          state = _c.sent().state;\n\n          if (state !== WaiterState.RETRY) {\n            return [2\n            /*return*/\n            , {\n              state: state\n            }];\n          }\n\n          currentAttempt = 1;\n          waitUntil = Date.now() + maxWaitTime * 1000;\n          attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;\n          _c.label = 2;\n\n        case 2:\n          if (!true) return [3\n          /*break*/\n          , 5];\n\n          if ((_b = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _b === void 0 ? void 0 : _b.aborted) {\n            return [2\n            /*return*/\n            , {\n              state: WaiterState.ABORTED\n            }];\n          }\n\n          delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt); // Resolve the promise explicitly at timeout or aborted. Otherwise this while loop will keep making API call until\n          // `acceptorCheck` returns non-retry status, even with the Promise.race() outside.\n\n          if (Date.now() + delay * 1000 > waitUntil) {\n            return [2\n            /*return*/\n            , {\n              state: WaiterState.TIMEOUT\n            }];\n          }\n\n          return [4\n          /*yield*/\n          , sleep(delay)];\n\n        case 3:\n          _c.sent();\n\n          return [4\n          /*yield*/\n          , acceptorChecks(client, input)];\n\n        case 4:\n          state_1 = _c.sent().state;\n\n          if (state_1 !== WaiterState.RETRY) {\n            return [2\n            /*return*/\n            , {\n              state: state_1\n            }];\n          }\n\n          currentAttempt += 1;\n          return [3\n          /*break*/\n          , 2];\n\n        case 5:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n};","map":{"version":3,"mappings":";AAAA,SAASA,KAAT,QAAsB,eAAtB;AACA,SAAsCC,WAAtC,QAAyD,UAAzD;AAEA;;;;AAGA,IAAMC,4BAA4B,GAAG,UAACC,QAAD,EAAmBC,QAAnB,EAAqCC,cAArC,EAA6DC,OAA7D,EAA4E;EAC/G,IAAIA,OAAO,GAAGD,cAAd,EAA8B,OAAOD,QAAP;EAC9B,IAAMG,KAAK,GAAGJ,QAAQ,GAAGK,YAAMF,OAAO,GAAG,CAAhB,CAAzB;EACA,OAAOG,aAAa,CAACN,QAAD,EAAWI,KAAX,CAApB;AACD,CAJD;;AAMA,IAAME,aAAa,GAAG,UAACC,GAAD,EAAcC,GAAd,EAAyB;EAAK,UAAG,GAAGH,IAAI,CAACI,MAAL,MAAiBD,GAAG,GAAGD,GAAvB,CAAN;AAAiC,CAArF;AAEA;;;;;;;;;;AAQA,OAAO,IAAMG,UAAU,GAAG,UACxBC,EADwB,EAExBC,KAFwB,EAGxBC,cAHwB,EAG+C;MAFrEb,QAAQ;MAAEC,QAAQ;MAAEa,WAAW;MAAEC,eAAe;MAAEC,MAAM;;;;;;;;;UAIxC;UAAA;UAAA,EAAMH,cAAc,CAACG,MAAD,EAASJ,KAAT,CAApB;;;UAAVK,KAAK,GAAKC,UAAmCD,KAA7C;;UACR,IAAIA,KAAK,KAAKnB,WAAW,CAACqB,KAA1B,EAAiC;YAC/B;YAAA;YAAA,EAAO;cAAEF,KAAK;YAAP,CAAP;UACD;;UAEGG,cAAc,GAAG,CAAjB;UACEC,SAAS,GAAGC,IAAI,CAACC,GAAL,KAAaT,WAAW,GAAG,IAAvC;UAGAZ,cAAc,GAAGG,IAAI,CAACmB,GAAL,CAASvB,QAAQ,GAAGD,QAApB,IAAgCK,IAAI,CAACmB,GAAL,CAAS,CAAT,CAAhC,GAA8C,CAA/D;;;;eACC,MAAI;UAAA;UAAA;;UACT,UAAIT,eAAe,SAAf,mBAAe,WAAf,GAAe,MAAf,kBAAe,CAAEU,MAArB,MAA2B,IAA3B,IAA2BC,aAA3B,GAA2B,MAA3B,GAA2BA,GAAEC,OAA7B,EAAsC;YACpC;YAAA;YAAA,EAAO;cAAEV,KAAK,EAAEnB,WAAW,CAAC8B;YAArB,CAAP;UACD;;UACKxB,KAAK,GAAGL,4BAA4B,CAACC,QAAD,EAAWC,QAAX,EAAqBC,cAArB,EAAqCkB,cAArC,CAApC,EACN;UACA;;UACA,IAAIE,IAAI,CAACC,GAAL,KAAanB,KAAK,GAAG,IAArB,GAA4BiB,SAAhC,EAA2C;YACzC;YAAA;YAAA,EAAO;cAAEJ,KAAK,EAAEnB,WAAW,CAAC+B;YAArB,CAAP;UACD;;UACD;UAAA;UAAA,EAAMhC,KAAK,CAACO,KAAD,CAAX;;;UAAAc;;UACkB;UAAA;UAAA,EAAML,cAAc,CAACG,MAAD,EAASJ,KAAT,CAApB;;;UAAVkB,UAAUZ,UAAmCD,KAA7C;;UACR,IAAIa,OAAK,KAAKhC,WAAW,CAACqB,KAA1B,EAAiC;YAC/B;YAAA;YAAA,EAAO;cAAEF,KAAK;YAAP,CAAP;UACD;;UAEDG,cAAc,IAAI,CAAlB;;;;;;;;;;;;AAEH,CAjCM","names":["sleep","WaiterState","exponentialBackoffWithJitter","minDelay","maxDelay","attemptCeiling","attempt","delay","Math","randomInRange","min","max","random","runPolling","_a","input","acceptorChecks","maxWaitTime","abortController","client","state","_c","RETRY","currentAttempt","waitUntil","Date","now","log","signal","_b","aborted","ABORTED","TIMEOUT","state_1"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\util-waiter\\src\\poller.ts"],"sourcesContent":["import { sleep } from \"./utils/sleep\";\nimport { WaiterOptions, WaiterResult, WaiterState } from \"./waiter\";\n\n/**\n * Reference: https://awslabs.github.io/smithy/1.0/spec/waiters.html#waiter-retries\n */\nconst exponentialBackoffWithJitter = (minDelay: number, maxDelay: number, attemptCeiling: number, attempt: number) => {\n  if (attempt > attemptCeiling) return maxDelay;\n  const delay = minDelay * 2 ** (attempt - 1);\n  return randomInRange(minDelay, delay);\n};\n\nconst randomInRange = (min: number, max: number) => min + Math.random() * (max - min);\n\n/**\n * Function that runs polling as part of waiters. This will make one inital attempt and then\n * subsequent attempts with an increasing delay.\n * @param params options passed to the waiter.\n * @param client AWS SDK Client\n * @param input client input\n * @param stateChecker function that checks the acceptor states on each poll.\n */\nexport const runPolling = async <Client, Input>(\n  { minDelay, maxDelay, maxWaitTime, abortController, client }: WaiterOptions<Client>,\n  input: Input,\n  acceptorChecks: (client: Client, input: Input) => Promise<WaiterResult>\n): Promise<WaiterResult> => {\n  const { state } = await acceptorChecks(client, input);\n  if (state !== WaiterState.RETRY) {\n    return { state };\n  }\n\n  let currentAttempt = 1;\n  const waitUntil = Date.now() + maxWaitTime * 1000;\n  // The max attempt number that the derived delay time tend to increase.\n  // Pre-compute this number to avoid Number type overflow.\n  const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;\n  while (true) {\n    if (abortController?.signal?.aborted) {\n      return { state: WaiterState.ABORTED };\n    }\n    const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);\n    // Resolve the promise explicitly at timeout or aborted. Otherwise this while loop will keep making API call until\n    // `acceptorCheck` returns non-retry status, even with the Promise.race() outside.\n    if (Date.now() + delay * 1000 > waitUntil) {\n      return { state: WaiterState.TIMEOUT };\n    }\n    await sleep(delay);\n    const { state } = await acceptorChecks(client, input);\n    if (state !== WaiterState.RETRY) {\n      return { state };\n    }\n\n    currentAttempt += 1;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}