{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { Logger, Mutex } from '@aws-amplify/core';\nimport PushStream from 'zen-push';\nimport { ModelPredicateCreator } from '../predicates';\nimport { OpType, QueryOne, isTargetNameAssociation } from '../types';\nimport { isModelConstructor, STORAGE, validatePredicate, valuesEqual } from '../util';\nimport getDefaultAdapter from './adapter/getDefaultAdapter';\nvar logger = new Logger('DataStore');\n\nvar StorageClass =\n/** @class */\nfunction () {\n  function StorageClass(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, adapter, sessionId) {\n    this.schema = schema;\n    this.namespaceResolver = namespaceResolver;\n    this.getModelConstructorByModelName = getModelConstructorByModelName;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.adapter = adapter;\n    this.sessionId = sessionId;\n    this.adapter = this.adapter || getDefaultAdapter();\n    this.pushStream = new PushStream();\n  }\n\n  StorageClass.getNamespace = function () {\n    var namespace = {\n      name: STORAGE,\n      relationships: {},\n      enums: {},\n      models: {},\n      nonModels: {}\n    };\n    return namespace;\n  };\n\n  StorageClass.prototype.init = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var resolve, reject;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.initialized !== undefined)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.initialized];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n\n          case 2:\n            logger.debug('Starting Storage');\n            this.initialized = new Promise(function (res, rej) {\n              resolve = res;\n              reject = rej;\n            });\n            this.adapter.setUp(this.schema, this.namespaceResolver, this.modelInstanceCreator, this.getModelConstructorByModelName, this.sessionId).then(resolve, reject);\n            return [4\n            /*yield*/\n            , this.initialized];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  StorageClass.prototype.save = function (model, condition, mutator, patchesTuple) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.init()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.adapter.save(model, condition)];\n\n          case 2:\n            result = _a.sent();\n            result.forEach(function (r) {\n              var _a = __read(r, 2),\n                  savedElement = _a[0],\n                  opType = _a[1]; // truthy when save is called by the Merger\n\n\n              var syncResponse = !!mutator;\n              var updateMutationInput; // don't attempt to calc mutation input when storage.save\n              // is called by Merger, i.e., when processing an AppSync response\n\n              if (opType === OpType.UPDATE && !syncResponse) {\n                //\n                // TODO: LOOK!!!\n                // the `model` used here is in effect regardless of what model\n                // comes back from adapter.save().\n                // Prior to fix, SQLite adapter had been returning two models\n                // of different types, resulting in invalid outbox entries.\n                //\n                // the bug is essentially fixed in SQLite adapter.\n                // leaving as-is, because it's currently unclear whether anything\n                // depends on this remaining as-is.\n                //\n                updateMutationInput = _this.getUpdateMutationInput(model, savedElement, patchesTuple); // // an update without changed user fields\n                // => don't create mutationEvent\n\n                if (updateMutationInput === null) {\n                  return result;\n                }\n              }\n\n              var element = updateMutationInput || savedElement;\n              var modelConstructor = Object.getPrototypeOf(savedElement).constructor;\n\n              _this.pushStream.next({\n                model: modelConstructor,\n                opType: opType,\n                element: element,\n                mutator: mutator,\n                condition: ModelPredicateCreator.getPredicates(condition, false),\n                savedElement: savedElement\n              });\n            });\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  StorageClass.prototype.delete = function (modelOrModelConstructor, condition, mutator) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleted, models, modelIds;\n\n      var _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.init()];\n\n          case 1:\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , this.adapter.delete(modelOrModelConstructor, condition)];\n\n          case 2:\n            _a = __read.apply(void 0, [_b.sent(), 2]), models = _a[0], deleted = _a[1];\n            modelIds = new Set(models.map(function (_a) {\n              var id = _a.id;\n              return id;\n            }));\n\n            if (!isModelConstructor(modelOrModelConstructor) && !Array.isArray(deleted)) {\n              deleted = [deleted];\n            }\n\n            deleted.forEach(function (model) {\n              var modelConstructor = Object.getPrototypeOf(model).constructor;\n              var theCondition;\n\n              if (!isModelConstructor(modelOrModelConstructor)) {\n                theCondition = modelIds.has(model.id) ? ModelPredicateCreator.getPredicates(condition, false) : undefined;\n              }\n\n              _this.pushStream.next({\n                model: modelConstructor,\n                opType: OpType.DELETE,\n                element: model,\n                mutator: mutator,\n                condition: theCondition\n              });\n            });\n            return [2\n            /*return*/\n            , [models, deleted]];\n        }\n      });\n    });\n  };\n\n  StorageClass.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.init()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.adapter.query(modelConstructor, predicate, pagination)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  StorageClass.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.init()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.adapter.queryOne(modelConstructor, firstOrLast)];\n\n          case 2:\n            record = _a.sent();\n            return [2\n            /*return*/\n            , record];\n        }\n      });\n    });\n  };\n\n  StorageClass.prototype.observe = function (modelConstructor, predicate, skipOwn) {\n    var listenToAll = !modelConstructor;\n\n    var _a = ModelPredicateCreator.getPredicates(predicate, false) || {},\n        predicates = _a.predicates,\n        type = _a.type;\n\n    var hasPredicate = !!predicates;\n    var result = this.pushStream.observable.filter(function (_a) {\n      var mutator = _a.mutator;\n      return !skipOwn || mutator !== skipOwn;\n    }).map(function (_a) {\n      var _mutator = _a.mutator,\n          message = __rest(_a, [\"mutator\"]);\n\n      return message;\n    });\n\n    if (!listenToAll) {\n      result = result.filter(function (_a) {\n        var model = _a.model,\n            element = _a.element;\n\n        if (modelConstructor !== model) {\n          return false;\n        }\n\n        if (hasPredicate) {\n          return validatePredicate(element, type, predicates);\n        }\n\n        return true;\n      });\n    }\n\n    return result;\n  };\n\n  StorageClass.prototype.clear = function (completeObservable) {\n    if (completeObservable === void 0) {\n      completeObservable = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.initialized = undefined;\n            return [4\n            /*yield*/\n            , this.adapter.clear()];\n\n          case 1:\n            _a.sent();\n\n            if (completeObservable) {\n              this.pushStream.complete();\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  StorageClass.prototype.batchSave = function (modelConstructor, items, mutator) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.init()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.adapter.batchSave(modelConstructor, items)];\n\n          case 2:\n            result = _a.sent();\n            result.forEach(function (_a) {\n              var _b = __read(_a, 2),\n                  element = _b[0],\n                  opType = _b[1];\n\n              _this.pushStream.next({\n                model: modelConstructor,\n                opType: opType,\n                element: element,\n                mutator: mutator,\n                condition: undefined\n              });\n            });\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  }; // returns null if no user fields were changed (determined by value comparison)\n\n\n  StorageClass.prototype.getUpdateMutationInput = function (model, originalElement, patchesTuple) {\n    var e_1, _a;\n\n    var containsPatches = patchesTuple && patchesTuple.length;\n\n    if (!containsPatches) {\n      return null;\n    }\n\n    var _b = __read(patchesTuple, 2),\n        patches = _b[0],\n        source = _b[1];\n\n    var updatedElement = {}; // extract array of updated fields from patches\n\n    var updatedFields = patches.map(function (patch) {\n      return patch.path && patch.path[0];\n    }); // check model def for association and replace with targetName if exists\n\n    var modelConstructor = Object.getPrototypeOf(model).constructor;\n    var namespace = this.namespaceResolver(modelConstructor);\n    var fields = this.schema.namespaces[namespace].models[modelConstructor.name].fields;\n    var _c = this.schema.namespaces[namespace].keys[modelConstructor.name],\n        primaryKey = _c.primaryKey,\n        _d = _c.compositeKeys,\n        compositeKeys = _d === void 0 ? [] : _d; // set original values for these fields\n\n    updatedFields.forEach(function (field) {\n      var e_2, _a, e_3, _b;\n\n      var _c;\n\n      var targetName = isTargetNameAssociation((_c = fields[field]) === null || _c === void 0 ? void 0 : _c.association); // if field refers to a belongsTo relation, use the target field instead\n\n      var key = targetName || field; // check field values by value. Ignore unchanged fields\n\n      if (!valuesEqual(source[key], originalElement[key])) {\n        // if the field was updated to 'undefined', replace with 'null' for compatibility with JSON and GraphQL\n        updatedElement[key] = originalElement[key] === undefined ? null : originalElement[key];\n\n        try {\n          for (var compositeKeys_1 = __values(compositeKeys), compositeKeys_1_1 = compositeKeys_1.next(); !compositeKeys_1_1.done; compositeKeys_1_1 = compositeKeys_1.next()) {\n            var fieldSet = compositeKeys_1_1.value; // include all of the fields that comprise the composite key\n\n            if (fieldSet.has(key)) {\n              try {\n                for (var fieldSet_1 = (e_3 = void 0, __values(fieldSet)), fieldSet_1_1 = fieldSet_1.next(); !fieldSet_1_1.done; fieldSet_1_1 = fieldSet_1.next()) {\n                  var compositeField = fieldSet_1_1.value;\n                  updatedElement[compositeField] = originalElement[compositeField];\n                }\n              } catch (e_3_1) {\n                e_3 = {\n                  error: e_3_1\n                };\n              } finally {\n                try {\n                  if (fieldSet_1_1 && !fieldSet_1_1.done && (_b = fieldSet_1.return)) _b.call(fieldSet_1);\n                } finally {\n                  if (e_3) throw e_3.error;\n                }\n              }\n            }\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (compositeKeys_1_1 && !compositeKeys_1_1.done && (_a = compositeKeys_1.return)) _a.call(compositeKeys_1);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    }); // include field(s) from custom PK if one is specified for the model\n\n    if (primaryKey && primaryKey.length) {\n      try {\n        for (var primaryKey_1 = __values(primaryKey), primaryKey_1_1 = primaryKey_1.next(); !primaryKey_1_1.done; primaryKey_1_1 = primaryKey_1.next()) {\n          var pkField = primaryKey_1_1.value;\n          updatedElement[pkField] = originalElement[pkField];\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (primaryKey_1_1 && !primaryKey_1_1.done && (_a = primaryKey_1.return)) _a.call(primaryKey_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    if (Object.keys(updatedElement).length === 0) {\n      return null;\n    }\n\n    var id = originalElement.id,\n        _version = originalElement._version,\n        _lastChangedAt = originalElement._lastChangedAt,\n        _deleted = originalElement._deleted; // For update mutations we only want to send fields with changes\n    // and the required internal fields\n\n    return __assign(__assign({}, updatedElement), {\n      id: id,\n      _version: _version,\n      _lastChangedAt: _lastChangedAt,\n      _deleted: _deleted\n    });\n  };\n\n  return StorageClass;\n}();\n\nvar ExclusiveStorage =\n/** @class */\nfunction () {\n  function ExclusiveStorage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, adapter, sessionId) {\n    this.mutex = new Mutex();\n    this.storage = new StorageClass(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, adapter, sessionId);\n  }\n\n  ExclusiveStorage.prototype.runExclusive = function (fn) {\n    return this.mutex.runExclusive(fn.bind(this, this.storage));\n  };\n\n  ExclusiveStorage.prototype.save = function (model, condition, mutator, patchesTuple) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.runExclusive(function (storage) {\n          return storage.save(model, condition, mutator, patchesTuple);\n        })];\n      });\n    });\n  };\n\n  ExclusiveStorage.prototype.delete = function (modelOrModelConstructor, condition, mutator) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.runExclusive(function (storage) {\n          if (isModelConstructor(modelOrModelConstructor)) {\n            var modelConstructor = modelOrModelConstructor;\n            return storage.delete(modelConstructor, condition, mutator);\n          } else {\n            var model = modelOrModelConstructor;\n            return storage.delete(model, condition, mutator);\n          }\n        })];\n      });\n    });\n  };\n\n  ExclusiveStorage.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.runExclusive(function (storage) {\n          return storage.query(modelConstructor, predicate, pagination);\n        })];\n      });\n    });\n  };\n\n  ExclusiveStorage.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.runExclusive(function (storage) {\n          return storage.queryOne(modelConstructor, firstOrLast);\n        })];\n      });\n    });\n  };\n\n  ExclusiveStorage.getNamespace = function () {\n    return StorageClass.getNamespace();\n  };\n\n  ExclusiveStorage.prototype.observe = function (modelConstructor, predicate, skipOwn) {\n    return this.storage.observe(modelConstructor, predicate, skipOwn);\n  };\n\n  ExclusiveStorage.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.storage.clear()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ExclusiveStorage.prototype.batchSave = function (modelConstructor, items) {\n    return this.storage.batchSave(modelConstructor, items);\n  };\n\n  ExclusiveStorage.prototype.init = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.storage.init()];\n      });\n    });\n  };\n\n  return ExclusiveStorage;\n}();\n\nexport { ExclusiveStorage };","map":{"version":3,"mappings":"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","names":["Logger","Mutex","PushStream","ModelPredicateCreator","OpType","QueryOne","isTargetNameAssociation","isModelConstructor","STORAGE","validatePredicate","valuesEqual","getDefaultAdapter","logger","schema","namespaceResolver","getModelConstructorByModelName","modelInstanceCreator","adapter","sessionId","pushStream","StorageClass","namespace","name","relationships","enums","models","nonModels","initialized","undefined","_a","debug","Promise","res","rej","resolve","reject","setUp","then","model","condition","mutator","patchesTuple","init","save","result","forEach","savedElement","opType","syncResponse","updateMutationInput","UPDATE","_this","getUpdateMutationInput","element","modelConstructor","Object","getPrototypeOf","constructor","next","getPredicates","modelOrModelConstructor","_b","delete","deleted","modelIds","Set","map","id","Array","isArray","theCondition","has","DELETE","predicate","pagination","query","firstOrLast","FIRST","queryOne","record","skipOwn","listenToAll","predicates","type","hasPredicate","observable","filter","message","completeObservable","clear","complete","items","batchSave","originalElement","containsPatches","length","patches","source","updatedElement","updatedFields","path","patch","primaryKey","_d","compositeKeys","field","targetName","fields","_c","association","key","compositeKeys_1_1","fieldSet","fieldSet_1_1","compositeField","primaryKey_1_1","pkField","keys","_version","_lastChangedAt","_deleted","storage","ExclusiveStorage","fn","mutex","runExclusive","bind","getNamespace","observe"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-amplify\\datastore\\src\\storage\\storage.ts"],"sourcesContent":["import { Logger, Mutex } from '@aws-amplify/core';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport PushStream from 'zen-push';\nimport { Patch } from 'immer';\nimport { ModelInstanceCreator } from '../datastore/datastore';\nimport { ModelPredicateCreator } from '../predicates';\nimport {\n\tInternalSchema,\n\tModelInstanceMetadata,\n\tModelPredicate,\n\tNamespaceResolver,\n\tOpType,\n\tPaginationInput,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicatesGroup,\n\tQueryOne,\n\tSchemaNamespace,\n\tInternalSubscriptionMessage,\n\tSubscriptionMessage,\n\tisTargetNameAssociation,\n} from '../types';\nimport {\n\tisModelConstructor,\n\tSTORAGE,\n\tvalidatePredicate,\n\tvaluesEqual,\n} from '../util';\nimport { Adapter } from './adapter';\nimport getDefaultAdapter from './adapter/getDefaultAdapter';\n\nexport type StorageSubscriptionMessage<T extends PersistentModel> =\n\tInternalSubscriptionMessage<T> & {\n\t\tmutator?: Symbol;\n\t};\n\nexport type StorageFacade = Omit<Adapter, 'setUp'>;\nexport type Storage = InstanceType<typeof StorageClass>;\n\nconst logger = new Logger('DataStore');\nclass StorageClass implements StorageFacade {\n\tprivate initialized: Promise<void>;\n\tprivate readonly pushStream: {\n\t\tobservable: Observable<StorageSubscriptionMessage<PersistentModel>>;\n\t} & Required<\n\t\tZenObservable.Observer<StorageSubscriptionMessage<PersistentModel>>\n\t>;\n\n\tconstructor(\n\t\tprivate readonly schema: InternalSchema,\n\t\tprivate readonly namespaceResolver: NamespaceResolver,\n\t\tprivate readonly getModelConstructorByModelName: (\n\t\t\tnamsespaceName: string,\n\t\t\tmodelName: string\n\t\t) => PersistentModelConstructor<any>,\n\t\tprivate readonly modelInstanceCreator: ModelInstanceCreator,\n\t\tprivate readonly adapter?: Adapter,\n\t\tprivate readonly sessionId?: string\n\t) {\n\t\tthis.adapter = this.adapter || getDefaultAdapter();\n\t\tthis.pushStream = new PushStream();\n\t}\n\n\tstatic getNamespace() {\n\t\tconst namespace: SchemaNamespace = {\n\t\t\tname: STORAGE,\n\t\t\trelationships: {},\n\t\t\tenums: {},\n\t\t\tmodels: {},\n\t\t\tnonModels: {},\n\t\t};\n\n\t\treturn namespace;\n\t}\n\n\tasync init() {\n\t\tif (this.initialized !== undefined) {\n\t\t\tawait this.initialized;\n\t\t\treturn;\n\t\t}\n\t\tlogger.debug('Starting Storage');\n\n\t\tlet resolve: (value?: void | PromiseLike<void>) => void;\n\t\tlet reject: (value?: void | PromiseLike<void>) => void;\n\n\t\tthis.initialized = new Promise<void>((res, rej) => {\n\t\t\tresolve = res;\n\t\t\treject = rej;\n\t\t});\n\n\t\tthis.adapter\n\t\t\t.setUp(\n\t\t\t\tthis.schema,\n\t\t\t\tthis.namespaceResolver,\n\t\t\t\tthis.modelInstanceCreator,\n\t\t\t\tthis.getModelConstructorByModelName,\n\t\t\t\tthis.sessionId\n\t\t\t)\n\t\t\t.then(resolve, reject);\n\n\t\tawait this.initialized;\n\t}\n\n\tasync save<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>,\n\t\tmutator?: Symbol,\n\t\tpatchesTuple?: [Patch[], PersistentModel]\n\t): Promise<[T, OpType.INSERT | OpType.UPDATE][]> {\n\t\tawait this.init();\n\n\t\tconst result = await this.adapter.save(model, condition);\n\n\t\tresult.forEach(r => {\n\t\t\tconst [savedElement, opType] = r;\n\n\t\t\t// truthy when save is called by the Merger\n\t\t\tconst syncResponse = !!mutator;\n\n\t\t\tlet updateMutationInput;\n\t\t\t// don't attempt to calc mutation input when storage.save\n\t\t\t// is called by Merger, i.e., when processing an AppSync response\n\t\t\tif (opType === OpType.UPDATE && !syncResponse) {\n\t\t\t\t//\n\t\t\t\t// TODO: LOOK!!!\n\t\t\t\t// the `model` used here is in effect regardless of what model\n\t\t\t\t// comes back from adapter.save().\n\t\t\t\t// Prior to fix, SQLite adapter had been returning two models\n\t\t\t\t// of different types, resulting in invalid outbox entries.\n\t\t\t\t//\n\t\t\t\t// the bug is essentially fixed in SQLite adapter.\n\t\t\t\t// leaving as-is, because it's currently unclear whether anything\n\t\t\t\t// depends on this remaining as-is.\n\t\t\t\t//\n\n\t\t\t\tupdateMutationInput = this.getUpdateMutationInput(\n\t\t\t\t\tmodel,\n\t\t\t\t\tsavedElement,\n\t\t\t\t\tpatchesTuple\n\t\t\t\t);\n\t\t\t\t// // an update without changed user fields\n\t\t\t\t// => don't create mutationEvent\n\t\t\t\tif (updateMutationInput === null) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst element = updateMutationInput || savedElement;\n\n\t\t\tconst modelConstructor = (Object.getPrototypeOf(savedElement) as Object)\n\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\n\t\t\tthis.pushStream.next({\n\t\t\t\tmodel: modelConstructor,\n\t\t\t\topType,\n\t\t\t\telement,\n\t\t\t\tmutator,\n\t\t\t\tcondition: ModelPredicateCreator.getPredicates(condition, false),\n\t\t\t\tsavedElement,\n\t\t\t});\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tdelete<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>,\n\t\tmutator?: Symbol\n\t): Promise<[T[], T[]]>;\n\tdelete<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>,\n\t\tmutator?: Symbol\n\t): Promise<[T[], T[]]>;\n\tasync delete<T extends PersistentModel>(\n\t\tmodelOrModelConstructor: T | PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>,\n\t\tmutator?: Symbol\n\t): Promise<[T[], T[]]> {\n\t\tawait this.init();\n\n\t\tlet deleted: T[];\n\t\tlet models: T[];\n\n\t\t[models, deleted] = await this.adapter.delete(\n\t\t\tmodelOrModelConstructor,\n\t\t\tcondition\n\t\t);\n\n\t\tconst modelIds = new Set(models.map(({ id }) => id));\n\n\t\tif (\n\t\t\t!isModelConstructor(modelOrModelConstructor) &&\n\t\t\t!Array.isArray(deleted)\n\t\t) {\n\t\t\tdeleted = [deleted];\n\t\t}\n\n\t\tdeleted.forEach(model => {\n\t\t\tconst modelConstructor = (Object.getPrototypeOf(model) as Object)\n\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\n\t\t\tlet theCondition: PredicatesGroup<any>;\n\n\t\t\tif (!isModelConstructor(modelOrModelConstructor)) {\n\t\t\t\ttheCondition = modelIds.has(model.id)\n\t\t\t\t\t? ModelPredicateCreator.getPredicates(condition, false)\n\t\t\t\t\t: undefined;\n\t\t\t}\n\n\t\t\tthis.pushStream.next({\n\t\t\t\tmodel: modelConstructor,\n\t\t\t\topType: OpType.DELETE,\n\t\t\t\telement: model,\n\t\t\t\tmutator,\n\t\t\t\tcondition: theCondition,\n\t\t\t});\n\t\t});\n\n\t\treturn [models, deleted];\n\t}\n\n\tasync query<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tawait this.init();\n\n\t\treturn await this.adapter.query(modelConstructor, predicate, pagination);\n\t}\n\n\tasync queryOne<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tfirstOrLast: QueryOne = QueryOne.FIRST\n\t): Promise<T> {\n\t\tawait this.init();\n\n\t\tconst record = await this.adapter.queryOne(modelConstructor, firstOrLast);\n\t\treturn record;\n\t}\n\n\tobserve<T extends PersistentModel>(\n\t\tmodelConstructor?: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tskipOwn?: Symbol\n\t): Observable<SubscriptionMessage<T>> {\n\t\tconst listenToAll = !modelConstructor;\n\t\tconst { predicates, type } =\n\t\t\tModelPredicateCreator.getPredicates(predicate, false) || {};\n\t\tconst hasPredicate = !!predicates;\n\n\t\tlet result = this.pushStream.observable\n\t\t\t.filter(({ mutator }) => {\n\t\t\t\treturn !skipOwn || mutator !== skipOwn;\n\t\t\t})\n\t\t\t.map(\n\t\t\t\t({ mutator: _mutator, ...message }) => message as SubscriptionMessage<T>\n\t\t\t);\n\n\t\tif (!listenToAll) {\n\t\t\tresult = result.filter(({ model, element }) => {\n\t\t\t\tif (modelConstructor !== model) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (hasPredicate) {\n\t\t\t\t\treturn validatePredicate(element, type, predicates);\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync clear(completeObservable = true) {\n\t\tthis.initialized = undefined;\n\n\t\tawait this.adapter.clear();\n\n\t\tif (completeObservable) {\n\t\t\tthis.pushStream.complete();\n\t\t}\n\t}\n\n\tasync batchSave<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<any>,\n\t\titems: ModelInstanceMetadata[],\n\t\tmutator?: Symbol\n\t): Promise<[T, OpType][]> {\n\t\tawait this.init();\n\n\t\tconst result = await this.adapter.batchSave(modelConstructor, items);\n\n\t\tresult.forEach(([element, opType]) => {\n\t\t\tthis.pushStream.next({\n\t\t\t\tmodel: modelConstructor,\n\t\t\t\topType,\n\t\t\t\telement,\n\t\t\t\tmutator,\n\t\t\t\tcondition: undefined,\n\t\t\t});\n\t\t});\n\n\t\treturn result as any;\n\t}\n\n\t// returns null if no user fields were changed (determined by value comparison)\n\tprivate getUpdateMutationInput<T extends PersistentModel>(\n\t\tmodel: T,\n\t\toriginalElement: T,\n\t\tpatchesTuple?: [Patch[], PersistentModel]\n\t): PersistentModel | null {\n\t\tconst containsPatches = patchesTuple && patchesTuple.length;\n\t\tif (!containsPatches) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst [patches, source] = patchesTuple;\n\t\tconst updatedElement = {};\n\t\t// extract array of updated fields from patches\n\t\tconst updatedFields = <string[]>(\n\t\t\tpatches.map(patch => patch.path && patch.path[0])\n\t\t);\n\n\t\t// check model def for association and replace with targetName if exists\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst namespace = this.namespaceResolver(modelConstructor);\n\t\tconst { fields } =\n\t\t\tthis.schema.namespaces[namespace].models[modelConstructor.name];\n\t\tconst { primaryKey, compositeKeys = [] } =\n\t\t\tthis.schema.namespaces[namespace].keys[modelConstructor.name];\n\n\t\t// set original values for these fields\n\t\tupdatedFields.forEach((field: string) => {\n\t\t\tconst targetName: any = isTargetNameAssociation(\n\t\t\t\tfields[field]?.association\n\t\t\t);\n\n\t\t\t// if field refers to a belongsTo relation, use the target field instead\n\t\t\tconst key = targetName || field;\n\n\t\t\t// check field values by value. Ignore unchanged fields\n\t\t\tif (!valuesEqual(source[key], originalElement[key])) {\n\t\t\t\t// if the field was updated to 'undefined', replace with 'null' for compatibility with JSON and GraphQL\n\t\t\t\tupdatedElement[key] =\n\t\t\t\t\toriginalElement[key] === undefined ? null : originalElement[key];\n\n\t\t\t\tfor (const fieldSet of compositeKeys) {\n\t\t\t\t\t// include all of the fields that comprise the composite key\n\t\t\t\t\tif (fieldSet.has(key)) {\n\t\t\t\t\t\tfor (const compositeField of fieldSet) {\n\t\t\t\t\t\t\tupdatedElement[compositeField] = originalElement[compositeField];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// include field(s) from custom PK if one is specified for the model\n\t\tif (primaryKey && primaryKey.length) {\n\t\t\tfor (const pkField of primaryKey) {\n\t\t\t\tupdatedElement[pkField] = originalElement[pkField];\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(updatedElement).length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst { id, _version, _lastChangedAt, _deleted } = originalElement;\n\n\t\t// For update mutations we only want to send fields with changes\n\t\t// and the required internal fields\n\t\treturn {\n\t\t\t...updatedElement,\n\t\t\tid,\n\t\t\t_version,\n\t\t\t_lastChangedAt,\n\t\t\t_deleted,\n\t\t};\n\t}\n}\n\nclass ExclusiveStorage implements StorageFacade {\n\tprivate storage: StorageClass;\n\tprivate readonly mutex = new Mutex();\n\tconstructor(\n\t\tschema: InternalSchema,\n\t\tnamespaceResolver: NamespaceResolver,\n\t\tgetModelConstructorByModelName: (\n\t\t\tnamsespaceName: string,\n\t\t\tmodelName: string\n\t\t) => PersistentModelConstructor<any>,\n\t\tmodelInstanceCreator: ModelInstanceCreator,\n\t\tadapter?: Adapter,\n\t\tsessionId?: string\n\t) {\n\t\tthis.storage = new StorageClass(\n\t\t\tschema,\n\t\t\tnamespaceResolver,\n\t\t\tgetModelConstructorByModelName,\n\t\t\tmodelInstanceCreator,\n\t\t\tadapter,\n\t\t\tsessionId\n\t\t);\n\t}\n\n\trunExclusive<T>(fn: (storage: StorageClass) => Promise<T>) {\n\t\treturn <Promise<T>>this.mutex.runExclusive(fn.bind(this, this.storage));\n\t}\n\n\tasync save<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>,\n\t\tmutator?: Symbol,\n\t\tpatchesTuple?: [Patch[], PersistentModel]\n\t): Promise<[T, OpType.INSERT | OpType.UPDATE][]> {\n\t\treturn this.runExclusive<[T, OpType.INSERT | OpType.UPDATE][]>(storage =>\n\t\t\tstorage.save<T>(model, condition, mutator, patchesTuple)\n\t\t);\n\t}\n\n\tasync delete<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>,\n\t\tmutator?: Symbol\n\t): Promise<[T[], T[]]>;\n\tasync delete<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>,\n\t\tmutator?: Symbol\n\t): Promise<[T[], T[]]>;\n\tasync delete<T extends PersistentModel>(\n\t\tmodelOrModelConstructor: T | PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>,\n\t\tmutator?: Symbol\n\t): Promise<[T[], T[]]> {\n\t\treturn this.runExclusive<[T[], T[]]>(storage => {\n\t\t\tif (isModelConstructor(modelOrModelConstructor)) {\n\t\t\t\tconst modelConstructor = modelOrModelConstructor;\n\n\t\t\t\treturn storage.delete(modelConstructor, condition, mutator);\n\t\t\t} else {\n\t\t\t\tconst model = modelOrModelConstructor;\n\n\t\t\t\treturn storage.delete(model, condition, mutator);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync query<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\treturn this.runExclusive<T[]>(storage =>\n\t\t\tstorage.query<T>(modelConstructor, predicate, pagination)\n\t\t);\n\t}\n\n\tasync queryOne<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tfirstOrLast: QueryOne = QueryOne.FIRST\n\t): Promise<T> {\n\t\treturn this.runExclusive<T>(storage =>\n\t\t\tstorage.queryOne<T>(modelConstructor, firstOrLast)\n\t\t);\n\t}\n\n\tstatic getNamespace() {\n\t\treturn StorageClass.getNamespace();\n\t}\n\n\tobserve<T extends PersistentModel>(\n\t\tmodelConstructor?: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tskipOwn?: Symbol\n\t): Observable<SubscriptionMessage<T>> {\n\t\treturn this.storage.observe(modelConstructor, predicate, skipOwn);\n\t}\n\n\tasync clear() {\n\t\tawait this.storage.clear();\n\t}\n\n\tbatchSave<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<any>,\n\t\titems: ModelInstanceMetadata[]\n\t): Promise<[T, OpType][]> {\n\t\treturn this.storage.batchSave(modelConstructor, items);\n\t}\n\n\tasync init() {\n\t\treturn this.storage.init();\n\t}\n}\n\nexport { ExclusiveStorage };\n"]},"metadata":{},"sourceType":"module"}