{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport bowser from \"bowser\";\n/**\n * Default provider to the user agent in browsers. It's a best effort to infer\n * the device information. It uses bowser library to detect the browser and virsion\n */\n\nexport var defaultUserAgent = function (_a) {\n  var serviceId = _a.serviceId,\n      clientVersion = _a.clientVersion;\n  return function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var parsedUA, sections;\n\n      var _a, _b, _c, _d, _e, _f, _g;\n\n      return __generator(this, function (_h) {\n        parsedUA = ((_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) ? bowser.parse(window.navigator.userAgent) : undefined;\n        sections = [// sdk-metadata\n        [\"aws-sdk-js\", clientVersion], // os-metadata\n        [\"os/\" + (((_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _b === void 0 ? void 0 : _b.name) || \"other\"), (_c = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _c === void 0 ? void 0 : _c.version], // language-metadata\n        // ECMAScript edition doesn't matter in JS.\n        [\"lang/js\"], // browser vendor and version.\n        [\"md/browser\", ((_e = (_d = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : \"unknown\") + \"_\" + ((_g = (_f = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _f === void 0 ? void 0 : _f.version) !== null && _g !== void 0 ? _g : \"unknown\")]];\n\n        if (serviceId) {\n          // api-metadata\n          // service Id may not appear in non-AWS clients\n          sections.push([\"api/\" + serviceId, clientVersion]);\n        }\n\n        return [2\n        /*return*/\n        , sections];\n      });\n    });\n  };\n};","map":{"version":3,"mappings":";AACA,OAAOA,MAAP,MAAmB,QAAnB;AAIA;;;;;AAIA,OAAO,IAAMC,gBAAgB,GAAG,UAACC,EAAD,EAGN;MAFxBC,SAAS;MACTC,aAAa;EACqC;IAAA;;;;;;QAC5CC,QAAQ,GAAG,aAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEC,SAAR,MAAiB,IAAjB,IAAiBJ,aAAjB,GAAiB,MAAjB,GAAiBA,GAAEK,SAAnB,IAA+BP,MAAM,CAACQ,KAAP,CAAaC,MAAM,CAACH,SAAP,CAAiBC,SAA9B,CAA/B,GAA0EG,SAArF;QACAC,QAAQ,GAAc,CAC1B;QACA,CAAC,YAAD,EAAeP,aAAf,CAF0B,EAG1B;QACA,CAAC,SAAM,eAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEQ,EAAV,MAAY,IAAZ,IAAYC,aAAZ,GAAY,MAAZ,GAAYA,GAAEC,IAAd,KAAsB,OAA5B,CAAD,EAAsC,MAAET,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEO,EAAZ,MAAc,IAAd,IAAcG,aAAd,GAAc,MAAd,GAAcA,GAAEC,OAAtD,CAJ0B,EAK1B;QACA;QACA,CAAC,SAAD,CAP0B,EAQ1B;QACA,CAAC,YAAD,EAAe,aAAGX,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEY,OAAb,MAAoB,IAApB,IAAoBC,aAApB,GAAoB,MAApB,GAAoBA,GAAEJ,IAAtB,MAA0B,IAA1B,IAA0BK,aAA1B,GAA0BA,EAA1B,GAA8B,SAA9B,IAAuC,GAAvC,IAAuC,YAAId,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEY,OAAd,MAAqB,IAArB,IAAqBG,aAArB,GAAqB,MAArB,GAAqBA,GAAEJ,OAAvB,MAA8B,IAA9B,IAA8BK,aAA9B,GAA8BA,EAA9B,GAAkC,SAAzE,CAAf,CAT0B,CAAtB;;QAYN,IAAIlB,SAAJ,EAAe;UACb;UACA;UACAQ,QAAQ,CAACW,IAAT,CAAc,CAAC,SAAOnB,SAAR,EAAqBC,aAArB,CAAd;QACD;;QAED;QAAA;QAAA,EAAOO,QAAP;;KApBkD;EAqBnD,CArBmD;AAqBnD,CAxBM","names":["bowser","defaultUserAgent","_a","serviceId","clientVersion","parsedUA","navigator","userAgent","parse","window","undefined","sections","os","_b","name","_c","version","browser","_d","_e","_f","_g","push"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\util-user-agent-browser\\src\\index.ts"],"sourcesContent":["import { Provider, UserAgent } from \"@aws-sdk/types\";\nimport bowser from \"bowser\";\n\nimport { DefaultUserAgentOptions } from \"./configurations\";\n\n/**\n * Default provider to the user agent in browsers. It's a best effort to infer\n * the device information. It uses bowser library to detect the browser and virsion\n */\nexport const defaultUserAgent = ({\n  serviceId,\n  clientVersion,\n}: DefaultUserAgentOptions): Provider<UserAgent> => async () => {\n  const parsedUA = window?.navigator?.userAgent ? bowser.parse(window.navigator.userAgent) : undefined;\n  const sections: UserAgent = [\n    // sdk-metadata\n    [\"aws-sdk-js\", clientVersion],\n    // os-metadata\n    [`os/${parsedUA?.os?.name || \"other\"}`, parsedUA?.os?.version],\n    // language-metadata\n    // ECMAScript edition doesn't matter in JS.\n    [\"lang/js\"],\n    // browser vendor and version.\n    [\"md/browser\", `${parsedUA?.browser?.name ?? \"unknown\"}_${parsedUA?.browser?.version ?? \"unknown\"}`],\n  ];\n\n  if (serviceId) {\n    // api-metadata\n    // service Id may not appear in non-AWS clients\n    sections.push([`api/${serviceId}`, clientVersion]);\n  }\n\n  return sections;\n};\n"]},"metadata":{},"sourceType":"module"}