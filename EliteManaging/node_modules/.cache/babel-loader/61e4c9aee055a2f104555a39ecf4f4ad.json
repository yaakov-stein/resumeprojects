{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SearchFacesRequest, SearchFacesResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1SearchFacesCommand, serializeAws_json1_1SearchFacesCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>For a given input face ID, searches for matching faces in the collection the face\n *       belongs to. You get a face ID when you add a face to the collection using the <a>IndexFaces</a> operation. The operation compares the features of the input face with\n *       faces in the specified collection. </p>\n *          <note>\n *             <p>You can also search faces without indexing faces by using the\n *           <code>SearchFacesByImage</code> operation.</p>\n *          </note>\n *\n *          <p>\n *      The operation response returns\n *       an array of faces that match, ordered by similarity score with the highest\n *       similarity first. More specifically, it is an\n *       array of metadata for each face match that is found. Along with the metadata, the response also\n *       includes a <code>confidence</code> value for each face match, indicating the confidence\n *       that the specific face matches the input face.\n *     </p>\n *\n *          <p>For an example, see Searching for a Face Using Its Face ID in the Amazon Rekognition Developer Guide.</p>\n *\n *          <p>This operation requires permissions to perform the <code>rekognition:SearchFaces</code>\n *       action.</p>\n */\n\nvar SearchFacesCommand =\n/** @class */\nfunction (_super) {\n  __extends(SearchFacesCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function SearchFacesCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  SearchFacesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"SearchFacesCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: SearchFacesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: SearchFacesResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  SearchFacesCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1SearchFacesCommand(input, context);\n  };\n\n  SearchFacesCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1SearchFacesCommand(output, context);\n  };\n\n  return SearchFacesCommand;\n}($Command);\n\nexport { SearchFacesCommand };","map":{"version":3,"mappings":";AACA,SAASA,kBAAT,EAA6BC,mBAA7B,QAAwD,oBAAxD;AACA,SACEC,wCADF,EAEEC,sCAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AAAA;AAAA;EAAwCC,sCAAxC,CAKE;EACA;;;EAEA,4BAAqBC,KAArB,EAAmD;IAAnD,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAA8B,CAGjD;EACD;EAED;;;;;EAGAC,2DACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,mBAAnB;IACA,IAAMC,WAAW,GAAG,oBAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,kBAAkB,CAAC0B,kBAJW;MAKvDC,wBAAwB,EAAE1B,mBAAmB,CAACyB;IALS,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,yCAAR,UAAkBH,KAAlB,EAAkDuB,OAAlD,EAAyE;IACvE,OAAO5B,sCAAsC,CAACK,KAAD,EAAQuB,OAAR,CAA7C;EACD,CAFO;;EAIApB,2CAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO7B,wCAAwC,CAAC8B,MAAD,EAASD,OAAT,CAA/C;EACD,CAFO;;EAMV;AAAC,CAtDD,CAAwCzB,QAAxC","names":["SearchFacesRequest","SearchFacesResponse","deserializeAws_json1_1SearchFacesCommand","serializeAws_json1_1SearchFacesCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","SearchFacesCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\client-rekognition\\commands\\SearchFacesCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { SearchFacesRequest, SearchFacesResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1SearchFacesCommand,\n  serializeAws_json1_1SearchFacesCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type SearchFacesCommandInput = SearchFacesRequest;\nexport type SearchFacesCommandOutput = SearchFacesResponse & __MetadataBearer;\n\n/**\n * <p>For a given input face ID, searches for matching faces in the collection the face\n *       belongs to. You get a face ID when you add a face to the collection using the <a>IndexFaces</a> operation. The operation compares the features of the input face with\n *       faces in the specified collection. </p>\n *          <note>\n *             <p>You can also search faces without indexing faces by using the\n *           <code>SearchFacesByImage</code> operation.</p>\n *          </note>\n *\n *          <p>\n *      The operation response returns\n *       an array of faces that match, ordered by similarity score with the highest\n *       similarity first. More specifically, it is an\n *       array of metadata for each face match that is found. Along with the metadata, the response also\n *       includes a <code>confidence</code> value for each face match, indicating the confidence\n *       that the specific face matches the input face.\n *     </p>\n *\n *          <p>For an example, see Searching for a Face Using Its Face ID in the Amazon Rekognition Developer Guide.</p>\n *\n *          <p>This operation requires permissions to perform the <code>rekognition:SearchFaces</code>\n *       action.</p>\n */\nexport class SearchFacesCommand extends $Command<\n  SearchFacesCommandInput,\n  SearchFacesCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: SearchFacesCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<SearchFacesCommandInput, SearchFacesCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"SearchFacesCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: SearchFacesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: SearchFacesResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: SearchFacesCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1SearchFacesCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<SearchFacesCommandOutput> {\n    return deserializeAws_json1_1SearchFacesCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}