{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSKinesisProvider } from './AWSKinesisProvider';\nimport { PutRecordBatchCommand, FirehoseClient } from '@aws-sdk/client-firehose';\nimport { fromUtf8 } from '@aws-sdk/util-utf8-browser';\nvar logger = new Logger('AWSKineisFirehoseProvider');\n\nvar AWSKinesisFirehoseProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSKinesisFirehoseProvider, _super);\n\n  function AWSKinesisFirehoseProvider(config) {\n    return _super.call(this, config) || this;\n  }\n  /**\n   * get provider name of the plugin\n   */\n\n\n  AWSKinesisFirehoseProvider.prototype.getProviderName = function () {\n    return 'AWSKinesisFirehose';\n  };\n\n  AWSKinesisFirehoseProvider.prototype._sendEvents = function (group) {\n    var _this = this;\n\n    if (group.length === 0) {\n      return;\n    }\n\n    var _a = group[0],\n        config = _a.config,\n        credentials = _a.credentials;\n\n    var initClients = this._init(config, credentials);\n\n    if (!initClients) return false;\n    var records = {};\n    group.map(function (params) {\n      // split by streamName\n      var evt = params.event;\n      var streamName = evt.streamName,\n          data = evt.data;\n\n      if (records[streamName] === undefined) {\n        records[streamName] = [];\n      }\n\n      var bufferData = data && typeof data !== 'string' ? JSON.stringify(data) : data;\n      var Data = fromUtf8(bufferData);\n      var record = {\n        Data: Data\n      };\n      records[streamName].push(record);\n    });\n    Object.keys(records).map(function (streamName) {\n      logger.debug('putting records to kinesis', streamName, 'with records', records[streamName]);\n\n      _this._kinesisFirehose.send(new PutRecordBatchCommand({\n        Records: records[streamName],\n        DeliveryStreamName: streamName\n      })).then(function (res) {\n        return logger.debug('Upload records to stream', streamName);\n      }).catch(function (err) {\n        return logger.debug('Failed to upload records to Kinesis', err);\n      });\n    });\n  };\n\n  AWSKinesisFirehoseProvider.prototype._init = function (config, credentials) {\n    logger.debug('init clients');\n\n    if (this._kinesisFirehose && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n      logger.debug('no change for analytics config, directly return from init');\n      return true;\n    }\n\n    this._config.credentials = credentials;\n    var region = config.region;\n    return this._initFirehose(region, credentials);\n  };\n\n  AWSKinesisFirehoseProvider.prototype._initFirehose = function (region, credentials) {\n    logger.debug('initialize kinesis firehose with credentials', credentials);\n    this._kinesisFirehose = new FirehoseClient({\n      apiVersion: '2015-08-04',\n      region: region,\n      credentials: credentials\n    });\n    return true;\n  };\n\n  return AWSKinesisFirehoseProvider;\n}(AWSKinesisProvider);\n\nexport { AWSKinesisFirehoseProvider };\n/**\n * @deprecated use named import\n */\n\nexport default AWSKinesisFirehoseProvider;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","AWSKinesisProvider","PutRecordBatchCommand","FirehoseClient","fromUtf8","logger","__extends","config","_super","AWSKinesisFirehoseProvider","group","length","credentials","initClients","_init","records","map","evt","params","event","data","streamName","undefined","bufferData","JSON","stringify","Data","record","push","Object","keys","debug","_this","_kinesisFirehose","send","Records","DeliveryStreamName","then","catch","err","_config","sessionToken","identityId","_initFirehose","region","apiVersion"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-amplify\\analytics\\src\\Providers\\AWSKinesisFirehoseProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSKinesisProvider } from './AWSKinesisProvider';\nimport {\n\tPutRecordBatchCommand,\n\tFirehoseClient,\n} from '@aws-sdk/client-firehose';\nimport { fromUtf8 } from '@aws-sdk/util-utf8-browser';\n\nconst logger = new Logger('AWSKineisFirehoseProvider');\n\nexport class AWSKinesisFirehoseProvider extends AWSKinesisProvider {\n\tprivate _kinesisFirehose: FirehoseClient;\n\n\tconstructor(config?) {\n\t\tsuper(config);\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tpublic getProviderName(): string {\n\t\treturn 'AWSKinesisFirehose';\n\t}\n\n\tprotected _sendEvents(group) {\n\t\tif (group.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { config, credentials } = group[0];\n\n\t\tconst initClients = this._init(config, credentials);\n\t\tif (!initClients) return false;\n\n\t\tconst records = {};\n\n\t\tgroup.map(params => {\n\t\t\t// split by streamName\n\t\t\tconst evt = params.event;\n\t\t\tconst { streamName, data } = evt;\n\t\t\tif (records[streamName] === undefined) {\n\t\t\t\trecords[streamName] = [];\n\t\t\t}\n\n\t\t\tconst bufferData =\n\t\t\t\tdata && typeof data !== 'string' ? JSON.stringify(data) : data;\n\t\t\tconst Data = fromUtf8(bufferData);\n\t\t\tconst record = { Data };\n\t\t\trecords[streamName].push(record);\n\t\t});\n\n\t\tObject.keys(records).map(streamName => {\n\t\t\tlogger.debug(\n\t\t\t\t'putting records to kinesis',\n\t\t\t\tstreamName,\n\t\t\t\t'with records',\n\t\t\t\trecords[streamName]\n\t\t\t);\n\n\t\t\tthis._kinesisFirehose\n\t\t\t\t.send(\n\t\t\t\t\tnew PutRecordBatchCommand({\n\t\t\t\t\t\tRecords: records[streamName],\n\t\t\t\t\t\tDeliveryStreamName: streamName,\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.then(res => logger.debug('Upload records to stream', streamName))\n\t\t\t\t.catch(err => logger.debug('Failed to upload records to Kinesis', err));\n\t\t});\n\t}\n\n\tprotected _init(config, credentials) {\n\t\tlogger.debug('init clients');\n\n\t\tif (\n\t\t\tthis._kinesisFirehose &&\n\t\t\tthis._config.credentials &&\n\t\t\tthis._config.credentials.sessionToken === credentials.sessionToken &&\n\t\t\tthis._config.credentials.identityId === credentials.identityId\n\t\t) {\n\t\t\tlogger.debug('no change for analytics config, directly return from init');\n\t\t\treturn true;\n\t\t}\n\n\t\tthis._config.credentials = credentials;\n\t\tconst { region } = config;\n\n\t\treturn this._initFirehose(region, credentials);\n\t}\n\n\tprivate _initFirehose(region, credentials) {\n\t\tlogger.debug('initialize kinesis firehose with credentials', credentials);\n\t\tthis._kinesisFirehose = new FirehoseClient({\n\t\t\tapiVersion: '2015-08-04',\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t});\n\t\treturn true;\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default AWSKinesisFirehoseProvider;\n"]},"metadata":{},"sourceType":"module"}