{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { LexRuntimeServiceClient } from \"./LexRuntimeServiceClient\";\nimport { DeleteSessionCommand } from \"./commands/DeleteSessionCommand\";\nimport { GetSessionCommand } from \"./commands/GetSessionCommand\";\nimport { PostContentCommand } from \"./commands/PostContentCommand\";\nimport { PostTextCommand } from \"./commands/PostTextCommand\";\nimport { PutSessionCommand } from \"./commands/PutSessionCommand\";\n/**\n * <p>Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of\n *       operations (API). Your conversational bot uses the runtime API to understand user utterances\n *       (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends\n *       this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is\n *       for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in\n *       user conversation on behalf of the bot to elicit required information (slot values, such as\n *       pizza size and crust type), and then performs fulfillment activity (that you configured when\n *       you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For\n *       a list of build-time operations, see the build-time API, . </p>\n */\n\nvar LexRuntimeService =\n/** @class */\nfunction (_super) {\n  __extends(LexRuntimeService, _super);\n\n  function LexRuntimeService() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LexRuntimeService.prototype.deleteSession = function (args, optionsOrCb, cb) {\n    var command = new DeleteSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeService.prototype.getSession = function (args, optionsOrCb, cb) {\n    var command = new GetSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeService.prototype.postContent = function (args, optionsOrCb, cb) {\n    var command = new PostContentCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeService.prototype.postText = function (args, optionsOrCb, cb) {\n    var command = new PostTextCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeService.prototype.putSession = function (args, optionsOrCb, cb) {\n    var command = new PutSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  return LexRuntimeService;\n}(LexRuntimeServiceClient);\n\nexport { LexRuntimeService };","map":{"version":3,"mappings":"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","names":["LexRuntimeServiceClient","DeleteSessionCommand","GetSessionCommand","PostContentCommand","PostTextCommand","PutSessionCommand","__extends","LexRuntimeService","args","optionsOrCb","cb","command","send","Error"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\client-lex-runtime-service\\LexRuntimeService.ts"],"sourcesContent":["import { LexRuntimeServiceClient } from \"./LexRuntimeServiceClient\";\nimport {\n  DeleteSessionCommand,\n  DeleteSessionCommandInput,\n  DeleteSessionCommandOutput,\n} from \"./commands/DeleteSessionCommand\";\nimport { GetSessionCommand, GetSessionCommandInput, GetSessionCommandOutput } from \"./commands/GetSessionCommand\";\nimport { PostContentCommand, PostContentCommandInput, PostContentCommandOutput } from \"./commands/PostContentCommand\";\nimport { PostTextCommand, PostTextCommandInput, PostTextCommandOutput } from \"./commands/PostTextCommand\";\nimport { PutSessionCommand, PutSessionCommandInput, PutSessionCommandOutput } from \"./commands/PutSessionCommand\";\nimport { HttpHandlerOptions as __HttpHandlerOptions } from \"@aws-sdk/types\";\n\n/**\n * <p>Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of\n *       operations (API). Your conversational bot uses the runtime API to understand user utterances\n *       (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends\n *       this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is\n *       for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in\n *       user conversation on behalf of the bot to elicit required information (slot values, such as\n *       pizza size and crust type), and then performs fulfillment activity (that you configured when\n *       you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For\n *       a list of build-time operations, see the build-time API, . </p>\n */\nexport class LexRuntimeService extends LexRuntimeServiceClient {\n  /**\n   * <p>Removes session information for a specified bot, alias, and user ID. </p>\n   */\n  public deleteSession(\n    args: DeleteSessionCommandInput,\n    options?: __HttpHandlerOptions\n  ): Promise<DeleteSessionCommandOutput>;\n  public deleteSession(\n    args: DeleteSessionCommandInput,\n    cb: (err: any, data?: DeleteSessionCommandOutput) => void\n  ): void;\n  public deleteSession(\n    args: DeleteSessionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: DeleteSessionCommandOutput) => void\n  ): void;\n  public deleteSession(\n    args: DeleteSessionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: DeleteSessionCommandOutput) => void),\n    cb?: (err: any, data?: DeleteSessionCommandOutput) => void\n  ): Promise<DeleteSessionCommandOutput> | void {\n    const command = new DeleteSessionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Returns session information for a specified bot, alias, and user ID.</p>\n   */\n  public getSession(args: GetSessionCommandInput, options?: __HttpHandlerOptions): Promise<GetSessionCommandOutput>;\n  public getSession(args: GetSessionCommandInput, cb: (err: any, data?: GetSessionCommandOutput) => void): void;\n  public getSession(\n    args: GetSessionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: GetSessionCommandOutput) => void\n  ): void;\n  public getSession(\n    args: GetSessionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: GetSessionCommandOutput) => void),\n    cb?: (err: any, data?: GetSessionCommandOutput) => void\n  ): Promise<GetSessionCommandOutput> | void {\n    const command = new GetSessionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p> Sends user input (text or speech) to Amazon Lex. Clients use this API to send text and audio\n   *       requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model\n   *       that it built for the bot. </p>\n   *          <p>The <code>PostContent</code> operation supports audio input at 8kHz and 16kHz. You can use\n   *       8kHz audio to achieve higher speech recognition accuracy in telephone audio applications. </p>\n   *          <p> In response, Amazon Lex returns the next message to convey to the user. Consider the following\n   *       example messages: </p>\n   *          <ul>\n   *             <li>\n   *                <p> For a user input \"I would like a pizza,\" Amazon Lex might return a response with a message\n   *           eliciting slot data (for example, <code>PizzaSize</code>): \"What size pizza would you\n   *           like?\". </p>\n   *             </li>\n   *             <li>\n   *                <p> After the user provides all of the pizza order information, Amazon Lex might return a\n   *           response with a message to get user confirmation: \"Order the pizza?\". </p>\n   *             </li>\n   *             <li>\n   *                <p> After the user replies \"Yes\" to the confirmation prompt, Amazon Lex might return a\n   *           conclusion statement: \"Thank you, your cheese pizza has been ordered.\". </p>\n   *             </li>\n   *          </ul>\n   *          <p> Not all Amazon Lex messages require a response from the user. For example, conclusion\n   *       statements do not require a response. Some messages require only a yes or no response. In\n   *       addition to the <code>message</code>, Amazon Lex provides additional context about the message in\n   *       the response that you can use to enhance client behavior, such as displaying the appropriate\n   *       client user interface. Consider the following examples: </p>\n   *          <ul>\n   *             <li>\n   *                <p> If the message is to elicit slot data, Amazon Lex returns the following context\n   *           information: </p>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <code>x-amz-lex-dialog-state</code> header set to <code>ElicitSlot</code>\n   *                      </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <code>x-amz-lex-intent-name</code> header set to the intent name in the current\n   *               context </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <code>x-amz-lex-slot-to-elicit</code> header set to the slot name for which the\n   *                 <code>message</code> is eliciting information </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <code>x-amz-lex-slots</code> header set to a map of slots configured for the intent\n   *               with their current values </p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <p> If the message is a confirmation prompt, the <code>x-amz-lex-dialog-state</code>\n   *           header is set to <code>Confirmation</code> and the <code>x-amz-lex-slot-to-elicit</code>\n   *           header is omitted. </p>\n   *             </li>\n   *             <li>\n   *                <p> If the message is a clarification prompt configured for the intent, indicating that\n   *           the user intent is not understood, the <code>x-amz-dialog-state</code> header is set to\n   *             <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code> header is omitted.\n   *         </p>\n   *             </li>\n   *          </ul>\n   *          <p> In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>.\n   *       For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing Conversation Context</a>. </p>\n   */\n  public postContent(args: PostContentCommandInput, options?: __HttpHandlerOptions): Promise<PostContentCommandOutput>;\n  public postContent(args: PostContentCommandInput, cb: (err: any, data?: PostContentCommandOutput) => void): void;\n  public postContent(\n    args: PostContentCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PostContentCommandOutput) => void\n  ): void;\n  public postContent(\n    args: PostContentCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PostContentCommandOutput) => void),\n    cb?: (err: any, data?: PostContentCommandOutput) => void\n  ): Promise<PostContentCommandOutput> | void {\n    const command = new PostContentCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Sends user input to Amazon Lex. Client applications can use this API to send requests to\n   *       Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it\n   *       built for the bot. </p>\n   *          <p> In response, Amazon Lex returns the next <code>message</code> to convey to the user an\n   *       optional <code>responseCard</code> to display. Consider the following example messages: </p>\n   *          <ul>\n   *             <li>\n   *                <p> For a user input \"I would like a pizza\", Amazon Lex might return a response with a\n   *           message eliciting slot data (for example, PizzaSize): \"What size pizza would you like?\"\n   *         </p>\n   *             </li>\n   *             <li>\n   *                <p> After the user provides all of the pizza order information, Amazon Lex might return a\n   *           response with a message to obtain user confirmation \"Proceed with the pizza order?\".\n   *         </p>\n   *             </li>\n   *             <li>\n   *                <p> After the user replies to a confirmation prompt with a \"yes\", Amazon Lex might return\n   *           a conclusion statement: \"Thank you, your cheese pizza has been ordered.\". </p>\n   *             </li>\n   *          </ul>\n   *\n   *          <p> Not all Amazon Lex messages require a user response. For example, a conclusion statement\n   *       does not require a response. Some messages require only a \"yes\" or \"no\" user response. In\n   *       addition to the <code>message</code>, Amazon Lex provides additional context about the message\n   *       in the response that you might use to enhance client behavior, for example, to display the\n   *       appropriate client user interface. These are the <code>slotToElicit</code>,\n   *         <code>dialogState</code>, <code>intentName</code>, and <code>slots</code> fields in the\n   *       response. Consider the following examples: </p>\n   *\n   *          <ul>\n   *             <li>\n   *                <p>If the message is to elicit slot data, Amazon Lex returns the following context\n   *           information:</p>\n   *                <ul>\n   *                   <li>\n   *                      <p>\n   *                         <code>dialogState</code> set to ElicitSlot </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <code>intentName</code> set to the intent name in the current context </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <code>slotToElicit</code> set to the slot name for which the <code>message</code> is\n   *               eliciting information </p>\n   *                   </li>\n   *                   <li>\n   *                      <p>\n   *                         <code>slots</code> set to a map of slots, configured for the intent, with currently\n   *               known values </p>\n   *                   </li>\n   *                </ul>\n   *             </li>\n   *             <li>\n   *                <p> If the message is a confirmation prompt, the <code>dialogState</code> is set to\n   *           ConfirmIntent and <code>SlotToElicit</code> is set to null. </p>\n   *             </li>\n   *             <li>\n   *                <p>If the message is a clarification prompt (configured for the intent) that indicates\n   *           that user intent is not understood, the <code>dialogState</code> is set to ElicitIntent\n   *           and <code>slotToElicit</code> is set to null. </p>\n   *             </li>\n   *          </ul>\n   *\n   *          <p> In addition, Amazon Lex also returns your application-specific\n   *         <code>sessionAttributes</code>. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing Conversation Context</a>. </p>\n   */\n  public postText(args: PostTextCommandInput, options?: __HttpHandlerOptions): Promise<PostTextCommandOutput>;\n  public postText(args: PostTextCommandInput, cb: (err: any, data?: PostTextCommandOutput) => void): void;\n  public postText(\n    args: PostTextCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PostTextCommandOutput) => void\n  ): void;\n  public postText(\n    args: PostTextCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PostTextCommandOutput) => void),\n    cb?: (err: any, data?: PostTextCommandOutput) => void\n  ): Promise<PostTextCommandOutput> | void {\n    const command = new PostTextCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n\n  /**\n   * <p>Creates a new session or modifies an existing session with an Amazon Lex bot. Use this\n   *       operation to enable your application to set the state of the bot.</p>\n   *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html\">Managing Sessions</a>.</p>\n   */\n  public putSession(args: PutSessionCommandInput, options?: __HttpHandlerOptions): Promise<PutSessionCommandOutput>;\n  public putSession(args: PutSessionCommandInput, cb: (err: any, data?: PutSessionCommandOutput) => void): void;\n  public putSession(\n    args: PutSessionCommandInput,\n    options: __HttpHandlerOptions,\n    cb: (err: any, data?: PutSessionCommandOutput) => void\n  ): void;\n  public putSession(\n    args: PutSessionCommandInput,\n    optionsOrCb?: __HttpHandlerOptions | ((err: any, data?: PutSessionCommandOutput) => void),\n    cb?: (err: any, data?: PutSessionCommandOutput) => void\n  ): Promise<PutSessionCommandOutput> | void {\n    const command = new PutSessionCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}