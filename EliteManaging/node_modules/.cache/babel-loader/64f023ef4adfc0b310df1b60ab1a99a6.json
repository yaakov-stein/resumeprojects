{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartDeliveryStreamEncryptionInput, StartDeliveryStreamEncryptionOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartDeliveryStreamEncryptionCommand, serializeAws_json1_1StartDeliveryStreamEncryptionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Enables server-side encryption (SSE) for the delivery stream. </p>\n *          <p>This operation is asynchronous. It returns immediately. When you invoke it, Kinesis Data\n *          Firehose first sets the encryption status of the stream to <code>ENABLING</code>, and then\n *          to <code>ENABLED</code>. The encryption status of a delivery stream is the\n *             <code>Status</code> property in <a>DeliveryStreamEncryptionConfiguration</a>.\n *          If the operation fails, the encryption status changes to <code>ENABLING_FAILED</code>. You\n *          can continue to read and write data to your delivery stream while the encryption status is\n *             <code>ENABLING</code>, but the data is not encrypted. It can take up to 5 seconds after\n *          the encryption status changes to <code>ENABLED</code> before all records written to the\n *          delivery stream are encrypted. To find out whether a record or a batch of records was\n *          encrypted, check the response elements <a>PutRecordOutput$Encrypted</a> and\n *             <a>PutRecordBatchOutput$Encrypted</a>, respectively.</p>\n *          <p>To check the encryption status of a delivery stream, use <a>DescribeDeliveryStream</a>.</p>\n *          <p>Even if encryption is currently enabled for a delivery stream, you can still invoke this\n *          operation on it to change the ARN of the CMK or both its type and ARN. If you invoke this\n *          method to change the CMK, and the old CMK is of type <code>CUSTOMER_MANAGED_CMK</code>,\n *          Kinesis Data Firehose schedules the grant it had on the old CMK for retirement. If the new\n *          CMK is of type <code>CUSTOMER_MANAGED_CMK</code>, Kinesis Data Firehose creates a grant\n *          that enables it to use the new CMK to encrypt and decrypt data and to manage the\n *          grant.</p>\n *          <p>If a delivery stream already has encryption enabled and then you invoke this operation\n *          to change the ARN of the CMK or both its type and ARN and you get\n *             <code>ENABLING_FAILED</code>, this only means that the attempt to change the CMK failed.\n *          In this case, encryption remains enabled with the old CMK.</p>\n *          <p>If the encryption status of your delivery stream is <code>ENABLING_FAILED</code>, you\n *          can invoke this operation again with a valid CMK. The CMK must be enabled and the key\n *          policy mustn't explicitly deny the permission for Kinesis Data Firehose to invoke KMS\n *          encrypt and decrypt operations.</p>\n *          <p>You can enable SSE for a delivery stream only if it's a delivery stream that uses\n *             <code>DirectPut</code> as its source. </p>\n *          <p>The <code>StartDeliveryStreamEncryption</code> and\n *             <code>StopDeliveryStreamEncryption</code> operations have a combined limit of 25 calls\n *          per delivery stream per 24 hours. For example, you reach the limit if you call\n *             <code>StartDeliveryStreamEncryption</code> 13 times and\n *             <code>StopDeliveryStreamEncryption</code> 12 times for the same delivery stream in a\n *          24-hour period.</p>\n */\n\nvar StartDeliveryStreamEncryptionCommand =\n/** @class */\nfunction (_super) {\n  __extends(StartDeliveryStreamEncryptionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StartDeliveryStreamEncryptionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StartDeliveryStreamEncryptionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"FirehoseClient\";\n    var commandName = \"StartDeliveryStreamEncryptionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartDeliveryStreamEncryptionInput.filterSensitiveLog,\n      outputFilterSensitiveLog: StartDeliveryStreamEncryptionOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StartDeliveryStreamEncryptionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartDeliveryStreamEncryptionCommand(input, context);\n  };\n\n  StartDeliveryStreamEncryptionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartDeliveryStreamEncryptionCommand(output, context);\n  };\n\n  return StartDeliveryStreamEncryptionCommand;\n}($Command);\n\nexport { StartDeliveryStreamEncryptionCommand };","map":{"version":3,"mappings":";AACA,SAASA,kCAAT,EAA6CC,mCAA7C,QAAwF,oBAAxF;AACA,SACEC,0DADF,EAEEC,wDAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;AAAA;AAAA;EAA0DC,wDAA1D,CAKE;EACA;;;EAEA,8CAAqBC,KAArB,EAAqE;IAArE,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAgD,CAGnE;EACD;EAED;;;;;EAGAC,6EACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,gBAAnB;IACA,IAAMC,WAAW,GAAG,sCAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,kCAAkC,CAAC0B,kBAJL;MAKvDC,wBAAwB,EAAE1B,mCAAmC,CAACyB;IALP,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,2DAAR,UAAkBH,KAAlB,EAAoEuB,OAApE,EAA2F;IACzF,OAAO5B,wDAAwD,CAACK,KAAD,EAAQuB,OAAR,CAA/D;EACD,CAFO;;EAIApB,6DAAR,UACEqB,MADF,EAEED,OAFF,EAEyB;IAEvB,OAAO7B,0DAA0D,CAAC8B,MAAD,EAASD,OAAT,CAAjE;EACD,CALO;;EASV;AAAC,CAzDD,CAA0DzB,QAA1D","names":["StartDeliveryStreamEncryptionInput","StartDeliveryStreamEncryptionOutput","deserializeAws_json1_1StartDeliveryStreamEncryptionCommand","serializeAws_json1_1StartDeliveryStreamEncryptionCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","StartDeliveryStreamEncryptionCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\client-firehose\\commands\\StartDeliveryStreamEncryptionCommand.ts"],"sourcesContent":["import { FirehoseClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../FirehoseClient\";\nimport { StartDeliveryStreamEncryptionInput, StartDeliveryStreamEncryptionOutput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1StartDeliveryStreamEncryptionCommand,\n  serializeAws_json1_1StartDeliveryStreamEncryptionCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type StartDeliveryStreamEncryptionCommandInput = StartDeliveryStreamEncryptionInput;\nexport type StartDeliveryStreamEncryptionCommandOutput = StartDeliveryStreamEncryptionOutput & __MetadataBearer;\n\n/**\n * <p>Enables server-side encryption (SSE) for the delivery stream. </p>\n *          <p>This operation is asynchronous. It returns immediately. When you invoke it, Kinesis Data\n *          Firehose first sets the encryption status of the stream to <code>ENABLING</code>, and then\n *          to <code>ENABLED</code>. The encryption status of a delivery stream is the\n *             <code>Status</code> property in <a>DeliveryStreamEncryptionConfiguration</a>.\n *          If the operation fails, the encryption status changes to <code>ENABLING_FAILED</code>. You\n *          can continue to read and write data to your delivery stream while the encryption status is\n *             <code>ENABLING</code>, but the data is not encrypted. It can take up to 5 seconds after\n *          the encryption status changes to <code>ENABLED</code> before all records written to the\n *          delivery stream are encrypted. To find out whether a record or a batch of records was\n *          encrypted, check the response elements <a>PutRecordOutput$Encrypted</a> and\n *             <a>PutRecordBatchOutput$Encrypted</a>, respectively.</p>\n *          <p>To check the encryption status of a delivery stream, use <a>DescribeDeliveryStream</a>.</p>\n *          <p>Even if encryption is currently enabled for a delivery stream, you can still invoke this\n *          operation on it to change the ARN of the CMK or both its type and ARN. If you invoke this\n *          method to change the CMK, and the old CMK is of type <code>CUSTOMER_MANAGED_CMK</code>,\n *          Kinesis Data Firehose schedules the grant it had on the old CMK for retirement. If the new\n *          CMK is of type <code>CUSTOMER_MANAGED_CMK</code>, Kinesis Data Firehose creates a grant\n *          that enables it to use the new CMK to encrypt and decrypt data and to manage the\n *          grant.</p>\n *          <p>If a delivery stream already has encryption enabled and then you invoke this operation\n *          to change the ARN of the CMK or both its type and ARN and you get\n *             <code>ENABLING_FAILED</code>, this only means that the attempt to change the CMK failed.\n *          In this case, encryption remains enabled with the old CMK.</p>\n *          <p>If the encryption status of your delivery stream is <code>ENABLING_FAILED</code>, you\n *          can invoke this operation again with a valid CMK. The CMK must be enabled and the key\n *          policy mustn't explicitly deny the permission for Kinesis Data Firehose to invoke KMS\n *          encrypt and decrypt operations.</p>\n *          <p>You can enable SSE for a delivery stream only if it's a delivery stream that uses\n *             <code>DirectPut</code> as its source. </p>\n *          <p>The <code>StartDeliveryStreamEncryption</code> and\n *             <code>StopDeliveryStreamEncryption</code> operations have a combined limit of 25 calls\n *          per delivery stream per 24 hours. For example, you reach the limit if you call\n *             <code>StartDeliveryStreamEncryption</code> 13 times and\n *             <code>StopDeliveryStreamEncryption</code> 12 times for the same delivery stream in a\n *          24-hour period.</p>\n */\nexport class StartDeliveryStreamEncryptionCommand extends $Command<\n  StartDeliveryStreamEncryptionCommandInput,\n  StartDeliveryStreamEncryptionCommandOutput,\n  FirehoseClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: StartDeliveryStreamEncryptionCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: FirehoseClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<StartDeliveryStreamEncryptionCommandInput, StartDeliveryStreamEncryptionCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"FirehoseClient\";\n    const commandName = \"StartDeliveryStreamEncryptionCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: StartDeliveryStreamEncryptionInput.filterSensitiveLog,\n      outputFilterSensitiveLog: StartDeliveryStreamEncryptionOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: StartDeliveryStreamEncryptionCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1StartDeliveryStreamEncryptionCommand(input, context);\n  }\n\n  private deserialize(\n    output: __HttpResponse,\n    context: __SerdeContext\n  ): Promise<StartDeliveryStreamEncryptionCommandOutput> {\n    return deserializeAws_json1_1StartDeliveryStreamEncryptionCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}