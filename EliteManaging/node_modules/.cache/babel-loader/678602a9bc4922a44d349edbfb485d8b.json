{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CreateMultipartUploadOutput, CreateMultipartUploadRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlCreateMultipartUploadCommand, serializeAws_restXmlCreateMultipartUploadCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getSsecPlugin } from \"@aws-sdk/middleware-ssec\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>This operation initiates a multipart upload and returns an upload ID. This upload ID is\n *          used to associate all of the parts in the specific multipart upload. You specify this\n *          upload ID in each of your subsequent upload part requests (see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>). You also include this\n *          upload ID in the final request to either complete or abort the multipart upload\n *          request.</p>\n *\n *          <p>For more information about multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html\">Multipart Upload Overview</a>.</p>\n *\n *          <p>If you have configured a lifecycle rule to abort incomplete multipart uploads, the\n *          upload must complete within the number of days specified in the bucket lifecycle\n *          configuration. Otherwise, the incomplete multipart upload becomes eligible for an abort\n *          operation and Amazon S3 aborts the multipart upload. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config\">Aborting\n *             Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a>.</p>\n *\n *          <p>For information about the permissions required to use the multipart upload API, see\n *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html\">Multipart Upload API and\n *             Permissions</a>.</p>\n *\n *          <p>For request signing, multipart upload is just a series of regular requests. You initiate\n *          a multipart upload, send one or more requests to upload parts, and then complete the\n *          multipart upload process. You sign each request individually. There is nothing special\n *          about signing multipart upload requests. For more information about signing, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html\">Authenticating\n *             Requests (AWS Signature Version 4)</a>.</p>\n *\n *          <note>\n *             <p> After you initiate a multipart upload and upload one or more parts, to stop being\n *             charged for storing the uploaded parts, you must either complete or abort the multipart\n *             upload. Amazon S3 frees up the space used to store the parts and stop charging you for\n *             storing them only after you either complete or abort a multipart upload. </p>\n *          </note>\n *\n *          <p>You can optionally request server-side encryption. For server-side encryption, Amazon S3\n *          encrypts your data as it writes it to disks in its data centers and decrypts it when you\n *          access it. You can provide your own encryption key, or use AWS Key Management Service (AWS\n *          KMS) customer master keys (CMKs) or Amazon S3-managed encryption keys. If you choose to provide\n *          your own encryption key, the request headers you provide in <a href=\"AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a> and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html\">UploadPartCopy</a> requests must match the headers you used in the request to\n *          initiate the upload by using <code>CreateMultipartUpload</code>. </p>\n *          <p>To perform a multipart upload with encryption using an AWS KMS CMK, the requester must\n *          have permission to the <code>kms:Encrypt</code>, <code>kms:Decrypt</code>,\n *             <code>kms:ReEncrypt*</code>, <code>kms:GenerateDataKey*</code>, and\n *             <code>kms:DescribeKey</code> actions on the key. These permissions are required because\n *          Amazon S3 must decrypt and read data from the encrypted file parts before it completes the\n *          multipart upload.</p>\n *\n *          <p>If your AWS Identity and Access Management (IAM) user or role is in the same AWS account\n *          as the AWS KMS CMK, then you must have these permissions on the key policy. If your IAM\n *          user or role belongs to a different account than the key, then you must have the\n *          permissions on both the key policy and your IAM user or role.</p>\n *\n *\n *          <p> For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html\">Protecting\n *             Data Using Server-Side Encryption</a>.</p>\n *\n *          <dl>\n *             <dt>Access Permissions</dt>\n *             <dd>\n *                <p>When copying an object, you can optionally specify the accounts or groups that\n *                   should be granted specific permissions on the new object. There are two ways to\n *                   grant the permissions using the request headers:</p>\n *                <ul>\n *                   <li>\n *                      <p>Specify a canned ACL with the <code>x-amz-acl</code> request header. For\n *                         more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL\">Canned ACL</a>.</p>\n *                   </li>\n *                   <li>\n *                      <p>Specify access permissions explicitly with the\n *                            <code>x-amz-grant-read</code>, <code>x-amz-grant-read-acp</code>,\n *                            <code>x-amz-grant-write-acp</code>, and\n *                            <code>x-amz-grant-full-control</code> headers. These parameters map to\n *                         the set of permissions that Amazon S3 supports in an ACL. For more information,\n *                         see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html\">Access Control List (ACL)\n *                            Overview</a>.</p>\n *                   </li>\n *                </ul>\n *                <p>You can use either a canned ACL or specify access permissions explicitly. You\n *                   cannot do both.</p>\n *             </dd>\n *             <dt>Server-Side- Encryption-Specific Request Headers</dt>\n *             <dd>\n *                <p>You can optionally tell Amazon S3 to encrypt data at rest using server-side\n *                   encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts\n *                   your data as it writes it to disks in its data centers and decrypts it when you\n *                   access it. The option you use depends on whether you want to use AWS managed\n *                   encryption keys or provide your own encryption key. </p>\n *                <ul>\n *                   <li>\n *                      <p>Use encryption keys managed by Amazon S3 or customer master keys (CMKs) stored\n *                         in AWS Key Management Service (AWS KMS) – If you want AWS to manage the keys\n *                         used to encrypt data, specify the following headers in the request.</p>\n *                      <ul>\n *                         <li>\n *                            <p>x-amz-server-side-encryption</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-server-side-encryption-aws-kms-key-id</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-server-side-encryption-context</p>\n *                         </li>\n *                      </ul>\n *                      <note>\n *                         <p>If you specify <code>x-amz-server-side-encryption:aws:kms</code>, but\n *                            don't provide <code>x-amz-server-side-encryption-aws-kms-key-id</code>,\n *                            Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data.</p>\n *                      </note>\n *                      <important>\n *                         <p>All GET and PUT requests for an object protected by AWS KMS fail if\n *                            you don't make them with SSL or by using SigV4.</p>\n *                      </important>\n *                      <p>For more information about server-side encryption with CMKs stored in AWS\n *                         KMS (SSE-KMS), see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\">Protecting Data Using Server-Side Encryption with CMKs stored in AWS\n *                            KMS</a>.</p>\n *                   </li>\n *                   <li>\n *                      <p>Use customer-provided encryption keys – If you want to manage your own\n *                         encryption keys, provide all the following headers in the request.</p>\n *                      <ul>\n *                         <li>\n *                            <p>x-amz-server-side-encryption-customer-algorithm</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-server-side-encryption-customer-key</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-server-side-encryption-customer-key-MD5</p>\n *                         </li>\n *                      </ul>\n *                      <p>For more information about server-side encryption with CMKs stored in AWS\n *                         KMS (SSE-KMS), see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\">Protecting Data Using Server-Side Encryption with CMKs stored in AWS\n *                            KMS</a>.</p>\n *                   </li>\n *                </ul>\n *             </dd>\n *             <dt>Access-Control-List (ACL)-Specific Request Headers</dt>\n *             <dd>\n *                <p>You also can use the following access control–related headers with this\n *                   operation. By default, all objects are private. Only the owner has full access\n *                   control. When adding a new object, you can grant permissions to individual AWS\n *                   accounts or to predefined groups defined by Amazon S3. These permissions are then added\n *                   to the access control list (ACL) on the object. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html\">Using ACLs</a>. With this\n *                   operation, you can grant access permissions using one of the following two\n *                   methods:</p>\n *                <ul>\n *                   <li>\n *                      <p>Specify a canned ACL (<code>x-amz-acl</code>) — Amazon S3 supports a set of\n *                         predefined ACLs, known as <i>canned ACLs</i>. Each canned ACL\n *                         has a predefined set of grantees and permissions. For more information, see\n *                            <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL\">Canned\n *                         ACL</a>.</p>\n *                   </li>\n *                   <li>\n *                      <p>Specify access permissions explicitly — To explicitly grant access\n *                         permissions to specific AWS accounts or groups, use the following headers.\n *                         Each header maps to specific permissions that Amazon S3 supports in an ACL. For\n *                         more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html\">Access\n *                            Control List (ACL) Overview</a>. In the header, you specify a list of\n *                         grantees who get the specific permission. To grant permissions explicitly,\n *                         use:</p>\n *                      <ul>\n *                         <li>\n *                            <p>x-amz-grant-read</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-grant-write</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-grant-read-acp</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-grant-write-acp</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-grant-full-control</p>\n *                         </li>\n *                      </ul>\n *                      <p>You specify each grantee as a type=value pair, where the type is one of\n *                         the following:</p>\n *                      <ul>\n *                         <li>\n *                            <p>\n *                               <code>id</code> – if the value specified is the canonical user ID\n *                               of an AWS account</p>\n *                         </li>\n *                         <li>\n *                            <p>\n *                               <code>uri</code> – if you are granting permissions to a predefined\n *                               group</p>\n *                         </li>\n *                         <li>\n *                            <p>\n *                               <code>emailAddress</code> – if the value specified is the email\n *                               address of an AWS account</p>\n *                            <note>\n *                               <p>Using email addresses to specify a grantee is only supported in the following AWS Regions: </p>\n *                               <ul>\n *                                  <li>\n *                                     <p>US East (N. Virginia)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p>US West (N. California)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p> US West (Oregon)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p> Asia Pacific (Singapore)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p>Asia Pacific (Sydney)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p>Asia Pacific (Tokyo)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p>Europe (Ireland)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p>South America (São Paulo)</p>\n *                                  </li>\n *                               </ul>\n *                               <p>For a list of all the Amazon S3 supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\">Regions and Endpoints</a> in the AWS General Reference.</p>\n *                            </note>\n *                         </li>\n *                      </ul>\n *                      <p>For example, the following <code>x-amz-grant-read</code> header grants the AWS accounts identified by account IDs permissions to read object data and its metadata:</p>\n *                      <p>\n *                         <code>x-amz-grant-read: id=\"11112222333\", id=\"444455556666\" </code>\n *                      </p>\n *                   </li>\n *                </ul>\n *\n *             </dd>\n *          </dl>\n *\n *          <p>The following operations are related to <code>CreateMultipartUpload</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html\">AbortMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html\">ListParts</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html\">ListMultipartUploads</a>\n *                </p>\n *             </li>\n *          </ul>\n */\n\nvar CreateMultipartUploadCommand =\n/** @class */\nfunction (_super) {\n  __extends(CreateMultipartUploadCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function CreateMultipartUploadCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  CreateMultipartUploadCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getSsecPlugin(configuration));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"CreateMultipartUploadCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: CreateMultipartUploadRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: CreateMultipartUploadOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  CreateMultipartUploadCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlCreateMultipartUploadCommand(input, context);\n  };\n\n  CreateMultipartUploadCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlCreateMultipartUploadCommand(output, context);\n  };\n\n  return CreateMultipartUploadCommand;\n}($Command);\n\nexport { CreateMultipartUploadCommand };","map":{"version":3,"mappings":";AACA,SAASA,2BAAT,EAAsCC,4BAAtC,QAA0E,oBAA1E;AACA,SACEC,kDADF,EAEEC,gDAFF,QAGO,0BAHP;AAIA,SAASC,uBAAT,QAAwC,qCAAxC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,aAAT,QAA8B,0BAA9B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwQA;AAAA;AAAA;EAAkDC,gDAAlD,CAKE;EACA;;;EAEA,sCAAqBC,KAArB,EAA6D;IAA7D,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAAwC,CAG3D;EACD;EAED;;;;;EAGAC,qEACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBb,cAAc,CAACU,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,KAAKH,eAAL,CAAqBC,GAArB,CAAyBZ,aAAa,CAACS,aAAD,CAAtC;IACA,KAAKE,eAAL,CAAqBC,GAArB,CAAyBd,uBAAuB,CAACW,aAAD,CAAhD;IAEA,IAAMM,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,UAAnB;IACA,IAAMC,WAAW,GAAG,8BAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAE1B,4BAA4B,CAAC2B,kBAJC;MAKvDC,wBAAwB,EAAE7B,2BAA2B,CAAC4B;IALC,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CA3BD;;EA6BQZ,mDAAR,UAAkBH,KAAlB,EAA4DuB,OAA5D,EAAmF;IACjF,OAAO9B,gDAAgD,CAACO,KAAD,EAAQuB,OAAR,CAAvD;EACD,CAFO;;EAIApB,qDAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO/B,kDAAkD,CAACgC,MAAD,EAASD,OAAT,CAAzD;EACD,CAFO;;EAMV;AAAC,CAxDD,CAAkDzB,QAAlD","names":["CreateMultipartUploadOutput","CreateMultipartUploadRequest","deserializeAws_restXmlCreateMultipartUploadCommand","serializeAws_restXmlCreateMultipartUploadCommand","getBucketEndpointPlugin","getSerdePlugin","getSsecPlugin","Command","$Command","__extends","input","_super","_this","CreateMultipartUploadCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-s3\\commands\\CreateMultipartUploadCommand.ts"],"sourcesContent":["import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { CreateMultipartUploadOutput, CreateMultipartUploadRequest } from \"../models/models_0\";\nimport {\n  deserializeAws_restXmlCreateMultipartUploadCommand,\n  serializeAws_restXmlCreateMultipartUploadCommand,\n} from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getSsecPlugin } from \"@aws-sdk/middleware-ssec\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type CreateMultipartUploadCommandInput = CreateMultipartUploadRequest;\nexport type CreateMultipartUploadCommandOutput = CreateMultipartUploadOutput & __MetadataBearer;\n\n/**\n * <p>This operation initiates a multipart upload and returns an upload ID. This upload ID is\n *          used to associate all of the parts in the specific multipart upload. You specify this\n *          upload ID in each of your subsequent upload part requests (see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>). You also include this\n *          upload ID in the final request to either complete or abort the multipart upload\n *          request.</p>\n *\n *          <p>For more information about multipart uploads, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html\">Multipart Upload Overview</a>.</p>\n *\n *          <p>If you have configured a lifecycle rule to abort incomplete multipart uploads, the\n *          upload must complete within the number of days specified in the bucket lifecycle\n *          configuration. Otherwise, the incomplete multipart upload becomes eligible for an abort\n *          operation and Amazon S3 aborts the multipart upload. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config\">Aborting\n *             Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a>.</p>\n *\n *          <p>For information about the permissions required to use the multipart upload API, see\n *             <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html\">Multipart Upload API and\n *             Permissions</a>.</p>\n *\n *          <p>For request signing, multipart upload is just a series of regular requests. You initiate\n *          a multipart upload, send one or more requests to upload parts, and then complete the\n *          multipart upload process. You sign each request individually. There is nothing special\n *          about signing multipart upload requests. For more information about signing, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html\">Authenticating\n *             Requests (AWS Signature Version 4)</a>.</p>\n *\n *          <note>\n *             <p> After you initiate a multipart upload and upload one or more parts, to stop being\n *             charged for storing the uploaded parts, you must either complete or abort the multipart\n *             upload. Amazon S3 frees up the space used to store the parts and stop charging you for\n *             storing them only after you either complete or abort a multipart upload. </p>\n *          </note>\n *\n *          <p>You can optionally request server-side encryption. For server-side encryption, Amazon S3\n *          encrypts your data as it writes it to disks in its data centers and decrypts it when you\n *          access it. You can provide your own encryption key, or use AWS Key Management Service (AWS\n *          KMS) customer master keys (CMKs) or Amazon S3-managed encryption keys. If you choose to provide\n *          your own encryption key, the request headers you provide in <a href=\"AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a> and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html\">UploadPartCopy</a> requests must match the headers you used in the request to\n *          initiate the upload by using <code>CreateMultipartUpload</code>. </p>\n *          <p>To perform a multipart upload with encryption using an AWS KMS CMK, the requester must\n *          have permission to the <code>kms:Encrypt</code>, <code>kms:Decrypt</code>,\n *             <code>kms:ReEncrypt*</code>, <code>kms:GenerateDataKey*</code>, and\n *             <code>kms:DescribeKey</code> actions on the key. These permissions are required because\n *          Amazon S3 must decrypt and read data from the encrypted file parts before it completes the\n *          multipart upload.</p>\n *\n *          <p>If your AWS Identity and Access Management (IAM) user or role is in the same AWS account\n *          as the AWS KMS CMK, then you must have these permissions on the key policy. If your IAM\n *          user or role belongs to a different account than the key, then you must have the\n *          permissions on both the key policy and your IAM user or role.</p>\n *\n *\n *          <p> For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html\">Protecting\n *             Data Using Server-Side Encryption</a>.</p>\n *\n *          <dl>\n *             <dt>Access Permissions</dt>\n *             <dd>\n *                <p>When copying an object, you can optionally specify the accounts or groups that\n *                   should be granted specific permissions on the new object. There are two ways to\n *                   grant the permissions using the request headers:</p>\n *                <ul>\n *                   <li>\n *                      <p>Specify a canned ACL with the <code>x-amz-acl</code> request header. For\n *                         more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL\">Canned ACL</a>.</p>\n *                   </li>\n *                   <li>\n *                      <p>Specify access permissions explicitly with the\n *                            <code>x-amz-grant-read</code>, <code>x-amz-grant-read-acp</code>,\n *                            <code>x-amz-grant-write-acp</code>, and\n *                            <code>x-amz-grant-full-control</code> headers. These parameters map to\n *                         the set of permissions that Amazon S3 supports in an ACL. For more information,\n *                         see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html\">Access Control List (ACL)\n *                            Overview</a>.</p>\n *                   </li>\n *                </ul>\n *                <p>You can use either a canned ACL or specify access permissions explicitly. You\n *                   cannot do both.</p>\n *             </dd>\n *             <dt>Server-Side- Encryption-Specific Request Headers</dt>\n *             <dd>\n *                <p>You can optionally tell Amazon S3 to encrypt data at rest using server-side\n *                   encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts\n *                   your data as it writes it to disks in its data centers and decrypts it when you\n *                   access it. The option you use depends on whether you want to use AWS managed\n *                   encryption keys or provide your own encryption key. </p>\n *                <ul>\n *                   <li>\n *                      <p>Use encryption keys managed by Amazon S3 or customer master keys (CMKs) stored\n *                         in AWS Key Management Service (AWS KMS) – If you want AWS to manage the keys\n *                         used to encrypt data, specify the following headers in the request.</p>\n *                      <ul>\n *                         <li>\n *                            <p>x-amz-server-side-encryption</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-server-side-encryption-aws-kms-key-id</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-server-side-encryption-context</p>\n *                         </li>\n *                      </ul>\n *                      <note>\n *                         <p>If you specify <code>x-amz-server-side-encryption:aws:kms</code>, but\n *                            don't provide <code>x-amz-server-side-encryption-aws-kms-key-id</code>,\n *                            Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data.</p>\n *                      </note>\n *                      <important>\n *                         <p>All GET and PUT requests for an object protected by AWS KMS fail if\n *                            you don't make them with SSL or by using SigV4.</p>\n *                      </important>\n *                      <p>For more information about server-side encryption with CMKs stored in AWS\n *                         KMS (SSE-KMS), see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\">Protecting Data Using Server-Side Encryption with CMKs stored in AWS\n *                            KMS</a>.</p>\n *                   </li>\n *                   <li>\n *                      <p>Use customer-provided encryption keys – If you want to manage your own\n *                         encryption keys, provide all the following headers in the request.</p>\n *                      <ul>\n *                         <li>\n *                            <p>x-amz-server-side-encryption-customer-algorithm</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-server-side-encryption-customer-key</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-server-side-encryption-customer-key-MD5</p>\n *                         </li>\n *                      </ul>\n *                      <p>For more information about server-side encryption with CMKs stored in AWS\n *                         KMS (SSE-KMS), see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\">Protecting Data Using Server-Side Encryption with CMKs stored in AWS\n *                            KMS</a>.</p>\n *                   </li>\n *                </ul>\n *             </dd>\n *             <dt>Access-Control-List (ACL)-Specific Request Headers</dt>\n *             <dd>\n *                <p>You also can use the following access control–related headers with this\n *                   operation. By default, all objects are private. Only the owner has full access\n *                   control. When adding a new object, you can grant permissions to individual AWS\n *                   accounts or to predefined groups defined by Amazon S3. These permissions are then added\n *                   to the access control list (ACL) on the object. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html\">Using ACLs</a>. With this\n *                   operation, you can grant access permissions using one of the following two\n *                   methods:</p>\n *                <ul>\n *                   <li>\n *                      <p>Specify a canned ACL (<code>x-amz-acl</code>) — Amazon S3 supports a set of\n *                         predefined ACLs, known as <i>canned ACLs</i>. Each canned ACL\n *                         has a predefined set of grantees and permissions. For more information, see\n *                            <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL\">Canned\n *                         ACL</a>.</p>\n *                   </li>\n *                   <li>\n *                      <p>Specify access permissions explicitly — To explicitly grant access\n *                         permissions to specific AWS accounts or groups, use the following headers.\n *                         Each header maps to specific permissions that Amazon S3 supports in an ACL. For\n *                         more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html\">Access\n *                            Control List (ACL) Overview</a>. In the header, you specify a list of\n *                         grantees who get the specific permission. To grant permissions explicitly,\n *                         use:</p>\n *                      <ul>\n *                         <li>\n *                            <p>x-amz-grant-read</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-grant-write</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-grant-read-acp</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-grant-write-acp</p>\n *                         </li>\n *                         <li>\n *                            <p>x-amz-grant-full-control</p>\n *                         </li>\n *                      </ul>\n *                      <p>You specify each grantee as a type=value pair, where the type is one of\n *                         the following:</p>\n *                      <ul>\n *                         <li>\n *                            <p>\n *                               <code>id</code> – if the value specified is the canonical user ID\n *                               of an AWS account</p>\n *                         </li>\n *                         <li>\n *                            <p>\n *                               <code>uri</code> – if you are granting permissions to a predefined\n *                               group</p>\n *                         </li>\n *                         <li>\n *                            <p>\n *                               <code>emailAddress</code> – if the value specified is the email\n *                               address of an AWS account</p>\n *                            <note>\n *                               <p>Using email addresses to specify a grantee is only supported in the following AWS Regions: </p>\n *                               <ul>\n *                                  <li>\n *                                     <p>US East (N. Virginia)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p>US West (N. California)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p> US West (Oregon)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p> Asia Pacific (Singapore)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p>Asia Pacific (Sydney)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p>Asia Pacific (Tokyo)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p>Europe (Ireland)</p>\n *                                  </li>\n *                                  <li>\n *                                     <p>South America (São Paulo)</p>\n *                                  </li>\n *                               </ul>\n *                               <p>For a list of all the Amazon S3 supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\">Regions and Endpoints</a> in the AWS General Reference.</p>\n *                            </note>\n *                         </li>\n *                      </ul>\n *                      <p>For example, the following <code>x-amz-grant-read</code> header grants the AWS accounts identified by account IDs permissions to read object data and its metadata:</p>\n *                      <p>\n *                         <code>x-amz-grant-read: id=\"11112222333\", id=\"444455556666\" </code>\n *                      </p>\n *                   </li>\n *                </ul>\n *\n *             </dd>\n *          </dl>\n *\n *          <p>The following operations are related to <code>CreateMultipartUpload</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html\">UploadPart</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html\">CompleteMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html\">AbortMultipartUpload</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html\">ListParts</a>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html\">ListMultipartUploads</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class CreateMultipartUploadCommand extends $Command<\n  CreateMultipartUploadCommandInput,\n  CreateMultipartUploadCommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: CreateMultipartUploadCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<CreateMultipartUploadCommandInput, CreateMultipartUploadCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getSsecPlugin(configuration));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"CreateMultipartUploadCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: CreateMultipartUploadRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: CreateMultipartUploadOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: CreateMultipartUploadCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlCreateMultipartUploadCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<CreateMultipartUploadCommandOutput> {\n    return deserializeAws_restXmlCreateMultipartUploadCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}