{"ast":null,"code":"/**\n * Convert types\n */\nexport var InterpretTextCategories;\n\n(function (InterpretTextCategories) {\n  InterpretTextCategories[\"ALL\"] = \"ALL\";\n  InterpretTextCategories[\"LANGUAGE\"] = \"LANGUAGE\";\n  InterpretTextCategories[\"ENTITIES\"] = \"ENTITIES\";\n  InterpretTextCategories[\"SENTIMENT\"] = \"SENTIMENT\";\n  InterpretTextCategories[\"SYNTAX\"] = \"SYNTAX\";\n  InterpretTextCategories[\"KEY_PHRASES\"] = \"KEY_PHRASES\";\n})(InterpretTextCategories || (InterpretTextCategories = {}));\n\nexport function isIdentifyFromCollection(obj) {\n  var key = 'collection';\n  var keyId = 'collectionId';\n  return obj && (obj.hasOwnProperty(key) || obj.hasOwnProperty(keyId));\n}\nexport function isIdentifyCelebrities(obj) {\n  var key = 'celebrityDetection';\n  return obj && obj.hasOwnProperty(key);\n}\nexport function isTranslateTextInput(obj) {\n  var key = 'translateText';\n  return obj && obj.hasOwnProperty(key);\n}\nexport function isTextToSpeechInput(obj) {\n  var key = 'textToSpeech';\n  return obj && obj.hasOwnProperty(key);\n}\nexport function isSpeechToTextInput(obj) {\n  var key = 'transcription';\n  return obj && obj.hasOwnProperty(key);\n}\nexport function isStorageSource(obj) {\n  var key = 'key';\n  return obj && obj.hasOwnProperty(key);\n}\nexport function isFileSource(obj) {\n  var key = 'file';\n  return obj && obj.hasOwnProperty(key);\n}\nexport function isBytesSource(obj) {\n  var key = 'bytes';\n  return obj && obj.hasOwnProperty(key);\n}\nexport function isIdentifyTextInput(obj) {\n  var key = 'text';\n  return obj && obj.hasOwnProperty(key);\n}\nexport function isIdentifyLabelsInput(obj) {\n  var key = 'labels';\n  return obj && obj.hasOwnProperty(key);\n}\nexport function isIdentifyEntitiesInput(obj) {\n  var key = 'entities';\n  return obj && obj.hasOwnProperty(key);\n}\nexport function isInterpretTextInput(obj) {\n  var key = 'text';\n  return obj && obj.hasOwnProperty(key);\n}","map":{"version":3,"mappings":"AAWA;;;AAIA,WAAYA,uBAAZ;;AAAA,WAAYA,uBAAZ,EAAmC;EAClCA;EACAA;EACAA;EACAA;EACAA;EACAA;AACA,CAPD,EAAYA,uBAAuB,KAAvBA,uBAAuB,MAAnC;;AAmRA,OAAM,SAAUC,wBAAV,CACLC,GADK,EACG;EAER,IAAMC,GAAG,GAAiC,YAA1C;EACA,IAAMC,KAAK,GAAiC,cAA5C;EACA,OAAOF,GAAG,KAAKA,GAAG,CAACG,cAAJ,CAAmBF,GAAnB,KAA2BD,GAAG,CAACG,cAAJ,CAAmBD,KAAnB,CAAhC,CAAV;AACA;AAED,OAAM,SAAUE,qBAAV,CAAgCJ,GAAhC,EAAwC;EAC7C,IAAMC,GAAG,GAA8B,oBAAvC;EACA,OAAOD,GAAG,IAAIA,GAAG,CAACG,cAAJ,CAAmBF,GAAnB,CAAd;AACA;AAED,OAAM,SAAUI,oBAAV,CAA+BL,GAA/B,EAAuC;EAC5C,IAAMC,GAAG,GAA6B,eAAtC;EACA,OAAOD,GAAG,IAAIA,GAAG,CAACG,cAAJ,CAAmBF,GAAnB,CAAd;AACA;AAED,OAAM,SAAUK,mBAAV,CAA8BN,GAA9B,EAAsC;EAC3C,IAAMC,GAAG,GAA4B,cAArC;EACA,OAAOD,GAAG,IAAIA,GAAG,CAACG,cAAJ,CAAmBF,GAAnB,CAAd;AACA;AAED,OAAM,SAAUM,mBAAV,CAA8BP,GAA9B,EAAsC;EAC3C,IAAMC,GAAG,GAA4B,eAArC;EACA,OAAOD,GAAG,IAAIA,GAAG,CAACG,cAAJ,CAAmBF,GAAnB,CAAd;AACA;AAED,OAAM,SAAUO,eAAV,CAA0BR,GAA1B,EAAkC;EACvC,IAAMC,GAAG,GAAwB,KAAjC;EACA,OAAOD,GAAG,IAAIA,GAAG,CAACG,cAAJ,CAAmBF,GAAnB,CAAd;AACA;AAED,OAAM,SAAUQ,YAAV,CAAuBT,GAAvB,EAA+B;EACpC,IAAMC,GAAG,GAAqB,MAA9B;EACA,OAAOD,GAAG,IAAIA,GAAG,CAACG,cAAJ,CAAmBF,GAAnB,CAAd;AACA;AAED,OAAM,SAAUS,aAAV,CAAwBV,GAAxB,EAAgC;EACrC,IAAMC,GAAG,GAAsB,OAA/B;EACA,OAAOD,GAAG,IAAIA,GAAG,CAACG,cAAJ,CAAmBF,GAAnB,CAAd;AACA;AAED,OAAM,SAAUU,mBAAV,CAA8BX,GAA9B,EAAsC;EAC3C,IAAMC,GAAG,GAA4B,MAArC;EACA,OAAOD,GAAG,IAAIA,GAAG,CAACG,cAAJ,CAAmBF,GAAnB,CAAd;AACA;AAED,OAAM,SAAUW,qBAAV,CAAgCZ,GAAhC,EAAwC;EAC7C,IAAMC,GAAG,GAA8B,QAAvC;EACA,OAAOD,GAAG,IAAIA,GAAG,CAACG,cAAJ,CAAmBF,GAAnB,CAAd;AACA;AAED,OAAM,SAAUY,uBAAV,CACLb,GADK,EACG;EAER,IAAMC,GAAG,GAAgC,UAAzC;EACA,OAAOD,GAAG,IAAIA,GAAG,CAACG,cAAJ,CAAmBF,GAAnB,CAAd;AACA;AAED,OAAM,SAAUa,oBAAV,CAA+Bd,GAA/B,EAAuC;EAC5C,IAAMC,GAAG,GAA6B,MAAtC;EACA,OAAOD,GAAG,IAAIA,GAAG,CAACG,cAAJ,CAAmBF,GAAnB,CAAd;AACA","names":["InterpretTextCategories","isIdentifyFromCollection","obj","key","keyId","hasOwnProperty","isIdentifyCelebrities","isTranslateTextInput","isTextToSpeechInput","isSpeechToTextInput","isStorageSource","isFileSource","isBytesSource","isIdentifyTextInput","isIdentifyLabelsInput","isIdentifyEntitiesInput","isInterpretTextInput"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-amplify\\predictions\\src\\types\\Predictions.ts"],"sourcesContent":["/**\n * Base types\n */\nexport interface PredictionsOptions {\n\t[key: string]: any;\n}\n\nexport interface ProviderOptions {\n\tproviderName?: string;\n}\n\n/**\n * Convert types\n */\n\nexport enum InterpretTextCategories {\n\tALL = 'ALL',\n\tLANGUAGE = 'LANGUAGE',\n\tENTITIES = 'ENTITIES',\n\tSENTIMENT = 'SENTIMENT',\n\tSYNTAX = 'SYNTAX',\n\tKEY_PHRASES = 'KEY_PHRASES',\n}\n\nexport interface InterpretTextInput {\n\ttext: InterpretTextInputLanguage | InterpretTextOthers | InterpretTextAll;\n}\n\nexport interface InterpretTextInputLanguage {\n\tsource: {\n\t\ttext: string;\n\t};\n\ttype: InterpretTextCategories.LANGUAGE;\n}\n\nexport interface InterpretTextOthers {\n\tsource: {\n\t\ttext: string;\n\t\tlanguage: string;\n\t};\n\ttype:\n\t\t| InterpretTextCategories.ENTITIES\n\t\t| InterpretTextCategories.SENTIMENT\n\t\t| InterpretTextCategories.SYNTAX\n\t\t| InterpretTextCategories.KEY_PHRASES;\n}\n\nexport interface InterpretTextAll {\n\tsource: {\n\t\ttext: string;\n\t};\n\ttype: InterpretTextCategories.ALL;\n}\n\nexport interface TextEntities {\n\ttype: string;\n\ttext: string;\n}\n\nexport interface KeyPhrases {\n\ttext: string;\n}\n\nexport interface TextSyntax {\n\ttext: string;\n\tsyntax: string;\n}\n\nexport interface TextSentiment {\n\tpredominant: string;\n\tpositive: number;\n\tnegative: number;\n\tneutral: number;\n\tmixed: number;\n}\n\nexport interface InterpretTextOutput {\n\ttextInterpretation: {\n\t\tlanguage?: string;\n\t\ttextEntities?: Array<TextEntities>;\n\t\tkeyPhrases?: Array<KeyPhrases>;\n\t\tsentiment?: TextSentiment;\n\t\tsyntax?: Array<TextSyntax>;\n\t};\n}\n\nexport interface TranslateTextInput {\n\ttranslateText: {\n\t\tsource: {\n\t\t\ttext: string;\n\t\t\tlanguage?: string;\n\t\t};\n\t\ttargetLanguage?: string;\n\t};\n}\n\nexport interface TranslateTextOutput {\n\ttext: string;\n\tlanguage: string;\n}\n\nexport interface TextToSpeechInput {\n\ttextToSpeech: {\n\t\tsource: {\n\t\t\ttext: string;\n\t\t};\n\t\tterminology?: string;\n\t\tvoiceId?: string;\n\t};\n}\n\nexport interface TextToSpeechOutput {\n\tspeech: { url: string };\n\taudioStream: Buffer;\n\ttext: string;\n}\n\nexport interface StorageSource {\n\tkey: string;\n\tlevel?: 'public' | 'private' | 'protected';\n\tidentityId?: string;\n}\n\nexport interface FileSource {\n\tfile: File;\n}\n\nexport interface BytesSource {\n\tbytes: Buffer | ArrayBuffer | Blob | string;\n}\n\nexport interface SpeechToTextInput {\n\ttranscription: {\n\t\tsource: BytesSource;\n\t\tlanguage?: string;\n\t};\n}\n\nexport interface SpeechToTextOutput {\n\ttranscription: {\n\t\tfullText: string;\n\t};\n}\n\nexport type IdentifySource = StorageSource | FileSource | BytesSource;\n\nexport interface IdentifyTextInput {\n\ttext: {\n\t\tsource: IdentifySource;\n\t\tformat?: 'PLAIN' | 'FORM' | 'TABLE' | 'ALL';\n\t};\n}\n\nexport interface Word {\n\ttext?: string;\n\tpolygon?: Polygon;\n\tboundingBox?: BoundingBox;\n}\n\nexport interface LineDetailed {\n\ttext?: string;\n\tpolygon?: Polygon;\n\tboundingBox?: BoundingBox;\n\tpage?: number;\n}\n\nexport interface Content {\n\ttext?: string;\n\tselected?: boolean;\n}\n\nexport interface TableCell extends Content {\n\tboundingBox?: BoundingBox;\n\tpolygon?: Polygon;\n\trowSpan?: Number;\n\tcolumnSpan?: Number;\n}\n\nexport interface Table {\n\tsize: {\n\t\trows: number;\n\t\tcolumns: number;\n\t};\n\ttable: TableCell[][];\n\tpolygon: Polygon;\n\tboundingBox: BoundingBox;\n}\n\nexport interface KeyValue {\n\tkey: string;\n\tvalue: Content;\n\tpolygon: Polygon;\n\tboundingBox: BoundingBox;\n}\n\nexport interface IdentifyTextOutput {\n\ttext: {\n\t\tfullText: string;\n\t\tlines: string[];\n\t\tlinesDetailed: LineDetailed[];\n\t\twords: Word[];\n\t\tkeyValues?: KeyValue[];\n\t\ttables?: Table[];\n\t\tselections?: {\n\t\t\tselected: boolean;\n\t\t\tpolygon: Polygon;\n\t\t\tboundingBox: BoundingBox;\n\t\t}[];\n\t};\n}\n\nexport interface IdentifyLabelsInput {\n\tlabels: {\n\t\tsource: IdentifySource;\n\t\ttype: 'LABELS' | 'UNSAFE' | 'ALL';\n\t};\n}\n\nexport interface Point {\n\tx?: Number;\n\ty?: Number;\n}\n\nexport type Polygon = Array<Point> | Iterable<Point>;\n\nexport interface BoundingBox {\n\twidth?: Number;\n\theight?: Number;\n\tleft?: Number;\n\ttop?: Number;\n}\n\nexport interface IdentifyLabelsOutput {\n\tlabels?: {\n\t\tname: string;\n\t\tboundingBoxes: BoundingBox[];\n\t\tmetadata?: Object;\n\t}[];\n\tunsafe?: 'YES' | 'NO' | 'UNKNOWN';\n}\n\nexport interface IdentifyEntitiesInput {\n\tentities: IdentifyFromCollection | IdentifyCelebrities | IdentifyEntities;\n}\n\nexport interface IdentifyFromCollection {\n\tsource: IdentifySource;\n\tcollection: true;\n\tcollectionId?: string;\n\tmaxEntities?: number;\n}\n\nexport interface IdentifyCelebrities {\n\tsource: IdentifySource;\n\tcelebrityDetection: true;\n}\n\nexport interface IdentifyEntities {\n\tsource: IdentifySource;\n}\n\nexport interface FaceAttributes {\n\tsmile?: boolean;\n\teyeglasses?: boolean;\n\tsunglasses?: boolean;\n\tgender?: string;\n\tbeard?: boolean;\n\tmustache?: boolean;\n\teyesOpen?: boolean;\n\tmouthOpen?: boolean;\n\temotions?: string[];\n}\n\nexport interface IdentifyEntitiesOutput {\n\tentities: {\n\t\tboundingBox?: BoundingBox;\n\t\tageRange?: {\n\t\t\tlow?: Number;\n\t\t\thigh?: Number;\n\t\t};\n\t\tlandmarks?: {\n\t\t\ttype?: string;\n\t\t\tx?: number;\n\t\t\ty?: number;\n\t\t}[];\n\t\tattributes?: FaceAttributes;\n\t\tmetadata?: object;\n\t}[];\n}\n\nexport function isIdentifyFromCollection(\n\tobj: any\n): obj is IdentifyFromCollection {\n\tconst key: keyof IdentifyFromCollection = 'collection';\n\tconst keyId: keyof IdentifyFromCollection = 'collectionId';\n\treturn obj && (obj.hasOwnProperty(key) || obj.hasOwnProperty(keyId));\n}\n\nexport function isIdentifyCelebrities(obj: any): obj is IdentifyCelebrities {\n\tconst key: keyof IdentifyCelebrities = 'celebrityDetection';\n\treturn obj && obj.hasOwnProperty(key);\n}\n\nexport function isTranslateTextInput(obj: any): obj is TranslateTextInput {\n\tconst key: keyof TranslateTextInput = 'translateText';\n\treturn obj && obj.hasOwnProperty(key);\n}\n\nexport function isTextToSpeechInput(obj: any): obj is TextToSpeechInput {\n\tconst key: keyof TextToSpeechInput = 'textToSpeech';\n\treturn obj && obj.hasOwnProperty(key);\n}\n\nexport function isSpeechToTextInput(obj: any): obj is SpeechToTextInput {\n\tconst key: keyof SpeechToTextInput = 'transcription';\n\treturn obj && obj.hasOwnProperty(key);\n}\n\nexport function isStorageSource(obj: any): obj is StorageSource {\n\tconst key: keyof StorageSource = 'key';\n\treturn obj && obj.hasOwnProperty(key);\n}\n\nexport function isFileSource(obj: any): obj is FileSource {\n\tconst key: keyof FileSource = 'file';\n\treturn obj && obj.hasOwnProperty(key);\n}\n\nexport function isBytesSource(obj: any): obj is BytesSource {\n\tconst key: keyof BytesSource = 'bytes';\n\treturn obj && obj.hasOwnProperty(key);\n}\n\nexport function isIdentifyTextInput(obj: any): obj is IdentifyTextInput {\n\tconst key: keyof IdentifyTextInput = 'text';\n\treturn obj && obj.hasOwnProperty(key);\n}\n\nexport function isIdentifyLabelsInput(obj: any): obj is IdentifyLabelsInput {\n\tconst key: keyof IdentifyLabelsInput = 'labels';\n\treturn obj && obj.hasOwnProperty(key);\n}\n\nexport function isIdentifyEntitiesInput(\n\tobj: any\n): obj is IdentifyEntitiesInput {\n\tconst key: keyof IdentifyEntitiesInput = 'entities';\n\treturn obj && obj.hasOwnProperty(key);\n}\n\nexport function isInterpretTextInput(obj: any): obj is InterpretTextInput {\n\tconst key: keyof InterpretTextInput = 'text';\n\treturn obj && obj.hasOwnProperty(key);\n}\n\nexport interface Geometry {\n\t/**\n\t * <p>An axis-aligned coarse representation of the detected text's location on the image.</p>\n\t */\n\tBoundingBox?: BoundingBox;\n\n\t/**\n\t * <p>Within the bounding box, a fine-grained polygon around the detected text.</p>\n\t */\n\tPolygon?: Array<Point> | Iterable<Point>;\n}\n\nexport interface Relationship {\n\t/**\n\t * <p>The type of relationship that the blocks in the IDs array have with the current block. The relationship can be <code>VALUE</code> or <code>CHILD</code>.</p>\n\t */\n\tType?: 'VALUE' | 'CHILD' | string;\n\n\t/**\n\t * <p>An array of IDs for related blocks. You can get the type of the relationship from the <code>Type</code> element.</p>\n\t */\n\tIds?: Array<string> | Iterable<string>;\n}\n\nexport type FeatureType = 'TABLES' | 'FORMS' | string;\nexport type FeatureTypes = FeatureType[];\n"]},"metadata":{},"sourceType":"module"}