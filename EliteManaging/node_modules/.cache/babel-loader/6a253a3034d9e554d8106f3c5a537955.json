{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutRecordInput, PutRecordOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1PutRecordCommand, serializeAws_json1_1PutRecordCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Writes a single data record into an Amazon Kinesis Data Firehose delivery stream. To\n *          write multiple data records into a delivery stream, use <a>PutRecordBatch</a>.\n *          Applications using these operations are referred to as producers.</p>\n *          <p>By default, each delivery stream can take in up to 2,000 transactions per second,\n *          5,000 records per second, or 5 MB per second. If you use <a>PutRecord</a> and\n *             <a>PutRecordBatch</a>, the limits are an aggregate across these two\n *          operations for each delivery stream. For more information about limits and how to request\n *          an increase, see <a href=\"https://docs.aws.amazon.com/firehose/latest/dev/limits.html\">Amazon\n *             Kinesis Data Firehose Limits</a>. </p>\n *          <p>You must specify the name of the delivery stream and the data record when using <a>PutRecord</a>. The data record consists of a data blob that can be up to 1,000\n *          KB in size, and any kind of data. For example, it can be a segment from a log file,\n *          geographic location data, website clickstream data, and so on.</p>\n *          <p>Kinesis Data Firehose buffers records before delivering them to the destination. To\n *          disambiguate the data blobs at the destination, a common solution is to use delimiters in\n *          the data, such as a newline (<code>\\n</code>) or some other character unique within the\n *          data. This allows the consumer application to parse individual data items when reading the\n *          data from the destination.</p>\n *          <p>The <code>PutRecord</code> operation returns a <code>RecordId</code>, which is a\n *          unique string assigned to each record. Producer applications can use this ID for purposes\n *          such as auditability and investigation.</p>\n *          <p>If the <code>PutRecord</code> operation throws a\n *             <code>ServiceUnavailableException</code>, back off and retry. If the exception persists,\n *          it is possible that the throughput limits have been exceeded for the delivery stream. </p>\n *          <p>Data records sent to Kinesis Data Firehose are stored for 24 hours from the time they\n *          are added to a delivery stream as it tries to send the records to the destination. If the\n *          destination is unreachable for more than 24 hours, the data is no longer\n *          available.</p>\n *\n *          <important>\n *             <p>Don't concatenate two or more base64 strings to form the data fields of your records.\n *             Instead, concatenate the raw data, then perform base64 encoding.</p>\n *          </important>\n */\n\nvar PutRecordCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutRecordCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutRecordCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutRecordCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"FirehoseClient\";\n    var commandName = \"PutRecordCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutRecordInput.filterSensitiveLog,\n      outputFilterSensitiveLog: PutRecordOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutRecordCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1PutRecordCommand(input, context);\n  };\n\n  PutRecordCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1PutRecordCommand(output, context);\n  };\n\n  return PutRecordCommand;\n}($Command);\n\nexport { PutRecordCommand };","map":{"version":3,"mappings":";AACA,SAASA,cAAT,EAAyBC,eAAzB,QAAgD,oBAAhD;AACA,SAASC,sCAAT,EAAiDC,oCAAjD,QAA6F,0BAA7F;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AAAA;AAAA;EAAsCC,oCAAtC,CAKE;EACA;;;EAEA,0BAAqBC,KAArB,EAAiD;IAAjD,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAA4B,CAG/C;EACD;EAED;;;;;EAGAC,yDACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,gBAAnB;IACA,IAAMC,WAAW,GAAG,kBAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,cAAc,CAAC0B,kBAJe;MAKvDC,wBAAwB,EAAE1B,eAAe,CAACyB;IALa,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,uCAAR,UAAkBH,KAAlB,EAAgDuB,OAAhD,EAAuE;IACrE,OAAO5B,oCAAoC,CAACK,KAAD,EAAQuB,OAAR,CAA3C;EACD,CAFO;;EAIApB,yCAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO7B,sCAAsC,CAAC8B,MAAD,EAASD,OAAT,CAA7C;EACD,CAFO;;EAMV;AAAC,CAtDD,CAAsCzB,QAAtC","names":["PutRecordInput","PutRecordOutput","deserializeAws_json1_1PutRecordCommand","serializeAws_json1_1PutRecordCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","PutRecordCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\client-firehose\\commands\\PutRecordCommand.ts"],"sourcesContent":["import { FirehoseClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../FirehoseClient\";\nimport { PutRecordInput, PutRecordOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1PutRecordCommand, serializeAws_json1_1PutRecordCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type PutRecordCommandInput = PutRecordInput;\nexport type PutRecordCommandOutput = PutRecordOutput & __MetadataBearer;\n\n/**\n * <p>Writes a single data record into an Amazon Kinesis Data Firehose delivery stream. To\n *          write multiple data records into a delivery stream, use <a>PutRecordBatch</a>.\n *          Applications using these operations are referred to as producers.</p>\n *          <p>By default, each delivery stream can take in up to 2,000 transactions per second,\n *          5,000 records per second, or 5 MB per second. If you use <a>PutRecord</a> and\n *             <a>PutRecordBatch</a>, the limits are an aggregate across these two\n *          operations for each delivery stream. For more information about limits and how to request\n *          an increase, see <a href=\"https://docs.aws.amazon.com/firehose/latest/dev/limits.html\">Amazon\n *             Kinesis Data Firehose Limits</a>. </p>\n *          <p>You must specify the name of the delivery stream and the data record when using <a>PutRecord</a>. The data record consists of a data blob that can be up to 1,000\n *          KB in size, and any kind of data. For example, it can be a segment from a log file,\n *          geographic location data, website clickstream data, and so on.</p>\n *          <p>Kinesis Data Firehose buffers records before delivering them to the destination. To\n *          disambiguate the data blobs at the destination, a common solution is to use delimiters in\n *          the data, such as a newline (<code>\\n</code>) or some other character unique within the\n *          data. This allows the consumer application to parse individual data items when reading the\n *          data from the destination.</p>\n *          <p>The <code>PutRecord</code> operation returns a <code>RecordId</code>, which is a\n *          unique string assigned to each record. Producer applications can use this ID for purposes\n *          such as auditability and investigation.</p>\n *          <p>If the <code>PutRecord</code> operation throws a\n *             <code>ServiceUnavailableException</code>, back off and retry. If the exception persists,\n *          it is possible that the throughput limits have been exceeded for the delivery stream. </p>\n *          <p>Data records sent to Kinesis Data Firehose are stored for 24 hours from the time they\n *          are added to a delivery stream as it tries to send the records to the destination. If the\n *          destination is unreachable for more than 24 hours, the data is no longer\n *          available.</p>\n *\n *          <important>\n *             <p>Don't concatenate two or more base64 strings to form the data fields of your records.\n *             Instead, concatenate the raw data, then perform base64 encoding.</p>\n *          </important>\n */\nexport class PutRecordCommand extends $Command<\n  PutRecordCommandInput,\n  PutRecordCommandOutput,\n  FirehoseClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: PutRecordCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: FirehoseClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<PutRecordCommandInput, PutRecordCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"FirehoseClient\";\n    const commandName = \"PutRecordCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: PutRecordInput.filterSensitiveLog,\n      outputFilterSensitiveLog: PutRecordOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: PutRecordCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1PutRecordCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<PutRecordCommandOutput> {\n    return deserializeAws_json1_1PutRecordCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}