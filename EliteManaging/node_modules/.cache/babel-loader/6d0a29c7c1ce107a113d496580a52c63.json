{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { Credentials, Logger, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { S3Client } from '@aws-sdk/client-s3';\nimport { AxiosHttpHandler } from '../providers/axios-http-handler';\nimport { localTestingStorageEndpoint, SET_CONTENT_LENGTH_HEADER } from './StorageConstants';\nvar logger = new Logger('S3ClientUtils'); // placeholder credentials in order to satisfy type requirement, always results in 403 when used\n\nvar INVALID_CRED = {\n  accessKeyId: '',\n  secretAccessKey: ''\n};\nexport var getPrefix = function (config) {\n  var credentials = config.credentials,\n      level = config.level,\n      customPrefix = config.customPrefix,\n      identityId = config.identityId;\n  var resolvedCustomPrefix = customPrefix || {};\n  var resolvedIdentityId = identityId || credentials.identityId;\n  var privatePath = (resolvedCustomPrefix.private !== undefined ? resolvedCustomPrefix.private : 'private/') + resolvedIdentityId + '/';\n  var protectedPath = (resolvedCustomPrefix.protected !== undefined ? resolvedCustomPrefix.protected : 'protected/') + resolvedIdentityId + '/';\n  var publicPath = resolvedCustomPrefix.public !== undefined ? resolvedCustomPrefix.public : 'public/';\n\n  switch (level) {\n    case 'private':\n      return privatePath;\n\n    case 'protected':\n      return protectedPath;\n\n    default:\n      return publicPath;\n  }\n};\nexport var createPrefixMiddleware = function (opt, key) {\n  return function (next, _context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var credentials, cred, prefix, clonedInput, result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _a.sent();\n              cred = Credentials.shear(credentials);\n              prefix = getPrefix(__assign(__assign({}, opt), {\n                credentials: cred\n              }));\n              clonedInput = Object.assign({}, args.input);\n\n              if (Object.prototype.hasOwnProperty.call(args.input, 'Key')) {\n                clonedInput.Key = prefix + key;\n                args.input = clonedInput;\n              } else if (Object.prototype.hasOwnProperty.call(args.input, 'Prefix')) {\n                clonedInput.Prefix = prefix + key;\n                args.input = clonedInput;\n              }\n\n              result = next(args);\n              return [2\n              /*return*/\n              , result];\n          }\n        });\n      });\n    };\n  };\n};\n\nvar isTimeSkewedError = function (err) {\n  return err.ServerTime && typeof err.Code === 'string' && err.Code === 'RequestTimeTooSkewed';\n}; // we want to take the S3Client config in parameter so we can modify it's systemClockOffset\n\n\nexport var autoAdjustClockskewMiddleware = function (config) {\n  return function (next, _context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var err_1, serverDate;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n\n              return [4\n              /*yield*/\n              , next(args)];\n\n            case 1:\n              return [2\n              /*return*/\n              , _a.sent()];\n\n            case 2:\n              err_1 = _a.sent();\n\n              if (isTimeSkewedError(err_1)) {\n                serverDate = new Date(err_1.ServerTime);\n                config.systemClockOffset = serverDate.getTime() - Date.now();\n              }\n\n              throw err_1;\n\n            case 3:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n  };\n};\nexport var autoAdjustClockskewMiddlewareOptions = {\n  step: 'finalizeRequest',\n  name: 'autoAdjustClockskewMiddleware'\n};\nexport var prefixMiddlewareOptions = {\n  step: 'initialize',\n  name: 'addPrefixMiddleware'\n};\nexport var credentialsProvider = function () {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var credentials, cred, error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , Credentials.get()];\n\n        case 1:\n          credentials = _a.sent();\n          if (!credentials) return [2\n          /*return*/\n          , INVALID_CRED];\n          cred = Credentials.shear(credentials);\n          logger.debug('credentials provider get credentials', cred);\n          return [2\n          /*return*/\n          , cred];\n\n        case 2:\n          error_1 = _a.sent();\n          logger.warn('credentials provider error', error_1);\n          return [2\n          /*return*/\n          , INVALID_CRED];\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n};\nexport var createS3Client = function (config, emitter) {\n  var region = config.region,\n      cancelTokenSource = config.cancelTokenSource,\n      dangerouslyConnectToHttpEndpointForTesting = config.dangerouslyConnectToHttpEndpointForTesting,\n      useAccelerateEndpoint = config.useAccelerateEndpoint;\n  var localTestingConfig = {};\n\n  if (dangerouslyConnectToHttpEndpointForTesting) {\n    localTestingConfig = {\n      endpoint: localTestingStorageEndpoint,\n      tls: false,\n      bucketEndpoint: false,\n      forcePathStyle: true\n    };\n  }\n\n  var s3client = new S3Client(__assign(__assign({\n    region: region,\n    // Using provider instead of a static credentials, so that if an upload task was in progress, but credentials gets\n    // changed or invalidated (e.g user signed out), the subsequent requests will fail.\n    credentials: credentialsProvider,\n    customUserAgent: getAmplifyUserAgent()\n  }, localTestingConfig), {\n    requestHandler: new AxiosHttpHandler({}, emitter, cancelTokenSource),\n    useAccelerateEndpoint: useAccelerateEndpoint\n  }));\n  s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n  return s3client;\n};","map":{"version":3,"mappings":"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","names":["Credentials","Logger","getAmplifyUserAgent","S3Client","AxiosHttpHandler","localTestingStorageEndpoint","SET_CONTENT_LENGTH_HEADER","logger","INVALID_CRED","accessKeyId","secretAccessKey","getPrefix","config","level","customPrefix","identityId","resolvedCustomPrefix","resolvedIdentityId","credentials","privatePath","private","undefined","protectedPath","protected","publicPath","public","createPrefixMiddleware","opt","key","next","_context","args","get","_a","cred","shear","prefix","clonedInput","Object","assign","input","prototype","hasOwnProperty","call","Key","Prefix","result","isTimeSkewedError","err","ServerTime","Code","autoAdjustClockskewMiddleware","err_1","serverDate","Date","systemClockOffset","getTime","now","autoAdjustClockskewMiddlewareOptions","step","name","prefixMiddlewareOptions","credentialsProvider","debug","warn","error_1","createS3Client","emitter","cancelTokenSource","dangerouslyConnectToHttpEndpointForTesting","useAccelerateEndpoint","localTestingConfig","endpoint","tls","bucketEndpoint","forcePathStyle","s3client","__assign","region","customUserAgent","requestHandler","middlewareStack","remove"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-amplify\\storage\\src\\common\\S3ClientUtils.ts"],"sourcesContent":["import {\n\tCredentials,\n\tICredentials,\n\tLogger,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport { StorageAccessLevel, CustomPrefix } from '../types';\nimport {\n\tInitializeMiddleware,\n\tInitializeHandlerOptions,\n\tFinalizeRequestHandlerOptions,\n\tFinalizeRequestMiddleware,\n\tHandlerExecutionContext,\n} from '@aws-sdk/types';\nimport { S3ClientConfig, S3Client } from '@aws-sdk/client-s3';\nimport { CancelTokenSource } from 'axios';\nimport * as events from 'events';\nimport { AxiosHttpHandler } from '../providers/axios-http-handler';\nimport {\n\tlocalTestingStorageEndpoint,\n\tSET_CONTENT_LENGTH_HEADER,\n} from './StorageConstants';\n\nconst logger = new Logger('S3ClientUtils');\n// placeholder credentials in order to satisfy type requirement, always results in 403 when used\nconst INVALID_CRED = { accessKeyId: '', secretAccessKey: '' };\n\nexport const getPrefix = (config: {\n\tcredentials: ICredentials;\n\tlevel?: StorageAccessLevel;\n\tcustomPrefix?: CustomPrefix;\n\tidentityId?: string;\n}): string => {\n\tconst { credentials, level, customPrefix, identityId } = config;\n\n\tconst resolvedCustomPrefix = customPrefix || {};\n\tconst resolvedIdentityId = identityId || credentials.identityId;\n\tconst privatePath =\n\t\t(resolvedCustomPrefix.private !== undefined\n\t\t\t? resolvedCustomPrefix.private\n\t\t\t: 'private/') +\n\t\tresolvedIdentityId +\n\t\t'/';\n\tconst protectedPath =\n\t\t(resolvedCustomPrefix.protected !== undefined\n\t\t\t? resolvedCustomPrefix.protected\n\t\t\t: 'protected/') +\n\t\tresolvedIdentityId +\n\t\t'/';\n\tconst publicPath =\n\t\tresolvedCustomPrefix.public !== undefined\n\t\t\t? resolvedCustomPrefix.public\n\t\t\t: 'public/';\n\n\tswitch (level) {\n\t\tcase 'private':\n\t\t\treturn privatePath;\n\t\tcase 'protected':\n\t\t\treturn protectedPath;\n\t\tdefault:\n\t\t\treturn publicPath;\n\t}\n};\n\nexport const createPrefixMiddleware = (\n\topt: Record<string, any>,\n\tkey: string\n): InitializeMiddleware<any, any> => (next, _context) => async args => {\n\tconst credentials = await Credentials.get();\n\tconst cred = Credentials.shear(credentials);\n\tconst prefix = getPrefix({ ...opt, credentials: cred });\n\tconst clonedInput = Object.assign({}, args.input);\n\tif (Object.prototype.hasOwnProperty.call(args.input, 'Key')) {\n\t\tclonedInput.Key = prefix + key;\n\t\targs.input = clonedInput;\n\t} else if (Object.prototype.hasOwnProperty.call(args.input, 'Prefix')) {\n\t\tclonedInput.Prefix = prefix + key;\n\t\targs.input = clonedInput;\n\t}\n\tconst result = next(args);\n\treturn result;\n};\n\nconst isTimeSkewedError = (err: any): boolean =>\n\terr.ServerTime &&\n\ttypeof err.Code === 'string' &&\n\terr.Code === 'RequestTimeTooSkewed';\n\n// we want to take the S3Client config in parameter so we can modify it's systemClockOffset\nexport const autoAdjustClockskewMiddleware = (\n\tconfig: S3ClientConfig\n): FinalizeRequestMiddleware<any, any> => (\n\tnext,\n\t_context: HandlerExecutionContext\n) => async args => {\n\ttry {\n\t\treturn await next(args);\n\t} catch (err) {\n\t\tif (isTimeSkewedError(err)) {\n\t\t\tconst serverDate = new Date(err.ServerTime);\n\t\t\tconfig.systemClockOffset = serverDate.getTime() - Date.now();\n\t\t}\n\t\tthrow err;\n\t}\n};\n\nexport const autoAdjustClockskewMiddlewareOptions: FinalizeRequestHandlerOptions = {\n\tstep: 'finalizeRequest',\n\tname: 'autoAdjustClockskewMiddleware',\n};\n\nexport const prefixMiddlewareOptions: InitializeHandlerOptions = {\n\tstep: 'initialize',\n\tname: 'addPrefixMiddleware',\n};\n\nexport const credentialsProvider = async () => {\n\ttry {\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) return INVALID_CRED;\n\t\tconst cred = Credentials.shear(credentials);\n\t\tlogger.debug('credentials provider get credentials', cred);\n\t\treturn cred;\n\t} catch (error) {\n\t\tlogger.warn('credentials provider error', error);\n\t\treturn INVALID_CRED;\n\t}\n};\n\nexport const createS3Client = (\n\tconfig: {\n\t\tregion?: string;\n\t\tcancelTokenSource?: CancelTokenSource;\n\t\tdangerouslyConnectToHttpEndpointForTesting?: boolean;\n\t\tuseAccelerateEndpoint?: boolean;\n\t},\n\temitter?: events.EventEmitter\n): S3Client => {\n\tconst {\n\t\tregion,\n\t\tcancelTokenSource,\n\t\tdangerouslyConnectToHttpEndpointForTesting,\n\t\tuseAccelerateEndpoint,\n\t} = config;\n\tlet localTestingConfig = {};\n\n\tif (dangerouslyConnectToHttpEndpointForTesting) {\n\t\tlocalTestingConfig = {\n\t\t\tendpoint: localTestingStorageEndpoint,\n\t\t\ttls: false,\n\t\t\tbucketEndpoint: false,\n\t\t\tforcePathStyle: true,\n\t\t};\n\t}\n\n\tconst s3client = new S3Client({\n\t\tregion,\n\t\t// Using provider instead of a static credentials, so that if an upload task was in progress, but credentials gets\n\t\t// changed or invalidated (e.g user signed out), the subsequent requests will fail.\n\t\tcredentials: credentialsProvider,\n\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t...localTestingConfig,\n\t\trequestHandler: new AxiosHttpHandler({}, emitter, cancelTokenSource),\n\t\tuseAccelerateEndpoint,\n\t});\n\ts3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n\treturn s3client;\n};\n"]},"metadata":{},"sourceType":"module"}