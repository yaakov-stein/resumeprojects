{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StartDocumentTextDetectionRequest, StartDocumentTextDetectionResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1StartDocumentTextDetectionCommand, serializeAws_json1_1StartDocumentTextDetectionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of\n *          text and the words that make up a line of text.</p>\n *          <p>\n *             <code>StartDocumentTextDetection</code> can analyze text in documents that are in JPEG, PNG, and PDF format. The\n *         documents are stored in an Amazon S3 bucket. Use <a>DocumentLocation</a> to specify the bucket name and file name\n *         of the document.\n *      </p>\n *          <p>\n *             <code>StartTextDetection</code> returns a job identifier\n *             (<code>JobId</code>) that you use to get the results of the operation. When text\n *          detection is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS)\n *          topic that you specify in <code>NotificationChannel</code>. To get the results of the text\n *          detection operation, first check that the status value published to the Amazon SNS topic is\n *             <code>SUCCEEDED</code>. If so, call <a>GetDocumentTextDetection</a>, and\n *          pass the job identifier (<code>JobId</code>) from the initial call to\n *             <code>StartDocumentTextDetection</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\">Document Text Detection</a>.</p>\n */\n\nvar StartDocumentTextDetectionCommand =\n/** @class */\nfunction (_super) {\n  __extends(StartDocumentTextDetectionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StartDocumentTextDetectionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StartDocumentTextDetectionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"TextractClient\";\n    var commandName = \"StartDocumentTextDetectionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StartDocumentTextDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartDocumentTextDetectionResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StartDocumentTextDetectionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StartDocumentTextDetectionCommand(input, context);\n  };\n\n  StartDocumentTextDetectionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StartDocumentTextDetectionCommand(output, context);\n  };\n\n  return StartDocumentTextDetectionCommand;\n}($Command);\n\nexport { StartDocumentTextDetectionCommand };","map":{"version":3,"mappings":";AACA,SAASA,iCAAT,EAA4CC,kCAA5C,QAAsF,oBAAtF;AACA,SACEC,uDADF,EAEEC,qDAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;AAmBA;AAAA;AAAA;EAAuDC,qDAAvD,CAKE;EACA;;;EAEA,2CAAqBC,KAArB,EAAkE;IAAlE,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAA6C,CAGhE;EACD;EAED;;;;;EAGAC,0EACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,gBAAnB;IACA,IAAMC,WAAW,GAAG,mCAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,iCAAiC,CAAC0B,kBAJJ;MAKvDC,wBAAwB,EAAE1B,kCAAkC,CAACyB;IALN,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,wDAAR,UAAkBH,KAAlB,EAAiEuB,OAAjE,EAAwF;IACtF,OAAO5B,qDAAqD,CAACK,KAAD,EAAQuB,OAAR,CAA5D;EACD,CAFO;;EAIApB,0DAAR,UACEqB,MADF,EAEED,OAFF,EAEyB;IAEvB,OAAO7B,uDAAuD,CAAC8B,MAAD,EAASD,OAAT,CAA9D;EACD,CALO;;EASV;AAAC,CAzDD,CAAuDzB,QAAvD","names":["StartDocumentTextDetectionRequest","StartDocumentTextDetectionResponse","deserializeAws_json1_1StartDocumentTextDetectionCommand","serializeAws_json1_1StartDocumentTextDetectionCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","StartDocumentTextDetectionCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\client-textract\\commands\\StartDocumentTextDetectionCommand.ts"],"sourcesContent":["import { ServiceInputTypes, ServiceOutputTypes, TextractClientResolvedConfig } from \"../TextractClient\";\nimport { StartDocumentTextDetectionRequest, StartDocumentTextDetectionResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1StartDocumentTextDetectionCommand,\n  serializeAws_json1_1StartDocumentTextDetectionCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type StartDocumentTextDetectionCommandInput = StartDocumentTextDetectionRequest;\nexport type StartDocumentTextDetectionCommandOutput = StartDocumentTextDetectionResponse & __MetadataBearer;\n\n/**\n * <p>Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of\n *          text and the words that make up a line of text.</p>\n *          <p>\n *             <code>StartDocumentTextDetection</code> can analyze text in documents that are in JPEG, PNG, and PDF format. The\n *         documents are stored in an Amazon S3 bucket. Use <a>DocumentLocation</a> to specify the bucket name and file name\n *         of the document.\n *      </p>\n *          <p>\n *             <code>StartTextDetection</code> returns a job identifier\n *             (<code>JobId</code>) that you use to get the results of the operation. When text\n *          detection is finished, Amazon Textract publishes a completion status to the Amazon Simple Notification Service (Amazon SNS)\n *          topic that you specify in <code>NotificationChannel</code>. To get the results of the text\n *          detection operation, first check that the status value published to the Amazon SNS topic is\n *             <code>SUCCEEDED</code>. If so, call <a>GetDocumentTextDetection</a>, and\n *          pass the job identifier (<code>JobId</code>) from the initial call to\n *             <code>StartDocumentTextDetection</code>.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works-detecting.html\">Document Text Detection</a>.</p>\n */\nexport class StartDocumentTextDetectionCommand extends $Command<\n  StartDocumentTextDetectionCommandInput,\n  StartDocumentTextDetectionCommandOutput,\n  TextractClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: StartDocumentTextDetectionCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: TextractClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<StartDocumentTextDetectionCommandInput, StartDocumentTextDetectionCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"TextractClient\";\n    const commandName = \"StartDocumentTextDetectionCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: StartDocumentTextDetectionRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: StartDocumentTextDetectionResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: StartDocumentTextDetectionCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1StartDocumentTextDetectionCommand(input, context);\n  }\n\n  private deserialize(\n    output: __HttpResponse,\n    context: __SerdeContext\n  ): Promise<StartDocumentTextDetectionCommandOutput> {\n    return deserializeAws_json1_1StartDocumentTextDetectionCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}