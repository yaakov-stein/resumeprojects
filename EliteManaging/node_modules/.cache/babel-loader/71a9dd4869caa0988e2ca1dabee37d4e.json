{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { ConsoleLogger as Logger } from './Logger';\nimport { StorageHelper } from './StorageHelper';\nimport { makeQuerablePromise } from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { jitteredExponentialRetry } from './Util';\nimport { getAmplifyUserAgent } from './Platform';\nimport { Amplify } from './Amplify';\nimport { fromCognitoIdentity, fromCognitoIdentityPool } from '@aws-sdk/credential-provider-cognito-identity';\nimport { CognitoIdentityClient, GetIdCommand, GetCredentialsForIdentityCommand } from '@aws-sdk/client-cognito-identity';\nvar logger = new Logger('Credentials');\nvar CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\n\nvar COGNITO_IDENTITY_KEY_PREFIX = 'CognitoIdentityId-';\n\nvar CredentialsClass =\n/** @class */\nfunction () {\n  function CredentialsClass(config) {\n    this._gettingCredPromise = null;\n    this._refreshHandlers = {}; // Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials\n\n    this.Auth = undefined;\n    this.configure(config);\n    this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n    this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n  }\n\n  CredentialsClass.prototype.getModuleName = function () {\n    return 'Credentials';\n  };\n\n  CredentialsClass.prototype.getCredSource = function () {\n    return this._credentials_source;\n  };\n\n  CredentialsClass.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    this._config = Object.assign({}, this._config, config);\n    var refreshHandlers = this._config.refreshHandlers; // If the developer has provided an object of refresh handlers,\n    // then we can merge the provided handlers with the current handlers.\n\n    if (refreshHandlers) {\n      this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n    }\n\n    this._storage = this._config.storage;\n\n    if (!this._storage) {\n      this._storage = new StorageHelper().getStorage();\n    }\n\n    this._storageSync = Promise.resolve();\n\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n\n    return this._config;\n  };\n\n  CredentialsClass.prototype.get = function () {\n    logger.debug('getting credentials');\n    return this._pickupCredentials();\n  }; // currently we only store the guest identity in local storage\n\n\n  CredentialsClass.prototype._getCognitoIdentityIdStorageKey = function (identityPoolId) {\n    return \"\" + COGNITO_IDENTITY_KEY_PREFIX + identityPoolId;\n  };\n\n  CredentialsClass.prototype._pickupCredentials = function () {\n    logger.debug('picking up credentials');\n\n    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n      logger.debug('getting new cred promise');\n      this._gettingCredPromise = makeQuerablePromise(this._keepAlive());\n    } else {\n      logger.debug('getting old cred promise');\n    }\n\n    return this._gettingCredPromise;\n  };\n\n  CredentialsClass.prototype._keepAlive = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var cred, _a, Auth, user_1, session, refreshToken_1, refreshRequest, err_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('checking if credentials exists and not expired');\n            cred = this._credentials;\n\n            if (cred && !this._isExpired(cred) && !this._isPastTTL()) {\n              logger.debug('credentials not changed and not expired, directly return');\n              return [2\n              /*return*/\n              , Promise.resolve(cred)];\n            }\n\n            logger.debug('need to get a new credential or refresh the existing one');\n            _a = this.Auth, Auth = _a === void 0 ? Amplify.Auth : _a;\n\n            if (!Auth || typeof Auth.currentUserCredentials !== 'function') {\n              return [2\n              /*return*/\n              , Promise.reject('No Auth module registered in Amplify')];\n            }\n\n            if (!(!this._isExpired(cred) && this._isPastTTL())) return [3\n            /*break*/\n            , 6];\n            logger.debug('ttl has passed but token is not yet expired');\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , Auth.currentUserPoolUser()];\n\n          case 2:\n            user_1 = _b.sent();\n            return [4\n            /*yield*/\n            , Auth.currentSession()];\n\n          case 3:\n            session = _b.sent();\n            refreshToken_1 = session.refreshToken;\n            refreshRequest = new Promise(function (res, rej) {\n              user_1.refreshSession(refreshToken_1, function (err, data) {\n                return err ? rej(err) : res(data);\n              });\n            });\n            return [4\n            /*yield*/\n            , refreshRequest];\n\n          case 4:\n            _b.sent(); // note that rejections will be caught and handled in the catch block.\n\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            err_1 = _b.sent(); // should not throw because user might just be on guest access or is authenticated through federation\n\n            logger.debug('Error attempting to refreshing the session', err_1);\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            return [2\n            /*return*/\n            , Auth.currentUserCredentials()];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype.refreshFederatedToken = function (federatedInfo) {\n    logger.debug('Getting federated credentials');\n    var provider = federatedInfo.provider,\n        user = federatedInfo.user,\n        token = federatedInfo.token,\n        identity_id = federatedInfo.identity_id;\n    var expires_at = federatedInfo.expires_at; // Make sure expires_at is in millis\n\n    expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1000 : expires_at;\n    var that = this;\n    logger.debug('checking if federated jwt token expired');\n\n    if (expires_at > new Date().getTime()) {\n      // if not expired\n      logger.debug('token not expired');\n      return this._setCredentialsFromFederation({\n        provider: provider,\n        token: token,\n        user: user,\n        identity_id: identity_id,\n        expires_at: expires_at\n      });\n    } else {\n      // if refresh handler exists\n      if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === 'function') {\n        logger.debug('getting refreshed jwt token from federation provider');\n        return this._providerRefreshWithRetry({\n          refreshHandler: that._refreshHandlers[provider],\n          provider: provider,\n          user: user\n        });\n      } else {\n        logger.debug('no refresh handler for provider:', provider);\n        this.clear();\n        return Promise.reject('no refresh handler for provider');\n      }\n    }\n  };\n\n  CredentialsClass.prototype._providerRefreshWithRetry = function (_a) {\n    var _this = this;\n\n    var refreshHandler = _a.refreshHandler,\n        provider = _a.provider,\n        user = _a.user;\n    var MAX_DELAY_MS = 10 * 1000; // refreshHandler will retry network errors, otherwise it will\n    // return NonRetryableError to break out of jitteredExponentialRetry\n\n    return jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS).then(function (data) {\n      logger.debug('refresh federated token sucessfully', data);\n      return _this._setCredentialsFromFederation({\n        provider: provider,\n        token: data.token,\n        user: user,\n        identity_id: data.identity_id,\n        expires_at: data.expires_at\n      });\n    }).catch(function (e) {\n      var isNetworkError = typeof e === 'string' && e.toLowerCase().lastIndexOf('network error', e.length) === 0;\n\n      if (!isNetworkError) {\n        _this.clear();\n      }\n\n      logger.debug('refresh federated token failed', e);\n      return Promise.reject('refreshing federation token failed: ' + e);\n    });\n  };\n\n  CredentialsClass.prototype._isExpired = function (credentials) {\n    if (!credentials) {\n      logger.debug('no credentials for expiration check');\n      return true;\n    }\n\n    logger.debug('are these credentials expired?', credentials);\n    var ts = Date.now();\n    /* returns date object.\n        https://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n    */\n\n    var expiration = credentials.expiration;\n    return expiration.getTime() <= ts;\n  };\n\n  CredentialsClass.prototype._isPastTTL = function () {\n    return this._nextCredentialsRefresh <= Date.now();\n  };\n\n  CredentialsClass.prototype._setCredentialsForGuest = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, identityPoolId, region, mandatorySignIn, identityId, _b, cognitoClient, credentials, cognitoIdentityParams, credentialsProvider;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            logger.debug('setting credentials for guest');\n            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;\n\n            if (mandatorySignIn) {\n              return [2\n              /*return*/\n              , Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n            }\n\n            if (!identityPoolId) {\n              logger.debug('No Cognito Identity pool provided for unauthenticated access');\n              return [2\n              /*return*/\n              , Promise.reject('No Cognito Identity pool provided for unauthenticated access')];\n            }\n\n            if (!region) {\n              logger.debug('region is not configured for getting the credentials');\n              return [2\n              /*return*/\n              , Promise.reject('region is not configured for getting the credentials')];\n            }\n\n            _b = this;\n            return [4\n            /*yield*/\n            , this._getGuestIdentityId()];\n\n          case 1:\n            identityId = _b._identityId = _c.sent();\n            cognitoClient = new CognitoIdentityClient({\n              region: region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            credentials = undefined;\n\n            if (identityId) {\n              cognitoIdentityParams = {\n                identityId: identityId,\n                client: cognitoClient\n              };\n              credentials = fromCognitoIdentity(cognitoIdentityParams)();\n            } else {\n              credentialsProvider = function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        return [4\n                        /*yield*/\n                        , cognitoClient.send(new GetIdCommand({\n                          IdentityPoolId: identityPoolId\n                        }))];\n\n                      case 1:\n                        IdentityId = _a.sent().IdentityId;\n                        this._identityId = IdentityId;\n                        cognitoIdentityParams = {\n                          client: cognitoClient,\n                          identityId: IdentityId\n                        };\n                        credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n                        return [2\n                        /*return*/\n                        , credentialsFromCognitoIdentity()];\n                    }\n                  });\n                });\n              };\n\n              credentials = credentialsProvider().catch(function (err) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  return __generator(this, function (_a) {\n                    throw err;\n                  });\n                });\n              });\n            }\n\n            return [2\n            /*return*/\n            , this._loadCredentials(credentials, 'guest', false, null).then(function (res) {\n              return res;\n            }).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var credentialsProvider;\n\n                var _this = this;\n\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!(e.name === 'ResourceNotFoundException' && e.message === \"Identity '\" + identityId + \"' not found.\")) return [3\n                      /*break*/\n                      , 2];\n                      logger.debug('Failed to load guest credentials');\n                      return [4\n                      /*yield*/\n                      , this._removeGuestIdentityId()];\n\n                    case 1:\n                      _a.sent();\n\n                      credentialsProvider = function () {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                return [4\n                                /*yield*/\n                                , cognitoClient.send(new GetIdCommand({\n                                  IdentityPoolId: identityPoolId\n                                }))];\n\n                              case 1:\n                                IdentityId = _a.sent().IdentityId;\n                                this._identityId = IdentityId;\n                                cognitoIdentityParams = {\n                                  client: cognitoClient,\n                                  identityId: IdentityId\n                                };\n                                credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n                                return [2\n                                /*return*/\n                                , credentialsFromCognitoIdentity()];\n                            }\n                          });\n                        });\n                      };\n\n                      credentials = credentialsProvider().catch(function (err) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          return __generator(this, function (_a) {\n                            throw err;\n                          });\n                        });\n                      });\n                      return [2\n                      /*return*/\n                      , this._loadCredentials(credentials, 'guest', false, null)];\n\n                    case 2:\n                      return [2\n                      /*return*/\n                      , e];\n                  }\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._setCredentialsFromFederation = function (params) {\n    var provider = params.provider,\n        token = params.token,\n        identity_id = params.identity_id;\n    var domains = {\n      google: 'accounts.google.com',\n      facebook: 'graph.facebook.com',\n      amazon: 'www.amazon.com',\n      developer: 'cognito-identity.amazonaws.com'\n    }; // Use custom provider url instead of the predefined ones\n\n    var domain = domains[provider] || provider;\n\n    if (!domain) {\n      return Promise.reject('You must specify a federated provider');\n    }\n\n    var logins = {};\n    logins[domain] = token;\n    var _a = this._config,\n        identityPoolId = _a.identityPoolId,\n        region = _a.region;\n\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n\n    if (!region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n\n    var cognitoClient = new CognitoIdentityClient({\n      region: region,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    var credentials = undefined;\n\n    if (identity_id) {\n      var cognitoIdentityParams = {\n        identityId: identity_id,\n        logins: logins,\n        client: cognitoClient\n      };\n      credentials = fromCognitoIdentity(cognitoIdentityParams)();\n    } else {\n      var cognitoIdentityParams = {\n        logins: logins,\n        identityPoolId: identityPoolId,\n        client: cognitoClient\n      };\n      credentials = fromCognitoIdentityPool(cognitoIdentityParams)();\n    }\n\n    return this._loadCredentials(credentials, 'federated', true, params);\n  };\n\n  CredentialsClass.prototype._setCredentialsFromSession = function (session) {\n    var _this = this;\n\n    logger.debug('set credentials from session');\n    var idToken = session.getIdToken().getJwtToken();\n    var _a = this._config,\n        region = _a.region,\n        userPoolId = _a.userPoolId,\n        identityPoolId = _a.identityPoolId;\n\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n\n    if (!region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n\n    var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n    var logins = {};\n    logins[key] = idToken;\n    var cognitoClient = new CognitoIdentityClient({\n      region: region,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    /*\n        Retreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n        https://git.io/JeDxU\n         Note: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n    */\n\n    var credentialsProvider = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var guestIdentityId, generatedOrRetrievedIdentityId, IdentityId, _a, _b, AccessKeyId, Expiration, SecretKey, SessionToken, primaryIdentityId;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this._getGuestIdentityId()];\n\n            case 1:\n              guestIdentityId = _c.sent();\n              if (!!guestIdentityId) return [3\n              /*break*/\n              , 3];\n              return [4\n              /*yield*/\n              , cognitoClient.send(new GetIdCommand({\n                IdentityPoolId: identityPoolId,\n                Logins: logins\n              }))];\n\n            case 2:\n              IdentityId = _c.sent().IdentityId;\n              generatedOrRetrievedIdentityId = IdentityId;\n              _c.label = 3;\n\n            case 3:\n              return [4\n              /*yield*/\n              , cognitoClient.send(new GetCredentialsForIdentityCommand({\n                IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,\n                Logins: logins\n              }))];\n\n            case 4:\n              _a = _c.sent(), _b = _a.Credentials, AccessKeyId = _b.AccessKeyId, Expiration = _b.Expiration, SecretKey = _b.SecretKey, SessionToken = _b.SessionToken, primaryIdentityId = _a.IdentityId;\n              this._identityId = primaryIdentityId;\n              if (!guestIdentityId) return [3\n              /*break*/\n              , 6]; // if guestIdentity is found and used by GetCredentialsForIdentity\n              // it will be linked to the logins provided, and disqualified as an unauth identity\n\n              logger.debug(\"The guest identity \" + guestIdentityId + \" has been successfully linked to the logins\");\n\n              if (guestIdentityId === primaryIdentityId) {\n                logger.debug(\"The guest identity \" + guestIdentityId + \" has become the primary identity\");\n              } // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n\n\n              return [4\n              /*yield*/\n              , this._removeGuestIdentityId()];\n\n            case 5:\n              // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n              _c.sent();\n\n              _c.label = 6;\n\n            case 6:\n              // https://github.com/aws/aws-sdk-js-v3/blob/main/packages/credential-provider-cognito-identity/src/fromCognitoIdentity.ts#L40\n              return [2\n              /*return*/\n              , {\n                accessKeyId: AccessKeyId,\n                secretAccessKey: SecretKey,\n                sessionToken: SessionToken,\n                expiration: Expiration,\n                identityId: primaryIdentityId\n              }];\n          }\n        });\n      });\n    };\n\n    var credentials = credentialsProvider().catch(function (err) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          throw err;\n        });\n      });\n    });\n    return this._loadCredentials(credentials, 'userPool', true, null);\n  };\n\n  CredentialsClass.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n    var _this = this;\n\n    var that = this;\n    return new Promise(function (res, rej) {\n      credentials.then(function (credentials) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, provider, token, expires_at, identity_id;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                logger.debug('Load credentials successfully', credentials);\n\n                if (this._identityId && !credentials.identityId) {\n                  credentials['identityId'] = this._identityId;\n                }\n\n                that._credentials = credentials;\n                that._credentials.authenticated = authenticated;\n                that._credentials_source = source;\n                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n\n                if (source === 'federated') {\n                  user = Object.assign({\n                    id: this._credentials.identityId\n                  }, info.user);\n                  provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n\n                  try {\n                    this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                      provider: provider,\n                      token: token,\n                      user: user,\n                      expires_at: expires_at,\n                      identity_id: identity_id\n                    }));\n                  } catch (e) {\n                    logger.debug('Failed to put federated info into auth storage', e);\n                  }\n                }\n\n                if (!(source === 'guest')) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , this._setGuestIdentityId(credentials.identityId)];\n\n              case 1:\n                _a.sent();\n\n                _a.label = 2;\n\n              case 2:\n                res(that._credentials);\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      }).catch(function (err) {\n        if (err) {\n          logger.debug('Failed to load credentials', credentials);\n          logger.debug('Error loading credentials', err);\n          rej(err);\n          return;\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype.set = function (params, source) {\n    if (source === 'session') {\n      return this._setCredentialsFromSession(params);\n    } else if (source === 'federation') {\n      return this._setCredentialsFromFederation(params);\n    } else if (source === 'guest') {\n      return this._setCredentialsForGuest();\n    } else {\n      logger.debug('no source specified for setting credentials');\n      return Promise.reject('invalid source');\n    }\n  };\n\n  CredentialsClass.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this._credentials = null;\n        this._credentials_source = null;\n        logger.debug('removing aws-amplify-federatedInfo from storage');\n\n        this._storage.removeItem('aws-amplify-federatedInfo');\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /* operations on local stored guest identity */\n\n\n  CredentialsClass.prototype._getGuestIdentityId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            identityPoolId = this._config.identityPoolId;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId))];\n\n          case 3:\n            e_1 = _a.sent();\n            logger.debug('Failed to get the cached guest identityId', e_1);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._setGuestIdentityId = function (identityId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            identityPoolId = this._config.identityPoolId;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 2:\n            _a.sent();\n\n            this._storage.setItem(this._getCognitoIdentityIdStorageKey(identityPoolId), identityId);\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_2 = _a.sent();\n            logger.debug('Failed to cache guest identityId', e_2);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._removeGuestIdentityId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId;\n      return __generator(this, function (_a) {\n        identityPoolId = this._config.identityPoolId;\n        logger.debug(\"removing \" + this._getCognitoIdentityIdStorageKey(identityPoolId) + \" from storage\");\n\n        this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n\n\n  CredentialsClass.prototype.shear = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n\n  return CredentialsClass;\n}();\n\nexport { CredentialsClass };\nexport var Credentials = new CredentialsClass(null);\nAmplify.register(Credentials);\n/**\n * @deprecated use named import\n */\n\nexport default Credentials;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","StorageHelper","makeQuerablePromise","FacebookOAuth","GoogleOAuth","jitteredExponentialRetry","getAmplifyUserAgent","Amplify","fromCognitoIdentity","fromCognitoIdentityPool","CognitoIdentityClient","GetIdCommand","GetCredentialsForIdentityCommand","logger","CREDENTIALS_TTL","COGNITO_IDENTITY_KEY_PREFIX","config","undefined","configure","_refreshHandlers","refreshGoogleToken","refreshFacebookToken","CredentialsClass","_credentials_source","_config","Object","assign","refreshHandlers","__assign","_storage","storage","getStorage","_storageSync","Promise","resolve","debug","_pickupCredentials","identityPoolId","_gettingCredPromise","isPending","_keepAlive","cred","_credentials","_isExpired","_isPastTTL","_a","Auth","currentUserCredentials","reject","currentUserPoolUser","user_1","_b","currentSession","session","refreshToken_1","refreshToken","refreshRequest","res","rej","refreshSession","err","data","err_1","federatedInfo","user","token","identity_id","expires_at","Date","getFullYear","that","getTime","_setCredentialsFromFederation","provider","_providerRefreshWithRetry","refreshHandler","clear","MAX_DELAY_MS","then","_this","catch","isNetworkError","e","toLowerCase","lastIndexOf","length","credentials","ts","now","expiration","_nextCredentialsRefresh","region","mandatorySignIn","_getGuestIdentityId","identityId","_identityId","_c","cognitoClient","customUserAgent","cognitoIdentityParams","client","credentialsProvider","send","IdentityPoolId","IdentityId","credentialsFromCognitoIdentity","_loadCredentials","name","message","_removeGuestIdentityId","params","domains","google","facebook","amazon","developer","domain","logins","idToken","getIdToken","getJwtToken","userPoolId","key","guestIdentityId","Logins","generatedOrRetrievedIdentityId","AccessKeyId","Expiration","SecretKey","SessionToken","primaryIdentityId","accessKeyId","secretAccessKey","sessionToken","source","authenticated","info","id","setItem","JSON","stringify","_setGuestIdentityId","_setCredentialsFromSession","_setCredentialsForGuest","removeItem","getItem","_getCognitoIdentityIdStorageKey","e_1","e_2","Credentials","register"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-amplify\\core\\src\\Credentials.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from './Logger';\nimport { StorageHelper } from './StorageHelper';\nimport { makeQuerablePromise } from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { jitteredExponentialRetry } from './Util';\nimport { ICredentials } from './types';\nimport { getAmplifyUserAgent } from './Platform';\nimport { Amplify } from './Amplify';\nimport {\n\tfromCognitoIdentity,\n\tFromCognitoIdentityParameters,\n\tfromCognitoIdentityPool,\n\tFromCognitoIdentityPoolParameters,\n} from '@aws-sdk/credential-provider-cognito-identity';\nimport {\n\tCognitoIdentityClient,\n\tGetIdCommand,\n\tGetCredentialsForIdentityCommand,\n} from '@aws-sdk/client-cognito-identity';\nimport { CredentialProvider } from '@aws-sdk/types';\n\nconst logger = new Logger('Credentials');\n\nconst CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\n\nconst COGNITO_IDENTITY_KEY_PREFIX = 'CognitoIdentityId-';\n\nexport class CredentialsClass {\n\tprivate _config;\n\tprivate _credentials;\n\tprivate _credentials_source;\n\tprivate _gettingCredPromise = null;\n\tprivate _refreshHandlers = {};\n\tprivate _storage;\n\tprivate _storageSync;\n\tprivate _identityId;\n\tprivate _nextCredentialsRefresh: Number;\n\n\t// Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials\n\tAuth = undefined;\n\n\tconstructor(config) {\n\t\tthis.configure(config);\n\t\tthis._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n\t\tthis._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Credentials';\n\t}\n\n\tpublic getCredSource() {\n\t\treturn this._credentials_source;\n\t}\n\n\tpublic configure(config) {\n\t\tif (!config) return this._config || {};\n\n\t\tthis._config = Object.assign({}, this._config, config);\n\t\tconst { refreshHandlers } = this._config;\n\t\t// If the developer has provided an object of refresh handlers,\n\t\t// then we can merge the provided handlers with the current handlers.\n\t\tif (refreshHandlers) {\n\t\t\tthis._refreshHandlers = {\n\t\t\t\t...this._refreshHandlers,\n\t\t\t\t...refreshHandlers,\n\t\t\t};\n\t\t}\n\n\t\tthis._storage = this._config.storage;\n\n\t\tif (!this._storage) {\n\t\t\tthis._storage = new StorageHelper().getStorage();\n\t\t}\n\n\t\tthis._storageSync = Promise.resolve();\n\t\tif (typeof this._storage['sync'] === 'function') {\n\t\t\tthis._storageSync = this._storage['sync']();\n\t\t}\n\n\t\treturn this._config;\n\t}\n\n\tpublic get() {\n\t\tlogger.debug('getting credentials');\n\t\treturn this._pickupCredentials();\n\t}\n\n\t// currently we only store the guest identity in local storage\n\tprivate _getCognitoIdentityIdStorageKey(identityPoolId: string) {\n\t\treturn `${COGNITO_IDENTITY_KEY_PREFIX}${identityPoolId}`;\n\t}\n\n\tprivate _pickupCredentials() {\n\t\tlogger.debug('picking up credentials');\n\t\tif (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n\t\t\tlogger.debug('getting new cred promise');\n\t\t\tthis._gettingCredPromise = makeQuerablePromise(this._keepAlive());\n\t\t} else {\n\t\t\tlogger.debug('getting old cred promise');\n\t\t}\n\t\treturn this._gettingCredPromise;\n\t}\n\n\tprivate async _keepAlive() {\n\t\tlogger.debug('checking if credentials exists and not expired');\n\t\tconst cred = this._credentials;\n\t\tif (cred && !this._isExpired(cred) && !this._isPastTTL()) {\n\t\t\tlogger.debug('credentials not changed and not expired, directly return');\n\t\t\treturn Promise.resolve(cred);\n\t\t}\n\n\t\tlogger.debug('need to get a new credential or refresh the existing one');\n\n\t\t// Some use-cases don't require Auth for signing in, but use Credentials for guest users (e.g. Analytics)\n\t\t// Prefer locally scoped `Auth`, but fallback to registered `Amplify.Auth` global otherwise.\n\t\tconst { Auth = Amplify.Auth } = this;\n\n\t\tif (!Auth || typeof Auth.currentUserCredentials !== 'function') {\n\t\t\treturn Promise.reject('No Auth module registered in Amplify');\n\t\t}\n\n\t\tif (!this._isExpired(cred) && this._isPastTTL()) {\n\t\t\tlogger.debug('ttl has passed but token is not yet expired');\n\t\t\ttry {\n\t\t\t\tconst user = await Auth.currentUserPoolUser();\n\t\t\t\tconst session = await Auth.currentSession();\n\t\t\t\tconst refreshToken = session.refreshToken;\n\t\t\t\tconst refreshRequest = new Promise((res, rej) => {\n\t\t\t\t\tuser.refreshSession(refreshToken, (err, data) => {\n\t\t\t\t\t\treturn err ? rej(err) : res(data);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tawait refreshRequest; // note that rejections will be caught and handled in the catch block.\n\t\t\t} catch (err) {\n\t\t\t\t// should not throw because user might just be on guest access or is authenticated through federation\n\t\t\t\tlogger.debug('Error attempting to refreshing the session', err);\n\t\t\t}\n\t\t}\n\t\treturn Auth.currentUserCredentials();\n\t}\n\n\tpublic refreshFederatedToken(federatedInfo) {\n\t\tlogger.debug('Getting federated credentials');\n\t\tconst { provider, user, token, identity_id } = federatedInfo;\n\t\tlet { expires_at } = federatedInfo;\n\n\t\t// Make sure expires_at is in millis\n\t\texpires_at =\n\t\t\tnew Date(expires_at).getFullYear() === 1970\n\t\t\t\t? expires_at * 1000\n\t\t\t\t: expires_at;\n\n\t\tconst that = this;\n\t\tlogger.debug('checking if federated jwt token expired');\n\t\tif (expires_at > new Date().getTime()) {\n\t\t\t// if not expired\n\t\t\tlogger.debug('token not expired');\n\t\t\treturn this._setCredentialsFromFederation({\n\t\t\t\tprovider,\n\t\t\t\ttoken,\n\t\t\t\tuser,\n\t\t\t\tidentity_id,\n\t\t\t\texpires_at,\n\t\t\t});\n\t\t} else {\n\t\t\t// if refresh handler exists\n\t\t\tif (\n\t\t\t\tthat._refreshHandlers[provider] &&\n\t\t\t\ttypeof that._refreshHandlers[provider] === 'function'\n\t\t\t) {\n\t\t\t\tlogger.debug('getting refreshed jwt token from federation provider');\n\t\t\t\treturn this._providerRefreshWithRetry({\n\t\t\t\t\trefreshHandler: that._refreshHandlers[provider],\n\t\t\t\t\tprovider,\n\t\t\t\t\tuser,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlogger.debug('no refresh handler for provider:', provider);\n\t\t\t\tthis.clear();\n\t\t\t\treturn Promise.reject('no refresh handler for provider');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _providerRefreshWithRetry({ refreshHandler, provider, user }) {\n\t\tconst MAX_DELAY_MS = 10 * 1000;\n\t\t// refreshHandler will retry network errors, otherwise it will\n\t\t// return NonRetryableError to break out of jitteredExponentialRetry\n\t\treturn jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS)\n\t\t\t.then(data => {\n\t\t\t\tlogger.debug('refresh federated token sucessfully', data);\n\t\t\t\treturn this._setCredentialsFromFederation({\n\t\t\t\t\tprovider,\n\t\t\t\t\ttoken: data.token,\n\t\t\t\t\tuser,\n\t\t\t\t\tidentity_id: data.identity_id,\n\t\t\t\t\texpires_at: data.expires_at,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tconst isNetworkError =\n\t\t\t\t\ttypeof e === 'string' &&\n\t\t\t\t\te.toLowerCase().lastIndexOf('network error', e.length) === 0;\n\n\t\t\t\tif (!isNetworkError) {\n\t\t\t\t\tthis.clear();\n\t\t\t\t}\n\n\t\t\t\tlogger.debug('refresh federated token failed', e);\n\t\t\t\treturn Promise.reject('refreshing federation token failed: ' + e);\n\t\t\t});\n\t}\n\n\tprivate _isExpired(credentials): boolean {\n\t\tif (!credentials) {\n\t\t\tlogger.debug('no credentials for expiration check');\n\t\t\treturn true;\n\t\t}\n\t\tlogger.debug('are these credentials expired?', credentials);\n\t\tconst ts = Date.now();\n\n\t\t/* returns date object.\n\t\t\thttps://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n\t\t*/\n\t\tconst { expiration } = credentials;\n\t\treturn expiration.getTime() <= ts;\n\t}\n\n\tprivate _isPastTTL(): boolean {\n\t\treturn this._nextCredentialsRefresh <= Date.now();\n\t}\n\n\tprivate async _setCredentialsForGuest() {\n\t\tlogger.debug('setting credentials for guest');\n\t\tconst { identityPoolId, region, mandatorySignIn } = this._config;\n\t\tif (mandatorySignIn) {\n\t\t\treturn Promise.reject(\n\t\t\t\t'cannot get guest credentials when mandatory signin enabled'\n\t\t\t);\n\t\t}\n\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug(\n\t\t\t\t'No Cognito Identity pool provided for unauthenticated access'\n\t\t\t);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No Cognito Identity pool provided for unauthenticated access'\n\t\t\t);\n\t\t}\n\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\n\t\tconst identityId = this._identityId = await this._getGuestIdentityId();\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet credentials = undefined;\n\t\tif (identityId) {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\tidentityId,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentity(cognitoIdentityParams)();\n\t\t} else {\n\t\t\t/*\n\t\t\tRetreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n\t\t\thttps://git.io/JeDxU\n\n\t\t\tNote: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n\t\t\t*/\n\t\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tthis._identityId = IdentityId;\n\t\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\t\tclient: cognitoClient,\n\t\t\t\t\tidentityId: IdentityId,\n\t\t\t\t};\n\n\t\t\t\tconst credentialsFromCognitoIdentity = fromCognitoIdentity(\n\t\t\t\t\tcognitoIdentityParams\n\t\t\t\t);\n\n\t\t\t\treturn credentialsFromCognitoIdentity();\n\t\t\t};\n\n\t\t\tcredentials = credentialsProvider().catch(async err => {\n\t\t\t\tthrow err;\n\t\t\t});\n\t\t}\n\n\t\treturn this._loadCredentials(credentials, 'guest', false, null)\n\t\t\t.then(res => {\n\t\t\t\treturn res;\n\t\t\t})\n\t\t\t.catch(async e => {\n\t\t\t\t// If identity id is deleted in the console, we make one attempt to recreate it\n\t\t\t\t// and remove existing id from cache.\n\t\t\t\tif (\n\t\t\t\t\te.name === 'ResourceNotFoundException' &&\n\t\t\t\t\te.message === `Identity '${identityId}' not found.`\n\t\t\t\t) {\n\t\t\t\t\tlogger.debug('Failed to load guest credentials');\n\t\t\t\t\tawait this._removeGuestIdentityId();\n\n\t\t\t\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._identityId = IdentityId;\n\t\t\t\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\t\t\t\tclient: cognitoClient,\n\t\t\t\t\t\t\tidentityId: IdentityId,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst credentialsFromCognitoIdentity = fromCognitoIdentity(\n\t\t\t\t\t\t\tcognitoIdentityParams\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn credentialsFromCognitoIdentity();\n\t\t\t\t\t};\n\n\t\t\t\t\tcredentials = credentialsProvider().catch(async err => {\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t});\n\n\t\t\t\t\treturn this._loadCredentials(credentials, 'guest', false, null);\n\t\t\t\t} else {\n\t\t\t\t\treturn e;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate _setCredentialsFromFederation(params) {\n\t\tconst { provider, token, identity_id } = params;\n\t\tconst domains = {\n\t\t\tgoogle: 'accounts.google.com',\n\t\t\tfacebook: 'graph.facebook.com',\n\t\t\tamazon: 'www.amazon.com',\n\t\t\tdeveloper: 'cognito-identity.amazonaws.com',\n\t\t};\n\n\t\t// Use custom provider url instead of the predefined ones\n\t\tconst domain = domains[provider] || provider;\n\t\tif (!domain) {\n\t\t\treturn Promise.reject('You must specify a federated provider');\n\t\t}\n\n\t\tconst logins = {};\n\t\tlogins[domain] = token;\n\n\t\tconst { identityPoolId, region } = this._config;\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug('No Cognito Federated Identity pool provided');\n\t\t\treturn Promise.reject('No Cognito Federated Identity pool provided');\n\t\t}\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet credentials = undefined;\n\t\tif (identity_id) {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\tidentityId: identity_id,\n\t\t\t\tlogins,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentity(cognitoIdentityParams)();\n\t\t} else {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityPoolParameters = {\n\t\t\t\tlogins,\n\t\t\t\tidentityPoolId,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentityPool(cognitoIdentityParams)();\n\t\t}\n\t\treturn this._loadCredentials(credentials, 'federated', true, params);\n\t}\n\n\tprivate _setCredentialsFromSession(session): Promise<ICredentials> {\n\t\tlogger.debug('set credentials from session');\n\t\tconst idToken = session.getIdToken().getJwtToken();\n\t\tconst { region, userPoolId, identityPoolId } = this._config;\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug('No Cognito Federated Identity pool provided');\n\t\t\treturn Promise.reject('No Cognito Federated Identity pool provided');\n\t\t}\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\t\tconst key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n\t\tconst logins = {};\n\t\tlogins[key] = idToken;\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\t/* \n\t\t\tRetreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n\t\t\thttps://git.io/JeDxU\n\n\t\t\tNote: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n\t\t*/\n\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t// try to fetch the local stored guest identity, if found, we will associate it with the logins\n\t\t\tconst guestIdentityId = await this._getGuestIdentityId();\n\n\t\t\tlet generatedOrRetrievedIdentityId;\n\t\t\tif (!guestIdentityId) {\n\t\t\t\t// for a first-time user, this will return a brand new identity\n\t\t\t\t// for a returning user, this will retrieve the previous identity assocaited with the logins\n\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t\tLogins: logins,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tgeneratedOrRetrievedIdentityId = IdentityId;\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\tCredentials: {\n\t\t\t\t\tAccessKeyId,\n\t\t\t\t\tExpiration,\n\t\t\t\t\tSecretKey,\n\t\t\t\t\tSessionToken,\n\t\t\t\t},\n\t\t\t\t// single source of truth for the primary identity associated with the logins\n\t\t\t\t// only if a guest identity is used for a first-time user, that guest identity will become its primary identity\n\t\t\t\tIdentityId: primaryIdentityId,\n\t\t\t} = await cognitoClient.send(\n\t\t\t\tnew GetCredentialsForIdentityCommand({\n\t\t\t\t  IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,\n\t\t\t\t  Logins: logins,\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tthis._identityId = primaryIdentityId;\n\t\t\tif (guestIdentityId) {\n\t\t\t\t// if guestIdentity is found and used by GetCredentialsForIdentity\n\t\t\t\t// it will be linked to the logins provided, and disqualified as an unauth identity\n\t\t\t\tlogger.debug(`The guest identity ${guestIdentityId} has been successfully linked to the logins`);\n\t\t\t\tif (guestIdentityId === primaryIdentityId) {\n\t\t\t\t\tlogger.debug(`The guest identity ${guestIdentityId} has become the primary identity`);\n\t\t\t\t}\n\t\t\t\t// remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n\t\t\t\tawait this._removeGuestIdentityId();\n\t\t\t}\n\n\t\t\t// https://github.com/aws/aws-sdk-js-v3/blob/main/packages/credential-provider-cognito-identity/src/fromCognitoIdentity.ts#L40\n\t\t\treturn {\n\t\t\t\taccessKeyId: AccessKeyId,\n\t\t\t\tsecretAccessKey: SecretKey,\n\t\t\t\tsessionToken: SessionToken,\n\t\t\t\texpiration: Expiration,\n\t\t\t\tidentityId: primaryIdentityId,\n\t\t\t  };\n\t\t};\n\n\t\tconst credentials = credentialsProvider().catch(async err => {\n\t\t\tthrow err;\n\t\t});\n\n\t\treturn this._loadCredentials(credentials, 'userPool', true, null);\n\t}\n\n\tprivate _loadCredentials(\n\t\tcredentials,\n\t\tsource,\n\t\tauthenticated,\n\t\tinfo\n\t): Promise<ICredentials> {\n\t\tconst that = this;\n\t\treturn new Promise((res, rej) => {\n\t\t\tcredentials\n\t\t\t\t.then(async credentials => {\n\t\t\t\t\tlogger.debug('Load credentials successfully', credentials);\n\t\t\t\t\tif (this._identityId && !credentials.identityId) {\n\t\t\t\t\t\tcredentials['identityId'] = this._identityId;\n\t\t\t\t\t}\n\n\t\t\t\t\tthat._credentials = credentials;\n\t\t\t\t\tthat._credentials.authenticated = authenticated;\n\t\t\t\t\tthat._credentials_source = source;\n\t\t\t\t\tthat._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n\t\t\t\t\tif (source === 'federated') {\n\t\t\t\t\t\tconst user = Object.assign(\n\t\t\t\t\t\t\t{ id: this._credentials.identityId },\n\t\t\t\t\t\t\tinfo.user\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst { provider, token, expires_at, identity_id } = info;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis._storage.setItem(\n\t\t\t\t\t\t\t\t'aws-amplify-federatedInfo',\n\t\t\t\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\t\t\t\tprovider,\n\t\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t\texpires_at,\n\t\t\t\t\t\t\t\t\tidentity_id,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogger.debug('Failed to put federated info into auth storage', e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (source === 'guest') {\n\t\t\t\t\t\tawait this._setGuestIdentityId(credentials.identityId);\n\t\t\t\t\t}\n\t\t\t\t\tres(that._credentials);\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('Failed to load credentials', credentials);\n\t\t\t\t\t\tlogger.debug('Error loading credentials', err);\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n\n\tpublic set(params, source): Promise<ICredentials> {\n\t\tif (source === 'session') {\n\t\t\treturn this._setCredentialsFromSession(params);\n\t\t} else if (source === 'federation') {\n\t\t\treturn this._setCredentialsFromFederation(params);\n\t\t} else if (source === 'guest') {\n\t\t\treturn this._setCredentialsForGuest();\n\t\t} else {\n\t\t\tlogger.debug('no source specified for setting credentials');\n\t\t\treturn Promise.reject('invalid source');\n\t\t}\n\t}\n\n\tpublic async clear() {\n\t\tthis._credentials = null;\n\t\tthis._credentials_source = null;\n\t\tlogger.debug('removing aws-amplify-federatedInfo from storage');\n\t\tthis._storage.removeItem('aws-amplify-federatedInfo');\n\t}\n\n\t/* operations on local stored guest identity */\n\tprivate async _getGuestIdentityId(): Promise<string> {\n\t\tconst { identityPoolId } = this._config;\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t\treturn this._storage.getItem(\n\t\t\t\tthis._getCognitoIdentityIdStorageKey(identityPoolId)\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to get the cached guest identityId', e);\n\t\t}\n\t}\n\n\tprivate async _setGuestIdentityId(identityId: string) {\n\t\tconst { identityPoolId } = this._config;\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t\tthis._storage.setItem(\n\t\t\t\tthis._getCognitoIdentityIdStorageKey(identityPoolId),\n\t\t\t\tidentityId,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to cache guest identityId', e);\n\t\t}\n\t}\n\n\tprivate async _removeGuestIdentityId() {\n\t\tconst { identityPoolId } = this._config;\n\t\tlogger.debug(\n\t\t\t`removing ${this._getCognitoIdentityIdStorageKey(\n\t\t\t\tidentityPoolId\n\t\t\t)} from storage`\n\t\t);\n\t\tthis._storage.removeItem(\n\t\t\tthis._getCognitoIdentityIdStorageKey(identityPoolId)\n\t\t);\n\t}\n\n\t/**\n\t * Compact version of credentials\n\t * @param {Object} credentials\n\t * @return {Object} - Credentials\n\t */\n\tpublic shear(credentials) {\n\t\treturn {\n\t\t\taccessKeyId: credentials.accessKeyId,\n\t\t\tsessionToken: credentials.sessionToken,\n\t\t\tsecretAccessKey: credentials.secretAccessKey,\n\t\t\tidentityId: credentials.identityId,\n\t\t\tauthenticated: credentials.authenticated,\n\t\t};\n\t}\n}\n\nexport const Credentials = new CredentialsClass(null);\n\nAmplify.register(Credentials);\n\n/**\n * @deprecated use named import\n */\nexport default Credentials;\n"]},"metadata":{},"sourceType":"module"}