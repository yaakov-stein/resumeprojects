{"ast":null,"code":"import { __assign } from \"tslib\";\nexport var InvalidInputException;\n\n(function (InvalidInputException) {\n  InvalidInputException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(InvalidInputException || (InvalidInputException = {}));\n\nexport var Event;\n\n(function (Event) {\n  Event.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Event || (Event = {}));\n\nexport var PutEventsRequest;\n\n(function (PutEventsRequest) {\n  PutEventsRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PutEventsRequest || (PutEventsRequest = {}));\n\nexport var Item;\n\n(function (Item) {\n  Item.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(Item || (Item = {}));\n\nexport var PutItemsRequest;\n\n(function (PutItemsRequest) {\n  PutItemsRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PutItemsRequest || (PutItemsRequest = {}));\n\nexport var ResourceNotFoundException;\n\n(function (ResourceNotFoundException) {\n  ResourceNotFoundException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(ResourceNotFoundException || (ResourceNotFoundException = {}));\n\nexport var User;\n\n(function (User) {\n  User.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(User || (User = {}));\n\nexport var PutUsersRequest;\n\n(function (PutUsersRequest) {\n  PutUsersRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n})(PutUsersRequest || (PutUsersRequest = {}));","map":{"version":3,"mappings":";AAYA,OAAM,IAAWA,qBAAX;;AAAN,WAAiBA,qBAAjB,EAAsC;EACvBA,2CAAqB,UAACC,GAAD,EAA2B;IAAU,oBAClEA,GADkE;EAErE,CAFW;AAGd,CAJD,EAAiBD,qBAAqB,KAArBA,qBAAqB,MAAtC;;AAkEA,OAAM,IAAWE,KAAX;;AAAN,WAAiBA,KAAjB,EAAsB;EACPA,2BAAqB,UAACD,GAAD,EAAW;IAAU,oBAClDA,GADkD;EAErD,CAFW;AAGd,CAJD,EAAiBC,KAAK,KAALA,KAAK,MAAtB;;AA+BA,OAAM,IAAWC,gBAAX;;AAAN,WAAiBA,gBAAjB,EAAiC;EAClBA,sCAAqB,UAACF,GAAD,EAAsB;IAAU,oBAC7DA,GAD6D;EAEhE,CAFW;AAGd,CAJD,EAAiBE,gBAAgB,KAAhBA,gBAAgB,MAAjC;;AA6BA,OAAM,IAAWC,IAAX;;AAAN,WAAiBA,IAAjB,EAAqB;EACNA,0BAAqB,UAACH,GAAD,EAAU;IAAU,oBACjDA,GADiD;EAEpD,CAFW;AAGd,CAJD,EAAiBG,IAAI,KAAJA,IAAI,MAArB;;AAkBA,OAAM,IAAWC,eAAX;;AAAN,WAAiBA,eAAjB,EAAgC;EACjBA,qCAAqB,UAACJ,GAAD,EAAqB;IAAU,oBAC5DA,GAD4D;EAE/D,CAFW;AAGd,CAJD,EAAiBI,eAAe,KAAfA,eAAe,MAAhC;;AAeA,OAAM,IAAWC,yBAAX;;AAAN,WAAiBA,yBAAjB,EAA0C;EAC3BA,+CAAqB,UAACL,GAAD,EAA+B;IAAU,oBACtEA,GADsE;EAEzE,CAFW;AAGd,CAJD,EAAiBK,yBAAyB,KAAzBA,yBAAyB,MAA1C;;AA6BA,OAAM,IAAWC,IAAX;;AAAN,WAAiBA,IAAjB,EAAqB;EACNA,0BAAqB,UAACN,GAAD,EAAU;IAAU,oBACjDA,GADiD;EAEpD,CAFW;AAGd,CAJD,EAAiBM,IAAI,KAAJA,IAAI,MAArB;;AAkBA,OAAM,IAAWC,eAAX;;AAAN,WAAiBA,eAAjB,EAAgC;EACjBA,qCAAqB,UAACP,GAAD,EAAqB;IAAU,oBAC5DA,GAD4D;EAE/D,CAFW;AAGd,CAJD,EAAiBO,eAAe,KAAfA,eAAe,MAAhC","names":["InvalidInputException","obj","Event","PutEventsRequest","Item","PutItemsRequest","ResourceNotFoundException","User","PutUsersRequest"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-personalize-events\\models\\models_0.ts"],"sourcesContent":["import { LazyJsonString as __LazyJsonString, SmithyException as __SmithyException } from \"@aws-sdk/smithy-client\";\nimport { MetadataBearer as $MetadataBearer } from \"@aws-sdk/types\";\n\n/**\n * <p>Provide a valid value for the field or parameter.</p>\n */\nexport interface InvalidInputException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidInputException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace InvalidInputException {\n  export const filterSensitiveLog = (obj: InvalidInputException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents user interaction event information sent using the\n *       <code>PutEvents</code> API.</p>\n */\nexport interface Event {\n  /**\n   * <p>An ID associated with the event. If an event ID is not provided, Amazon Personalize generates\n   *       a unique ID for the event. An event ID is not used as an input to the model. Amazon Personalize uses\n   *       the event ID to distinquish unique events. Any subsequent events after the first with the\n   *       same event ID are not used in model training.</p>\n   */\n  eventId?: string;\n\n  /**\n   * <p>The type of event, such as click or download. This property corresponds to the <code>EVENT_TYPE</code>\n   *       field of your Interactions schema and depends on the types of events you are tracking.</p>\n   */\n  eventType: string | undefined;\n\n  /**\n   * <p>The event value that corresponds to the <code>EVENT_VALUE</code> field of the Interactions schema.</p>\n   */\n  eventValue?: number;\n\n  /**\n   * <p>The item ID key that corresponds to the <code>ITEM_ID</code> field of the Interactions schema.</p>\n   */\n  itemId?: string;\n\n  /**\n   * <p>A string map of event-specific data that you might choose to record. For example, if a\n   *       user rates a movie on your site, other than movie ID (<code>itemId</code>) and rating (<code>eventValue</code>)\n   *       , you might also send the number of movie ratings made by the user.</p>\n   *          <p>Each item in the map consists of a key-value pair. For example,</p>\n   *\n   *          <p>\n   *             <code>{\"numberOfRatings\": \"12\"}</code>\n   *          </p>\n   *          <p>The keys use camel case names that match the fields in the Interactions\n   *       schema. In the above example, the <code>numberOfRatings</code> would match the\n   *       'NUMBER_OF_RATINGS' field defined in the Interactions schema.</p>\n   */\n  properties?: __LazyJsonString | string;\n\n  /**\n   * <p>The timestamp (in Unix time) on the client side when the event occurred.</p>\n   */\n  sentAt: Date | undefined;\n\n  /**\n   * <p>The ID of the recommendation.</p>\n   */\n  recommendationId?: string;\n\n  /**\n   * <p>A list of item IDs that represents the sequence of items you have shown the user. For example, <code>[\"itemId1\", \"itemId2\", \"itemId3\"]</code>.</p>\n   */\n  impression?: string[];\n}\n\nexport namespace Event {\n  export const filterSensitiveLog = (obj: Event): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutEventsRequest {\n  /**\n   * <p>The tracking ID for the event.\n   *       The ID is generated by a call to the\n   *       <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html\">CreateEventTracker</a> API.</p>\n   */\n  trackingId: string | undefined;\n\n  /**\n   * <p>The user associated with the event.</p>\n   */\n  userId?: string;\n\n  /**\n   * <p>The session ID associated with the user's visit. Your application generates the sessionId when a user first visits your website or uses your application.\n   *       Amazon Personalize uses the sessionId to associate events with the user before they log in. For more information see <a>event-record-api</a>.</p>\n   */\n  sessionId: string | undefined;\n\n  /**\n   * <p>A list of event data from the session.</p>\n   */\n  eventList: Event[] | undefined;\n}\n\nexport namespace PutEventsRequest {\n  export const filterSensitiveLog = (obj: PutEventsRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents item metadata added to an Items dataset using the\n *       <code>PutItems</code> API.</p>\n */\nexport interface Item {\n  /**\n   * <p>The ID associated with the item.</p>\n   */\n  itemId: string | undefined;\n\n  /**\n   * <p>A string map of item-specific metadata. Each element in the map consists of a key-value pair. For example,\n   *     </p>\n   *          <p>\n   *             <code>{\"numberOfRatings\": \"12\"}</code>\n   *          </p>\n   *          <p>The keys use camel case names that match the fields in the Items\n   *       schema. In the above example, the <code>numberOfRatings</code> would match the\n   *       'NUMBER_OF_RATINGS' field defined in the Items schema.</p>\n   */\n  properties?: __LazyJsonString | string;\n}\n\nexport namespace Item {\n  export const filterSensitiveLog = (obj: Item): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutItemsRequest {\n  /**\n   * <p>The Amazon Resource Number (ARN) of the Items dataset you are adding the item or items to.</p>\n   */\n  datasetArn: string | undefined;\n\n  /**\n   * <p>A list of item data.</p>\n   */\n  items: Item[] | undefined;\n}\n\nexport namespace PutItemsRequest {\n  export const filterSensitiveLog = (obj: PutItemsRequest): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Could not find the specified resource.</p>\n */\nexport interface ResourceNotFoundException extends __SmithyException, $MetadataBearer {\n  name: \"ResourceNotFoundException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace ResourceNotFoundException {\n  export const filterSensitiveLog = (obj: ResourceNotFoundException): any => ({\n    ...obj,\n  });\n}\n\n/**\n * <p>Represents user metadata added to a Users dataset using the\n *       <code>PutUsers</code> API.</p>\n */\nexport interface User {\n  /**\n   * <p>The ID associated with the user.</p>\n   */\n  userId: string | undefined;\n\n  /**\n   * <p>A string map of user-specific metadata. Each element in the map consists of a key-value pair. For example,\n   *     </p>\n   *          <p>\n   *             <code>{\"numberOfVideosWatched\": \"45\"}</code>\n   *          </p>\n   *          <p>The keys use camel case names that match the fields in the Users\n   *       schema. In the above example, the <code>numberOfVideosWatched</code> would match the\n   *       'NUMBER_OF_VIDEOS_WATCHED' field defined in the Users schema.</p>\n   */\n  properties?: __LazyJsonString | string;\n}\n\nexport namespace User {\n  export const filterSensitiveLog = (obj: User): any => ({\n    ...obj,\n  });\n}\n\nexport interface PutUsersRequest {\n  /**\n   * <p>The Amazon Resource Number (ARN) of the Users dataset you are adding the user or users to.</p>\n   */\n  datasetArn: string | undefined;\n\n  /**\n   * <p>A list of user data.</p>\n   */\n  users: User[] | undefined;\n}\n\nexport namespace PutUsersRequest {\n  export const filterSensitiveLog = (obj: PutUsersRequest): any => ({\n    ...obj,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}