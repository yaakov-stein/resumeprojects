{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport { Amplify, ConsoleLogger as Logger, parseMobileHubConfig } from '@aws-amplify/core';\nimport { AmazonLocationServiceProvider } from './Providers/AmazonLocationServiceProvider';\nimport { validateCoordinates } from './util';\nvar logger = new Logger('Geo');\nvar DEFAULT_PROVIDER = 'AmazonLocationService';\n\nvar GeoClass =\n/** @class */\nfunction () {\n  function GeoClass() {\n    this._config = {};\n    this._pluggables = [];\n    logger.debug('Geo Options', this._config);\n  }\n  /**\n   * get the name of the module category\n   * @returns {string} name of the module category\n   */\n\n\n  GeoClass.prototype.getModuleName = function () {\n    return GeoClass.MODULE;\n  };\n  /**\n   * add plugin into Geo category\n   * @param {Object} pluggable - an instance of the plugin\n   */\n\n\n  GeoClass.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable.getCategory() === 'Geo') {\n      this._pluggables.push(pluggable);\n\n      var config = pluggable.configure(this._config[pluggable.getProviderName()]);\n      return config;\n    }\n  };\n  /**\n   * Get the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  GeoClass.prototype.getPluggable = function (providerName) {\n    var pluggable = this._pluggables.find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n\n    if (pluggable === undefined) {\n      logger.debug('No plugin found with providerName', providerName);\n      throw new Error('No plugin found in Geo for the provider');\n    } else return pluggable;\n  };\n  /**\n   * Remove the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  GeoClass.prototype.removePluggable = function (providerName) {\n    this._pluggables = this._pluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    return;\n  };\n  /**\n   * Configure Geo\n   * @param {Object} config - Configuration object for Geo\n   * @return {Object} - Current configuration\n   */\n\n\n  GeoClass.prototype.configure = function (config) {\n    var _this = this;\n\n    logger.debug('configure Geo');\n    if (!config) return this._config;\n    var amplifyConfig = parseMobileHubConfig(config);\n    this._config = Object.assign({}, this._config, amplifyConfig.Geo, config);\n\n    this._pluggables.forEach(function (pluggable) {\n      pluggable.configure(_this._config[pluggable.getProviderName()]);\n    });\n\n    if (this._pluggables.length === 0) {\n      this.addPluggable(new AmazonLocationServiceProvider());\n    }\n\n    return this._config;\n  };\n  /**\n   * Get the map resources that are currently available through the provider\n   * @param {string} provider\n   * @returns - Array of available map resources\n   */\n\n\n  GeoClass.prototype.getAvailableMaps = function (provider) {\n    if (provider === void 0) {\n      provider = DEFAULT_PROVIDER;\n    }\n\n    var prov = this.getPluggable(provider);\n    return prov.getAvailableMaps();\n  };\n  /**\n   * Get the map resource set as default in amplify config\n   * @param {string} provider\n   * @returns - Map resource set as the default in amplify config\n   */\n\n\n  GeoClass.prototype.getDefaultMap = function (provider) {\n    if (provider === void 0) {\n      provider = DEFAULT_PROVIDER;\n    }\n\n    var prov = this.getPluggable(provider);\n    return prov.getDefaultMap();\n  };\n  /**\n   * Search by text input with optional parameters\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n   */\n\n\n  GeoClass.prototype.searchByText = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, error_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , prov.searchByText(text, options)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            error_1 = _b.sent();\n            logger.debug(error_1);\n            throw error_1;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Reverse geocoding search via a coordinate point on the map\n   * @param coordinates - Coordinates array for the search input\n   * @param options - Options parameters for the search\n   * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n   */\n\n\n  GeoClass.prototype.searchByCoordinates = function (coordinates, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, _b, lng, lat, error_2;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n            _b = __read(coordinates, 2), lng = _b[0], lat = _b[1];\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n\n            validateCoordinates(lng, lat);\n            return [4\n            /*yield*/\n            , prov.searchByCoordinates(coordinates, options)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            error_2 = _c.sent();\n            logger.debug(error_2);\n            throw error_2;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Create geofences\n   * @param geofences - Single or array of geofence objects to create\n   * @param options? - Optional parameters for creating geofences\n   * @returns {Promise<SaveGeofencesResults>} - Promise that resolves to an object with:\n   *   successes: list of geofences successfully created\n   *   errors: list of geofences that failed to create\n   */\n\n\n  GeoClass.prototype.saveGeofences = function (geofences, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, geofenceInputArray, error_3;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n\n            if (!Array.isArray(geofences)) {\n              geofenceInputArray = [geofences];\n            } else {\n              geofenceInputArray = geofences;\n            }\n\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , prov.saveGeofences(geofenceInputArray, options)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            error_3 = _b.sent();\n            logger.debug(error_3);\n            throw error_3;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Get a single geofence by geofenceId\n   * @param geofenceId: GeofenceId - The string id of the geofence to get\n   * @param options?: GeofenceOptions - Optional parameters for getting a geofence\n   * @returns Promise<Geofence> - Promise that resolves to a geofence object\n   */\n\n\n  GeoClass.prototype.getGeofence = function (geofenceId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, error_4;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , prov.getGeofence(geofenceId, options)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            error_4 = _b.sent();\n            logger.debug(error_4);\n            throw error_4;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * List geofences\n   * @param  options?: ListGeofenceOptions\n   * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n   *   entries: list of geofences - 100 geofences are listed per page\n   *   nextToken: token for next page of geofences\n   */\n\n\n  GeoClass.prototype.listGeofences = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, error_5;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , prov.listGeofences(options)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            error_5 = _b.sent();\n            logger.debug(error_5);\n            throw error_5;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Delete geofences\n   * @param geofenceIds: string|string[]\n   * @param options?: GeofenceOptions\n   * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n   *  successes: list of geofences successfully deleted\n   *  errors: list of geofences that failed to delete\n   */\n\n\n  GeoClass.prototype.deleteGeofences = function (geofenceIds, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, providerName, prov, geofenceIdsInputArray, error_6;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).providerName, providerName = _a === void 0 ? DEFAULT_PROVIDER : _a;\n            prov = this.getPluggable(providerName);\n\n            if (!Array.isArray(geofenceIds)) {\n              geofenceIdsInputArray = [geofenceIds];\n            } else {\n              geofenceIdsInputArray = geofenceIds;\n            }\n\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , prov.deleteGeofences(geofenceIdsInputArray, options)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            error_6 = _b.sent();\n            logger.debug(error_6);\n            throw error_6;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  GeoClass.MODULE = 'Geo';\n  return GeoClass;\n}();\n\nexport { GeoClass };\nexport var Geo = new GeoClass();\nAmplify.register(Geo);","map":{"version":3,"mappings":"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","names":["Amplify","ConsoleLogger","Logger","parseMobileHubConfig","AmazonLocationServiceProvider","validateCoordinates","logger","DEFAULT_PROVIDER","_config","_pluggables","debug","GeoClass","MODULE","pluggable","getCategory","push","config","configure","getProviderName","providerName","find","undefined","Error","filter","amplifyConfig","Object","assign","Geo","forEach","_this","length","addPluggable","provider","prov","getPluggable","getAvailableMaps","getDefaultMap","text","options","_a","searchByText","_b","error_1","coordinates","lng","lat","searchByCoordinates","_c","error_2","geofences","Array","isArray","geofenceInputArray","saveGeofences","error_3","geofenceId","getGeofence","error_4","listGeofences","error_5","geofenceIds","geofenceIdsInputArray","deleteGeofences","error_6","register"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-amplify\\geo\\src\\Geo.ts"],"sourcesContent":["/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport {\n\tAmplify,\n\tConsoleLogger as Logger,\n\tparseMobileHubConfig,\n} from '@aws-amplify/core';\nimport { AmazonLocationServiceProvider } from './Providers/AmazonLocationServiceProvider';\n\nimport { validateCoordinates } from './util';\n\nimport {\n\tPlace,\n\tGeoConfig,\n\tCoordinates,\n\tSearchByTextOptions,\n\tSearchByCoordinatesOptions,\n\tGeoProvider,\n\tMapStyle,\n\tGeofenceId,\n\tGeofenceInput,\n\tGeofenceOptions,\n\tSaveGeofencesResults,\n\tGeofence,\n\tListGeofenceOptions,\n\tListGeofenceResults,\n\tDeleteGeofencesResults,\n} from './types';\n\nconst logger = new Logger('Geo');\n\nconst DEFAULT_PROVIDER = 'AmazonLocationService';\nexport class GeoClass {\n\tstatic MODULE = 'Geo';\n\t/**\n\t * @private\n\t */\n\tprivate _config: GeoConfig;\n\tprivate _pluggables: GeoProvider[];\n\n\tconstructor() {\n\t\tthis._config = {};\n\t\tthis._pluggables = [];\n\t\tlogger.debug('Geo Options', this._config);\n\t}\n\n\t/**\n\t * get the name of the module category\n\t * @returns {string} name of the module category\n\t */\n\tpublic getModuleName() {\n\t\treturn GeoClass.MODULE;\n\t}\n\n\t/**\n\t * add plugin into Geo category\n\t * @param {Object} pluggable - an instance of the plugin\n\t */\n\tpublic addPluggable(pluggable: GeoProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'Geo') {\n\t\t\tthis._pluggables.push(pluggable);\n\t\t\tconst config = pluggable.configure(\n\t\t\t\tthis._config[pluggable.getProviderName()]\n\t\t\t);\n\n\t\t\treturn config;\n\t\t}\n\t}\n\n\t/**\n\t * Get the plugin object\n\t * @param providerName - the name of the plugin\n\t */\n\tpublic getPluggable(providerName: string) {\n\t\tconst pluggable = this._pluggables.find(\n\t\t\tpluggable => pluggable.getProviderName() === providerName\n\t\t);\n\t\tif (pluggable === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName', providerName);\n\t\t\tthrow new Error('No plugin found in Geo for the provider');\n\t\t} else return pluggable;\n\t}\n\n\t/**\n\t * Remove the plugin object\n\t * @param providerName - the name of the plugin\n\t */\n\tpublic removePluggable(providerName: string) {\n\t\tthis._pluggables = this._pluggables.filter(\n\t\t\tpluggable => pluggable.getProviderName() !== providerName\n\t\t);\n\t\treturn;\n\t}\n\n\t/**\n\t * Configure Geo\n\t * @param {Object} config - Configuration object for Geo\n\t * @return {Object} - Current configuration\n\t */\n\tconfigure(config?) {\n\t\tlogger.debug('configure Geo');\n\n\t\tif (!config) return this._config;\n\n\t\tconst amplifyConfig = parseMobileHubConfig(config);\n\t\tthis._config = Object.assign({}, this._config, amplifyConfig.Geo, config);\n\n\t\tthis._pluggables.forEach(pluggable => {\n\t\t\tpluggable.configure(this._config[pluggable.getProviderName()]);\n\t\t});\n\n\t\tif (this._pluggables.length === 0) {\n\t\t\tthis.addPluggable(new AmazonLocationServiceProvider());\n\t\t}\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * Get the map resources that are currently available through the provider\n\t * @param {string} provider\n\t * @returns - Array of available map resources\n\t */\n\tpublic getAvailableMaps(provider = DEFAULT_PROVIDER): MapStyle[] {\n\t\tconst prov = this.getPluggable(provider);\n\n\t\treturn prov.getAvailableMaps();\n\t}\n\n\t/**\n\t * Get the map resource set as default in amplify config\n\t * @param {string} provider\n\t * @returns - Map resource set as the default in amplify config\n\t */\n\tpublic getDefaultMap(provider = DEFAULT_PROVIDER): MapStyle {\n\t\tconst prov = this.getPluggable(provider);\n\n\t\treturn prov.getDefaultMap();\n\t}\n\n\t/**\n\t * Search by text input with optional parameters\n\t * @param  {string} text - The text string that is to be searched for\n\t * @param  {SearchByTextOptions} options? - Optional parameters to the search\n\t * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n\t */\n\tpublic async searchByText(\n\t\ttext: string,\n\t\toptions?: SearchByTextOptions\n\t): Promise<Place[]> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\ttry {\n\t\t\treturn await prov.searchByText(text, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse geocoding search via a coordinate point on the map\n\t * @param coordinates - Coordinates array for the search input\n\t * @param options - Options parameters for the search\n\t * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n\t */\n\tpublic async searchByCoordinates(\n\t\tcoordinates: Coordinates,\n\t\toptions?: SearchByCoordinatesOptions\n\t): Promise<Place> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\tconst [lng, lat] = coordinates;\n\t\ttry {\n\t\t\tvalidateCoordinates(lng, lat);\n\t\t\treturn await prov.searchByCoordinates(coordinates, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Create geofences\n\t * @param geofences - Single or array of geofence objects to create\n\t * @param options? - Optional parameters for creating geofences\n\t * @returns {Promise<SaveGeofencesResults>} - Promise that resolves to an object with:\n\t *   successes: list of geofences successfully created\n\t *   errors: list of geofences that failed to create\n\t */\n\tpublic async saveGeofences(\n\t\tgeofences: GeofenceInput | GeofenceInput[],\n\t\toptions?: GeofenceOptions\n\t): Promise<SaveGeofencesResults> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\t// If single geofence input, make it an array for batch call\n\t\tlet geofenceInputArray;\n\t\tif (!Array.isArray(geofences)) {\n\t\t\tgeofenceInputArray = [geofences];\n\t\t} else {\n\t\t\tgeofenceInputArray = geofences;\n\t\t}\n\n\t\ttry {\n\t\t\treturn await prov.saveGeofences(geofenceInputArray, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Get a single geofence by geofenceId\n\t * @param geofenceId: GeofenceId - The string id of the geofence to get\n\t * @param options?: GeofenceOptions - Optional parameters for getting a geofence\n\t * @returns Promise<Geofence> - Promise that resolves to a geofence object\n\t */\n\tpublic async getGeofence(\n\t\tgeofenceId: GeofenceId,\n\t\toptions?: GeofenceOptions\n\t): Promise<Geofence> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\ttry {\n\t\t\treturn await prov.getGeofence(geofenceId, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * List geofences\n\t * @param  options?: ListGeofenceOptions\n\t * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n\t *   entries: list of geofences - 100 geofences are listed per page\n\t *   nextToken: token for next page of geofences\n\t */\n\tpublic async listGeofences(\n\t\toptions?: ListGeofenceOptions\n\t): Promise<ListGeofenceResults> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\ttry {\n\t\t\treturn await prov.listGeofences(options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Delete geofences\n\t * @param geofenceIds: string|string[]\n\t * @param options?: GeofenceOptions\n\t * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n\t *  successes: list of geofences successfully deleted\n\t *  errors: list of geofences that failed to delete\n\t */\n\tpublic async deleteGeofences(\n\t\tgeofenceIds: string | string[],\n\t\toptions?: GeofenceOptions\n\t): Promise<DeleteGeofencesResults> {\n\t\tconst { providerName = DEFAULT_PROVIDER } = options || {};\n\t\tconst prov = this.getPluggable(providerName);\n\n\t\t// If single geofence input, make it an array for batch call\n\t\tlet geofenceIdsInputArray;\n\t\tif (!Array.isArray(geofenceIds)) {\n\t\t\tgeofenceIdsInputArray = [geofenceIds];\n\t\t} else {\n\t\t\tgeofenceIdsInputArray = geofenceIds;\n\t\t}\n\n\t\t//  Delete geofences\n\t\ttry {\n\t\t\treturn await prov.deleteGeofences(geofenceIdsInputArray, options);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nexport const Geo = new GeoClass();\nAmplify.register(Geo);\n"]},"metadata":{},"sourceType":"module"}