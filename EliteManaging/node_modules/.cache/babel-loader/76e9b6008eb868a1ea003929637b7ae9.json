{"ast":null,"code":"/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeServiceClient, PostTextCommand, PostContentCommand } from '@aws-sdk/client-lex-runtime-service';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/convert';\nvar logger = new Logger('AWSLexProvider');\n\nvar AWSLexProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSLexProvider, _super);\n\n  function AWSLexProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n\n  AWSLexProvider.prototype.getProviderName = function () {\n    return 'AWSLexProvider';\n  };\n\n  AWSLexProvider.prototype.reportBotStatus = function (data, botname) {\n    var _this = this; // Check if state is fulfilled to resolve onFullfilment promise\n\n\n    logger.debug('postContent state', data.dialogState);\n\n    if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](null, {\n            slots: data.slots\n          });\n        }, 0);\n      }\n\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, {\n            slots: data.slots\n          });\n        }, 0);\n      }\n    }\n\n    if (data.dialogState === 'Failed') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname]('Bot conversation failed');\n        }, 0);\n      }\n\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete('Bot conversation failed');\n        }, 0);\n      }\n    }\n  };\n\n  AWSLexProvider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, params, postTextCommand, data, err_1, content, messageType, postContentCommand, data, audioArray, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._config[botname]) {\n              return [2\n              /*return*/\n              , Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _a.sent();\n\n            if (!credentials) {\n              return [2\n              /*return*/\n              , Promise.reject('No credentials')];\n            }\n\n            this.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            if (!(typeof message === 'string')) return [3\n            /*break*/\n            , 6];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              inputText: message,\n              userId: credentials.identityId\n            };\n            logger.debug('postText to lex', message);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            postTextCommand = new PostTextCommand(params);\n            return [4\n            /*yield*/\n            , this.lexRuntimeServiceClient.send(postTextCommand)];\n\n          case 3:\n            data = _a.sent();\n            this.reportBotStatus(data, botname);\n            return [2\n            /*return*/\n            , data];\n\n          case 4:\n            err_1 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 5:\n            return [3\n            /*break*/\n            , 11];\n\n          case 6:\n            content = message.content, messageType = message.options.messageType;\n\n            if (messageType === 'voice') {\n              params = {\n                botAlias: this._config[botname].alias,\n                botName: botname,\n                contentType: 'audio/x-l16; sample-rate=16000',\n                inputStream: content,\n                userId: credentials.identityId,\n                accept: 'audio/mpeg'\n              };\n            } else {\n              params = {\n                botAlias: this._config[botname].alias,\n                botName: botname,\n                contentType: 'text/plain; charset=utf-8',\n                inputStream: content,\n                userId: credentials.identityId,\n                accept: 'audio/mpeg'\n              };\n            }\n\n            logger.debug('postContent to lex', message);\n            _a.label = 7;\n\n          case 7:\n            _a.trys.push([7, 10,, 11]);\n\n            postContentCommand = new PostContentCommand(params);\n            return [4\n            /*yield*/\n            , this.lexRuntimeServiceClient.send(postContentCommand)];\n\n          case 8:\n            data = _a.sent();\n            return [4\n            /*yield*/\n            , convert(data.audioStream)];\n\n          case 9:\n            audioArray = _a.sent();\n            this.reportBotStatus(data, botname);\n            return [2\n            /*return*/\n            , __assign(__assign({}, data), {\n              audioStream: audioArray\n            })];\n\n          case 10:\n            err_2 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_2)];\n\n          case 11:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSLexProvider.prototype.onComplete = function (botname, callback) {\n    if (!this._config[botname]) {\n      throw new ErrorEvent('Bot ' + botname + ' does not exist');\n    }\n\n    this._botsCompleteCallback[botname] = callback;\n  };\n\n  return AWSLexProvider;\n}(AbstractInteractionsProvider);\n\nexport { AWSLexProvider };","map":{"version":3,"mappings":"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","names":["AbstractInteractionsProvider","LexRuntimeServiceClient","PostTextCommand","PostContentCommand","ConsoleLogger","Logger","Credentials","getAmplifyUserAgent","convert","logger","__extends","options","_super","_this","_botsCompleteCallback","AWSLexProvider","data","botname","debug","dialogState","setTimeout","slots","_config","onComplete","message","Promise","reject","get","credentials","_a","lexRuntimeServiceClient","region","customUserAgent","params","botAlias","alias","botName","inputText","userId","identityId","postTextCommand","send","reportBotStatus","err_1","content","messageType","contentType","inputStream","accept","postContentCommand","audioStream","audioArray","err_2","callback","ErrorEvent"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-amplify\\interactions\\src\\Providers\\AWSLexProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport {\n\tInteractionsOptions,\n\tInteractionsResponse,\n\tInteractionsMessage,\n} from '../types';\nimport {\n\tLexRuntimeServiceClient,\n\tPostTextCommand,\n\tPostContentCommand,\n} from '@aws-sdk/client-lex-runtime-service';\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/convert';\n\nconst logger = new Logger('AWSLexProvider');\n\nexport class AWSLexProvider extends AbstractInteractionsProvider {\n\tprivate lexRuntimeServiceClient: LexRuntimeServiceClient;\n\tprivate _botsCompleteCallback: object;\n\n\tconstructor(options: InteractionsOptions = {}) {\n\t\tsuper(options);\n\t\tthis._botsCompleteCallback = {};\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AWSLexProvider';\n\t}\n\n\treportBotStatus(data, botname) {\n\t\t// Check if state is fulfilled to resolve onFullfilment promise\n\t\tlogger.debug('postContent state', data.dialogState);\n\t\tif (\n\t\t\tdata.dialogState === 'ReadyForFulfillment' ||\n\t\t\tdata.dialogState === 'Fulfilled'\n\t\t) {\n\t\t\tif (typeof this._botsCompleteCallback[botname] === 'function') {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() =>\n\t\t\t\t\t\tthis._botsCompleteCallback[botname](null, { slots: data.slots }),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis._config &&\n\t\t\t\ttypeof this._config[botname].onComplete === 'function'\n\t\t\t) {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => this._config[botname].onComplete(null, { slots: data.slots }),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (data.dialogState === 'Failed') {\n\t\t\tif (typeof this._botsCompleteCallback[botname] === 'function') {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => this._botsCompleteCallback[botname]('Bot conversation failed'),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis._config &&\n\t\t\t\ttypeof this._config[botname].onComplete === 'function'\n\t\t\t) {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => this._config[botname].onComplete('Bot conversation failed'),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync sendMessage(\n\t\tbotname: string,\n\t\tmessage: string | InteractionsMessage\n\t): Promise<InteractionsResponse> {\n\t\tif (!this._config[botname]) {\n\t\t\treturn Promise.reject('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\n\t\tthis.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n\t\t\tregion: this._config[botname].region,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet params;\n\t\tif (typeof message === 'string') {\n\t\t\tparams = {\n\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\tbotName: botname,\n\t\t\t\tinputText: message,\n\t\t\t\tuserId: credentials.identityId,\n\t\t\t};\n\n\t\t\tlogger.debug('postText to lex', message);\n\n\t\t\ttry {\n\t\t\t\tconst postTextCommand = new PostTextCommand(params);\n\t\t\t\tconst data = await this.lexRuntimeServiceClient.send(postTextCommand);\n\t\t\t\tthis.reportBotStatus(data, botname);\n\t\t\t\treturn data;\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t} else {\n\t\t\tconst {\n\t\t\t\tcontent,\n\t\t\t\toptions: { messageType },\n\t\t\t} = message;\n\t\t\tif (messageType === 'voice') {\n\t\t\t\tparams = {\n\t\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\t\tbotName: botname,\n\t\t\t\t\tcontentType: 'audio/x-l16; sample-rate=16000',\n\t\t\t\t\tinputStream: content,\n\t\t\t\t\tuserId: credentials.identityId,\n\t\t\t\t\taccept: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tparams = {\n\t\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\t\tbotName: botname,\n\t\t\t\t\tcontentType: 'text/plain; charset=utf-8',\n\t\t\t\t\tinputStream: content,\n\t\t\t\t\tuserId: credentials.identityId,\n\t\t\t\t\taccept: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t}\n\t\t\tlogger.debug('postContent to lex', message);\n\t\t\ttry {\n\t\t\t\tconst postContentCommand = new PostContentCommand(params);\n\t\t\t\tconst data = await this.lexRuntimeServiceClient.send(\n\t\t\t\t\tpostContentCommand\n\t\t\t\t);\n\t\t\t\tconst audioArray = await convert(data.audioStream);\n\t\t\t\tthis.reportBotStatus(data, botname);\n\t\t\t\treturn { ...data, ...{ audioStream: audioArray } };\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t}\n\t}\n\n\tonComplete(botname: string, callback) {\n\t\tif (!this._config[botname]) {\n\t\t\tthrow new ErrorEvent('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tthis._botsCompleteCallback[botname] = callback;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}