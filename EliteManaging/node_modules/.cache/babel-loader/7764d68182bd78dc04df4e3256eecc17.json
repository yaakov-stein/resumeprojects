{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DetectTextRequest, DetectTextResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1DetectTextCommand, serializeAws_json1_1DetectTextCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Detects text in the input image and converts it into machine-readable text.</p>\n *          <p>Pass the input image as base64-encoded image bytes or as a reference to an image in an\n *       Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations, you must pass it as a\n *       reference to an image in an Amazon S3 bucket. For the AWS CLI, passing image bytes is not\n *       supported. The image must be either a .png or .jpeg formatted file. </p>\n *          <p>The <code>DetectText</code> operation returns text in an array of <a>TextDetection</a> elements, <code>TextDetections</code>. Each\n *         <code>TextDetection</code> element provides information about a single word or line of text\n *       that was detected in the image. </p>\n *          <p>A word is one or more ISO basic latin script characters that are not separated by spaces.\n *         <code>DetectText</code> can detect up to 50 words in an image.</p>\n *          <p>A line is a string of equally spaced words. A line isn't necessarily a complete\n *       sentence. For example, a driver's license number is detected as a line. A line ends when there\n *       is no aligned text after it. Also, a line ends when there is a large gap between words,\n *       relative to the length of the words. This means, depending on the gap between words, Amazon Rekognition\n *       may detect multiple lines in text aligned in the same direction. Periods don't represent the\n *       end of a line. If a sentence spans multiple lines, the <code>DetectText</code> operation\n *       returns multiple lines.</p>\n *          <p>To determine whether a <code>TextDetection</code> element is a line of text or a word,\n *       use the <code>TextDetection</code> object <code>Type</code> field. </p>\n *          <p>To be detected, text must be within +/- 90 degrees orientation of the horizontal axis.</p>\n *\n *          <p>For more information, see DetectText in the Amazon Rekognition Developer Guide.</p>\n */\n\nvar DetectTextCommand =\n/** @class */\nfunction (_super) {\n  __extends(DetectTextCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function DetectTextCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  DetectTextCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"DetectTextCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DetectTextRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DetectTextResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  DetectTextCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1DetectTextCommand(input, context);\n  };\n\n  DetectTextCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1DetectTextCommand(output, context);\n  };\n\n  return DetectTextCommand;\n}($Command);\n\nexport { DetectTextCommand };","map":{"version":3,"mappings":";AACA,SAASA,iBAAT,EAA4BC,kBAA5B,QAAsD,oBAAtD;AACA,SACEC,uCADF,EAEEC,qCAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AAAA;AAAA;EAAuCC,qCAAvC,CAKE;EACA;;;EAEA,2BAAqBC,KAArB,EAAkD;IAAlD,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAA6B,CAGhD;EACD;EAED;;;;;EAGAC,0DACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,mBAAnB;IACA,IAAMC,WAAW,GAAG,mBAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAEzB,iBAAiB,CAAC0B,kBAJY;MAKvDC,wBAAwB,EAAE1B,kBAAkB,CAACyB;IALU,CAAzD;IAOQ,kBAAc,GAAKb,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACS,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDf,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,wCAAR,UAAkBH,KAAlB,EAAiDuB,OAAjD,EAAwE;IACtE,OAAO5B,qCAAqC,CAACK,KAAD,EAAQuB,OAAR,CAA5C;EACD,CAFO;;EAIApB,0CAAR,UAAoBqB,MAApB,EAA4CD,OAA5C,EAAmE;IACjE,OAAO7B,uCAAuC,CAAC8B,MAAD,EAASD,OAAT,CAA9C;EACD,CAFO;;EAMV;AAAC,CAtDD,CAAuCzB,QAAvC","names":["DetectTextRequest","DetectTextResponse","deserializeAws_json1_1DetectTextCommand","serializeAws_json1_1DetectTextCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","DetectTextCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-rekognition\\commands\\DetectTextCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { DetectTextRequest, DetectTextResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1DetectTextCommand,\n  serializeAws_json1_1DetectTextCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type DetectTextCommandInput = DetectTextRequest;\nexport type DetectTextCommandOutput = DetectTextResponse & __MetadataBearer;\n\n/**\n * <p>Detects text in the input image and converts it into machine-readable text.</p>\n *          <p>Pass the input image as base64-encoded image bytes or as a reference to an image in an\n *       Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations, you must pass it as a\n *       reference to an image in an Amazon S3 bucket. For the AWS CLI, passing image bytes is not\n *       supported. The image must be either a .png or .jpeg formatted file. </p>\n *          <p>The <code>DetectText</code> operation returns text in an array of <a>TextDetection</a> elements, <code>TextDetections</code>. Each\n *         <code>TextDetection</code> element provides information about a single word or line of text\n *       that was detected in the image. </p>\n *          <p>A word is one or more ISO basic latin script characters that are not separated by spaces.\n *         <code>DetectText</code> can detect up to 50 words in an image.</p>\n *          <p>A line is a string of equally spaced words. A line isn't necessarily a complete\n *       sentence. For example, a driver's license number is detected as a line. A line ends when there\n *       is no aligned text after it. Also, a line ends when there is a large gap between words,\n *       relative to the length of the words. This means, depending on the gap between words, Amazon Rekognition\n *       may detect multiple lines in text aligned in the same direction. Periods don't represent the\n *       end of a line. If a sentence spans multiple lines, the <code>DetectText</code> operation\n *       returns multiple lines.</p>\n *          <p>To determine whether a <code>TextDetection</code> element is a line of text or a word,\n *       use the <code>TextDetection</code> object <code>Type</code> field. </p>\n *          <p>To be detected, text must be within +/- 90 degrees orientation of the horizontal axis.</p>\n *\n *          <p>For more information, see DetectText in the Amazon Rekognition Developer Guide.</p>\n */\nexport class DetectTextCommand extends $Command<\n  DetectTextCommandInput,\n  DetectTextCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: DetectTextCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<DetectTextCommandInput, DetectTextCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"DetectTextCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: DetectTextRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DetectTextResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: DetectTextCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1DetectTextCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<DetectTextCommandOutput> {\n    return deserializeAws_json1_1DetectTextCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}