{"ast":null,"code":"import { __values } from \"tslib\";\nimport { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { requestTimeout } from \"./request-timeout\";\n\nvar FetchHttpHandler =\n/** @class */\nfunction () {\n  function FetchHttpHandler(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        requestTimeout = _b.requestTimeout;\n\n    this.requestTimeout = requestTimeout;\n  }\n\n  FetchHttpHandler.prototype.destroy = function () {// Do nothing. TLS and HTTP/2 connection pooling is handled by the browser.\n  };\n\n  FetchHttpHandler.prototype.handle = function (request, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        abortSignal = _b.abortSignal;\n\n    var requestTimeoutInMs = this.requestTimeout; // if the request was already aborted, prevent doing extra work\n\n    if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n      var abortError = new Error(\"Request aborted\");\n      abortError.name = \"AbortError\";\n      return Promise.reject(abortError);\n    }\n\n    var path = request.path;\n\n    if (request.query) {\n      var queryString = buildQueryString(request.query);\n\n      if (queryString) {\n        path += \"?\" + queryString;\n      }\n    }\n\n    var port = request.port,\n        method = request.method;\n    var url = request.protocol + \"//\" + request.hostname + (port ? \":\" + port : \"\") + path; // Request constructor doesn't allow GET/HEAD request with body\n    // ref: https://github.com/whatwg/fetch/issues/551\n\n    var body = method === \"GET\" || method === \"HEAD\" ? undefined : request.body;\n    var requestOptions = {\n      body: body,\n      headers: new Headers(request.headers),\n      method: method\n    }; // some browsers support abort signal\n\n    if (typeof AbortController !== \"undefined\") {\n      requestOptions[\"signal\"] = abortSignal;\n    }\n\n    var fetchRequest = new Request(url, requestOptions);\n    var raceOfPromises = [fetch(fetchRequest).then(function (response) {\n      var e_1, _a;\n\n      var fetchHeaders = response.headers;\n      var transformedHeaders = {};\n\n      try {\n        for (var _b = __values(fetchHeaders.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var pair = _c.value;\n          transformedHeaders[pair[0]] = pair[1];\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      var hasReadableStream = response.body !== undefined; // Return the response with buffered body\n\n      if (!hasReadableStream) {\n        return response.blob().then(function (body) {\n          return {\n            response: new HttpResponse({\n              headers: transformedHeaders,\n              statusCode: response.status,\n              body: body\n            })\n          };\n        });\n      } // Return the response with streaming body\n\n\n      return {\n        response: new HttpResponse({\n          headers: transformedHeaders,\n          statusCode: response.status,\n          body: response.body\n        })\n      };\n    }), requestTimeout(requestTimeoutInMs)];\n\n    if (abortSignal) {\n      raceOfPromises.push(new Promise(function (resolve, reject) {\n        abortSignal.onabort = function () {\n          var abortError = new Error(\"Request aborted\");\n          abortError.name = \"AbortError\";\n          reject(abortError);\n        };\n      }));\n    }\n\n    return Promise.race(raceOfPromises);\n  };\n\n  return FetchHttpHandler;\n}();\n\nexport { FetchHttpHandler };","map":{"version":3,"mappings":"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","names":["HttpResponse","buildQueryString","requestTimeout","_a","_b","FetchHttpHandler","request","abortSignal","requestTimeoutInMs","aborted","abortError","Error","name","Promise","reject","path","query","queryString","method","url","protocol","hostname","port","body","undefined","requestOptions","headers","Headers","AbortController","fetchRequest","Request","raceOfPromises","fetch","then","response","fetchHeaders","transformedHeaders","entries","_c","pair","hasReadableStream","blob","statusCode","status","push","resolve","onabort","race"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-sdk\\fetch-http-handler\\src\\fetch-http-handler.ts"],"sourcesContent":["import { HttpHandler, HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { HeaderBag, HttpHandlerOptions } from \"@aws-sdk/types\";\n\nimport { requestTimeout } from \"./request-timeout\";\n\ndeclare let AbortController: any;\n\n/**\n * Represents the http options that can be passed to a browser http client.\n */\nexport interface FetchHttpHandlerOptions {\n  /**\n   * The number of milliseconds a request can take before being automatically\n   * terminated.\n   */\n  requestTimeout?: number;\n}\n\nexport class FetchHttpHandler implements HttpHandler {\n  private readonly requestTimeout?: number;\n\n  constructor({ requestTimeout }: FetchHttpHandlerOptions = {}) {\n    this.requestTimeout = requestTimeout;\n  }\n\n  destroy(): void {\n    // Do nothing. TLS and HTTP/2 connection pooling is handled by the browser.\n  }\n\n  handle(request: HttpRequest, { abortSignal }: HttpHandlerOptions = {}): Promise<{ response: HttpResponse }> {\n    const requestTimeoutInMs = this.requestTimeout;\n\n    // if the request was already aborted, prevent doing extra work\n    if (abortSignal?.aborted) {\n      const abortError = new Error(\"Request aborted\");\n      abortError.name = \"AbortError\";\n      return Promise.reject(abortError);\n    }\n\n    let path = request.path;\n    if (request.query) {\n      const queryString = buildQueryString(request.query);\n      if (queryString) {\n        path += `?${queryString}`;\n      }\n    }\n\n    const { port, method } = request;\n    const url = `${request.protocol}//${request.hostname}${port ? `:${port}` : \"\"}${path}`;\n    // Request constructor doesn't allow GET/HEAD request with body\n    // ref: https://github.com/whatwg/fetch/issues/551\n    const body = method === \"GET\" || method === \"HEAD\" ? undefined : request.body;\n    const requestOptions: RequestInit = {\n      body,\n      headers: new Headers(request.headers),\n      method: method,\n    };\n\n    // some browsers support abort signal\n    if (typeof AbortController !== \"undefined\") {\n      (requestOptions as any)[\"signal\"] = abortSignal;\n    }\n\n    const fetchRequest = new Request(url, requestOptions);\n    const raceOfPromises = [\n      fetch(fetchRequest).then((response) => {\n        const fetchHeaders: any = response.headers;\n        const transformedHeaders: HeaderBag = {};\n\n        for (const pair of <Array<string[]>>fetchHeaders.entries()) {\n          transformedHeaders[pair[0]] = pair[1];\n        }\n\n        const hasReadableStream = response.body !== undefined;\n\n        // Return the response with buffered body\n        if (!hasReadableStream) {\n          return response.blob().then((body) => ({\n            response: new HttpResponse({\n              headers: transformedHeaders,\n              statusCode: response.status,\n              body,\n            }),\n          }));\n        }\n        // Return the response with streaming body\n        return {\n          response: new HttpResponse({\n            headers: transformedHeaders,\n            statusCode: response.status,\n            body: response.body,\n          }),\n        };\n      }),\n      requestTimeout(requestTimeoutInMs),\n    ];\n    if (abortSignal) {\n      raceOfPromises.push(\n        new Promise<never>((resolve, reject) => {\n          abortSignal.onabort = () => {\n            const abortError = new Error(\"Request aborted\");\n            abortError.name = \"AbortError\";\n            reject(abortError);\n          };\n        })\n      );\n    }\n    return Promise.race(raceOfPromises);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}