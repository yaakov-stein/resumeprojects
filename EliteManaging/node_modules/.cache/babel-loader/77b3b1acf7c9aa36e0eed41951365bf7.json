{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { GraphQLAuthError } from '@aws-amplify/api';\nimport { Logger } from '@aws-amplify/core';\nimport { isEnumFieldType, isGraphQLScalarType, isPredicateObj, isSchemaModel, isTargetNameAssociation, isNonModelFieldType, OpType, ModelOperation } from '../types';\nimport { exhaustiveCheck } from '../util';\nvar logger = new Logger('DataStore');\nvar GraphQLOperationType;\n\n(function (GraphQLOperationType) {\n  GraphQLOperationType[\"LIST\"] = \"query\";\n  GraphQLOperationType[\"CREATE\"] = \"mutation\";\n  GraphQLOperationType[\"UPDATE\"] = \"mutation\";\n  GraphQLOperationType[\"DELETE\"] = \"mutation\";\n  GraphQLOperationType[\"GET\"] = \"query\";\n})(GraphQLOperationType || (GraphQLOperationType = {}));\n\nexport var TransformerMutationType;\n\n(function (TransformerMutationType) {\n  TransformerMutationType[\"CREATE\"] = \"Create\";\n  TransformerMutationType[\"UPDATE\"] = \"Update\";\n  TransformerMutationType[\"DELETE\"] = \"Delete\";\n  TransformerMutationType[\"GET\"] = \"Get\";\n})(TransformerMutationType || (TransformerMutationType = {}));\n\nvar dummyMetadata = {\n  _version: undefined,\n  _lastChangedAt: undefined,\n  _deleted: undefined\n};\nvar metadataFields = Object.keys(dummyMetadata);\nexport function getMetadataFields() {\n  return metadataFields;\n}\nexport function generateSelectionSet(namespace, modelDefinition) {\n  var scalarFields = getScalarFields(modelDefinition);\n  var nonModelFields = getNonModelFields(namespace, modelDefinition);\n  var implicitOwnerField = getImplicitOwnerField(modelDefinition, scalarFields);\n  var scalarAndMetadataFields = Object.values(scalarFields).map(function (_a) {\n    var name = _a.name;\n    return name;\n  }).concat(implicitOwnerField).concat(nonModelFields);\n\n  if (isSchemaModel(modelDefinition)) {\n    scalarAndMetadataFields = scalarAndMetadataFields.concat(getMetadataFields()).concat(getConnectionFields(modelDefinition));\n  }\n\n  var result = scalarAndMetadataFields.join('\\n');\n  return result;\n}\n\nfunction getImplicitOwnerField(modelDefinition, scalarFields) {\n  var ownerFields = getOwnerFields(modelDefinition);\n\n  if (!scalarFields.owner && ownerFields.includes('owner')) {\n    return ['owner'];\n  }\n\n  return [];\n}\n\nfunction getOwnerFields(modelDefinition) {\n  var ownerFields = [];\n\n  if (isSchemaModel(modelDefinition) && modelDefinition.attributes) {\n    modelDefinition.attributes.forEach(function (attr) {\n      if (attr.properties && attr.properties.rules) {\n        var rule = attr.properties.rules.find(function (rule) {\n          return rule.allow === 'owner';\n        });\n\n        if (rule && rule.ownerField) {\n          ownerFields.push(rule.ownerField);\n        }\n      }\n    });\n  }\n\n  return ownerFields;\n}\n\nfunction getScalarFields(modelDefinition) {\n  var fields = modelDefinition.fields;\n  var result = Object.values(fields).filter(function (field) {\n    if (isGraphQLScalarType(field.type) || isEnumFieldType(field.type)) {\n      return true;\n    }\n\n    return false;\n  }).reduce(function (acc, field) {\n    acc[field.name] = field;\n    return acc;\n  }, {});\n  return result;\n}\n\nfunction getConnectionFields(modelDefinition) {\n  var result = [];\n  Object.values(modelDefinition.fields).filter(function (_a) {\n    var association = _a.association;\n    return association && Object.keys(association).length;\n  }).forEach(function (_a) {\n    var name = _a.name,\n        association = _a.association;\n    var connectionType = association.connectionType;\n\n    switch (connectionType) {\n      case 'HAS_ONE':\n      case 'HAS_MANY':\n        // Intentionally blank\n        break;\n\n      case 'BELONGS_TO':\n        if (isTargetNameAssociation(association)) {\n          result.push(name + \" { id _deleted }\");\n        }\n\n        break;\n\n      default:\n        exhaustiveCheck(connectionType);\n    }\n  });\n  return result;\n}\n\nfunction getNonModelFields(namespace, modelDefinition) {\n  var result = [];\n  Object.values(modelDefinition.fields).forEach(function (_a) {\n    var name = _a.name,\n        type = _a.type;\n\n    if (isNonModelFieldType(type)) {\n      var typeDefinition = namespace.nonModels[type.nonModel];\n      var scalarFields = Object.values(getScalarFields(typeDefinition)).map(function (_a) {\n        var name = _a.name;\n        return name;\n      });\n      var nested_1 = [];\n      Object.values(typeDefinition.fields).forEach(function (field) {\n        var type = field.type,\n            name = field.name;\n\n        if (isNonModelFieldType(type)) {\n          var typeDefinition_1 = namespace.nonModels[type.nonModel];\n          nested_1.push(name + \" { \" + generateSelectionSet(namespace, typeDefinition_1) + \" }\");\n        }\n      });\n      result.push(name + \" { \" + scalarFields.join(' ') + \" \" + nested_1.join(' ') + \" }\");\n    }\n  });\n  return result;\n}\n\nexport function getAuthorizationRules(modelDefinition) {\n  // Searching for owner authorization on attributes\n  var authConfig = [].concat(modelDefinition.attributes).find(function (attr) {\n    return attr && attr.type === 'auth';\n  });\n  var _a = (authConfig || {}).properties,\n      _b = (_a === void 0 ? {} : _a).rules,\n      rules = _b === void 0 ? [] : _b;\n  var resultRules = []; // Multiple rules can be declared for allow: owner\n\n  rules.forEach(function (rule) {\n    // setting defaults for backwards compatibility with old cli\n    var _a = rule.identityClaim,\n        identityClaim = _a === void 0 ? 'cognito:username' : _a,\n        _b = rule.ownerField,\n        ownerField = _b === void 0 ? 'owner' : _b,\n        _c = rule.operations,\n        operations = _c === void 0 ? ['create', 'update', 'delete', 'read'] : _c,\n        _d = rule.provider,\n        provider = _d === void 0 ? 'userPools' : _d,\n        _e = rule.groupClaim,\n        groupClaim = _e === void 0 ? 'cognito:groups' : _e,\n        _f = rule.allow,\n        authStrategy = _f === void 0 ? 'iam' : _f,\n        _g = rule.groups,\n        groups = _g === void 0 ? [] : _g;\n    var isReadAuthorized = operations.includes('read');\n    var isOwnerAuth = authStrategy === 'owner';\n\n    if (!isReadAuthorized && !isOwnerAuth) {\n      return;\n    }\n\n    var authRule = {\n      identityClaim: identityClaim,\n      ownerField: ownerField,\n      provider: provider,\n      groupClaim: groupClaim,\n      authStrategy: authStrategy,\n      groups: groups,\n      areSubscriptionsPublic: false\n    };\n\n    if (isOwnerAuth) {\n      // look for the subscription level override\n      // only pay attention to the public level\n      var modelConfig = [].concat(modelDefinition.attributes).find(function (attr) {\n        return attr && attr.type === 'model';\n      }); // find the subscriptions level. ON is default\n\n      var _h = (modelConfig || {}).properties,\n          _j = (_h === void 0 ? {} : _h).subscriptions,\n          _k = (_j === void 0 ? {} : _j).level,\n          level = _k === void 0 ? 'on' : _k; // treat subscriptions as public for owner auth with unprotected reads\n      // when `read` is omitted from `operations`\n\n      authRule.areSubscriptionsPublic = !operations.includes('read') || level === 'public';\n    }\n\n    if (isOwnerAuth) {\n      // owner rules has least priority\n      resultRules.push(authRule);\n      return;\n    }\n\n    resultRules.unshift(authRule);\n  });\n  return resultRules;\n}\nexport function buildSubscriptionGraphQLOperation(namespace, modelDefinition, transformerMutationType, isOwnerAuthorization, ownerField) {\n  var selectionSet = generateSelectionSet(namespace, modelDefinition);\n  var typeName = modelDefinition.name,\n      pluralTypeName = modelDefinition.pluralName;\n  var opName = \"on\" + transformerMutationType + typeName;\n  var docArgs = '';\n  var opArgs = '';\n\n  if (isOwnerAuthorization) {\n    docArgs = \"($\" + ownerField + \": String!)\";\n    opArgs = \"(\" + ownerField + \": $\" + ownerField + \")\";\n  }\n\n  return [transformerMutationType, opName, \"subscription operation\" + docArgs + \"{\\n\\t\\t\\t\" + opName + opArgs + \"{\\n\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t}\\n\\t\\t}\"];\n}\nexport function buildGraphQLOperation(namespace, modelDefinition, graphQLOpType) {\n  var selectionSet = generateSelectionSet(namespace, modelDefinition);\n  var typeName = modelDefinition.name,\n      pluralTypeName = modelDefinition.pluralName;\n  var operation;\n  var documentArgs = ' ';\n  var operationArgs = ' ';\n  var transformerMutationType;\n\n  switch (graphQLOpType) {\n    case 'LIST':\n      operation = \"sync\" + pluralTypeName;\n      documentArgs = \"($limit: Int, $nextToken: String, $lastSync: AWSTimestamp, $filter: Model\" + typeName + \"FilterInput)\";\n      operationArgs = '(limit: $limit, nextToken: $nextToken, lastSync: $lastSync, filter: $filter)';\n      selectionSet = \"items {\\n\\t\\t\\t\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tnextToken\\n\\t\\t\\t\\t\\t\\tstartedAt\";\n      break;\n\n    case 'CREATE':\n      operation = \"create\" + typeName;\n      documentArgs = \"($input: Create\" + typeName + \"Input!)\";\n      operationArgs = '(input: $input)';\n      transformerMutationType = TransformerMutationType.CREATE;\n      break;\n\n    case 'UPDATE':\n      operation = \"update\" + typeName;\n      documentArgs = \"($input: Update\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n      operationArgs = '(input: $input, condition: $condition)';\n      transformerMutationType = TransformerMutationType.UPDATE;\n      break;\n\n    case 'DELETE':\n      operation = \"delete\" + typeName;\n      documentArgs = \"($input: Delete\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n      operationArgs = '(input: $input, condition: $condition)';\n      transformerMutationType = TransformerMutationType.DELETE;\n      break;\n\n    case 'GET':\n      operation = \"get\" + typeName;\n      documentArgs = \"($id: ID!)\";\n      operationArgs = '(id: $id)';\n      transformerMutationType = TransformerMutationType.GET;\n      break;\n\n    default:\n      exhaustiveCheck(graphQLOpType);\n  }\n\n  return [[transformerMutationType, operation, GraphQLOperationType[graphQLOpType] + \" operation\" + documentArgs + \"{\\n\\t\\t\" + operation + operationArgs + \"{\\n\\t\\t\\t\" + selectionSet + \"\\n\\t\\t}\\n\\t}\"]];\n}\nexport function createMutationInstanceFromModelOperation(relationships, modelDefinition, opType, model, element, condition, MutationEventConstructor, modelInstanceCreator, id) {\n  var operation;\n\n  switch (opType) {\n    case OpType.INSERT:\n      operation = TransformerMutationType.CREATE;\n      break;\n\n    case OpType.UPDATE:\n      operation = TransformerMutationType.UPDATE;\n      break;\n\n    case OpType.DELETE:\n      operation = TransformerMutationType.DELETE;\n      break;\n\n    default:\n      exhaustiveCheck(opType);\n  } // stringify nested objects of type AWSJSON\n  // this allows us to return parsed JSON to users (see `castInstanceType()` in datastore.ts),\n  // but still send the object correctly over the wire\n\n\n  var replacer = function (k, v) {\n    var isAWSJSON = k && v !== null && typeof v === 'object' && modelDefinition.fields[k] && modelDefinition.fields[k].type === 'AWSJSON';\n\n    if (isAWSJSON) {\n      return JSON.stringify(v);\n    }\n\n    return v;\n  };\n\n  var mutationEvent = modelInstanceCreator(MutationEventConstructor, __assign(__assign({}, id ? {\n    id: id\n  } : {}), {\n    data: JSON.stringify(element, replacer),\n    modelId: element.id,\n    model: model.name,\n    operation: operation,\n    condition: JSON.stringify(condition)\n  }));\n  return mutationEvent;\n}\nexport function predicateToGraphQLCondition(predicate) {\n  var result = {};\n\n  if (!predicate || !Array.isArray(predicate.predicates)) {\n    return result;\n  }\n\n  predicate.predicates.forEach(function (p) {\n    var _a;\n\n    if (isPredicateObj(p)) {\n      var field = p.field,\n          operator = p.operator,\n          operand = p.operand;\n\n      if (field === 'id') {\n        return;\n      }\n\n      result[field] = (_a = {}, _a[operator] = operand, _a);\n    } else {\n      result[p.type] = predicateToGraphQLCondition(p);\n    }\n  });\n  return result;\n}\nexport function predicateToGraphQLFilter(predicatesGroup) {\n  var result = {};\n\n  if (!predicatesGroup || !Array.isArray(predicatesGroup.predicates)) {\n    return result;\n  }\n\n  var type = predicatesGroup.type,\n      predicates = predicatesGroup.predicates;\n  var isList = type === 'and' || type === 'or';\n  result[type] = isList ? [] : {};\n\n  var appendToFilter = function (value) {\n    return isList ? result[type].push(value) : result[type] = value;\n  };\n\n  predicates.forEach(function (predicate) {\n    var _a, _b;\n\n    if (isPredicateObj(predicate)) {\n      var field = predicate.field,\n          operator = predicate.operator,\n          operand = predicate.operand;\n      var gqlField = (_a = {}, _a[field] = (_b = {}, _b[operator] = operand, _b), _a);\n      appendToFilter(gqlField);\n      return;\n    }\n\n    appendToFilter(predicateToGraphQLFilter(predicate));\n  });\n  return result;\n}\nexport function getUserGroupsFromToken(token, rule) {\n  // validate token against groupClaim\n  var userGroups = token[rule.groupClaim] || [];\n\n  if (typeof userGroups === 'string') {\n    var parsedGroups = void 0;\n\n    try {\n      parsedGroups = JSON.parse(userGroups);\n    } catch (e) {\n      parsedGroups = userGroups;\n    }\n\n    userGroups = [].concat(parsedGroups);\n  }\n\n  return userGroups;\n}\nexport function getModelAuthModes(_a) {\n  var authModeStrategy = _a.authModeStrategy,\n      defaultAuthMode = _a.defaultAuthMode,\n      modelName = _a.modelName,\n      schema = _a.schema;\n  return __awaiter(this, void 0, void 0, function () {\n    var operations, modelAuthModes, error_1;\n\n    var _this = this;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          operations = Object.values(ModelOperation);\n          modelAuthModes = {\n            CREATE: [],\n            READ: [],\n            UPDATE: [],\n            DELETE: []\n          };\n          _b.label = 1;\n\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , Promise.all(operations.map(function (operation) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var authModes;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , authModeStrategy({\n                      schema: schema,\n                      modelName: modelName,\n                      operation: operation\n                    })];\n\n                  case 1:\n                    authModes = _a.sent();\n\n                    if (typeof authModes === 'string') {\n                      modelAuthModes[operation] = [authModes];\n                    } else if (Array.isArray(authModes) && authModes.length) {\n                      modelAuthModes[operation] = authModes;\n                    } else {\n                      // Use default auth mode if nothing is returned from authModeStrategy\n                      modelAuthModes[operation] = [defaultAuthMode];\n                    }\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          }))];\n\n        case 2:\n          _b.sent();\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          error_1 = _b.sent();\n          logger.debug(\"Error getting auth modes for model: \" + modelName, error_1);\n          return [3\n          /*break*/\n          , 4];\n\n        case 4:\n          return [2\n          /*return*/\n          , modelAuthModes];\n      }\n    });\n  });\n}\nexport function getForbiddenError(error) {\n  var forbiddenErrorMessages = ['Request failed with status code 401', 'Request failed with status code 403'];\n  var forbiddenError;\n\n  if (error && error.errors) {\n    forbiddenError = error.errors.find(function (err) {\n      return forbiddenErrorMessages.includes(err.message);\n    });\n  } else if (error && error.message) {\n    forbiddenError = error;\n  }\n\n  if (forbiddenError) {\n    return forbiddenError.message;\n  }\n\n  return null;\n}\nexport function getClientSideAuthError(error) {\n  var clientSideAuthErrors = Object.values(GraphQLAuthError);\n  var clientSideError = error && error.message && clientSideAuthErrors.find(function (clientError) {\n    return error.message.includes(clientError);\n  });\n  return clientSideError || null;\n}\nexport function getTokenForCustomAuth(authMode, amplifyConfig) {\n  if (amplifyConfig === void 0) {\n    amplifyConfig = {};\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, functionAuthProvider, token, error_2;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (!(authMode === GRAPHQL_AUTH_MODE.AWS_LAMBDA)) return [3\n          /*break*/\n          , 6];\n          _a = amplifyConfig.authProviders, functionAuthProvider = (_a === void 0 ? {\n            functionAuthProvider: null\n          } : _a).functionAuthProvider;\n          if (!(functionAuthProvider && typeof functionAuthProvider === 'function')) return [3\n          /*break*/\n          , 5];\n          _b.label = 1;\n\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , functionAuthProvider()];\n\n        case 2:\n          token = _b.sent().token;\n          return [2\n          /*return*/\n          , token];\n\n        case 3:\n          error_2 = _b.sent();\n          throw new Error(\"Error retrieving token from `functionAuthProvider`: \" + error_2);\n\n        case 4:\n          return [3\n          /*break*/\n          , 6];\n\n        case 5:\n          // TODO: add docs link once available\n          throw new Error(\"You must provide a `functionAuthProvider` function to `DataStore.configure` when using \" + GRAPHQL_AUTH_MODE.AWS_LAMBDA);\n\n        case 6:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":"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","names":["GRAPHQL_AUTH_MODE","GraphQLAuthError","Logger","isEnumFieldType","isGraphQLScalarType","isPredicateObj","isSchemaModel","isTargetNameAssociation","isNonModelFieldType","OpType","ModelOperation","exhaustiveCheck","logger","GraphQLOperationType","TransformerMutationType","dummyMetadata","_version","undefined","_lastChangedAt","_deleted","metadataFields","Object","keys","getMetadataFields","generateSelectionSet","namespace","modelDefinition","scalarFields","getScalarFields","nonModelFields","getNonModelFields","implicitOwnerField","getImplicitOwnerField","scalarAndMetadataFields","values","map","_a","name","concat","getConnectionFields","result","join","ownerFields","getOwnerFields","owner","includes","attributes","forEach","attr","properties","rules","rule","find","allow","ownerField","push","fields","filter","field","type","reduce","acc","association","length","connectionType","typeDefinition","nonModels","nonModel","nested_1","typeDefinition_1","getAuthorizationRules","authConfig","_b","resultRules","_c","operations","_d","provider","_e","groupClaim","_f","authStrategy","_g","groups","isReadAuthorized","isOwnerAuth","authRule","identityClaim","areSubscriptionsPublic","modelConfig","_j","_k","level","unshift","buildSubscriptionGraphQLOperation","transformerMutationType","isOwnerAuthorization","selectionSet","pluralTypeName","opName","typeName","docArgs","opArgs","buildGraphQLOperation","graphQLOpType","operation","documentArgs","operationArgs","CREATE","UPDATE","DELETE","GET","createMutationInstanceFromModelOperation","relationships","opType","model","element","condition","MutationEventConstructor","modelInstanceCreator","id","INSERT","replacer","k","v","isAWSJSON","JSON","stringify","mutationEvent","__assign","data","modelId","predicateToGraphQLCondition","predicate","Array","isArray","predicates","p","operator","operand","predicateToGraphQLFilter","predicatesGroup","isList","appendToFilter","value","gqlField","getUserGroupsFromToken","token","userGroups","parsedGroups","parse","e","getModelAuthModes","authModeStrategy","defaultAuthMode","modelName","schema","modelAuthModes","READ","Promise","all","authModes","debug","error_1","getForbiddenError","error","forbiddenErrorMessages","forbiddenError","errors","err","message","getClientSideAuthError","clientSideAuthErrors","clientSideError","clientError","getTokenForCustomAuth","authMode","amplifyConfig","AWS_LAMBDA","functionAuthProvider","Error","error_2"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-amplify\\datastore\\src\\sync\\utils.ts"],"sourcesContent":["import { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { GraphQLAuthError } from '@aws-amplify/api';\nimport { Logger } from '@aws-amplify/core';\nimport { ModelInstanceCreator } from '../datastore/datastore';\nimport {\n\tAuthorizationRule,\n\tGraphQLCondition,\n\tGraphQLFilter,\n\tGraphQLField,\n\tisEnumFieldType,\n\tisGraphQLScalarType,\n\tisPredicateObj,\n\tisSchemaModel,\n\tisTargetNameAssociation,\n\tisNonModelFieldType,\n\tModelFields,\n\tModelInstanceMetadata,\n\tOpType,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicatesGroup,\n\tRelationshipType,\n\tSchemaModel,\n\tSchemaNamespace,\n\tSchemaNonModel,\n\tModelOperation,\n\tInternalSchema,\n\tAuthModeStrategy,\n} from '../types';\nimport { exhaustiveCheck } from '../util';\nimport { MutationEvent } from './';\n\nconst logger = new Logger('DataStore');\n\nenum GraphQLOperationType {\n\tLIST = 'query',\n\tCREATE = 'mutation',\n\tUPDATE = 'mutation',\n\tDELETE = 'mutation',\n\tGET = 'query',\n}\n\nexport enum TransformerMutationType {\n\tCREATE = 'Create',\n\tUPDATE = 'Update',\n\tDELETE = 'Delete',\n\tGET = 'Get',\n}\n\nconst dummyMetadata: Omit<ModelInstanceMetadata, 'id'> = {\n\t_version: undefined,\n\t_lastChangedAt: undefined,\n\t_deleted: undefined,\n};\n\nconst metadataFields = <(keyof ModelInstanceMetadata)[]>(\n\tObject.keys(dummyMetadata)\n);\nexport function getMetadataFields(): ReadonlyArray<string> {\n\treturn metadataFields;\n}\n\nexport function generateSelectionSet(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): string {\n\tconst scalarFields = getScalarFields(modelDefinition);\n\tconst nonModelFields = getNonModelFields(namespace, modelDefinition);\n\tconst implicitOwnerField = getImplicitOwnerField(\n\t\tmodelDefinition,\n\t\tscalarFields\n\t);\n\n\tlet scalarAndMetadataFields = Object.values(scalarFields)\n\t\t.map(({ name }) => name)\n\t\t.concat(implicitOwnerField)\n\t\t.concat(nonModelFields);\n\n\tif (isSchemaModel(modelDefinition)) {\n\t\tscalarAndMetadataFields = scalarAndMetadataFields\n\t\t\t.concat(getMetadataFields())\n\t\t\t.concat(getConnectionFields(modelDefinition));\n\t}\n\n\tconst result = scalarAndMetadataFields.join('\\n');\n\n\treturn result;\n}\n\nfunction getImplicitOwnerField(\n\tmodelDefinition: SchemaModel | SchemaNonModel,\n\tscalarFields: ModelFields\n) {\n\tconst ownerFields = getOwnerFields(modelDefinition);\n\n\tif (!scalarFields.owner && ownerFields.includes('owner')) {\n\t\treturn ['owner'];\n\t}\n\treturn [];\n}\n\nfunction getOwnerFields(\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): string[] {\n\tconst ownerFields: string[] = [];\n\tif (isSchemaModel(modelDefinition) && modelDefinition.attributes) {\n\t\tmodelDefinition.attributes.forEach(attr => {\n\t\t\tif (attr.properties && attr.properties.rules) {\n\t\t\t\tconst rule = attr.properties.rules.find(rule => rule.allow === 'owner');\n\t\t\t\tif (rule && rule.ownerField) {\n\t\t\t\t\townerFields.push(rule.ownerField);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\treturn ownerFields;\n}\n\nfunction getScalarFields(\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): ModelFields {\n\tconst { fields } = modelDefinition;\n\n\tconst result = Object.values(fields)\n\t\t.filter(field => {\n\t\t\tif (isGraphQLScalarType(field.type) || isEnumFieldType(field.type)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t})\n\t\t.reduce((acc, field) => {\n\t\t\tacc[field.name] = field;\n\n\t\t\treturn acc;\n\t\t}, {} as ModelFields);\n\n\treturn result;\n}\n\nfunction getConnectionFields(modelDefinition: SchemaModel): string[] {\n\tconst result = [];\n\n\tObject.values(modelDefinition.fields)\n\t\t.filter(({ association }) => association && Object.keys(association).length)\n\t\t.forEach(({ name, association }) => {\n\t\t\tconst { connectionType } = association;\n\n\t\t\tswitch (connectionType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\t// Intentionally blank\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\tif (isTargetNameAssociation(association)) {\n\t\t\t\t\t\tresult.push(`${name} { id _deleted }`);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\texhaustiveCheck(connectionType);\n\t\t\t}\n\t\t});\n\n\treturn result;\n}\n\nfunction getNonModelFields(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): string[] {\n\tconst result = [];\n\n\tObject.values(modelDefinition.fields).forEach(({ name, type }) => {\n\t\tif (isNonModelFieldType(type)) {\n\t\t\tconst typeDefinition = namespace.nonModels![type.nonModel];\n\t\t\tconst scalarFields = Object.values(getScalarFields(typeDefinition)).map(\n\t\t\t\t({ name }) => name\n\t\t\t);\n\n\t\t\tconst nested = [];\n\t\t\tObject.values(typeDefinition.fields).forEach(field => {\n\t\t\t\tconst { type, name } = field;\n\n\t\t\t\tif (isNonModelFieldType(type)) {\n\t\t\t\t\tconst typeDefinition = namespace.nonModels![type.nonModel];\n\n\t\t\t\t\tnested.push(\n\t\t\t\t\t\t`${name} { ${generateSelectionSet(namespace, typeDefinition)} }`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tresult.push(`${name} { ${scalarFields.join(' ')} ${nested.join(' ')} }`);\n\t\t}\n\t});\n\n\treturn result;\n}\n\nexport function getAuthorizationRules(\n\tmodelDefinition: SchemaModel\n): AuthorizationRule[] {\n\t// Searching for owner authorization on attributes\n\tconst authConfig = []\n\t\t.concat(modelDefinition.attributes)\n\t\t.find(attr => attr && attr.type === 'auth');\n\n\tconst { properties: { rules = [] } = {} } = authConfig || {};\n\n\tconst resultRules: AuthorizationRule[] = [];\n\t// Multiple rules can be declared for allow: owner\n\trules.forEach(rule => {\n\t\t// setting defaults for backwards compatibility with old cli\n\t\tconst {\n\t\t\tidentityClaim = 'cognito:username',\n\t\t\townerField = 'owner',\n\t\t\toperations = ['create', 'update', 'delete', 'read'],\n\t\t\tprovider = 'userPools',\n\t\t\tgroupClaim = 'cognito:groups',\n\t\t\tallow: authStrategy = 'iam',\n\t\t\tgroups = [],\n\t\t} = rule;\n\n\t\tconst isReadAuthorized = operations.includes('read');\n\t\tconst isOwnerAuth = authStrategy === 'owner';\n\n\t\tif (!isReadAuthorized && !isOwnerAuth) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst authRule: AuthorizationRule = {\n\t\t\tidentityClaim,\n\t\t\townerField,\n\t\t\tprovider,\n\t\t\tgroupClaim,\n\t\t\tauthStrategy,\n\t\t\tgroups,\n\t\t\tareSubscriptionsPublic: false,\n\t\t};\n\n\t\tif (isOwnerAuth) {\n\t\t\t// look for the subscription level override\n\t\t\t// only pay attention to the public level\n\t\t\tconst modelConfig = (<typeof modelDefinition.attributes>[])\n\t\t\t\t.concat(modelDefinition.attributes)\n\t\t\t\t.find(attr => attr && attr.type === 'model');\n\n\t\t\t// find the subscriptions level. ON is default\n\t\t\tconst { properties: { subscriptions: { level = 'on' } = {} } = {} } =\n\t\t\t\tmodelConfig || {};\n\n\t\t\t// treat subscriptions as public for owner auth with unprotected reads\n\t\t\t// when `read` is omitted from `operations`\n\t\t\tauthRule.areSubscriptionsPublic =\n\t\t\t\t!operations.includes('read') || level === 'public';\n\t\t}\n\n\t\tif (isOwnerAuth) {\n\t\t\t// owner rules has least priority\n\t\t\tresultRules.push(authRule);\n\t\t\treturn;\n\t\t}\n\n\t\tresultRules.unshift(authRule);\n\t});\n\n\treturn resultRules;\n}\n\nexport function buildSubscriptionGraphQLOperation(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel,\n\ttransformerMutationType: TransformerMutationType,\n\tisOwnerAuthorization: boolean,\n\townerField: string\n): [TransformerMutationType, string, string] {\n\tconst selectionSet = generateSelectionSet(namespace, modelDefinition);\n\n\tconst { name: typeName, pluralName: pluralTypeName } = modelDefinition;\n\n\tconst opName = `on${transformerMutationType}${typeName}`;\n\tlet docArgs = '';\n\tlet opArgs = '';\n\n\tif (isOwnerAuthorization) {\n\t\tdocArgs = `($${ownerField}: String!)`;\n\t\topArgs = `(${ownerField}: $${ownerField})`;\n\t}\n\n\treturn [\n\t\ttransformerMutationType,\n\t\topName,\n\t\t`subscription operation${docArgs}{\n\t\t\t${opName}${opArgs}{\n\t\t\t\t${selectionSet}\n\t\t\t}\n\t\t}`,\n\t];\n}\n\nexport function buildGraphQLOperation(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel,\n\tgraphQLOpType: keyof typeof GraphQLOperationType\n): [TransformerMutationType, string, string][] {\n\tlet selectionSet = generateSelectionSet(namespace, modelDefinition);\n\n\tconst { name: typeName, pluralName: pluralTypeName } = modelDefinition;\n\n\tlet operation: string;\n\tlet documentArgs: string = ' ';\n\tlet operationArgs: string = ' ';\n\tlet transformerMutationType: TransformerMutationType;\n\n\tswitch (graphQLOpType) {\n\t\tcase 'LIST':\n\t\t\toperation = `sync${pluralTypeName}`;\n\t\t\tdocumentArgs = `($limit: Int, $nextToken: String, $lastSync: AWSTimestamp, $filter: Model${typeName}FilterInput)`;\n\t\t\toperationArgs =\n\t\t\t\t'(limit: $limit, nextToken: $nextToken, lastSync: $lastSync, filter: $filter)';\n\t\t\tselectionSet = `items {\n\t\t\t\t\t\t\t${selectionSet}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnextToken\n\t\t\t\t\t\tstartedAt`;\n\t\t\tbreak;\n\t\tcase 'CREATE':\n\t\t\toperation = `create${typeName}`;\n\t\t\tdocumentArgs = `($input: Create${typeName}Input!)`;\n\t\t\toperationArgs = '(input: $input)';\n\t\t\ttransformerMutationType = TransformerMutationType.CREATE;\n\t\t\tbreak;\n\t\tcase 'UPDATE':\n\t\t\toperation = `update${typeName}`;\n\t\t\tdocumentArgs = `($input: Update${typeName}Input!, $condition: Model${typeName}ConditionInput)`;\n\t\t\toperationArgs = '(input: $input, condition: $condition)';\n\t\t\ttransformerMutationType = TransformerMutationType.UPDATE;\n\t\t\tbreak;\n\t\tcase 'DELETE':\n\t\t\toperation = `delete${typeName}`;\n\t\t\tdocumentArgs = `($input: Delete${typeName}Input!, $condition: Model${typeName}ConditionInput)`;\n\t\t\toperationArgs = '(input: $input, condition: $condition)';\n\t\t\ttransformerMutationType = TransformerMutationType.DELETE;\n\t\t\tbreak;\n\t\tcase 'GET':\n\t\t\toperation = `get${typeName}`;\n\t\t\tdocumentArgs = `($id: ID!)`;\n\t\t\toperationArgs = '(id: $id)';\n\t\t\ttransformerMutationType = TransformerMutationType.GET;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\texhaustiveCheck(graphQLOpType);\n\t}\n\n\treturn [\n\t\t[\n\t\t\ttransformerMutationType,\n\t\t\toperation,\n\t\t\t`${GraphQLOperationType[graphQLOpType]} operation${documentArgs}{\n\t\t${operation}${operationArgs}{\n\t\t\t${selectionSet}\n\t\t}\n\t}`,\n\t\t],\n\t];\n}\n\nexport function createMutationInstanceFromModelOperation<\n\tT extends PersistentModel\n>(\n\trelationships: RelationshipType,\n\tmodelDefinition: SchemaModel,\n\topType: OpType,\n\tmodel: PersistentModelConstructor<T>,\n\telement: T,\n\tcondition: GraphQLCondition,\n\tMutationEventConstructor: PersistentModelConstructor<MutationEvent>,\n\tmodelInstanceCreator: ModelInstanceCreator,\n\tid?: string\n): MutationEvent {\n\tlet operation: TransformerMutationType;\n\n\tswitch (opType) {\n\t\tcase OpType.INSERT:\n\t\t\toperation = TransformerMutationType.CREATE;\n\t\t\tbreak;\n\t\tcase OpType.UPDATE:\n\t\t\toperation = TransformerMutationType.UPDATE;\n\t\t\tbreak;\n\t\tcase OpType.DELETE:\n\t\t\toperation = TransformerMutationType.DELETE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\texhaustiveCheck(opType);\n\t}\n\n\t// stringify nested objects of type AWSJSON\n\t// this allows us to return parsed JSON to users (see `castInstanceType()` in datastore.ts),\n\t// but still send the object correctly over the wire\n\tconst replacer = (k, v) => {\n\t\tconst isAWSJSON =\n\t\t\tk &&\n\t\t\tv !== null &&\n\t\t\ttypeof v === 'object' &&\n\t\t\tmodelDefinition.fields[k] &&\n\t\t\tmodelDefinition.fields[k].type === 'AWSJSON';\n\n\t\tif (isAWSJSON) {\n\t\t\treturn JSON.stringify(v);\n\t\t}\n\t\treturn v;\n\t};\n\n\tconst mutationEvent = modelInstanceCreator(MutationEventConstructor, {\n\t\t...(id ? { id } : {}),\n\t\tdata: JSON.stringify(element, replacer),\n\t\tmodelId: element.id,\n\t\tmodel: model.name,\n\t\toperation,\n\t\tcondition: JSON.stringify(condition),\n\t});\n\n\treturn mutationEvent;\n}\n\nexport function predicateToGraphQLCondition(\n\tpredicate: PredicatesGroup<any>\n): GraphQLCondition {\n\tconst result = {};\n\n\tif (!predicate || !Array.isArray(predicate.predicates)) {\n\t\treturn result;\n\t}\n\n\tpredicate.predicates.forEach(p => {\n\t\tif (isPredicateObj(p)) {\n\t\t\tconst { field, operator, operand } = p;\n\n\t\t\tif (field === 'id') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresult[field] = { [operator]: operand };\n\t\t} else {\n\t\t\tresult[p.type] = predicateToGraphQLCondition(p);\n\t\t}\n\t});\n\n\treturn result;\n}\n\nexport function predicateToGraphQLFilter(\n\tpredicatesGroup: PredicatesGroup<any>\n): GraphQLFilter {\n\tconst result: GraphQLFilter = {};\n\n\tif (!predicatesGroup || !Array.isArray(predicatesGroup.predicates)) {\n\t\treturn result;\n\t}\n\n\tconst { type, predicates } = predicatesGroup;\n\tconst isList = type === 'and' || type === 'or';\n\n\tresult[type] = isList ? [] : {};\n\n\tconst appendToFilter = value =>\n\t\tisList ? result[type].push(value) : (result[type] = value);\n\n\tpredicates.forEach(predicate => {\n\t\tif (isPredicateObj(predicate)) {\n\t\t\tconst { field, operator, operand } = predicate;\n\n\t\t\tconst gqlField: GraphQLField = {\n\t\t\t\t[field]: { [operator]: operand },\n\t\t\t};\n\n\t\t\tappendToFilter(gqlField);\n\t\t\treturn;\n\t\t}\n\n\t\tappendToFilter(predicateToGraphQLFilter(predicate));\n\t});\n\n\treturn result;\n}\n\nexport function getUserGroupsFromToken(\n\ttoken: { [field: string]: any },\n\trule: AuthorizationRule\n): string[] {\n\t// validate token against groupClaim\n\tlet userGroups: string[] | string = token[rule.groupClaim] || [];\n\n\tif (typeof userGroups === 'string') {\n\t\tlet parsedGroups;\n\t\ttry {\n\t\t\tparsedGroups = JSON.parse(userGroups);\n\t\t} catch (e) {\n\t\t\tparsedGroups = userGroups;\n\t\t}\n\t\tuserGroups = [].concat(parsedGroups);\n\t}\n\n\treturn userGroups;\n}\n\nexport async function getModelAuthModes({\n\tauthModeStrategy,\n\tdefaultAuthMode,\n\tmodelName,\n\tschema,\n}: {\n\tauthModeStrategy: AuthModeStrategy;\n\tdefaultAuthMode: GRAPHQL_AUTH_MODE;\n\tmodelName: string;\n\tschema: InternalSchema;\n}): Promise<{\n\t[key in ModelOperation]: GRAPHQL_AUTH_MODE[];\n}> {\n\tconst operations = Object.values(ModelOperation);\n\n\tconst modelAuthModes: {\n\t\t[key in ModelOperation]: GRAPHQL_AUTH_MODE[];\n\t} = {\n\t\tCREATE: [],\n\t\tREAD: [],\n\t\tUPDATE: [],\n\t\tDELETE: [],\n\t};\n\n\ttry {\n\t\tawait Promise.all(\n\t\t\toperations.map(async operation => {\n\t\t\t\tconst authModes = await authModeStrategy({\n\t\t\t\t\tschema,\n\t\t\t\t\tmodelName,\n\t\t\t\t\toperation,\n\t\t\t\t});\n\n\t\t\t\tif (typeof authModes === 'string') {\n\t\t\t\t\tmodelAuthModes[operation] = [authModes];\n\t\t\t\t} else if (Array.isArray(authModes) && authModes.length) {\n\t\t\t\t\tmodelAuthModes[operation] = authModes;\n\t\t\t\t} else {\n\t\t\t\t\t// Use default auth mode if nothing is returned from authModeStrategy\n\t\t\t\t\tmodelAuthModes[operation] = [defaultAuthMode];\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t} catch (error) {\n\t\tlogger.debug(`Error getting auth modes for model: ${modelName}`, error);\n\t}\n\treturn modelAuthModes;\n}\n\nexport function getForbiddenError(error) {\n\tconst forbiddenErrorMessages = [\n\t\t'Request failed with status code 401',\n\t\t'Request failed with status code 403',\n\t];\n\tlet forbiddenError;\n\tif (error && error.errors) {\n\t\tforbiddenError = (error.errors as [any]).find(err =>\n\t\t\tforbiddenErrorMessages.includes(err.message)\n\t\t);\n\t} else if (error && error.message) {\n\t\tforbiddenError = error;\n\t}\n\n\tif (forbiddenError) {\n\t\treturn forbiddenError.message;\n\t}\n\treturn null;\n}\n\nexport function getClientSideAuthError(error) {\n\tconst clientSideAuthErrors = Object.values(GraphQLAuthError);\n\tconst clientSideError =\n\t\terror &&\n\t\terror.message &&\n\t\tclientSideAuthErrors.find(clientError =>\n\t\t\terror.message.includes(clientError)\n\t\t);\n\treturn clientSideError || null;\n}\n\nexport async function getTokenForCustomAuth(\n\tauthMode: GRAPHQL_AUTH_MODE,\n\tamplifyConfig: Record<string, any> = {}\n): Promise<string | undefined> {\n\tif (authMode === GRAPHQL_AUTH_MODE.AWS_LAMBDA) {\n\t\tconst {\n\t\t\tauthProviders: { functionAuthProvider } = { functionAuthProvider: null },\n\t\t} = amplifyConfig;\n\t\tif (functionAuthProvider && typeof functionAuthProvider === 'function') {\n\t\t\ttry {\n\t\t\t\tconst { token } = await functionAuthProvider();\n\t\t\t\treturn token;\n\t\t\t} catch (error) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Error retrieving token from \\`functionAuthProvider\\`: ${error}`\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// TODO: add docs link once available\n\t\t\tthrow new Error(\n\t\t\t\t`You must provide a \\`functionAuthProvider\\` function to \\`DataStore.configure\\` when using ${GRAPHQL_AUTH_MODE.AWS_LAMBDA}`\n\t\t\t);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}