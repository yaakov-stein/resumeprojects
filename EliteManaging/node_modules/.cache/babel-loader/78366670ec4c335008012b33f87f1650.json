{"ast":null,"code":"export var MAX_DELAY_MS = 5000;\nexport var NON_RETRYABLE_CODES = [400, 401, 403];\nexport var MESSAGE_TYPES;\n\n(function (MESSAGE_TYPES) {\n  /**\n   * Client -> Server message.\n   * This message type is the first message after handshake and this will initialize AWS AppSync RealTime communication\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_INIT\"] = \"connection_init\";\n  /**\n   * Server -> Client message\n   * This message type is in case there is an issue with AWS AppSync RealTime when establishing connection\n   */\n\n  MESSAGE_TYPES[\"GQL_CONNECTION_ERROR\"] = \"connection_error\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_CONNECTION_INIT message\n   */\n\n  MESSAGE_TYPES[\"GQL_CONNECTION_ACK\"] = \"connection_ack\";\n  /**\n   * Client -> Server message.\n   * This message type is for register subscriptions with AWS AppSync RealTime\n   */\n\n  MESSAGE_TYPES[\"GQL_START\"] = \"start\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_START message\n   */\n\n  MESSAGE_TYPES[\"GQL_START_ACK\"] = \"start_ack\";\n  /**\n   * Server -> Client message.\n   * This message type is for subscription message from AWS AppSync RealTime\n   */\n\n  MESSAGE_TYPES[\"GQL_DATA\"] = \"data\";\n  /**\n   * Server -> Client message.\n   * This message type helps the client to know is still receiving messages from AWS AppSync RealTime\n   */\n\n  MESSAGE_TYPES[\"GQL_CONNECTION_KEEP_ALIVE\"] = \"ka\";\n  /**\n   * Client -> Server message.\n   * This message type is for unregister subscriptions with AWS AppSync RealTime\n   */\n\n  MESSAGE_TYPES[\"GQL_STOP\"] = \"stop\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_STOP message\n   */\n\n  MESSAGE_TYPES[\"GQL_COMPLETE\"] = \"complete\";\n  /**\n   * Server -> Client message.\n   * This message type is for sending error messages from AWS AppSync RealTime to the client\n   */\n\n  MESSAGE_TYPES[\"GQL_ERROR\"] = \"error\";\n})(MESSAGE_TYPES || (MESSAGE_TYPES = {}));\n\nexport var SUBSCRIPTION_STATUS;\n\n(function (SUBSCRIPTION_STATUS) {\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"PENDING\"] = 0] = \"PENDING\";\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"CONNECTED\"] = 1] = \"CONNECTED\";\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"FAILED\"] = 2] = \"FAILED\";\n})(SUBSCRIPTION_STATUS || (SUBSCRIPTION_STATUS = {}));\n\nexport var SOCKET_STATUS;\n\n(function (SOCKET_STATUS) {\n  SOCKET_STATUS[SOCKET_STATUS[\"CLOSED\"] = 0] = \"CLOSED\";\n  SOCKET_STATUS[SOCKET_STATUS[\"READY\"] = 1] = \"READY\";\n  SOCKET_STATUS[SOCKET_STATUS[\"CONNECTING\"] = 2] = \"CONNECTING\";\n})(SOCKET_STATUS || (SOCKET_STATUS = {}));\n\nexport var AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nexport var AWS_APPSYNC_REALTIME_HEADERS = {\n  accept: 'application/json, text/javascript',\n  'content-encoding': 'amz-1.0',\n  'content-type': 'application/json; charset=UTF-8'\n};\n/**\n * Time in milleseconds to wait for GQL_CONNECTION_INIT message\n */\n\nexport var CONNECTION_INIT_TIMEOUT = 15000;\n/**\n * Time in milleseconds to wait for GQL_START_ACK message\n */\n\nexport var START_ACK_TIMEOUT = 15000;\n/**\n * Default Time in milleseconds to wait for GQL_CONNECTION_KEEP_ALIVE message\n */\n\nexport var DEFAULT_KEEP_ALIVE_TIMEOUT = 5 * 60 * 1000;","map":{"version":3,"mappings":"AAAA,OAAO,IAAMA,YAAY,GAAG,IAArB;AAEP,OAAO,IAAMC,mBAAmB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA5B;AAEP,WAAYC,aAAZ;;AAAA,WAAYA,aAAZ,EAAyB;EACxB;;;;EAIAA;EACA;;;;;EAIAA;EACA;;;;;EAIAA;EACA;;;;;EAIAA;EACA;;;;;EAIAA;EACA;;;;;EAIAA;EACA;;;;;EAIAA;EACA;;;;;EAIAA;EACA;;;;;EAIAA;EACA;;;;;EAIAA;AACA,CAnDD,EAAYA,aAAa,KAAbA,aAAa,MAAzB;;AAqDA,WAAYC,mBAAZ;;AAAA,WAAYA,mBAAZ,EAA+B;EAC9BA;EACAA;EACAA;AACA,CAJD,EAAYA,mBAAmB,KAAnBA,mBAAmB,MAA/B;;AAMA,WAAYC,aAAZ;;AAAA,WAAYA,aAAZ,EAAyB;EACxBA;EACAA;EACAA;AACA,CAJD,EAAYA,aAAa,KAAbA,aAAa,MAAzB;;AAMA,OAAO,IAAMC,cAAc,GAC1B,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,GAAd,KAAsB,UAAvD,GACGD,MAAM,CAACC,GAAP,CAAW,iBAAX,CADH,GAEG,mBAHG;AAMP,OAAO,IAAMC,4BAA4B,GAAG;EAC3CC,MAAM,EAAE,mCADmC;EAE3C,oBAAoB,SAFuB;EAG3C,gBAAgB;AAH2B,CAArC;AAMP;;;;AAGA,OAAO,IAAMC,uBAAuB,GAAG,KAAhC;AAEP;;;;AAGA,OAAO,IAAMC,iBAAiB,GAAG,KAA1B;AAEP;;;;AAGA,OAAO,IAAMC,0BAA0B,GAAG,IAAI,EAAJ,GAAS,IAA5C","names":["MAX_DELAY_MS","NON_RETRYABLE_CODES","MESSAGE_TYPES","SUBSCRIPTION_STATUS","SOCKET_STATUS","AMPLIFY_SYMBOL","Symbol","for","AWS_APPSYNC_REALTIME_HEADERS","accept","CONNECTION_INIT_TIMEOUT","START_ACK_TIMEOUT","DEFAULT_KEEP_ALIVE_TIMEOUT"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\Freshman_2021-2022\\Summer_2022\\COM4570H\\newcrm\\new-crm\\node_modules\\@aws-amplify\\pubsub\\src\\Providers\\AWSAppSyncRealTimeProvider\\constants.ts"],"sourcesContent":["export const MAX_DELAY_MS = 5000;\n\nexport const NON_RETRYABLE_CODES = [400, 401, 403];\n\nexport enum MESSAGE_TYPES {\n\t/**\n\t * Client -> Server message.\n\t * This message type is the first message after handshake and this will initialize AWS AppSync RealTime communication\n\t */\n\tGQL_CONNECTION_INIT = 'connection_init',\n\t/**\n\t * Server -> Client message\n\t * This message type is in case there is an issue with AWS AppSync RealTime when establishing connection\n\t */\n\tGQL_CONNECTION_ERROR = 'connection_error',\n\t/**\n\t * Server -> Client message.\n\t * This message type is for the ack response from AWS AppSync RealTime for GQL_CONNECTION_INIT message\n\t */\n\tGQL_CONNECTION_ACK = 'connection_ack',\n\t/**\n\t * Client -> Server message.\n\t * This message type is for register subscriptions with AWS AppSync RealTime\n\t */\n\tGQL_START = 'start',\n\t/**\n\t * Server -> Client message.\n\t * This message type is for the ack response from AWS AppSync RealTime for GQL_START message\n\t */\n\tGQL_START_ACK = 'start_ack',\n\t/**\n\t * Server -> Client message.\n\t * This message type is for subscription message from AWS AppSync RealTime\n\t */\n\tGQL_DATA = 'data',\n\t/**\n\t * Server -> Client message.\n\t * This message type helps the client to know is still receiving messages from AWS AppSync RealTime\n\t */\n\tGQL_CONNECTION_KEEP_ALIVE = 'ka',\n\t/**\n\t * Client -> Server message.\n\t * This message type is for unregister subscriptions with AWS AppSync RealTime\n\t */\n\tGQL_STOP = 'stop',\n\t/**\n\t * Server -> Client message.\n\t * This message type is for the ack response from AWS AppSync RealTime for GQL_STOP message\n\t */\n\tGQL_COMPLETE = 'complete',\n\t/**\n\t * Server -> Client message.\n\t * This message type is for sending error messages from AWS AppSync RealTime to the client\n\t */\n\tGQL_ERROR = 'error', // Server -> Client\n}\n\nexport enum SUBSCRIPTION_STATUS {\n\tPENDING,\n\tCONNECTED,\n\tFAILED,\n}\n\nexport enum SOCKET_STATUS {\n\tCLOSED,\n\tREADY,\n\tCONNECTING,\n}\n\nexport const AMPLIFY_SYMBOL = (\n\ttypeof Symbol !== 'undefined' && typeof Symbol.for === 'function'\n\t\t? Symbol.for('amplify_default')\n\t\t: '@@amplify_default'\n) as Symbol;\n\nexport const AWS_APPSYNC_REALTIME_HEADERS = {\n\taccept: 'application/json, text/javascript',\n\t'content-encoding': 'amz-1.0',\n\t'content-type': 'application/json; charset=UTF-8',\n};\n\n/**\n * Time in milleseconds to wait for GQL_CONNECTION_INIT message\n */\nexport const CONNECTION_INIT_TIMEOUT = 15000;\n\n/**\n * Time in milleseconds to wait for GQL_START_ACK message\n */\nexport const START_ACK_TIMEOUT = 15000;\n\n/**\n * Default Time in milleseconds to wait for GQL_CONNECTION_KEEP_ALIVE message\n */\nexport const DEFAULT_KEEP_ALIVE_TIMEOUT = 5 * 60 * 1000;\n"]},"metadata":{},"sourceType":"module"}