{"ast":null,"code":"import { __assign, __awaiter, __generator, __values } from \"tslib\";\nimport { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport function applyMd5BodyChecksumMiddleware(options) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var request, body, headers, digest, hash, _a, _b, _c, _d, _e;\n\n        var _f, _g;\n\n        return __generator(this, function (_h) {\n          switch (_h.label) {\n            case 0:\n              request = args.request;\n              if (!HttpRequest.isInstance(request)) return [3\n              /*break*/\n              , 2];\n              body = request.body, headers = request.headers;\n              if (!!hasHeader(\"Content-MD5\", headers)) return [3\n              /*break*/\n              , 2];\n              digest = void 0;\n\n              if (body === undefined || typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {\n                hash = new options.md5();\n                hash.update(body || \"\");\n                digest = hash.digest();\n              } else {\n                digest = options.streamHasher(options.md5, body);\n              }\n\n              _a = [__assign({}, request)];\n              _f = {};\n              _b = [__assign({}, headers)];\n              _g = {};\n              _c = \"Content-MD5\";\n              _e = (_d = options).base64Encoder;\n              return [4\n              /*yield*/\n              , digest];\n\n            case 1:\n              request = __assign.apply(void 0, _a.concat([(_f.headers = __assign.apply(void 0, _b.concat([(_g[_c] = _e.apply(_d, [_h.sent()]), _g)])), _f)]));\n              _h.label = 2;\n\n            case 2:\n              return [2\n              /*return*/\n              , next(__assign(__assign({}, args), {\n                request: request\n              }))];\n          }\n        });\n      });\n    };\n  };\n}\nexport var applyMd5BodyChecksumMiddlewareOptions = {\n  name: \"applyMd5BodyChecksumMiddleware\",\n  step: \"build\",\n  tags: [\"SET_CONTENT_MD5\", \"BODY_CHECKSUM\"],\n  override: true\n};\nexport var getApplyMd5BodyChecksumPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(applyMd5BodyChecksumMiddleware(config), applyMd5BodyChecksumMiddlewareOptions);\n    }\n  };\n};\n\nfunction hasHeader(soughtHeader, headers) {\n  var e_1, _a;\n\n  soughtHeader = soughtHeader.toLowerCase();\n\n  try {\n    for (var _b = __values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var headerName = _c.value;\n\n      if (soughtHeader === headerName.toLowerCase()) {\n        return true;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"mappings":";AAAA,SAASA,aAAT,QAA8B,0BAA9B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAcA,OAAM,SAAUC,8BAAV,CAAyCC,OAAzC,EAA+E;EAArF;;EACE,OAAO,UAAgCC,IAAhC,EAA+D;IAAgC,iBACpGC,IADoG,EACpE;MAAA;;;;;;;;cAE1BC,OAAO,GAAKD,IAAI,QAAhB;mBACFJ,WAAW,CAACM,UAAZ,CAAuBD,OAAvB;cAAA;cAAA;cACME,IAAI,GAAcF,OAAO,KAAzB,EAAMG,OAAO,GAAKH,OAAO,QAAzB;mBACJ,CAACI,SAAS,CAAC,aAAD,EAAgBD,OAAhB,GAAV;cAAA;cAAA;cACEE,MAAM,SAAN;;cACJ,IAAIH,IAAI,KAAKI,SAAT,IAAsB,OAAOJ,IAAP,KAAgB,QAAtC,IAAkDK,WAAW,CAACC,MAAZ,CAAmBN,IAAnB,CAAlD,IAA8ER,aAAa,CAACQ,IAAD,CAA/F,EAAuG;gBAC/FO,IAAI,GAAG,IAAIZ,OAAO,CAACa,GAAZ,EAAP;gBACND,IAAI,CAACE,MAAL,CAAYT,IAAI,IAAI,EAApB;gBACAG,MAAM,GAAGI,IAAI,CAACJ,MAAL,EAAT;cACD,CAJD,MAIO;gBACLA,MAAM,GAAGR,OAAO,CAACe,YAAR,CAAqBf,OAAO,CAACa,GAA7B,EAAkCR,IAAlC,CAAT;cACD;;iCAGIF;;iCAEEG;;cACHU;cAAeC,oBAAQC,aAAR;cAAsB;cAAA;cAAA,EAAMV,MAAN;;;cAJzCL,OAAO,sCAELgB,aAAOC,mCAELC,SAAeJ,cAAsBK,SAAtB,EAAf,EAAkDD,EAF7C,IAAP,EAEoDF,EAJ/C,IAAP;;;;cASJ;cAAA;cAAA,EAAOlB,IAAI,uBACNC,IADM,GACF;gBACPC,OAAO;cADA,CADE,EAAX;;;OAxBgC;IA4BjC,CA7BqG;EA6BrG,CA7BD;AA8BD;AAED,OAAO,IAAMoB,qCAAqC,GAAwB;EACxEC,IAAI,EAAE,gCADkE;EAExEC,IAAI,EAAE,OAFkE;EAGxEC,IAAI,EAAE,CAAC,iBAAD,EAAoB,eAApB,CAHkE;EAIxEC,QAAQ,EAAE;AAJ8D,CAAnE;AAOP,OAAO,IAAMC,6BAA6B,GAAG,UAACC,MAAD,EAAsC;EAA0B,OAAC;IAC5GC,YAAY,EAAE,UAACC,WAAD,EAAY;MACxBA,WAAW,CAACC,GAAZ,CAAgBjC,8BAA8B,CAAC8B,MAAD,CAA9C,EAAwDN,qCAAxD;IACD;EAH2G,CAAD;AAI3G,CAJK;;AAMP,SAAShB,SAAT,CAAmB0B,YAAnB,EAAyC3B,OAAzC,EAA2D;;;EACzD2B,YAAY,GAAGA,YAAY,CAACC,WAAb,EAAf;;;IACA,KAAyB,wBAAM,CAACC,IAAP,CAAY7B,OAAZ,IAAoBU,cAA7C,EAA6C,QAA7C,EAA6CA,cAA7C,EAA+C;MAA1C,IAAMoB,UAAU,WAAhB;;MACH,IAAIH,YAAY,KAAKG,UAAU,CAACF,WAAX,EAArB,EAA+C;QAC7C,OAAO,IAAP;MACD;IACF;;;;;;;;;;;;;EAED,OAAO,KAAP;AACD","names":["isArrayBuffer","HttpRequest","applyMd5BodyChecksumMiddleware","options","next","args","request","isInstance","body","headers","hasHeader","digest","undefined","ArrayBuffer","isView","hash","md5","update","streamHasher","_c","_e","base64Encoder","_f","__assign","_g","_h","applyMd5BodyChecksumMiddlewareOptions","name","step","tags","override","getApplyMd5BodyChecksumPlugin","config","applyToStack","clientStack","add","soughtHeader","toLowerCase","keys","headerName"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\middleware-apply-body-checksum\\src\\applyMd5BodyChecksumMiddleware.ts"],"sourcesContent":["import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  HeaderBag,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nimport { Md5BodyChecksumResolvedConfig } from \"./md5Configuration\";\n\nexport function applyMd5BodyChecksumMiddleware(options: Md5BodyChecksumResolvedConfig): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(next: BuildHandler<any, Output>): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    let { request } = args;\n    if (HttpRequest.isInstance(request)) {\n      const { body, headers } = request;\n      if (!hasHeader(\"Content-MD5\", headers)) {\n        let digest: Promise<Uint8Array>;\n        if (body === undefined || typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {\n          const hash = new options.md5();\n          hash.update(body || \"\");\n          digest = hash.digest();\n        } else {\n          digest = options.streamHasher(options.md5, body);\n        }\n\n        request = {\n          ...request,\n          headers: {\n            ...headers,\n            \"Content-MD5\": options.base64Encoder(await digest),\n          },\n        };\n      }\n    }\n    return next({\n      ...args,\n      request,\n    });\n  };\n}\n\nexport const applyMd5BodyChecksumMiddlewareOptions: BuildHandlerOptions = {\n  name: \"applyMd5BodyChecksumMiddleware\",\n  step: \"build\",\n  tags: [\"SET_CONTENT_MD5\", \"BODY_CHECKSUM\"],\n  override: true,\n};\n\nexport const getApplyMd5BodyChecksumPlugin = (config: Md5BodyChecksumResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(applyMd5BodyChecksumMiddleware(config), applyMd5BodyChecksumMiddlewareOptions);\n  },\n});\n\nfunction hasHeader(soughtHeader: string, headers: HeaderBag): boolean {\n  soughtHeader = soughtHeader.toLowerCase();\n  for (const headerName of Object.keys(headers)) {\n    if (soughtHeader === headerName.toLowerCase()) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}