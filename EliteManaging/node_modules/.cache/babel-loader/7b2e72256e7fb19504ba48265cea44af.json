{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { MergeShardsInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1MergeShardsCommand, serializeAws_json1_1MergeShardsCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Merges two adjacent shards in a Kinesis data stream and combines them into a single\n *             shard to reduce the stream's capacity to ingest and transport data. Two shards are\n *             considered adjacent if the union of the hash key ranges for the two shards form a\n *             contiguous set with no gaps. For example, if you have two shards, one with a hash key\n *             range of 276...381 and the other with a hash key range of 382...454, then you could\n *             merge these two shards into a single shard that would have a hash key range of\n *             276...454. After the merge, the single child shard receives data for all hash key values\n *             covered by the two parent shards.</p>\n *         <p>\n *             <code>MergeShards</code> is called when there is a need to reduce the overall capacity\n *             of a stream because of excess capacity that is not being used. You must specify the\n *             shard to be merged and the adjacent shard for a stream. For more information about\n *             merging shards, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-merge.html\">Merge Two\n *                 Shards</a> in the <i>Amazon Kinesis Data Streams Developer\n *                 Guide</i>.</p>\n *         <p>If the stream is in the <code>ACTIVE</code> state, you can call\n *                 <code>MergeShards</code>. If a stream is in the <code>CREATING</code>,\n *                 <code>UPDATING</code>, or <code>DELETING</code> state, <code>MergeShards</code>\n *             returns a <code>ResourceInUseException</code>. If the specified stream does not exist,\n *                 <code>MergeShards</code> returns a <code>ResourceNotFoundException</code>. </p>\n *         <p>You can use <a>DescribeStream</a> to check the state of the stream,\n *             which is returned in <code>StreamStatus</code>.</p>\n *         <p>\n *             <code>MergeShards</code> is an asynchronous operation. Upon receiving a\n *                 <code>MergeShards</code> request, Amazon Kinesis Data Streams immediately returns a\n *             response and sets the <code>StreamStatus</code> to <code>UPDATING</code>. After the\n *             operation is completed, Kinesis Data Streams sets the <code>StreamStatus</code> to\n *                 <code>ACTIVE</code>. Read and write operations continue to work while the stream is\n *             in the <code>UPDATING</code> state. </p>\n *         <p>You use <a>DescribeStream</a> to determine the shard IDs that are\n *             specified in the <code>MergeShards</code> request. </p>\n *         <p>If you try to operate on too many streams in parallel using <a>CreateStream</a>, <a>DeleteStream</a>, <code>MergeShards</code>,\n *             or <a>SplitShard</a>, you receive a <code>LimitExceededException</code>. </p>\n *         <p>\n *             <code>MergeShards</code> has a limit of five transactions per second per\n *             account.</p>\n */\n\nvar MergeShardsCommand =\n/** @class */\nfunction (_super) {\n  __extends(MergeShardsCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function MergeShardsCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  MergeShardsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"MergeShardsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: MergeShardsInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  MergeShardsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1MergeShardsCommand(input, context);\n  };\n\n  MergeShardsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1MergeShardsCommand(output, context);\n  };\n\n  return MergeShardsCommand;\n}($Command);\n\nexport { MergeShardsCommand };","map":{"version":3,"mappings":";AACA,SAASA,gBAAT,QAAiC,oBAAjC;AACA,SACEC,wCADF,EAEEC,sCAFF,QAGO,0BAHP;AAIA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;AAAA;AAAA;EAAwCC,sCAAxC,CAKE;EACA;;;EAEA,4BAAqBC,KAArB,EAAmD;IAAnD,YACE;IACAC,qBAAO,IAFT;;IAAqBC;iBAA8B,CAGjD;EACD;EAED;;;;;EAGAC,2DACEC,WADF,EAEEC,aAFF,EAGEC,OAHF,EAGgC;IAE9B,KAAKC,eAAL,CAAqBC,GAArB,CAAyBZ,cAAc,CAACS,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IAEA,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAd;IAEQ,UAAM,GAAKF,aAAa,OAAxB;IACR,IAAMQ,UAAU,GAAG,eAAnB;IACA,IAAMC,WAAW,GAAG,oBAApB;IACA,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM,QADiD;MAEvDH,UAAU,YAF6C;MAGvDC,WAAW,aAH4C;MAIvDG,uBAAuB,EAAExB,gBAAgB,CAACyB,kBAJa;MAKvDC,wBAAwB,EAAE,UAACC,MAAD,EAAY;QAAK;MAAM;IALM,CAAzD;IAOQ,kBAAc,GAAKf,aAAa,eAAhC;IACR,OAAOM,KAAK,CAACU,OAAN,CACL,UAACC,OAAD,EAAuC;MACrC,qBAAc,CAACC,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAwDhB,OAAO,IAAI,EAAnE;IAAsE,CAFnE,EAGLS,uBAHK,CAAP;EAKD,CAzBD;;EA2BQZ,yCAAR,UAAkBH,KAAlB,EAAkDwB,OAAlD,EAAyE;IACvE,OAAO7B,sCAAsC,CAACK,KAAD,EAAQwB,OAAR,CAA7C;EACD,CAFO;;EAIArB,2CAAR,UAAoBiB,MAApB,EAA4CI,OAA5C,EAAmE;IACjE,OAAO9B,wCAAwC,CAAC0B,MAAD,EAASI,OAAT,CAA/C;EACD,CAFO;;EAMV;AAAC,CAtDD,CAAwC1B,QAAxC","names":["MergeShardsInput","deserializeAws_json1_1MergeShardsCommand","serializeAws_json1_1MergeShardsCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","MergeShardsCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","resolve","request","handle","context"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-kinesis\\commands\\MergeShardsCommand.ts"],"sourcesContent":["import { KinesisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../KinesisClient\";\nimport { MergeShardsInput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1MergeShardsCommand,\n  serializeAws_json1_1MergeShardsCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type MergeShardsCommandInput = MergeShardsInput;\nexport type MergeShardsCommandOutput = __MetadataBearer;\n\n/**\n * <p>Merges two adjacent shards in a Kinesis data stream and combines them into a single\n *             shard to reduce the stream's capacity to ingest and transport data. Two shards are\n *             considered adjacent if the union of the hash key ranges for the two shards form a\n *             contiguous set with no gaps. For example, if you have two shards, one with a hash key\n *             range of 276...381 and the other with a hash key range of 382...454, then you could\n *             merge these two shards into a single shard that would have a hash key range of\n *             276...454. After the merge, the single child shard receives data for all hash key values\n *             covered by the two parent shards.</p>\n *         <p>\n *             <code>MergeShards</code> is called when there is a need to reduce the overall capacity\n *             of a stream because of excess capacity that is not being used. You must specify the\n *             shard to be merged and the adjacent shard for a stream. For more information about\n *             merging shards, see <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-merge.html\">Merge Two\n *                 Shards</a> in the <i>Amazon Kinesis Data Streams Developer\n *                 Guide</i>.</p>\n *         <p>If the stream is in the <code>ACTIVE</code> state, you can call\n *                 <code>MergeShards</code>. If a stream is in the <code>CREATING</code>,\n *                 <code>UPDATING</code>, or <code>DELETING</code> state, <code>MergeShards</code>\n *             returns a <code>ResourceInUseException</code>. If the specified stream does not exist,\n *                 <code>MergeShards</code> returns a <code>ResourceNotFoundException</code>. </p>\n *         <p>You can use <a>DescribeStream</a> to check the state of the stream,\n *             which is returned in <code>StreamStatus</code>.</p>\n *         <p>\n *             <code>MergeShards</code> is an asynchronous operation. Upon receiving a\n *                 <code>MergeShards</code> request, Amazon Kinesis Data Streams immediately returns a\n *             response and sets the <code>StreamStatus</code> to <code>UPDATING</code>. After the\n *             operation is completed, Kinesis Data Streams sets the <code>StreamStatus</code> to\n *                 <code>ACTIVE</code>. Read and write operations continue to work while the stream is\n *             in the <code>UPDATING</code> state. </p>\n *         <p>You use <a>DescribeStream</a> to determine the shard IDs that are\n *             specified in the <code>MergeShards</code> request. </p>\n *         <p>If you try to operate on too many streams in parallel using <a>CreateStream</a>, <a>DeleteStream</a>, <code>MergeShards</code>,\n *             or <a>SplitShard</a>, you receive a <code>LimitExceededException</code>. </p>\n *         <p>\n *             <code>MergeShards</code> has a limit of five transactions per second per\n *             account.</p>\n */\nexport class MergeShardsCommand extends $Command<\n  MergeShardsCommandInput,\n  MergeShardsCommandOutput,\n  KinesisClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: MergeShardsCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: KinesisClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<MergeShardsCommandInput, MergeShardsCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"KinesisClient\";\n    const commandName = \"MergeShardsCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: MergeShardsInput.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: MergeShardsCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1MergeShardsCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<MergeShardsCommandOutput> {\n    return deserializeAws_json1_1MergeShardsCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}