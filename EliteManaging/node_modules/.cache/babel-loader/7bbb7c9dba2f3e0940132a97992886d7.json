{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\n/**\n * @internal\n */\n\nexport var useRegionalEndpointMiddleware = function (config) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var request, _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              request = args.request;\n              if (!HttpRequest.isInstance(request) || config.isCustomEndpoint) return [2\n              /*return*/\n              , next(__assign({}, args))];\n              if (!(request.hostname === \"s3.amazonaws.com\")) return [3\n              /*break*/\n              , 1];\n              request.hostname = \"s3.us-east-1.amazonaws.com\";\n              return [3\n              /*break*/\n              , 3];\n\n            case 1:\n              _a = \"aws-global\";\n              return [4\n              /*yield*/\n              , config.region()];\n\n            case 2:\n              if (_a === _b.sent()) {\n                request.hostname = \"s3.amazonaws.com\";\n              }\n\n              _b.label = 3;\n\n            case 3:\n              return [2\n              /*return*/\n              , next(__assign({}, args))];\n          }\n        });\n      });\n    };\n  };\n};\n/**\n * @internal\n */\n\nexport var useRegionalEndpointMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"USE_REGIONAL_ENDPOINT\", \"S3\"],\n  name: \"useRegionalEndpointMiddleware\",\n  override: true\n};\n/**\n * @internal\n */\n\nexport var getUseRegionalEndpointPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(useRegionalEndpointMiddleware(config), useRegionalEndpointMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,WAAT,QAA4B,wBAA5B;AAiBA;;;;AAGA,OAAO,IAAMC,6BAA6B,GAAG,UAACC,MAAD,EAA2B;EAAgC,iBAGtGC,IAHsG,EAGvE;IACD,iBAAOC,IAAP,EAAuC;MAAA;;;;;;cAC7DC,OAAO,GAAKD,IAAI,QAAhB;cACR,IAAI,CAACJ,WAAW,CAACM,UAAZ,CAAuBD,OAAvB,CAAD,IAAoCH,MAAM,CAACK,gBAA/C,EAAiE;cAAA;cAAA,EAAOJ,IAAI,cAAMC,IAAN,EAAX;oBAC7DC,OAAO,CAACG,QAAR,KAAqB,qBAArB;cAAA;cAAA;cACFH,OAAO,CAACG,QAAR,GAAmB,4BAAnB;;;;;;cACSC;cAAkB;cAAA;cAAA,EAAMP,MAAM,CAACQ,MAAP,EAAN;;;cAAtB,IAAID,OAAkBE,SAAtB,EAA8C;gBACnDN,OAAO,CAACG,QAAR,GAAmB,kBAAnB;cACD;;;;;cACD;cAAA;cAAA,EAAOL,IAAI,cAAMC,IAAN,EAAX;;;OARqE;IAStE,CAT+B;EAS/B,CAbuG;AAavG,CAbM;AAeP;;;;AAGA,OAAO,IAAMQ,oCAAoC,GAAwB;EACvEC,IAAI,EAAE,OADiE;EAEvEC,IAAI,EAAE,CAAC,uBAAD,EAA0B,IAA1B,CAFiE;EAGvEC,IAAI,EAAE,+BAHiE;EAIvEC,QAAQ,EAAE;AAJ6D,CAAlE;AAOP;;;;AAGA,OAAO,IAAMC,4BAA4B,GAAG,UAACf,MAAD,EAA2B;EAA0B,OAAC;IAChGgB,YAAY,EAAE,UAACC,WAAD,EAAY;MACxBA,WAAW,CAACC,GAAZ,CAAgBnB,6BAA6B,CAACC,MAAD,CAA7C,EAAuDU,oCAAvD;IACD;EAH+F,CAAD;AAI/F,CAJK","names":["HttpRequest","useRegionalEndpointMiddleware","config","next","args","request","isInstance","isCustomEndpoint","hostname","_a","region","_b","useRegionalEndpointMiddlewareOptions","step","tags","name","override","getUseRegionalEndpointPlugin","applyToStack","clientStack","add"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\middleware-sdk-s3\\src\\use-regional-endpoint.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  Pluggable,\n  Provider,\n} from \"@aws-sdk/types\";\n\ntype PreviouslyResolved = {\n  region: Provider<string>;\n  isCustomEndpoint: boolean;\n};\n\n/**\n * @internal\n */\nexport const useRegionalEndpointMiddleware = (config: PreviouslyResolved): BuildMiddleware<any, any> => <\n  Output extends MetadataBearer\n>(\n  next: BuildHandler<any, Output>\n): BuildHandler<any, Output> => async (args: BuildHandlerArguments<any>): Promise<BuildHandlerOutput<Output>> => {\n  const { request } = args;\n  if (!HttpRequest.isInstance(request) || config.isCustomEndpoint) return next({ ...args });\n  if (request.hostname === \"s3.amazonaws.com\") {\n    request.hostname = \"s3.us-east-1.amazonaws.com\";\n  } else if (\"aws-global\" === (await config.region())) {\n    request.hostname = \"s3.amazonaws.com\";\n  }\n  return next({ ...args });\n};\n\n/**\n * @internal\n */\nexport const useRegionalEndpointMiddlewareOptions: BuildHandlerOptions = {\n  step: \"build\",\n  tags: [\"USE_REGIONAL_ENDPOINT\", \"S3\"],\n  name: \"useRegionalEndpointMiddleware\",\n  override: true,\n};\n\n/**\n * @internal\n */\nexport const getUseRegionalEndpointPlugin = (config: PreviouslyResolved): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(useRegionalEndpointMiddleware(config), useRegionalEndpointMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}