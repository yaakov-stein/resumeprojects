{"ast":null,"code":"/**\n * Date & time utility functions to abstract the `aws-sdk` away from users.\n * (v2 => v3 modularization is a breaking change)\n *\n * @see https://github.com/aws/aws-sdk-js/blob/6edf586dcc1de7fe8fbfbbd9a0d2b1847921e6e1/lib/util.js#L262\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}; // Comment - TODO: remove\n\n\nvar FIVE_MINUTES_IN_MS = 1000 * 60 * 5;\nexport var DateUtils = {\n  /**\n   * Milliseconds to offset the date to compensate for clock skew between device & services\n   */\n  clockOffset: 0,\n  getDateWithClockOffset: function () {\n    if (DateUtils.clockOffset) {\n      return new Date(new Date().getTime() + DateUtils.clockOffset);\n    } else {\n      return new Date();\n    }\n  },\n\n  /**\n   * @returns {number} Clock offset in milliseconds\n   */\n  getClockOffset: function () {\n    return DateUtils.clockOffset;\n  },\n  getHeaderStringFromDate: function (date) {\n    if (date === void 0) {\n      date = DateUtils.getDateWithClockOffset();\n    }\n\n    return date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n  },\n  getDateFromHeaderString: function (header) {\n    var _a = __read(header.match(/^(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2}).+/), 7),\n        year = _a[1],\n        month = _a[2],\n        day = _a[3],\n        hour = _a[4],\n        minute = _a[5],\n        second = _a[6];\n\n    return new Date(Date.UTC(Number(year), Number(month) - 1, Number(day), Number(hour), Number(minute), Number(second)));\n  },\n  isClockSkewed: function (serverDate) {\n    // API gateway permits client calls that are off by no more than ±5 minutes\n    return Math.abs(serverDate.getTime() - DateUtils.getDateWithClockOffset().getTime()) >= FIVE_MINUTES_IN_MS;\n  },\n  isClockSkewError: function (error) {\n    if (!error.response || !error.response.headers) {\n      return false;\n    }\n\n    var headers = error.response.headers;\n    return Boolean(['BadRequestException', 'InvalidSignatureException'].includes(headers['x-amzn-errortype']) && (headers.date || headers.Date));\n  },\n\n  /**\n   * @param {number} offset Clock offset in milliseconds\n   */\n  setClockOffset: function (offset) {\n    DateUtils.clockOffset = offset;\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAOA;;;AAEA,IAAMA,kBAAkB,GAAG,OAAO,EAAP,GAAY,CAAvC;AAEA,OAAO,IAAMC,SAAS,GAAG;EACxB;;;EAGAC,WAAW,EAAE,CAJW;EAMxBC,sBAAsB;IACrB,IAAIF,SAAS,CAACC,WAAd,EAA2B;MAC1B,OAAO,IAAIE,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuBJ,SAAS,CAACC,WAA1C,CAAP;IACA,CAFD,MAEO;MACN,OAAO,IAAIE,IAAJ,EAAP;IACA;EACD,CAZuB;;EAcxB;;;EAGAE,cAAc;IACb,OAAOL,SAAS,CAACC,WAAjB;EACA,CAnBuB;EAqBxBK,uBAAuB,EAAvB,UAAwBC,IAAxB,EAAuE;IAA/C;MAAAA,OAAaP,SAAS,CAACE,sBAAV,EAAb;IAA+C;;IACtE,OAAOK,IAAI,CAACC,WAAL,GAAmBC,OAAnB,CAA2B,gBAA3B,EAA6C,EAA7C,CAAP;EACA,CAvBuB;EAyBxBC,uBAAuB,EAAvB,UAAwBC,MAAxB,EAAsC;IAC/B;IAAA,IAAGC,YAAH;IAAA,IAASC,aAAT;IAAA,IAAgBC,WAAhB;IAAA,IAAqBC,YAArB;IAAA,IAA2BC,cAA3B;IAAA,IAAmCC,cAAnC;;IAIN,OAAO,IAAId,IAAJ,CACNA,IAAI,CAACe,GAAL,CACCC,MAAM,CAACP,IAAD,CADP,EAECO,MAAM,CAACN,KAAD,CAAN,GAAgB,CAFjB,EAGCM,MAAM,CAACL,GAAD,CAHP,EAICK,MAAM,CAACJ,IAAD,CAJP,EAKCI,MAAM,CAACH,MAAD,CALP,EAMCG,MAAM,CAACF,MAAD,CANP,CADM,CAAP;EAUA,CAxCuB;EA0CxBG,aAAa,EAAb,UAAcC,UAAd,EAA8B;IAC7B;IACA,OACCC,IAAI,CAACC,GAAL,CACCF,UAAU,CAACjB,OAAX,KAAuBJ,SAAS,CAACE,sBAAV,GAAmCE,OAAnC,EADxB,KAEKL,kBAHN;EAKA,CAjDuB;EAmDxByB,gBAAgB,EAAhB,UAAiBC,KAAjB,EAA2B;IAC1B,IAAI,CAACA,KAAK,CAACC,QAAP,IAAmB,CAACD,KAAK,CAACC,QAAN,CAAeC,OAAvC,EAAgD;MAC/C,OAAO,KAAP;IACA;;IAEO;IAER,OAAOC,OAAO,CACb,CAAC,qBAAD,EAAwB,2BAAxB,EAAqDC,QAArD,CACCF,OAAO,CAAC,kBAAD,CADR,MAGEA,OAAO,CAACpB,IAAR,IAAgBoB,OAAO,CAACxB,IAH1B,CADa,CAAd;EAMA,CAhEuB;;EAkExB;;;EAGA2B,cAAc,EAAd,UAAeC,MAAf,EAA6B;IAC5B/B,SAAS,CAACC,WAAV,GAAwB8B,MAAxB;EACA;AAvEuB,CAAlB","names":["FIVE_MINUTES_IN_MS","DateUtils","clockOffset","getDateWithClockOffset","Date","getTime","getClockOffset","getHeaderStringFromDate","date","toISOString","replace","getDateFromHeaderString","header","year","month","day","hour","minute","second","UTC","Number","isClockSkewed","serverDate","Math","abs","isClockSkewError","error","response","headers","Boolean","includes","setClockOffset","offset"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-amplify\\core\\src\\Util\\DateUtils.ts"],"sourcesContent":["/**\n * Date & time utility functions to abstract the `aws-sdk` away from users.\n * (v2 => v3 modularization is a breaking change)\n *\n * @see https://github.com/aws/aws-sdk-js/blob/6edf586dcc1de7fe8fbfbbd9a0d2b1847921e6e1/lib/util.js#L262\n */\n\n// Comment - TODO: remove\n\nconst FIVE_MINUTES_IN_MS = 1000 * 60 * 5;\n\nexport const DateUtils = {\n\t/**\n\t * Milliseconds to offset the date to compensate for clock skew between device & services\n\t */\n\tclockOffset: 0,\n\n\tgetDateWithClockOffset() {\n\t\tif (DateUtils.clockOffset) {\n\t\t\treturn new Date(new Date().getTime() + DateUtils.clockOffset);\n\t\t} else {\n\t\t\treturn new Date();\n\t\t}\n\t},\n\n\t/**\n\t * @returns {number} Clock offset in milliseconds\n\t */\n\tgetClockOffset() {\n\t\treturn DateUtils.clockOffset;\n\t},\n\n\tgetHeaderStringFromDate(date: Date = DateUtils.getDateWithClockOffset()) {\n\t\treturn date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n\t},\n\n\tgetDateFromHeaderString(header: string) {\n\t\tconst [, year, month, day, hour, minute, second] = header.match(\n\t\t\t/^(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2}).+/\n\t\t);\n\n\t\treturn new Date(\n\t\t\tDate.UTC(\n\t\t\t\tNumber(year),\n\t\t\t\tNumber(month) - 1,\n\t\t\t\tNumber(day),\n\t\t\t\tNumber(hour),\n\t\t\t\tNumber(minute),\n\t\t\t\tNumber(second)\n\t\t\t)\n\t\t);\n\t},\n\n\tisClockSkewed(serverDate: Date) {\n\t\t// API gateway permits client calls that are off by no more than ±5 minutes\n\t\treturn (\n\t\t\tMath.abs(\n\t\t\t\tserverDate.getTime() - DateUtils.getDateWithClockOffset().getTime()\n\t\t\t) >= FIVE_MINUTES_IN_MS\n\t\t);\n\t},\n\n\tisClockSkewError(error: any) {\n\t\tif (!error.response || !error.response.headers) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst { headers } = error.response;\n\n\t\treturn Boolean(\n\t\t\t['BadRequestException', 'InvalidSignatureException'].includes(\n\t\t\t\theaders['x-amzn-errortype']\n\t\t\t) &&\n\t\t\t\t(headers.date || headers.Date)\n\t\t);\n\t},\n\n\t/**\n\t * @param {number} offset Clock offset in milliseconds\n\t */\n\tsetClockOffset(offset: number) {\n\t\tDateUtils.clockOffset = offset;\n\t},\n};\n"]},"metadata":{},"sourceType":"module"}