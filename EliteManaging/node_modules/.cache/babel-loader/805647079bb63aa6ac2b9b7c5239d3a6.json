{"ast":null,"code":"import { __assign } from \"tslib\"; // Partition default templates\n\nvar AWS_TEMPLATE = \"personalize-events.{region}.amazonaws.com\";\nvar AWS_CN_TEMPLATE = \"personalize-events.{region}.amazonaws.com.cn\";\nvar AWS_ISO_TEMPLATE = \"personalize-events.{region}.c2s.ic.gov\";\nvar AWS_ISO_B_TEMPLATE = \"personalize-events.{region}.sc2s.sgov.gov\";\nvar AWS_US_GOV_TEMPLATE = \"personalize-events.{region}.amazonaws.com\"; // Partition regions\n\nvar AWS_REGIONS = new Set([\"af-south-1\", \"ap-east-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-south-1\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"eu-central-1\", \"eu-north-1\", \"eu-south-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"me-south-1\", \"sa-east-1\", \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\"]);\nvar AWS_CN_REGIONS = new Set([\"cn-north-1\", \"cn-northwest-1\"]);\nvar AWS_ISO_REGIONS = new Set([\"us-iso-east-1\"]);\nvar AWS_ISO_B_REGIONS = new Set([\"us-isob-east-1\"]);\nvar AWS_US_GOV_REGIONS = new Set([\"us-gov-east-1\", \"us-gov-west-1\"]);\nexport var defaultRegionInfoProvider = function (region, options) {\n  var regionInfo = undefined;\n\n  switch (region) {\n    // First, try to match exact region names.\n    // Next, try to match partition endpoints.\n    default:\n      if (AWS_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\"\n        };\n      }\n\n      if (AWS_CN_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_CN_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-cn\"\n        };\n      }\n\n      if (AWS_ISO_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso\"\n        };\n      }\n\n      if (AWS_ISO_B_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_B_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso-b\"\n        };\n      }\n\n      if (AWS_US_GOV_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_US_GOV_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-us-gov\"\n        };\n      } // Finally, assume it's an AWS partition endpoint.\n\n\n      if (regionInfo === undefined) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\"\n        };\n      }\n\n  }\n\n  return Promise.resolve(__assign({\n    signingService: \"personalize\"\n  }, regionInfo));\n};","map":{"version":3,"mappings":"kCAEA;;AACA,IAAMA,YAAY,GAAG,2CAArB;AACA,IAAMC,eAAe,GAAG,8CAAxB;AACA,IAAMC,gBAAgB,GAAG,wCAAzB;AACA,IAAMC,kBAAkB,GAAG,2CAA3B;AACA,IAAMC,mBAAmB,GAAG,2CAA5B,C,CAEA;;AACA,IAAMC,WAAW,GAAG,IAAIC,GAAJ,CAAQ,CAC1B,YAD0B,EAE1B,WAF0B,EAG1B,gBAH0B,EAI1B,gBAJ0B,EAK1B,YAL0B,EAM1B,gBAN0B,EAO1B,gBAP0B,EAQ1B,cAR0B,EAS1B,cAT0B,EAU1B,YAV0B,EAW1B,YAX0B,EAY1B,WAZ0B,EAa1B,WAb0B,EAc1B,WAd0B,EAe1B,YAf0B,EAgB1B,WAhB0B,EAiB1B,WAjB0B,EAkB1B,WAlB0B,EAmB1B,WAnB0B,EAoB1B,WApB0B,CAAR,CAApB;AAsBA,IAAMC,cAAc,GAAG,IAAID,GAAJ,CAAQ,CAAC,YAAD,EAAe,gBAAf,CAAR,CAAvB;AACA,IAAME,eAAe,GAAG,IAAIF,GAAJ,CAAQ,CAAC,eAAD,CAAR,CAAxB;AACA,IAAMG,iBAAiB,GAAG,IAAIH,GAAJ,CAAQ,CAAC,gBAAD,CAAR,CAA1B;AACA,IAAMI,kBAAkB,GAAG,IAAIJ,GAAJ,CAAQ,CAAC,eAAD,EAAkB,eAAlB,CAAR,CAA3B;AAEA,OAAO,IAAMK,yBAAyB,GAAuB,UAACC,MAAD,EAAiBC,OAAjB,EAA8B;EACzF,IAAIC,UAAU,GAA2BC,SAAzC;;EACA,QAAQH,MAAR;IACE;IACA;IACA;MACE,IAAIP,WAAW,CAACW,GAAZ,CAAgBJ,MAAhB,CAAJ,EAA6B;QAC3BE,UAAU,GAAG;UACXG,QAAQ,EAAEjB,YAAY,CAACkB,OAAb,CAAqB,UAArB,EAAiCN,MAAjC,CADC;UAEXO,SAAS,EAAE;QAFA,CAAb;MAID;;MACD,IAAIZ,cAAc,CAACS,GAAf,CAAmBJ,MAAnB,CAAJ,EAAgC;QAC9BE,UAAU,GAAG;UACXG,QAAQ,EAAEhB,eAAe,CAACiB,OAAhB,CAAwB,UAAxB,EAAoCN,MAApC,CADC;UAEXO,SAAS,EAAE;QAFA,CAAb;MAID;;MACD,IAAIX,eAAe,CAACQ,GAAhB,CAAoBJ,MAApB,CAAJ,EAAiC;QAC/BE,UAAU,GAAG;UACXG,QAAQ,EAAEf,gBAAgB,CAACgB,OAAjB,CAAyB,UAAzB,EAAqCN,MAArC,CADC;UAEXO,SAAS,EAAE;QAFA,CAAb;MAID;;MACD,IAAIV,iBAAiB,CAACO,GAAlB,CAAsBJ,MAAtB,CAAJ,EAAmC;QACjCE,UAAU,GAAG;UACXG,QAAQ,EAAEd,kBAAkB,CAACe,OAAnB,CAA2B,UAA3B,EAAuCN,MAAvC,CADC;UAEXO,SAAS,EAAE;QAFA,CAAb;MAID;;MACD,IAAIT,kBAAkB,CAACM,GAAnB,CAAuBJ,MAAvB,CAAJ,EAAoC;QAClCE,UAAU,GAAG;UACXG,QAAQ,EAAEb,mBAAmB,CAACc,OAApB,CAA4B,UAA5B,EAAwCN,MAAxC,CADC;UAEXO,SAAS,EAAE;QAFA,CAAb;MAID,CA9BH,CA+BE;;;MACA,IAAIL,UAAU,KAAKC,SAAnB,EAA8B;QAC5BD,UAAU,GAAG;UACXG,QAAQ,EAAEjB,YAAY,CAACkB,OAAb,CAAqB,UAArB,EAAiCN,MAAjC,CADC;UAEXO,SAAS,EAAE;QAFA,CAAb;MAID;;EAxCL;;EA0CA,OAAOC,OAAO,CAACC,OAAR,CAAeC;IAAGC,cAAc,EAAE;EAAnB,GAAqCT,UAArC,CAAf,CAAP;AACD,CA7CM","names":["AWS_TEMPLATE","AWS_CN_TEMPLATE","AWS_ISO_TEMPLATE","AWS_ISO_B_TEMPLATE","AWS_US_GOV_TEMPLATE","AWS_REGIONS","Set","AWS_CN_REGIONS","AWS_ISO_REGIONS","AWS_ISO_B_REGIONS","AWS_US_GOV_REGIONS","defaultRegionInfoProvider","region","options","regionInfo","undefined","has","hostname","replace","partition","Promise","resolve","__assign","signingService"],"sources":["C:\\Users\\jacob\\OneDrive\\College\\github\\resumeprojectsrepo\\resumeprojects\\EliteManaging\\node_modules\\@aws-sdk\\client-personalize-events\\endpoints.ts"],"sourcesContent":["import { RegionInfo, RegionInfoProvider } from \"@aws-sdk/types\";\n\n// Partition default templates\nconst AWS_TEMPLATE = \"personalize-events.{region}.amazonaws.com\";\nconst AWS_CN_TEMPLATE = \"personalize-events.{region}.amazonaws.com.cn\";\nconst AWS_ISO_TEMPLATE = \"personalize-events.{region}.c2s.ic.gov\";\nconst AWS_ISO_B_TEMPLATE = \"personalize-events.{region}.sc2s.sgov.gov\";\nconst AWS_US_GOV_TEMPLATE = \"personalize-events.{region}.amazonaws.com\";\n\n// Partition regions\nconst AWS_REGIONS = new Set([\n  \"af-south-1\",\n  \"ap-east-1\",\n  \"ap-northeast-1\",\n  \"ap-northeast-2\",\n  \"ap-south-1\",\n  \"ap-southeast-1\",\n  \"ap-southeast-2\",\n  \"ca-central-1\",\n  \"eu-central-1\",\n  \"eu-north-1\",\n  \"eu-south-1\",\n  \"eu-west-1\",\n  \"eu-west-2\",\n  \"eu-west-3\",\n  \"me-south-1\",\n  \"sa-east-1\",\n  \"us-east-1\",\n  \"us-east-2\",\n  \"us-west-1\",\n  \"us-west-2\",\n]);\nconst AWS_CN_REGIONS = new Set([\"cn-north-1\", \"cn-northwest-1\"]);\nconst AWS_ISO_REGIONS = new Set([\"us-iso-east-1\"]);\nconst AWS_ISO_B_REGIONS = new Set([\"us-isob-east-1\"]);\nconst AWS_US_GOV_REGIONS = new Set([\"us-gov-east-1\", \"us-gov-west-1\"]);\n\nexport const defaultRegionInfoProvider: RegionInfoProvider = (region: string, options?: any) => {\n  let regionInfo: RegionInfo | undefined = undefined;\n  switch (region) {\n    // First, try to match exact region names.\n    // Next, try to match partition endpoints.\n    default:\n      if (AWS_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\",\n        };\n      }\n      if (AWS_CN_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_CN_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-cn\",\n        };\n      }\n      if (AWS_ISO_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso\",\n        };\n      }\n      if (AWS_ISO_B_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_B_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso-b\",\n        };\n      }\n      if (AWS_US_GOV_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_US_GOV_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-us-gov\",\n        };\n      }\n      // Finally, assume it's an AWS partition endpoint.\n      if (regionInfo === undefined) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\",\n        };\n      }\n  }\n  return Promise.resolve({ signingService: \"personalize\", ...regionInfo });\n};\n"]},"metadata":{},"sourceType":"module"}